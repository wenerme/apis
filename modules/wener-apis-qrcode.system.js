System.register(['react', 'antd', 'prop-types', '@ant-design/icons', 'react-is', 'lodash', '@wener/utils'], function (exports) {
  'use strict';
  var React, useContext, useMemo, useRef, createElement, useDebugValue, useState, useEffect, Alert, Input, InputNumber, Slider, Switch, Select, Form, Popover, Button, Menu, Dropdown, message, notification, Upload, Spin, propTypes, HighlightOutlined, InboxOutlined, reactIs, isValidElementType, typeOf, isElement, merge$1, copy, isDev, urljoin, getFile, sleep;
  return {
    setters: [function (module) {
      React = module.default;
      useContext = module.useContext;
      useMemo = module.useMemo;
      useRef = module.useRef;
      createElement = module.createElement;
      useDebugValue = module.useDebugValue;
      useState = module.useState;
      useEffect = module.useEffect;
    }, function (module) {
      Alert = module.Alert;
      Input = module.Input;
      InputNumber = module.InputNumber;
      Slider = module.Slider;
      Switch = module.Switch;
      Select = module.Select;
      Form = module.Form;
      Popover = module.Popover;
      Button = module.Button;
      Menu = module.Menu;
      Dropdown = module.Dropdown;
      message = module.message;
      notification = module.notification;
      Upload = module.Upload;
      Spin = module.Spin;
    }, function (module) {
      propTypes = module.default;
    }, function (module) {
      HighlightOutlined = module.HighlightOutlined;
      InboxOutlined = module.InboxOutlined;
    }, function (module) {
      reactIs = module.default;
      isValidElementType = module.isValidElementType;
      typeOf = module.typeOf;
      isElement = module.isElement;
    }, function (module) {
      merge$1 = module.merge;
    }, function (module) {
      copy = module.copy;
      isDev = module.isDev;
      urljoin = module.urljoin;
      getFile = module.getFile;
      sleep = module.sleep;
    }],
    execute: function () {

      const QrCodeSiteNote = () => {
        return /*#__PURE__*/React.createElement("div", {
          style: {
            marginTop: 18
          }
        }, /*#__PURE__*/React.createElement(Alert, {
          type: "info",
          showIcon: true,
          message: /*#__PURE__*/React.createElement("div", null, "\u4E8C\u7EF4\u7801\u5185\u5BB9\u89C4\u683C\u53C2\u8003", /*#__PURE__*/React.createElement("a", {
            href: "https://github.com/zxing/zxing/wiki/Barcode-Contents"
          }, "Barcode-Contents"), " ", /*#__PURE__*/React.createElement("br", null), "\u5F00\u53D1\u5E93\u53C2\u8003", /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
            href: "https://github.com/zpao/qrcode.react"
          }, "qrcode.react")), /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("a", {
            href: "https://github.com/cozmo/jsQR"
          }, "jsQR"))))
        }));
      };

      var mode = {
        MODE_NUMBER: 1 << 0,
        MODE_ALPHA_NUM: 1 << 1,
        MODE_8BIT_BYTE: 1 << 2,
        MODE_KANJI: 1 << 3
      };

      function QR8bitByte(data) {
        this.mode = mode.MODE_8BIT_BYTE;
        this.data = data;
      }

      QR8bitByte.prototype = {
        getLength: function (buffer) {
          return this.data.length;
        },
        write: function (buffer) {
          for (var i = 0; i < this.data.length; i++) {
            // not JIS ...
            buffer.put(this.data.charCodeAt(i), 8);
          }
        }
      };
      var _8BitByte = QR8bitByte;

      var ErrorCorrectLevel = {
        L: 1,
        M: 0,
        Q: 3,
        H: 2
      };

      function QRRSBlock(totalCount, dataCount) {
        this.totalCount = totalCount;
        this.dataCount = dataCount;
      }

      QRRSBlock.RS_BLOCK_TABLE = [// L
      // M
      // Q
      // H
      // 1
      [1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], // 2
      [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], // 3
      [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], // 4		
      [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], // 5
      [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], // 6
      [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], // 7		
      [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], // 8
      [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], // 9
      [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], // 10		
      [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], // 11
      [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], // 12
      [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], // 13
      [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], // 14
      [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], // 15
      [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12], // 16
      [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], // 17
      [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], // 18
      [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], // 19
      [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], // 20
      [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], // 21
      [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], // 22
      [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], // 23
      [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], // 24
      [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], // 25
      [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], // 26
      [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], // 27
      [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], // 28
      [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], // 29
      [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], // 30
      [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], // 31
      [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], // 32
      [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], // 33
      [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], // 34
      [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], // 35
      [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], // 36
      [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], // 37
      [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], // 38
      [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], // 39
      [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], // 40
      [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];

      QRRSBlock.getRSBlocks = function (typeNumber, errorCorrectLevel) {
        var rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);

        if (rsBlock == undefined) {
          throw new Error("bad rs block @ typeNumber:" + typeNumber + "/errorCorrectLevel:" + errorCorrectLevel);
        }

        var length = rsBlock.length / 3;
        var list = new Array();

        for (var i = 0; i < length; i++) {
          var count = rsBlock[i * 3 + 0];
          var totalCount = rsBlock[i * 3 + 1];
          var dataCount = rsBlock[i * 3 + 2];

          for (var j = 0; j < count; j++) {
            list.push(new QRRSBlock(totalCount, dataCount));
          }
        }

        return list;
      };

      QRRSBlock.getRsBlockTable = function (typeNumber, errorCorrectLevel) {
        switch (errorCorrectLevel) {
          case ErrorCorrectLevel.L:
            return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];

          case ErrorCorrectLevel.M:
            return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];

          case ErrorCorrectLevel.Q:
            return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];

          case ErrorCorrectLevel.H:
            return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];

          default:
            return undefined;
        }
      };

      var RSBlock = QRRSBlock;

      function QRBitBuffer() {
        this.buffer = new Array();
        this.length = 0;
      }

      QRBitBuffer.prototype = {
        get: function (index) {
          var bufIndex = Math.floor(index / 8);
          return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;
        },
        put: function (num, length) {
          for (var i = 0; i < length; i++) {
            this.putBit((num >>> length - i - 1 & 1) == 1);
          }
        },
        getLengthInBits: function () {
          return this.length;
        },
        putBit: function (bit) {
          var bufIndex = Math.floor(this.length / 8);

          if (this.buffer.length <= bufIndex) {
            this.buffer.push(0);
          }

          if (bit) {
            this.buffer[bufIndex] |= 0x80 >>> this.length % 8;
          }

          this.length++;
        }
      };
      var BitBuffer = QRBitBuffer;

      var QRMath = {
        glog: function (n) {
          if (n < 1) {
            throw new Error("glog(" + n + ")");
          }

          return QRMath.LOG_TABLE[n];
        },
        gexp: function (n) {
          while (n < 0) {
            n += 255;
          }

          while (n >= 256) {
            n -= 255;
          }

          return QRMath.EXP_TABLE[n];
        },
        EXP_TABLE: new Array(256),
        LOG_TABLE: new Array(256)
      };

      for (var i = 0; i < 8; i++) {
        QRMath.EXP_TABLE[i] = 1 << i;
      }

      for (var i = 8; i < 256; i++) {
        QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4] ^ QRMath.EXP_TABLE[i - 5] ^ QRMath.EXP_TABLE[i - 6] ^ QRMath.EXP_TABLE[i - 8];
      }

      for (var i = 0; i < 255; i++) {
        QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]] = i;
      }

      var math = QRMath;

      function QRPolynomial(num, shift) {
        if (num.length == undefined) {
          throw new Error(num.length + "/" + shift);
        }

        var offset = 0;

        while (offset < num.length && num[offset] == 0) {
          offset++;
        }

        this.num = new Array(num.length - offset + shift);

        for (var i = 0; i < num.length - offset; i++) {
          this.num[i] = num[i + offset];
        }
      }

      QRPolynomial.prototype = {
        get: function (index) {
          return this.num[index];
        },
        getLength: function () {
          return this.num.length;
        },
        multiply: function (e) {
          var num = new Array(this.getLength() + e.getLength() - 1);

          for (var i = 0; i < this.getLength(); i++) {
            for (var j = 0; j < e.getLength(); j++) {
              num[i + j] ^= math.gexp(math.glog(this.get(i)) + math.glog(e.get(j)));
            }
          }

          return new QRPolynomial(num, 0);
        },
        mod: function (e) {
          if (this.getLength() - e.getLength() < 0) {
            return this;
          }

          var ratio = math.glog(this.get(0)) - math.glog(e.get(0));
          var num = new Array(this.getLength());

          for (var i = 0; i < this.getLength(); i++) {
            num[i] = this.get(i);
          }

          for (var i = 0; i < e.getLength(); i++) {
            num[i] ^= math.gexp(math.glog(e.get(i)) + ratio);
          } // recursive call


          return new QRPolynomial(num, 0).mod(e);
        }
      };
      var Polynomial = QRPolynomial;

      var QRMaskPattern = {
        PATTERN000: 0,
        PATTERN001: 1,
        PATTERN010: 2,
        PATTERN011: 3,
        PATTERN100: 4,
        PATTERN101: 5,
        PATTERN110: 6,
        PATTERN111: 7
      };
      var QRUtil = {
        PATTERN_POSITION_TABLE: [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]],
        G15: 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0,
        G18: 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0,
        G15_MASK: 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1,
        getBCHTypeInfo: function (data) {
          var d = data << 10;

          while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {
            d ^= QRUtil.G15 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15);
          }

          return (data << 10 | d) ^ QRUtil.G15_MASK;
        },
        getBCHTypeNumber: function (data) {
          var d = data << 12;

          while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {
            d ^= QRUtil.G18 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18);
          }

          return data << 12 | d;
        },
        getBCHDigit: function (data) {
          var digit = 0;

          while (data != 0) {
            digit++;
            data >>>= 1;
          }

          return digit;
        },
        getPatternPosition: function (typeNumber) {
          return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];
        },
        getMask: function (maskPattern, i, j) {
          switch (maskPattern) {
            case QRMaskPattern.PATTERN000:
              return (i + j) % 2 == 0;

            case QRMaskPattern.PATTERN001:
              return i % 2 == 0;

            case QRMaskPattern.PATTERN010:
              return j % 3 == 0;

            case QRMaskPattern.PATTERN011:
              return (i + j) % 3 == 0;

            case QRMaskPattern.PATTERN100:
              return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;

            case QRMaskPattern.PATTERN101:
              return i * j % 2 + i * j % 3 == 0;

            case QRMaskPattern.PATTERN110:
              return (i * j % 2 + i * j % 3) % 2 == 0;

            case QRMaskPattern.PATTERN111:
              return (i * j % 3 + (i + j) % 2) % 2 == 0;

            default:
              throw new Error("bad maskPattern:" + maskPattern);
          }
        },
        getErrorCorrectPolynomial: function (errorCorrectLength) {
          var a = new Polynomial([1], 0);

          for (var i = 0; i < errorCorrectLength; i++) {
            a = a.multiply(new Polynomial([1, math.gexp(i)], 0));
          }

          return a;
        },
        getLengthInBits: function (mode$1, type) {
          if (1 <= type && type < 10) {
            // 1 - 9
            switch (mode$1) {
              case mode.MODE_NUMBER:
                return 10;

              case mode.MODE_ALPHA_NUM:
                return 9;

              case mode.MODE_8BIT_BYTE:
                return 8;

              case mode.MODE_KANJI:
                return 8;

              default:
                throw new Error("mode:" + mode$1);
            }
          } else if (type < 27) {
            // 10 - 26
            switch (mode$1) {
              case mode.MODE_NUMBER:
                return 12;

              case mode.MODE_ALPHA_NUM:
                return 11;

              case mode.MODE_8BIT_BYTE:
                return 16;

              case mode.MODE_KANJI:
                return 10;

              default:
                throw new Error("mode:" + mode$1);
            }
          } else if (type < 41) {
            // 27 - 40
            switch (mode$1) {
              case mode.MODE_NUMBER:
                return 14;

              case mode.MODE_ALPHA_NUM:
                return 13;

              case mode.MODE_8BIT_BYTE:
                return 16;

              case mode.MODE_KANJI:
                return 12;

              default:
                throw new Error("mode:" + mode$1);
            }
          } else {
            throw new Error("type:" + type);
          }
        },
        getLostPoint: function (qrCode) {
          var moduleCount = qrCode.getModuleCount();
          var lostPoint = 0; // LEVEL1

          for (var row = 0; row < moduleCount; row++) {
            for (var col = 0; col < moduleCount; col++) {
              var sameCount = 0;
              var dark = qrCode.isDark(row, col);

              for (var r = -1; r <= 1; r++) {
                if (row + r < 0 || moduleCount <= row + r) {
                  continue;
                }

                for (var c = -1; c <= 1; c++) {
                  if (col + c < 0 || moduleCount <= col + c) {
                    continue;
                  }

                  if (r == 0 && c == 0) {
                    continue;
                  }

                  if (dark == qrCode.isDark(row + r, col + c)) {
                    sameCount++;
                  }
                }
              }

              if (sameCount > 5) {
                lostPoint += 3 + sameCount - 5;
              }
            }
          } // LEVEL2


          for (var row = 0; row < moduleCount - 1; row++) {
            for (var col = 0; col < moduleCount - 1; col++) {
              var count = 0;
              if (qrCode.isDark(row, col)) count++;
              if (qrCode.isDark(row + 1, col)) count++;
              if (qrCode.isDark(row, col + 1)) count++;
              if (qrCode.isDark(row + 1, col + 1)) count++;

              if (count == 0 || count == 4) {
                lostPoint += 3;
              }
            }
          } // LEVEL3


          for (var row = 0; row < moduleCount; row++) {
            for (var col = 0; col < moduleCount - 6; col++) {
              if (qrCode.isDark(row, col) && !qrCode.isDark(row, col + 1) && qrCode.isDark(row, col + 2) && qrCode.isDark(row, col + 3) && qrCode.isDark(row, col + 4) && !qrCode.isDark(row, col + 5) && qrCode.isDark(row, col + 6)) {
                lostPoint += 40;
              }
            }
          }

          for (var col = 0; col < moduleCount; col++) {
            for (var row = 0; row < moduleCount - 6; row++) {
              if (qrCode.isDark(row, col) && !qrCode.isDark(row + 1, col) && qrCode.isDark(row + 2, col) && qrCode.isDark(row + 3, col) && qrCode.isDark(row + 4, col) && !qrCode.isDark(row + 5, col) && qrCode.isDark(row + 6, col)) {
                lostPoint += 40;
              }
            }
          } // LEVEL4


          var darkCount = 0;

          for (var col = 0; col < moduleCount; col++) {
            for (var row = 0; row < moduleCount; row++) {
              if (qrCode.isDark(row, col)) {
                darkCount++;
              }
            }
          }

          var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
          lostPoint += ratio * 10;
          return lostPoint;
        }
      };
      var util = QRUtil;

      function QRCode(typeNumber, errorCorrectLevel) {
        this.typeNumber = typeNumber;
        this.errorCorrectLevel = errorCorrectLevel;
        this.modules = null;
        this.moduleCount = 0;
        this.dataCache = null;
        this.dataList = [];
      } // for client side minification


      var proto = QRCode.prototype;

      proto.addData = function (data) {
        var newData = new _8BitByte(data);
        this.dataList.push(newData);
        this.dataCache = null;
      };

      proto.isDark = function (row, col) {
        if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {
          throw new Error(row + "," + col);
        }

        return this.modules[row][col];
      };

      proto.getModuleCount = function () {
        return this.moduleCount;
      };

      proto.make = function () {
        // Calculate automatically typeNumber if provided is < 1
        if (this.typeNumber < 1) {
          var typeNumber = 1;

          for (typeNumber = 1; typeNumber < 40; typeNumber++) {
            var rsBlocks = RSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);
            var buffer = new BitBuffer();
            var totalDataCount = 0;

            for (var i = 0; i < rsBlocks.length; i++) {
              totalDataCount += rsBlocks[i].dataCount;
            }

            for (var i = 0; i < this.dataList.length; i++) {
              var data = this.dataList[i];
              buffer.put(data.mode, 4);
              buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber));
              data.write(buffer);
            }

            if (buffer.getLengthInBits() <= totalDataCount * 8) break;
          }

          this.typeNumber = typeNumber;
        }

        this.makeImpl(false, this.getBestMaskPattern());
      };

      proto.makeImpl = function (test, maskPattern) {
        this.moduleCount = this.typeNumber * 4 + 17;
        this.modules = new Array(this.moduleCount);

        for (var row = 0; row < this.moduleCount; row++) {
          this.modules[row] = new Array(this.moduleCount);

          for (var col = 0; col < this.moduleCount; col++) {
            this.modules[row][col] = null; //(col + row) % 3;
          }
        }

        this.setupPositionProbePattern(0, 0);
        this.setupPositionProbePattern(this.moduleCount - 7, 0);
        this.setupPositionProbePattern(0, this.moduleCount - 7);
        this.setupPositionAdjustPattern();
        this.setupTimingPattern();
        this.setupTypeInfo(test, maskPattern);

        if (this.typeNumber >= 7) {
          this.setupTypeNumber(test);
        }

        if (this.dataCache == null) {
          this.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);
        }

        this.mapData(this.dataCache, maskPattern);
      };

      proto.setupPositionProbePattern = function (row, col) {
        for (var r = -1; r <= 7; r++) {
          if (row + r <= -1 || this.moduleCount <= row + r) continue;

          for (var c = -1; c <= 7; c++) {
            if (col + c <= -1 || this.moduleCount <= col + c) continue;

            if (0 <= r && r <= 6 && (c == 0 || c == 6) || 0 <= c && c <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {
              this.modules[row + r][col + c] = true;
            } else {
              this.modules[row + r][col + c] = false;
            }
          }
        }
      };

      proto.getBestMaskPattern = function () {
        var minLostPoint = 0;
        var pattern = 0;

        for (var i = 0; i < 8; i++) {
          this.makeImpl(true, i);
          var lostPoint = util.getLostPoint(this);

          if (i == 0 || minLostPoint > lostPoint) {
            minLostPoint = lostPoint;
            pattern = i;
          }
        }

        return pattern;
      };

      proto.createMovieClip = function (target_mc, instance_name, depth) {
        var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);
        var cs = 1;
        this.make();

        for (var row = 0; row < this.modules.length; row++) {
          var y = row * cs;

          for (var col = 0; col < this.modules[row].length; col++) {
            var x = col * cs;
            var dark = this.modules[row][col];

            if (dark) {
              qr_mc.beginFill(0, 100);
              qr_mc.moveTo(x, y);
              qr_mc.lineTo(x + cs, y);
              qr_mc.lineTo(x + cs, y + cs);
              qr_mc.lineTo(x, y + cs);
              qr_mc.endFill();
            }
          }
        }

        return qr_mc;
      };

      proto.setupTimingPattern = function () {
        for (var r = 8; r < this.moduleCount - 8; r++) {
          if (this.modules[r][6] != null) {
            continue;
          }

          this.modules[r][6] = r % 2 == 0;
        }

        for (var c = 8; c < this.moduleCount - 8; c++) {
          if (this.modules[6][c] != null) {
            continue;
          }

          this.modules[6][c] = c % 2 == 0;
        }
      };

      proto.setupPositionAdjustPattern = function () {
        var pos = util.getPatternPosition(this.typeNumber);

        for (var i = 0; i < pos.length; i++) {
          for (var j = 0; j < pos.length; j++) {
            var row = pos[i];
            var col = pos[j];

            if (this.modules[row][col] != null) {
              continue;
            }

            for (var r = -2; r <= 2; r++) {
              for (var c = -2; c <= 2; c++) {
                if (r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0) {
                  this.modules[row + r][col + c] = true;
                } else {
                  this.modules[row + r][col + c] = false;
                }
              }
            }
          }
        }
      };

      proto.setupTypeNumber = function (test) {
        var bits = util.getBCHTypeNumber(this.typeNumber);

        for (var i = 0; i < 18; i++) {
          var mod = !test && (bits >> i & 1) == 1;
          this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;
        }

        for (var i = 0; i < 18; i++) {
          var mod = !test && (bits >> i & 1) == 1;
          this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;
        }
      };

      proto.setupTypeInfo = function (test, maskPattern) {
        var data = this.errorCorrectLevel << 3 | maskPattern;
        var bits = util.getBCHTypeInfo(data); // vertical		

        for (var i = 0; i < 15; i++) {
          var mod = !test && (bits >> i & 1) == 1;

          if (i < 6) {
            this.modules[i][8] = mod;
          } else if (i < 8) {
            this.modules[i + 1][8] = mod;
          } else {
            this.modules[this.moduleCount - 15 + i][8] = mod;
          }
        } // horizontal


        for (var i = 0; i < 15; i++) {
          var mod = !test && (bits >> i & 1) == 1;

          if (i < 8) {
            this.modules[8][this.moduleCount - i - 1] = mod;
          } else if (i < 9) {
            this.modules[8][15 - i - 1 + 1] = mod;
          } else {
            this.modules[8][15 - i - 1] = mod;
          }
        } // fixed module


        this.modules[this.moduleCount - 8][8] = !test;
      };

      proto.mapData = function (data, maskPattern) {
        var inc = -1;
        var row = this.moduleCount - 1;
        var bitIndex = 7;
        var byteIndex = 0;

        for (var col = this.moduleCount - 1; col > 0; col -= 2) {
          if (col == 6) col--;

          while (true) {
            for (var c = 0; c < 2; c++) {
              if (this.modules[row][col - c] == null) {
                var dark = false;

                if (byteIndex < data.length) {
                  dark = (data[byteIndex] >>> bitIndex & 1) == 1;
                }

                var mask = util.getMask(maskPattern, row, col - c);

                if (mask) {
                  dark = !dark;
                }

                this.modules[row][col - c] = dark;
                bitIndex--;

                if (bitIndex == -1) {
                  byteIndex++;
                  bitIndex = 7;
                }
              }
            }

            row += inc;

            if (row < 0 || this.moduleCount <= row) {
              row -= inc;
              inc = -inc;
              break;
            }
          }
        }
      };

      QRCode.PAD0 = 0xEC;
      QRCode.PAD1 = 0x11;

      QRCode.createData = function (typeNumber, errorCorrectLevel, dataList) {
        var rsBlocks = RSBlock.getRSBlocks(typeNumber, errorCorrectLevel);
        var buffer = new BitBuffer();

        for (var i = 0; i < dataList.length; i++) {
          var data = dataList[i];
          buffer.put(data.mode, 4);
          buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber));
          data.write(buffer);
        } // calc num max data.


        var totalDataCount = 0;

        for (var i = 0; i < rsBlocks.length; i++) {
          totalDataCount += rsBlocks[i].dataCount;
        }

        if (buffer.getLengthInBits() > totalDataCount * 8) {
          throw new Error("code length overflow. (" + buffer.getLengthInBits() + ">" + totalDataCount * 8 + ")");
        } // end code


        if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {
          buffer.put(0, 4);
        } // padding


        while (buffer.getLengthInBits() % 8 != 0) {
          buffer.putBit(false);
        } // padding


        while (true) {
          if (buffer.getLengthInBits() >= totalDataCount * 8) {
            break;
          }

          buffer.put(QRCode.PAD0, 8);

          if (buffer.getLengthInBits() >= totalDataCount * 8) {
            break;
          }

          buffer.put(QRCode.PAD1, 8);
        }

        return QRCode.createBytes(buffer, rsBlocks);
      };

      QRCode.createBytes = function (buffer, rsBlocks) {
        var offset = 0;
        var maxDcCount = 0;
        var maxEcCount = 0;
        var dcdata = new Array(rsBlocks.length);
        var ecdata = new Array(rsBlocks.length);

        for (var r = 0; r < rsBlocks.length; r++) {
          var dcCount = rsBlocks[r].dataCount;
          var ecCount = rsBlocks[r].totalCount - dcCount;
          maxDcCount = Math.max(maxDcCount, dcCount);
          maxEcCount = Math.max(maxEcCount, ecCount);
          dcdata[r] = new Array(dcCount);

          for (var i = 0; i < dcdata[r].length; i++) {
            dcdata[r][i] = 0xff & buffer.buffer[i + offset];
          }

          offset += dcCount;
          var rsPoly = util.getErrorCorrectPolynomial(ecCount);
          var rawPoly = new Polynomial(dcdata[r], rsPoly.getLength() - 1);
          var modPoly = rawPoly.mod(rsPoly);
          ecdata[r] = new Array(rsPoly.getLength() - 1);

          for (var i = 0; i < ecdata[r].length; i++) {
            var modIndex = i + modPoly.getLength() - ecdata[r].length;
            ecdata[r][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;
          }
        }

        var totalCodeCount = 0;

        for (var i = 0; i < rsBlocks.length; i++) {
          totalCodeCount += rsBlocks[i].totalCount;
        }

        var data = new Array(totalCodeCount);
        var index = 0;

        for (var i = 0; i < maxDcCount; i++) {
          for (var r = 0; r < rsBlocks.length; r++) {
            if (i < dcdata[r].length) {
              data[index++] = dcdata[r][i];
            }
          }
        }

        for (var i = 0; i < maxEcCount; i++) {
          for (var r = 0; r < rsBlocks.length; r++) {
            if (i < ecdata[r].length) {
              data[index++] = ecdata[r][i];
            }
          }
        }

        return data;
      };

      var QRCode_1 = QRCode;

      function _typeof(obj) {
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            ownKeys(source, true).forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys(source).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      function _objectWithoutProperties(source, excluded) {
        if (source == null) return {};

        var target = _objectWithoutPropertiesLoose(source, excluded);

        var key, i;

        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
          }
        }

        return target;
      }

      function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;

        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }

        return target;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      } // qr.js doesn't handle error level of zero (M) so we need to do it right,
      // thus the deep require.
      // TODO: pull this off of the QRCode class type so it matches.
      // Convert from UTF-16, forcing the use of byte-mode encoding in our QR Code.
      // This allows us to encode Hanji, Kanji, emoji, etc. Ideally we'd do more
      // detection and not resort to byte-mode if possible, but we're trading off
      // a smaller library for a smaller amount of data we can potentially encode.
      // Based on http://jonisalonen.com/2012/from-utf-16-to-utf-8-in-javascript/


      function convertStr(str) {
        var out = '';

        for (var i = 0; i < str.length; i++) {
          var charcode = str.charCodeAt(i);

          if (charcode < 0x0080) {
            out += String.fromCharCode(charcode);
          } else if (charcode < 0x0800) {
            out += String.fromCharCode(0xc0 | charcode >> 6);
            out += String.fromCharCode(0x80 | charcode & 0x3f);
          } else if (charcode < 0xd800 || charcode >= 0xe000) {
            out += String.fromCharCode(0xe0 | charcode >> 12);
            out += String.fromCharCode(0x80 | charcode >> 6 & 0x3f);
            out += String.fromCharCode(0x80 | charcode & 0x3f);
          } else {
            // This is a surrogate pair, so we'll reconsitute the pieces and work
            // from that
            i++;
            charcode = 0x10000 + ((charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);
            out += String.fromCharCode(0xf0 | charcode >> 18);
            out += String.fromCharCode(0x80 | charcode >> 12 & 0x3f);
            out += String.fromCharCode(0x80 | charcode >> 6 & 0x3f);
            out += String.fromCharCode(0x80 | charcode & 0x3f);
          }
        }

        return out;
      }

      var DEFAULT_PROPS = {
        size: 128,
        level: 'L',
        bgColor: '#FFFFFF',
        fgColor: '#000000',
        includeMargin: false
      };
      var PROP_TYPES = process.env.NODE_ENV !== 'production' ? {
        value: propTypes.string.isRequired,
        size: propTypes.number,
        level: propTypes.oneOf(['L', 'M', 'Q', 'H']),
        bgColor: propTypes.string,
        fgColor: propTypes.string,
        includeMargin: propTypes.bool,
        imageSettings: propTypes.shape({
          src: propTypes.string.isRequired,
          height: propTypes.number.isRequired,
          width: propTypes.number.isRequired,
          excavate: propTypes.bool,
          x: propTypes.number,
          y: propTypes.number
        })
      } : {};
      var MARGIN_SIZE = 4; // This is *very* rough estimate of max amount of QRCode allowed to be covered.
      // It is "wrong" in a lot of ways (area is a terrible way to estimate, it
      // really should be number of modules covered), but if for some reason we don't
      // get an explicit height or width, I'd rather default to something than throw.

      var DEFAULT_IMG_SCALE = 0.1;

      function generatePath(modules) {
        var margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var ops = [];
        modules.forEach(function (row, y) {
          var start = null;
          row.forEach(function (cell, x) {
            if (!cell && start !== null) {
              // M0 0h7v1H0z injects the space with the move and drops the comma,
              // saving a char per operation
              ops.push("M".concat(start + margin, " ").concat(y + margin, "h").concat(x - start, "v1H").concat(start + margin, "z"));
              start = null;
              return;
            } // end of row, clean up or skip


            if (x === row.length - 1) {
              if (!cell) {
                // We would have closed the op above already so this can only mean
                // 2+ light modules in a row.
                return;
              }

              if (start === null) {
                // Just a single dark module.
                ops.push("M".concat(x + margin, ",").concat(y + margin, " h1v1H").concat(x + margin, "z"));
              } else {
                // Otherwise finish the current line.
                ops.push("M".concat(start + margin, ",").concat(y + margin, " h").concat(x + 1 - start, "v1H").concat(start + margin, "z"));
              }

              return;
            }

            if (cell && start === null) {
              start = x;
            }
          });
        });
        return ops.join('');
      } // We could just do this in generatePath, except that we want to support
      // non-Path2D canvas, so we need to keep it an explicit step.


      function excavateModules(modules, excavation) {
        return modules.slice().map(function (row, y) {
          if (y < excavation.y || y >= excavation.y + excavation.h) {
            return row;
          }

          return row.map(function (cell, x) {
            if (x < excavation.x || x >= excavation.x + excavation.w) {
              return cell;
            }

            return false;
          });
        });
      }

      function getImageSettings(props, cells) {
        var imageSettings = props.imageSettings,
            size = props.size,
            includeMargin = props.includeMargin;

        if (imageSettings == null) {
          return null;
        }

        var margin = includeMargin ? MARGIN_SIZE : 0;
        var numCells = cells.length + margin * 2;
        var defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);
        var scale = numCells / size;
        var w = (imageSettings.width || defaultSize) * scale;
        var h = (imageSettings.height || defaultSize) * scale;
        var x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;
        var y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;
        var excavation = null;

        if (imageSettings.excavate) {
          var floorX = Math.floor(x);
          var floorY = Math.floor(y);
          var ceilW = Math.ceil(w + x - floorX);
          var ceilH = Math.ceil(h + y - floorY);
          excavation = {
            x: floorX,
            y: floorY,
            w: ceilW,
            h: ceilH
          };
        }

        return {
          x: x,
          y: y,
          h: h,
          w: w,
          excavation: excavation
        };
      } // For canvas we're going to switch our drawing mode based on whether or not
      // the environment supports Path2D. We only need the constructor to be
      // supported, but Edge doesn't actually support the path (string) type
      // argument. Luckily it also doesn't support the addPath() method. We can
      // treat that as the same thing.


      var SUPPORTS_PATH2D = function () {
        try {
          new Path2D().addPath(new Path2D());
        } catch (e) {
          return false;
        }

        return true;
      }();

      var QRCodeCanvas = /*#__PURE__*/function (_React$PureComponent) {
        _inherits(QRCodeCanvas, _React$PureComponent);

        function QRCodeCanvas() {
          var _getPrototypeOf2;

          var _this;

          _classCallCheck(this, QRCodeCanvas);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(QRCodeCanvas)).call.apply(_getPrototypeOf2, [this].concat(args)));

          _defineProperty(_assertThisInitialized(_this), "_canvas", void 0);

          _defineProperty(_assertThisInitialized(_this), "_image", void 0);

          _defineProperty(_assertThisInitialized(_this), "state", {
            imgLoaded: false
          });

          _defineProperty(_assertThisInitialized(_this), "handleImageLoad", function () {
            _this.setState({
              imgLoaded: true
            });
          });

          return _this;
        }

        _createClass(QRCodeCanvas, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            this.update();
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate() {
            this.update();
          }
        }, {
          key: "update",
          value: function update() {
            var _this$props = this.props,
                value = _this$props.value,
                size = _this$props.size,
                level = _this$props.level,
                bgColor = _this$props.bgColor,
                fgColor = _this$props.fgColor,
                includeMargin = _this$props.includeMargin,
                imageSettings = _this$props.imageSettings; // We'll use type===-1 to force QRCode to automatically pick the best type

            var qrcode = new QRCode_1(-1, ErrorCorrectLevel[level]);
            qrcode.addData(convertStr(value));
            qrcode.make();

            if (this._canvas != null) {
              var canvas = this._canvas;
              var ctx = canvas.getContext('2d');

              if (!ctx) {
                return;
              }

              var cells = qrcode.modules;

              if (cells === null) {
                return;
              }

              var margin = includeMargin ? MARGIN_SIZE : 0;
              var numCells = cells.length + margin * 2;
              var calculatedImageSettings = getImageSettings(this.props, cells);

              if (imageSettings != null && calculatedImageSettings != null) {
                if (calculatedImageSettings.excavation != null) {
                  cells = excavateModules(cells, calculatedImageSettings.excavation);
                }
              } // We're going to scale this so that the number of drawable units
              // matches the number of cells. This avoids rounding issues, but does
              // result in some potentially unwanted single pixel issues between
              // blocks, only in environments that don't support Path2D.


              var pixelRatio = window.devicePixelRatio || 1;
              canvas.height = canvas.width = size * pixelRatio;
              var scale = size / numCells * pixelRatio;
              ctx.scale(scale, scale); // Draw solid background, only paint dark modules.

              ctx.fillStyle = bgColor;
              ctx.fillRect(0, 0, numCells, numCells);
              ctx.fillStyle = fgColor;

              if (SUPPORTS_PATH2D) {
                // $FlowFixMe: Path2D c'tor doesn't support args yet.
                ctx.fill(new Path2D(generatePath(cells, margin)));
              } else {
                cells.forEach(function (row, rdx) {
                  row.forEach(function (cell, cdx) {
                    if (cell) {
                      ctx.fillRect(cdx + margin, rdx + margin, 1, 1);
                    }
                  });
                });
              }

              if (this.state.imgLoaded && this._image && calculatedImageSettings != null) {
                ctx.drawImage(this._image, calculatedImageSettings.x + margin, calculatedImageSettings.y + margin, calculatedImageSettings.w, calculatedImageSettings.h);
              }
            }
          }
        }, {
          key: "render",
          value: function render() {
            var _this2 = this;

            var _this$props2 = this.props,
                value = _this$props2.value,
                size = _this$props2.size,
                level = _this$props2.level,
                bgColor = _this$props2.bgColor,
                fgColor = _this$props2.fgColor,
                style = _this$props2.style,
                includeMargin = _this$props2.includeMargin,
                imageSettings = _this$props2.imageSettings,
                otherProps = _objectWithoutProperties(_this$props2, ["value", "size", "level", "bgColor", "fgColor", "style", "includeMargin", "imageSettings"]);

            var canvasStyle = _objectSpread({
              height: size,
              width: size
            }, style);

            var img = null;
            var imgSrc = imageSettings && imageSettings.src;

            if (imageSettings != null && imgSrc != null) {
              img = React.createElement("img", {
                src: imgSrc,
                style: {
                  display: 'none'
                },
                onLoad: this.handleImageLoad,
                ref: function ref(_ref) {
                  return _this2._image = _ref;
                }
              });
            }

            return React.createElement(React.Fragment, null, React.createElement("canvas", _extends({
              style: canvasStyle,
              height: size,
              width: size,
              ref: function ref(_ref2) {
                return _this2._canvas = _ref2;
              }
            }, otherProps)), img);
          }
        }]);

        return QRCodeCanvas;
      }(React.PureComponent);

      _defineProperty(QRCodeCanvas, "defaultProps", DEFAULT_PROPS);

      if (process.env.NODE_ENV !== 'production') {
        QRCodeCanvas.propTypes = PROP_TYPES;
      }

      var QRCodeSVG = /*#__PURE__*/function (_React$PureComponent2) {
        _inherits(QRCodeSVG, _React$PureComponent2);

        function QRCodeSVG() {
          _classCallCheck(this, QRCodeSVG);

          return _possibleConstructorReturn(this, _getPrototypeOf(QRCodeSVG).apply(this, arguments));
        }

        _createClass(QRCodeSVG, [{
          key: "render",
          value: function render() {
            var _this$props3 = this.props,
                value = _this$props3.value,
                size = _this$props3.size,
                level = _this$props3.level,
                bgColor = _this$props3.bgColor,
                fgColor = _this$props3.fgColor,
                includeMargin = _this$props3.includeMargin,
                imageSettings = _this$props3.imageSettings,
                otherProps = _objectWithoutProperties(_this$props3, ["value", "size", "level", "bgColor", "fgColor", "includeMargin", "imageSettings"]); // We'll use type===-1 to force QRCode to automatically pick the best type


            var qrcode = new QRCode_1(-1, ErrorCorrectLevel[level]);
            qrcode.addData(convertStr(value));
            qrcode.make();
            var cells = qrcode.modules;

            if (cells === null) {
              return null;
            }

            var margin = includeMargin ? MARGIN_SIZE : 0;
            var numCells = cells.length + margin * 2;
            var calculatedImageSettings = getImageSettings(this.props, cells);
            var image = null;

            if (imageSettings != null && calculatedImageSettings != null) {
              if (calculatedImageSettings.excavation != null) {
                cells = excavateModules(cells, calculatedImageSettings.excavation);
              }

              image = React.createElement("image", {
                xlinkHref: imageSettings.src,
                height: calculatedImageSettings.h,
                width: calculatedImageSettings.w,
                x: calculatedImageSettings.x + margin,
                y: calculatedImageSettings.y + margin,
                preserveAspectRatio: "none"
              });
            } // Drawing strategy: instead of a rect per module, we're going to create a
            // single path for the dark modules and layer that on top of a light rect,
            // for a total of 2 DOM nodes. We pay a bit more in string concat but that's
            // way faster than DOM ops.
            // For level 1, 441 nodes -> 2
            // For level 40, 31329 -> 2


            var fgPath = generatePath(cells, margin);
            return React.createElement("svg", _extends({
              shapeRendering: "crispEdges",
              height: size,
              width: size,
              viewBox: "0 0 ".concat(numCells, " ").concat(numCells)
            }, otherProps), React.createElement("path", {
              fill: bgColor,
              d: "M0,0 h".concat(numCells, "v").concat(numCells, "H0z")
            }), React.createElement("path", {
              fill: fgColor,
              d: fgPath
            }), image);
          }
        }]);

        return QRCodeSVG;
      }(React.PureComponent);

      _defineProperty(QRCodeSVG, "defaultProps", DEFAULT_PROPS);

      if (process.env.NODE_ENV !== 'production') {
        QRCodeSVG.propTypes = PROP_TYPES;
      }

      var QRCode$1 = function QRCode(props) {
        var renderAs = props.renderAs,
            otherProps = _objectWithoutProperties(props, ["renderAs"]);

        var Component = renderAs === 'svg' ? QRCodeSVG : QRCodeCanvas;
        return React.createElement(Component, otherProps);
      };

      QRCode$1.defaultProps = _objectSpread({
        renderAs: 'canvas'
      }, DEFAULT_PROPS);
      var lib = QRCode$1;

      function n(n) {
        for (var t = arguments.length, r = Array(t > 1 ? t - 1 : 0), e = 1; e < t; e++) r[e - 1] = arguments[e];

        if ("production" !== process.env.NODE_ENV) {
          var i = L[n],
              o = i ? "function" == typeof i ? i.apply(null, r) : i : "unknown error nr: " + n;
          throw Error("[Immer] " + o);
        }

        throw Error("[Immer] minified error nr: " + n + (r.length ? " " + r.join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
      }

      function t(n) {
        return !!n && !!n[G];
      }

      function r(n) {
        return !!n && (function (n) {
          if (!n || "object" != typeof n) return !1;
          var t = Object.getPrototypeOf(n);
          return !t || t === Object.prototype;
        }(n) || Array.isArray(n) || !!n[B] || !!n.constructor[B] || c(n) || s(n));
      }

      function i$1(n, t, r) {
        void 0 === r && (r = !1), 0 === o(n) ? (r ? Object.keys : Q)(n).forEach(function (r) {
          return t(r, n[r], n);
        }) : n.forEach(function (r, e) {
          return t(e, r, n);
        });
      }

      function o(n) {
        var t = n[G];
        return t ? t.i > 3 ? t.i - 4 : t.i : Array.isArray(n) ? 1 : c(n) ? 2 : s(n) ? 3 : 0;
      }

      function u(n, t) {
        return 2 === o(n) ? n.has(t) : Object.prototype.hasOwnProperty.call(n, t);
      }

      function a(n, t) {
        return 2 === o(n) ? n.get(t) : n[t];
      }

      function f(n, t) {
        return n === t ? 0 !== n || 1 / n == 1 / t : n != n && t != t;
      }

      function c(n) {
        return U && n instanceof Map;
      }

      function s(n) {
        return W && n instanceof Set;
      }

      function v(n) {
        return n.o || n.t;
      }

      function p(t, r) {
        if (void 0 === r && (r = !1), Array.isArray(t)) return t.slice();
        var e = Object.create(Object.getPrototypeOf(t));
        return i$1(t, function (i) {
          if (i !== G) {
            var o = Object.getOwnPropertyDescriptor(t, i),
                u = o.value;
            o.get && (r || n(1), u = o.get.call(t)), o.enumerable ? e[i] = u : Object.defineProperty(e, i, {
              value: u,
              writable: !0,
              configurable: !0
            });
          }
        }), e;
      }

      function d(n, e) {
        t(n) || h(n) || !r(n) || (o(n) > 1 && (n.set = n.add = n.clear = n.delete = l), Object.freeze(n), e && i$1(n, function (n, t) {
          return d(t, !0);
        }, !0));
      }

      function l() {
        n(2);
      }

      function h(n) {
        return null == n || "object" != typeof n || Object.isFrozen(n);
      }

      function y(t) {
        var r = V[t];
        return r || n("production" !== process.env.NODE_ENV ? 18 : 19, t), r;
      }

      function m() {
        return "production" === process.env.NODE_ENV || K || n(0), K;
      }

      function _(n, t) {
        t && (y("Patches"), n.u = [], n.s = [], n.v = t);
      }

      function j(n) {
        O(n), n.p.forEach(w), n.p = null;
      }

      function O(n) {
        n === K && (K = n.l);
      }

      function g(n) {
        return K = {
          p: [],
          l: K,
          h: n,
          m: !0,
          _: 0
        };
      }

      function w(n) {
        var t = n[G];
        0 === t.i || 1 === t.i ? t.j() : t.O = !0;
      }

      function S(t, e) {
        e._ = e.p.length;
        var i = e.p[0],
            o = void 0 !== t && t !== i;
        return e.h.g || y("ES5").S(e, t, o), o ? (i[G].P && (j(e), n(4)), r(t) && (t = P(e, t), e.l || A(e, t)), e.u && y("Patches").M(i[G], t, e.u, e.s)) : t = P(e, i, []), j(e), e.u && e.v(e.u, e.s), t !== q ? t : void 0;
      }

      function P(n, t, r) {
        if (h(t)) return t;
        var e = t[G];
        if (!e) return i$1(t, function (i, o) {
          return M(n, e, t, i, o, r);
        }, !0), t;
        if (e.A !== n) return t;
        if (!e.P) return A(n, e.t, !0), e.t;

        if (!e.I) {
          e.I = !0, e.A._--;
          var o = 4 === e.i || 5 === e.i ? e.o = p(e.k, !0) : e.o;
          i$1(o, function (t, i) {
            return M(n, e, o, t, i, r);
          }), A(n, o, !1), r && n.u && y("Patches").R(e, r, n.u, n.s);
        }

        return e.o;
      }

      function M(e, i, c, s, v, p) {
        if ("production" !== process.env.NODE_ENV && v === c && n(5), t(v)) {
          var d = P(e, v, p && i && 3 !== i.i && !u(i.D, s) ? p.concat(s) : void 0);
          if (h = s, y = d, 2 === (b = o(l = c)) ? l.set(h, y) : 3 === b ? (l.delete(h), l.add(y)) : l[h] = y, !t(d)) return;
          e.m = !1;
        }

        var l, h, y, b;

        if ((!i || !f(v, a(i.t, s))) && r(v)) {
          if (!e.h.N && e._ < 1) return;
          P(e, v), i && i.A.l || A(e, v);
        }
      }

      function A(n, t, r) {
        void 0 === r && (r = !1), n.h.N && n.m && d(t, r);
      }

      function x(n, t) {
        var r = n[G],
            e = Reflect.getOwnPropertyDescriptor(r ? v(r) : n, t);
        return e && e.value;
      }

      function z(n) {
        if (!n.P) {
          if (n.P = !0, 0 === n.i || 1 === n.i) {
            var t = n.o = p(n.t);
            i$1(n.p, function (n, r) {
              t[n] = r;
            }), n.p = void 0;
          }

          n.l && z(n.l);
        }
      }

      function I(n) {
        n.o || (n.o = p(n.t));
      }

      function E(n, t, r) {
        var e = c(t) ? y("MapSet").T(t, r) : s(t) ? y("MapSet").F(t, r) : n.g ? function (n, t) {
          var r = Array.isArray(n),
              e = {
            i: r ? 1 : 0,
            A: t ? t.A : m(),
            P: !1,
            I: !1,
            D: {},
            l: t,
            t: n,
            k: null,
            p: {},
            o: null,
            j: null,
            C: !1
          },
              i = e,
              o = Y;
          r && (i = [e], o = Z);
          var u = Proxy.revocable(i, o),
              a = u.revoke,
              f = u.proxy;
          return e.k = f, e.j = a, f;
        }(t, r) : y("ES5").J(t, r);
        return (r ? r.A : m()).p.push(e), e;
      }

      var J,
          K,
          $ = "undefined" != typeof Symbol && "symbol" == typeof Symbol("x"),
          U = "undefined" != typeof Map,
          W = "undefined" != typeof Set,
          X = "undefined" != typeof Proxy && void 0 !== Proxy.revocable && "undefined" != typeof Reflect,
          q = $ ? Symbol("immer-nothing") : ((J = {})["immer-nothing"] = !0, J),
          B = $ ? Symbol("immer-draftable") : "__$immer_draftable",
          G = $ ? Symbol("immer-state") : "__$immer_state",
          L = {
        0: "Illegal state",
        1: "Immer drafts cannot have computed properties",
        2: "This object has been frozen and should not be mutated",
        3: function (n) {
          return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + n;
        },
        4: "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",
        5: "Immer forbids circular references",
        6: "The first or second argument to `produce` must be a function",
        7: "The third argument to `produce` must be a function or undefined",
        8: "First argument to `createDraft` must be a plain object, an array, or an immerable object",
        9: "First argument to `finishDraft` must be a draft returned by `createDraft`",
        10: "The given draft is already finalized",
        11: "Object.defineProperty() cannot be used on an Immer draft",
        12: "Object.setPrototypeOf() cannot be used on an Immer draft",
        13: "Immer only supports deleting array indices",
        14: "Immer only supports setting array indices and the 'length' property",
        15: function (n) {
          return "Cannot apply patch, path doesn't resolve: " + n;
        },
        16: 'Sets cannot have "replace" patches.',
        17: function (n) {
          return "Unsupported patch operation: " + n;
        },
        18: function (n) {
          return "The plugin for '" + n + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + n + "()` when initializing your application.";
        },
        19: function (n) {
          return "plugin not loaded: " + n;
        },
        20: "Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available"
      },
          Q = "undefined" != typeof Reflect && Reflect.ownKeys ? Reflect.ownKeys : void 0 !== Object.getOwnPropertySymbols ? function (n) {
        return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n));
      } : Object.getOwnPropertyNames,
          V = {},
          Y = {
        get: function (n, t) {
          if (t === G) return n;
          var e = n.p;
          if (!n.P && u(e, t)) return e[t];
          var i = v(n)[t];
          if (n.I || !r(i)) return i;

          if (n.P) {
            if (i !== x(n.t, t)) return i;
            e = n.o;
          }

          return e[t] = E(n.A.h, i, n);
        },
        has: function (n, t) {
          return t in v(n);
        },
        ownKeys: function (n) {
          return Reflect.ownKeys(v(n));
        },
        set: function (n, t, r) {
          if (!n.P) {
            var e = x(n.t, t);
            if (r ? f(e, r) || r === n.p[t] : f(e, r) && t in n.t) return !0;
            I(n), z(n);
          }

          return n.D[t] = !0, n.o[t] = r, !0;
        },
        deleteProperty: function (n, t) {
          return void 0 !== x(n.t, t) || t in n.t ? (n.D[t] = !1, I(n), z(n)) : n.D[t] && delete n.D[t], n.o && delete n.o[t], !0;
        },
        getOwnPropertyDescriptor: function (n, t) {
          var r = v(n),
              e = Reflect.getOwnPropertyDescriptor(r, t);
          return e && (e.writable = !0, e.configurable = 1 !== n.i || "length" !== t), e;
        },
        defineProperty: function () {
          n(11);
        },
        getPrototypeOf: function (n) {
          return Object.getPrototypeOf(n.t);
        },
        setPrototypeOf: function () {
          n(12);
        }
      },
          Z = {};
      i$1(Y, function (n, t) {
        Z[n] = function () {
          return arguments[0] = arguments[0][0], t.apply(this, arguments);
        };
      }), Z.deleteProperty = function (t, r) {
        return "production" !== process.env.NODE_ENV && isNaN(parseInt(r)) && n(13), Y.deleteProperty.call(this, t[0], r);
      }, Z.set = function (t, r, e) {
        return "production" !== process.env.NODE_ENV && "length" !== r && isNaN(parseInt(r)) && n(14), Y.set.call(this, t[0], r, e, t[0]);
      };

      var nn = function () {
        function e(n) {
          this.g = X, this.N = "production" !== process.env.NODE_ENV, "boolean" == typeof (null == n ? void 0 : n.useProxies) && this.setUseProxies(n.useProxies), "boolean" == typeof (null == n ? void 0 : n.autoFreeze) && this.setAutoFreeze(n.autoFreeze), this.produce = this.produce.bind(this), this.produceWithPatches = this.produceWithPatches.bind(this);
        }

        var i = e.prototype;
        return i.produce = function (t, e, i) {
          if ("function" == typeof t && "function" != typeof e) {
            var o = e;
            e = t;
            var u = this;
            return function (n) {
              var t = this;
              void 0 === n && (n = o);

              for (var r = arguments.length, i = Array(r > 1 ? r - 1 : 0), a = 1; a < r; a++) i[a - 1] = arguments[a];

              return u.produce(n, function (n) {
                var r;
                return (r = e).call.apply(r, [t, n].concat(i));
              });
            };
          }

          var a;

          if ("function" != typeof e && n(6), void 0 !== i && "function" != typeof i && n(7), r(t)) {
            var f = g(this),
                c = E(this, t, void 0),
                s = !0;

            try {
              a = e(c), s = !1;
            } finally {
              s ? j(f) : O(f);
            }

            return "undefined" != typeof Promise && a instanceof Promise ? a.then(function (n) {
              return _(f, i), S(n, f);
            }, function (n) {
              throw j(f), n;
            }) : (_(f, i), S(a, f));
          }

          if ((a = e(t)) !== q) return void 0 === a && (a = t), this.N && d(a, !0), a;
        }, i.produceWithPatches = function (n, t) {
          var r,
              e,
              i = this;
          return "function" == typeof n ? function (t) {
            for (var r = arguments.length, e = Array(r > 1 ? r - 1 : 0), o = 1; o < r; o++) e[o - 1] = arguments[o];

            return i.produceWithPatches(t, function (t) {
              return n.apply(void 0, [t].concat(e));
            });
          } : [this.produce(n, t, function (n, t) {
            r = n, e = t;
          }), r, e];
        }, i.createDraft = function (t) {
          r(t) || n(8);
          var e = g(this),
              i = E(this, t, void 0);
          return i[G].C = !0, O(e), i;
        }, i.finishDraft = function (t, r) {
          var e = t && t[G];
          "production" !== process.env.NODE_ENV && (e && e.C || n(9), e.I && n(10));
          var i = e.A;
          return _(i, r), S(void 0, i);
        }, i.setAutoFreeze = function (n) {
          this.N = n;
        }, i.setUseProxies = function (t) {
          X || n(20), this.g = t;
        }, i.applyPatches = function (n, r) {
          var e;

          for (e = r.length - 1; e >= 0; e--) {
            var i = r[e];

            if (0 === i.path.length && "replace" === i.op) {
              n = i.value;
              break;
            }
          }

          var o = y("Patches").U;
          return t(n) ? o(n, r) : this.produce(n, function (n) {
            return o(n, r.slice(e + 1));
          });
        }, e;
      }(),
          tn = new nn(),
          rn = tn.produce,
          en = tn.produceWithPatches.bind(tn),
          on = tn.setAutoFreeze.bind(tn),
          un = tn.setUseProxies.bind(tn),
          an = tn.applyPatches.bind(tn),
          fn = tn.createDraft.bind(tn),
          cn = tn.finishDraft.bind(tn);

      function _extends$1() {
        _extends$1 = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends$1.apply(this, arguments);
      }

      function normalizeOptions(o) {
        if (o === null || o === undefined) {
          return [];
        }

        if (typeof (o === null || o === void 0 ? void 0 : o[0]) === 'string') {
          return o.map(value => ({
            label: value,
            value
          }));
        }

        if (typeof (o === null || o === void 0 ? void 0 : o[0]) === 'number') {
          return o.map(value => ({
            label: value,
            value
          }));
        }

        if (Array.isArray(o === null || o === void 0 ? void 0 : o[0])) {
          return o.map(([value, label]) => ({
            label,
            value
          }));
        }

        return o;
      }

      var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

      function createCommonjsModule(fn, basedir, module) {
      	return module = {
      	  path: basedir,
      	  exports: {},
      	  require: function (path, base) {
            return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
          }
      	}, fn(module, module.exports), module.exports;
      }

      function commonjsRequire () {
      	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
      }

      /** Detect free variable `global` from Node.js. */

      var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
      var _freeGlobal = freeGlobal;

      /** Detect free variable `self`. */

      var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
      /** Used as a reference to the global object. */

      var root = _freeGlobal || freeSelf || Function('return this')();
      var _root = root;

      /** Built-in value references. */

      var Symbol$1 = _root.Symbol;
      var _Symbol = Symbol$1;

      /** Used for built-in method references. */

      var objectProto = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty = objectProto.hasOwnProperty;
      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */

      var nativeObjectToString = objectProto.toString;
      /** Built-in value references. */

      var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
      /**
       * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the raw `toStringTag`.
       */

      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

        try {
          value[symToStringTag] = undefined;
          var unmasked = true;
        } catch (e) {}

        var result = nativeObjectToString.call(value);

        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }

        return result;
      }

      var _getRawTag = getRawTag;

      /** Used for built-in method references. */
      var objectProto$1 = Object.prototype;
      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */

      var nativeObjectToString$1 = objectProto$1.toString;
      /**
       * Converts `value` to a string using `Object.prototype.toString`.
       *
       * @private
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       */

      function objectToString(value) {
        return nativeObjectToString$1.call(value);
      }

      var _objectToString = objectToString;

      /** `Object#toString` result references. */

      var nullTag = '[object Null]',
          undefinedTag = '[object Undefined]';
      /** Built-in value references. */

      var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;
      /**
       * The base implementation of `getTag` without fallbacks for buggy environments.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */

      function baseGetTag(value) {
        if (value == null) {
          return value === undefined ? undefinedTag : nullTag;
        }

        return symToStringTag$1 && symToStringTag$1 in Object(value) ? _getRawTag(value) : _objectToString(value);
      }

      var _baseGetTag = baseGetTag;

      /**
       * Checks if `value` is the
       * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
       * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
       * @example
       *
       * _.isObject({});
       * // => true
       *
       * _.isObject([1, 2, 3]);
       * // => true
       *
       * _.isObject(_.noop);
       * // => true
       *
       * _.isObject(null);
       * // => false
       */
      function isObject(value) {
        var type = typeof value;
        return value != null && (type == 'object' || type == 'function');
      }

      var isObject_1 = isObject;

      /** `Object#toString` result references. */

      var asyncTag = '[object AsyncFunction]',
          funcTag = '[object Function]',
          genTag = '[object GeneratorFunction]',
          proxyTag = '[object Proxy]';
      /**
       * Checks if `value` is classified as a `Function` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a function, else `false`.
       * @example
       *
       * _.isFunction(_);
       * // => true
       *
       * _.isFunction(/abc/);
       * // => false
       */

      function isFunction(value) {
        if (!isObject_1(value)) {
          return false;
        } // The use of `Object#toString` avoids issues with the `typeof` operator
        // in Safari 9 which returns 'object' for typed arrays and other constructors.


        var tag = _baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }

      var isFunction_1 = isFunction;

      /** Used to detect overreaching core-js shims. */

      var coreJsData = _root['__core-js_shared__'];
      var _coreJsData = coreJsData;

      /** Used to detect methods masquerading as native. */

      var maskSrcKey = function () {
        var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
        return uid ? 'Symbol(src)_1.' + uid : '';
      }();
      /**
       * Checks if `func` has its source masked.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` is masked, else `false`.
       */


      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }

      var _isMasked = isMasked;

      /** Used for built-in method references. */
      var funcProto = Function.prototype;
      /** Used to resolve the decompiled source of functions. */

      var funcToString = funcProto.toString;
      /**
       * Converts `func` to its source code.
       *
       * @private
       * @param {Function} func The function to convert.
       * @returns {string} Returns the source code.
       */

      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}

          try {
            return func + '';
          } catch (e) {}
        }

        return '';
      }

      var _toSource = toSource;

      /**
       * Used to match `RegExp`
       * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
       */

      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      /** Used to detect host constructors (Safari). */

      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      /** Used for built-in method references. */

      var funcProto$1 = Function.prototype,
          objectProto$2 = Object.prototype;
      /** Used to resolve the decompiled source of functions. */

      var funcToString$1 = funcProto$1.toString;
      /** Used to check objects for own properties. */

      var hasOwnProperty$1 = objectProto$2.hasOwnProperty;
      /** Used to detect if a method is native. */

      var reIsNative = RegExp('^' + funcToString$1.call(hasOwnProperty$1).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
      /**
       * The base implementation of `_.isNative` without bad shim checks.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       */

      function baseIsNative(value) {
        if (!isObject_1(value) || _isMasked(value)) {
          return false;
        }

        var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
        return pattern.test(_toSource(value));
      }

      var _baseIsNative = baseIsNative;

      /**
       * Gets the value at `key` of `object`.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {string} key The key of the property to get.
       * @returns {*} Returns the property value.
       */
      function getValue(object, key) {
        return object == null ? undefined : object[key];
      }

      var _getValue = getValue;

      /**
       * Gets the native function at `key` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the method to get.
       * @returns {*} Returns the function if it's native, else `undefined`.
       */

      function getNative(object, key) {
        var value = _getValue(object, key);
        return _baseIsNative(value) ? value : undefined;
      }

      var _getNative = getNative;

      var defineProperty = function () {
        try {
          var func = _getNative(Object, 'defineProperty');
          func({}, '', {});
          return func;
        } catch (e) {}
      }();

      var _defineProperty$1 = defineProperty;

      /**
       * The base implementation of `assignValue` and `assignMergeValue` without
       * value checks.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */

      function baseAssignValue(object, key, value) {
        if (key == '__proto__' && _defineProperty$1) {
          _defineProperty$1(object, key, {
            'configurable': true,
            'enumerable': true,
            'value': value,
            'writable': true
          });
        } else {
          object[key] = value;
        }
      }

      var _baseAssignValue = baseAssignValue;

      /**
       * Performs a
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * comparison between two values to determine if they are equivalent.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.eq(object, object);
       * // => true
       *
       * _.eq(object, other);
       * // => false
       *
       * _.eq('a', 'a');
       * // => true
       *
       * _.eq('a', Object('a'));
       * // => false
       *
       * _.eq(NaN, NaN);
       * // => true
       */
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }

      var eq_1 = eq;

      /** Used for built-in method references. */

      var objectProto$3 = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
      /**
       * Assigns `value` to `key` of `object` if the existing value is not equivalent
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */

      function assignValue(object, key, value) {
        var objValue = object[key];

        if (!(hasOwnProperty$2.call(object, key) && eq_1(objValue, value)) || value === undefined && !(key in object)) {
          _baseAssignValue(object, key, value);
        }
      }

      var _assignValue = assignValue;

      /**
       * Checks if `value` is classified as an `Array` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array, else `false`.
       * @example
       *
       * _.isArray([1, 2, 3]);
       * // => true
       *
       * _.isArray(document.body.children);
       * // => false
       *
       * _.isArray('abc');
       * // => false
       *
       * _.isArray(_.noop);
       * // => false
       */
      var isArray = Array.isArray;
      var isArray_1 = isArray;

      /**
       * Checks if `value` is object-like. A value is object-like if it's not `null`
       * and has a `typeof` result of "object".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
       * @example
       *
       * _.isObjectLike({});
       * // => true
       *
       * _.isObjectLike([1, 2, 3]);
       * // => true
       *
       * _.isObjectLike(_.noop);
       * // => false
       *
       * _.isObjectLike(null);
       * // => false
       */
      function isObjectLike(value) {
        return value != null && typeof value == 'object';
      }

      var isObjectLike_1 = isObjectLike;

      /** `Object#toString` result references. */

      var symbolTag = '[object Symbol]';
      /**
       * Checks if `value` is classified as a `Symbol` primitive or object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
       * @example
       *
       * _.isSymbol(Symbol.iterator);
       * // => true
       *
       * _.isSymbol('abc');
       * // => false
       */

      function isSymbol(value) {
        return typeof value == 'symbol' || isObjectLike_1(value) && _baseGetTag(value) == symbolTag;
      }

      var isSymbol_1 = isSymbol;

      /** Used to match property names within property paths. */

      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
          reIsPlainProp = /^\w*$/;
      /**
       * Checks if `value` is a property name and not a property path.
       *
       * @private
       * @param {*} value The value to check.
       * @param {Object} [object] The object to query keys on.
       * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
       */

      function isKey(value, object) {
        if (isArray_1(value)) {
          return false;
        }

        var type = typeof value;

        if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol_1(value)) {
          return true;
        }

        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }

      var _isKey = isKey;

      /* Built-in method references that are verified to be native. */

      var nativeCreate = _getNative(Object, 'create');
      var _nativeCreate = nativeCreate;

      /**
       * Removes all key-value entries from the hash.
       *
       * @private
       * @name clear
       * @memberOf Hash
       */

      function hashClear() {
        this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
        this.size = 0;
      }

      var _hashClear = hashClear;

      /**
       * Removes `key` and its value from the hash.
       *
       * @private
       * @name delete
       * @memberOf Hash
       * @param {Object} hash The hash to modify.
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }

      var _hashDelete = hashDelete;

      /** Used to stand-in for `undefined` hash values. */

      var HASH_UNDEFINED = '__lodash_hash_undefined__';
      /** Used for built-in method references. */

      var objectProto$4 = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
      /**
       * Gets the hash value for `key`.
       *
       * @private
       * @name get
       * @memberOf Hash
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */

      function hashGet(key) {
        var data = this.__data__;

        if (_nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? undefined : result;
        }

        return hasOwnProperty$3.call(data, key) ? data[key] : undefined;
      }

      var _hashGet = hashGet;

      /** Used for built-in method references. */

      var objectProto$5 = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty$4 = objectProto$5.hasOwnProperty;
      /**
       * Checks if a hash value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Hash
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */

      function hashHas(key) {
        var data = this.__data__;
        return _nativeCreate ? data[key] !== undefined : hasOwnProperty$4.call(data, key);
      }

      var _hashHas = hashHas;

      /** Used to stand-in for `undefined` hash values. */

      var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';
      /**
       * Sets the hash `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Hash
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the hash instance.
       */

      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = _nativeCreate && value === undefined ? HASH_UNDEFINED$1 : value;
        return this;
      }

      var _hashSet = hashSet;

      /**
       * Creates a hash object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */

      function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      } // Add methods to `Hash`.


      Hash.prototype.clear = _hashClear;
      Hash.prototype['delete'] = _hashDelete;
      Hash.prototype.get = _hashGet;
      Hash.prototype.has = _hashHas;
      Hash.prototype.set = _hashSet;
      var _Hash = Hash;

      /**
       * Removes all key-value entries from the list cache.
       *
       * @private
       * @name clear
       * @memberOf ListCache
       */
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }

      var _listCacheClear = listCacheClear;

      /**
       * Gets the index at which the `key` is found in `array` of key-value pairs.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} key The key to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */

      function assocIndexOf(array, key) {
        var length = array.length;

        while (length--) {
          if (eq_1(array[length][0], key)) {
            return length;
          }
        }

        return -1;
      }

      var _assocIndexOf = assocIndexOf;

      /** Used for built-in method references. */

      var arrayProto = Array.prototype;
      /** Built-in value references. */

      var splice = arrayProto.splice;
      /**
       * Removes `key` and its value from the list cache.
       *
       * @private
       * @name delete
       * @memberOf ListCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */

      function listCacheDelete(key) {
        var data = this.__data__,
            index = _assocIndexOf(data, key);

        if (index < 0) {
          return false;
        }

        var lastIndex = data.length - 1;

        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }

        --this.size;
        return true;
      }

      var _listCacheDelete = listCacheDelete;

      /**
       * Gets the list cache value for `key`.
       *
       * @private
       * @name get
       * @memberOf ListCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */

      function listCacheGet(key) {
        var data = this.__data__,
            index = _assocIndexOf(data, key);
        return index < 0 ? undefined : data[index][1];
      }

      var _listCacheGet = listCacheGet;

      /**
       * Checks if a list cache value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf ListCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */

      function listCacheHas(key) {
        return _assocIndexOf(this.__data__, key) > -1;
      }

      var _listCacheHas = listCacheHas;

      /**
       * Sets the list cache `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf ListCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the list cache instance.
       */

      function listCacheSet(key, value) {
        var data = this.__data__,
            index = _assocIndexOf(data, key);

        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }

        return this;
      }

      var _listCacheSet = listCacheSet;

      /**
       * Creates an list cache object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */

      function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      } // Add methods to `ListCache`.


      ListCache.prototype.clear = _listCacheClear;
      ListCache.prototype['delete'] = _listCacheDelete;
      ListCache.prototype.get = _listCacheGet;
      ListCache.prototype.has = _listCacheHas;
      ListCache.prototype.set = _listCacheSet;
      var _ListCache = ListCache;

      /* Built-in method references that are verified to be native. */

      var Map$1 = _getNative(_root, 'Map');
      var _Map = Map$1;

      /**
       * Removes all key-value entries from the map.
       *
       * @private
       * @name clear
       * @memberOf MapCache
       */

      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          'hash': new _Hash(),
          'map': new (_Map || _ListCache)(),
          'string': new _Hash()
        };
      }

      var _mapCacheClear = mapCacheClear;

      /**
       * Checks if `value` is suitable for use as unique object key.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
       */
      function isKeyable(value) {
        var type = typeof value;
        return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
      }

      var _isKeyable = isKeyable;

      /**
       * Gets the data for `map`.
       *
       * @private
       * @param {Object} map The map to query.
       * @param {string} key The reference key.
       * @returns {*} Returns the map data.
       */

      function getMapData(map, key) {
        var data = map.__data__;
        return _isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
      }

      var _getMapData = getMapData;

      /**
       * Removes `key` and its value from the map.
       *
       * @private
       * @name delete
       * @memberOf MapCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */

      function mapCacheDelete(key) {
        var result = _getMapData(this, key)['delete'](key);
        this.size -= result ? 1 : 0;
        return result;
      }

      var _mapCacheDelete = mapCacheDelete;

      /**
       * Gets the map value for `key`.
       *
       * @private
       * @name get
       * @memberOf MapCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */

      function mapCacheGet(key) {
        return _getMapData(this, key).get(key);
      }

      var _mapCacheGet = mapCacheGet;

      /**
       * Checks if a map value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf MapCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */

      function mapCacheHas(key) {
        return _getMapData(this, key).has(key);
      }

      var _mapCacheHas = mapCacheHas;

      /**
       * Sets the map `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf MapCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the map cache instance.
       */

      function mapCacheSet(key, value) {
        var data = _getMapData(this, key),
            size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }

      var _mapCacheSet = mapCacheSet;

      /**
       * Creates a map cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */

      function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      } // Add methods to `MapCache`.


      MapCache.prototype.clear = _mapCacheClear;
      MapCache.prototype['delete'] = _mapCacheDelete;
      MapCache.prototype.get = _mapCacheGet;
      MapCache.prototype.has = _mapCacheHas;
      MapCache.prototype.set = _mapCacheSet;
      var _MapCache = MapCache;

      /** Error message constants. */

      var FUNC_ERROR_TEXT = 'Expected a function';
      /**
       * Creates a function that memoizes the result of `func`. If `resolver` is
       * provided, it determines the cache key for storing the result based on the
       * arguments provided to the memoized function. By default, the first argument
       * provided to the memoized function is used as the map cache key. The `func`
       * is invoked with the `this` binding of the memoized function.
       *
       * **Note:** The cache is exposed as the `cache` property on the memoized
       * function. Its creation may be customized by replacing the `_.memoize.Cache`
       * constructor with one whose instances implement the
       * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
       * method interface of `clear`, `delete`, `get`, `has`, and `set`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to have its output memoized.
       * @param {Function} [resolver] The function to resolve the cache key.
       * @returns {Function} Returns the new memoized function.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       * var other = { 'c': 3, 'd': 4 };
       *
       * var values = _.memoize(_.values);
       * values(object);
       * // => [1, 2]
       *
       * values(other);
       * // => [3, 4]
       *
       * object.a = 2;
       * values(object);
       * // => [1, 2]
       *
       * // Modify the result cache.
       * values.cache.set(object, ['a', 'b']);
       * values(object);
       * // => ['a', 'b']
       *
       * // Replace `_.memoize.Cache`.
       * _.memoize.Cache = WeakMap;
       */

      function memoize(func, resolver) {
        if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        var memoized = function () {
          var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

          if (cache.has(key)) {
            return cache.get(key);
          }

          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };

        memoized.cache = new (memoize.Cache || _MapCache)();
        return memoized;
      } // Expose `MapCache`.


      memoize.Cache = _MapCache;
      var memoize_1 = memoize;

      /** Used as the maximum memoize cache size. */

      var MAX_MEMOIZE_SIZE = 500;
      /**
       * A specialized version of `_.memoize` which clears the memoized function's
       * cache when it exceeds `MAX_MEMOIZE_SIZE`.
       *
       * @private
       * @param {Function} func The function to have its output memoized.
       * @returns {Function} Returns the new memoized function.
       */

      function memoizeCapped(func) {
        var result = memoize_1(func, function (key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }

          return key;
        });
        var cache = result.cache;
        return result;
      }

      var _memoizeCapped = memoizeCapped;

      /** Used to match property names within property paths. */

      var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      /** Used to match backslashes in property paths. */

      var reEscapeChar = /\\(\\)?/g;
      /**
       * Converts `string` to a property path array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the property path array.
       */

      var stringToPath = _memoizeCapped(function (string) {
        var result = [];

        if (string.charCodeAt(0) === 46
        /* . */
        ) {
            result.push('');
          }

        string.replace(rePropName, function (match, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
        });
        return result;
      });
      var _stringToPath = stringToPath;

      /**
       * A specialized version of `_.map` for arrays without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */
      function arrayMap(array, iteratee) {
        var index = -1,
            length = array == null ? 0 : array.length,
            result = Array(length);

        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }

        return result;
      }

      var _arrayMap = arrayMap;

      /** Used as references for various `Number` constants. */

      var INFINITY = 1 / 0;
      /** Used to convert symbols to primitives and strings. */

      var symbolProto = _Symbol ? _Symbol.prototype : undefined,
          symbolToString = symbolProto ? symbolProto.toString : undefined;
      /**
       * The base implementation of `_.toString` which doesn't convert nullish
       * values to empty strings.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {string} Returns the string.
       */

      function baseToString(value) {
        // Exit early for strings to avoid a performance hit in some environments.
        if (typeof value == 'string') {
          return value;
        }

        if (isArray_1(value)) {
          // Recursively convert values (susceptible to call stack limits).
          return _arrayMap(value, baseToString) + '';
        }

        if (isSymbol_1(value)) {
          return symbolToString ? symbolToString.call(value) : '';
        }

        var result = value + '';
        return result == '0' && 1 / value == -INFINITY ? '-0' : result;
      }

      var _baseToString = baseToString;

      /**
       * Converts `value` to a string. An empty string is returned for `null`
       * and `undefined` values. The sign of `-0` is preserved.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.toString(null);
       * // => ''
       *
       * _.toString(-0);
       * // => '-0'
       *
       * _.toString([1, 2, 3]);
       * // => '1,2,3'
       */

      function toString(value) {
        return value == null ? '' : _baseToString(value);
      }

      var toString_1 = toString;

      /**
       * Casts `value` to a path array if it's not one.
       *
       * @private
       * @param {*} value The value to inspect.
       * @param {Object} [object] The object to query keys on.
       * @returns {Array} Returns the cast property path array.
       */

      function castPath(value, object) {
        if (isArray_1(value)) {
          return value;
        }

        return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
      }

      var _castPath = castPath;

      /** Used as references for various `Number` constants. */
      var MAX_SAFE_INTEGER = 9007199254740991;
      /** Used to detect unsigned integer values. */

      var reIsUint = /^(?:0|[1-9]\d*)$/;
      /**
       * Checks if `value` is a valid array-like index.
       *
       * @private
       * @param {*} value The value to check.
       * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
       * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
       */

      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
      }

      var _isIndex = isIndex;

      /** Used as references for various `Number` constants. */

      var INFINITY$1 = 1 / 0;
      /**
       * Converts `value` to a string key if it's not a string or symbol.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {string|symbol} Returns the key.
       */

      function toKey(value) {
        if (typeof value == 'string' || isSymbol_1(value)) {
          return value;
        }

        var result = value + '';
        return result == '0' && 1 / value == -INFINITY$1 ? '-0' : result;
      }

      var _toKey = toKey;

      function _objectWithoutPropertiesLoose$1(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;

        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }

        return target;
      }

      var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose$1;

      function _objectWithoutProperties$1(source, excluded) {
        if (source == null) return {};
        var target = objectWithoutPropertiesLoose(source, excluded);
        var key, i;

        if (Object.getOwnPropertySymbols) {
          var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

          for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
          }
        }

        return target;
      }

      var objectWithoutProperties = _objectWithoutProperties$1;

      var _typeof_1 = createCommonjsModule(function (module) {
        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            module.exports = _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            module.exports = _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        module.exports = _typeof;
      });

      function _defineProperty$2(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      var defineProperty$1 = _defineProperty$2;

      /**
       * This file automatically generated from `pre-publish.js`.
       * Do not manually edit.
       */
      var voidElements = {
        "area": true,
        "base": true,
        "br": true,
        "col": true,
        "embed": true,
        "hr": true,
        "img": true,
        "input": true,
        "keygen": true,
        "link": true,
        "menuitem": true,
        "meta": true,
        "param": true,
        "source": true,
        "track": true,
        "wbr": true
      };

      var attrRE = /([\w-]+)|=|(['"])([.\s\S]*?)\2/g;

      var parseTag = function (tag) {
        var i = 0;
        var key;
        var expectingValueAfterEquals = true;
        var res = {
          type: 'tag',
          name: '',
          voidElement: false,
          attrs: {},
          children: []
        };
        tag.replace(attrRE, function (match) {
          if (match === '=') {
            expectingValueAfterEquals = true;
            i++;
            return;
          }

          if (!expectingValueAfterEquals) {
            if (key) {
              res.attrs[key] = key; // boolean attribute
            }

            key = match;
          } else {
            if (i === 0) {
              if (voidElements[match] || tag.charAt(tag.length - 2) === '/') {
                res.voidElement = true;
              }

              res.name = match;
            } else {
              res.attrs[key] = match.replace(/^['"]|['"]$/g, '');
              key = undefined;
            }
          }

          i++;
          expectingValueAfterEquals = false;
        });
        return res;
      };

      /*jshint -W030 */

      var tagRE = /(?:<!--[\S\s]*?-->|<(?:"[^"]*"['"]*|'[^']*'['"]*|[^'">])+>)/g; // re-used obj for quick lookups of components

      var empty = Object.create ? Object.create(null) : {}; // common logic for pushing a child node onto a list

      function pushTextNode(list, html, level, start, ignoreWhitespace) {
        // calculate correct end of the content slice in case there's
        // no tag after the text node.
        var end = html.indexOf('<', start);
        var content = html.slice(start, end === -1 ? undefined : end); // if a node is nothing but whitespace, collapse it as the spec states:
        // https://www.w3.org/TR/html4/struct/text.html#h-9.1

        if (/^\s*$/.test(content)) {
          content = ' ';
        } // don't add whitespace-only text nodes if they would be trailing text nodes
        // or if they would be leading whitespace-only text nodes:
        //  * end > -1 indicates this is not a trailing text node
        //  * leading node is when level is -1 and list has length 0


        if (!ignoreWhitespace && end > -1 && level + list.length >= 0 || content !== ' ') {
          list.push({
            type: 'text',
            content: content
          });
        }
      }

      var parse = function parse(html, options) {
        options || (options = {});
        options.components || (options.components = empty);
        var result = [];
        var current;
        var level = -1;
        var arr = [];
        var byTag = {};
        var inComponent = false;
        html.replace(tagRE, function (tag, index) {
          if (inComponent) {
            if (tag !== '</' + current.name + '>') {
              return;
            } else {
              inComponent = false;
            }
          }

          var isOpen = tag.charAt(1) !== '/';
          var isComment = tag.indexOf('<!--') === 0;
          var start = index + tag.length;
          var nextChar = html.charAt(start);
          var parent;

          if (isOpen && !isComment) {
            level++;
            current = parseTag(tag);

            if (current.type === 'tag' && options.components[current.name]) {
              current.type = 'component';
              inComponent = true;
            }

            if (!current.voidElement && !inComponent && nextChar && nextChar !== '<') {
              pushTextNode(current.children, html, level, start, options.ignoreWhitespace);
            }

            byTag[current.tagName] = current; // if we're at root, push new base node

            if (level === 0) {
              result.push(current);
            }

            parent = arr[level - 1];

            if (parent) {
              parent.children.push(current);
            }

            arr[level] = current;
          }

          if (isComment || !isOpen || current.voidElement) {
            if (!isComment) {
              level--;
            }

            if (!inComponent && nextChar !== '<' && nextChar) {
              // trailing text node
              // if we're at the root, push a base text node. otherwise add as
              // a child to the current node.
              parent = level === -1 ? result : arr[level].children;
              pushTextNode(parent, html, level, start, options.ignoreWhitespace);
            }
          }
        }); // If the "html" passed isn't actually html, add it as a text node.

        if (!result.length && html.length) {
          pushTextNode(result, html, 0, 0, options.ignoreWhitespace);
        }

        return result;
      };

      function attrString(attrs) {
        var buff = [];

        for (var key in attrs) {
          buff.push(key + '="' + attrs[key] + '"');
        }

        if (!buff.length) {
          return '';
        }

        return ' ' + buff.join(' ');
      }

      function stringify(buff, doc) {
        switch (doc.type) {
          case 'text':
            return buff + doc.content;

          case 'tag':
            buff += '<' + doc.name + (doc.attrs ? attrString(doc.attrs) : '') + (doc.voidElement ? '/>' : '>');

            if (doc.voidElement) {
              return buff;
            }

            return buff + doc.children.reduce(stringify, '') + '</' + doc.name + '>';
        }
      }

      var stringify_1 = function (doc) {
        return doc.reduce(function (token, rootEl) {
          return token + stringify('', rootEl);
        }, '');
      };

      var htmlParseStringify2 = {
        parse: parse,
        stringify: stringify_1
      };

      function _classCallCheck$1(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      var classCallCheck = _classCallCheck$1;

      function _defineProperties$1(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass$1(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties$1(Constructor, staticProps);
        return Constructor;
      }

      var createClass = _createClass$1;

      var defaultOptions = {
        bindI18n: 'languageChanged',
        bindI18nStore: '',
        transEmptyNodeValue: '',
        transSupportBasicHtmlNodes: true,
        transKeepBasicHtmlNodesFor: ['br', 'strong', 'i', 'p'],
        useSuspense: true
      };
      var i18nInstance;
      var I18nContext = /*#__PURE__*/React.createContext();
      function getDefaults() {
        return defaultOptions;
      }
      var ReportNamespaces = function () {
        function ReportNamespaces() {
          classCallCheck(this, ReportNamespaces);

          this.usedNamespaces = {};
        }

        createClass(ReportNamespaces, [{
          key: "addUsedNamespaces",
          value: function addUsedNamespaces(namespaces) {
            var _this = this;

            namespaces.forEach(function (ns) {
              if (!_this.usedNamespaces[ns]) _this.usedNamespaces[ns] = true;
            });
          }
        }, {
          key: "getUsedNamespaces",
          value: function getUsedNamespaces() {
            return Object.keys(this.usedNamespaces);
          }
        }]);

        return ReportNamespaces;
      }();
      function getI18n() {
        return i18nInstance;
      }

      function warn() {
        if (console && console.warn) {
          var _console;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          if (typeof args[0] === 'string') args[0] = "react-i18next:: ".concat(args[0]);

          (_console = console).warn.apply(_console, args);
        }
      }
      var alreadyWarned = {};
      function warnOnce() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        if (typeof args[0] === 'string' && alreadyWarned[args[0]]) return;
        if (typeof args[0] === 'string') alreadyWarned[args[0]] = new Date();
        warn.apply(void 0, args);
      }

      function ownKeys$1(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function _objectSpread$1(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            ownKeys$1(source, true).forEach(function (key) {
              defineProperty$1(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys$1(source).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      function hasChildren(node, checkLength) {
        if (!node) return false;
        var base = node.props ? node.props.children : node.children;
        if (checkLength) return base.length > 0;
        return !!base;
      }

      function getChildren(node) {
        if (!node) return [];
        return node && node.children ? node.children : node.props && node.props.children;
      }

      function hasValidReactChildren(children) {
        if (Object.prototype.toString.call(children) !== '[object Array]') return false;
        return children.every(function (child) {
          return /*#__PURE__*/React.isValidElement(child);
        });
      }

      function getAsArray(data) {
        return Array.isArray(data) ? data : [data];
      }

      function mergeProps(source, target) {
        var newTarget = _objectSpread$1({}, target);

        newTarget.props = Object.assign(source.props, target.props);
        return newTarget;
      }

      function nodesToString(children, i18nOptions) {
        if (!children) return '';
        var stringNode = '';
        var childrenArray = getAsArray(children);
        var keepArray = i18nOptions.transKeepBasicHtmlNodesFor || [];
        childrenArray.forEach(function (child, childIndex) {
          if (typeof child === 'string') {
            stringNode += "".concat(child);
          } else if ( /*#__PURE__*/React.isValidElement(child)) {
            var childPropsCount = Object.keys(child.props).length;
            var shouldKeepChild = keepArray.indexOf(child.type) > -1;
            var childChildren = child.props.children;

            if (!childChildren && shouldKeepChild && childPropsCount === 0) {
              stringNode += "<".concat(child.type, "/>");
            } else if (!childChildren && (!shouldKeepChild || childPropsCount !== 0)) {
              stringNode += "<".concat(childIndex, "></").concat(childIndex, ">");
            } else if (child.props.i18nIsDynamicList) {
              stringNode += "<".concat(childIndex, "></").concat(childIndex, ">");
            } else if (shouldKeepChild && childPropsCount === 1 && typeof childChildren === 'string') {
              stringNode += "<".concat(child.type, ">").concat(childChildren, "</").concat(child.type, ">");
            } else {
              var content = nodesToString(childChildren, i18nOptions);
              stringNode += "<".concat(childIndex, ">").concat(content, "</").concat(childIndex, ">");
            }
          } else if (_typeof_1(child) === 'object') {
            var format = child.format,
                clone = objectWithoutProperties(child, ["format"]);

            var keys = Object.keys(clone);

            if (keys.length === 1) {
              var value = format ? "".concat(keys[0], ", ").concat(format) : keys[0];
              stringNode += "{{".concat(value, "}}");
            } else {
              warn("react-i18next: the passed in object contained more than one variable - the object should look like {{ value, format }} where format is optional.", child);
            }
          } else {
            warn("Trans: the passed in value is invalid - seems you passed in a variable like {number} - please pass in variables for interpolation as full objects like {{number}}.", child);
          }
        });
        return stringNode;
      }

      function renderNodes(children, targetString, i18n, i18nOptions, combinedTOpts) {
        if (targetString === '') return [];
        var keepArray = i18nOptions.transKeepBasicHtmlNodesFor || [];
        var emptyChildrenButNeedsHandling = targetString && new RegExp(keepArray.join('|')).test(targetString);
        if (!children && !emptyChildrenButNeedsHandling) return [targetString];
        var data = {};

        function getData(childs) {
          var childrenArray = getAsArray(childs);
          childrenArray.forEach(function (child) {
            if (typeof child === 'string') return;
            if (hasChildren(child)) getData(getChildren(child));else if (_typeof_1(child) === 'object' && ! /*#__PURE__*/React.isValidElement(child)) Object.assign(data, child);
          });
        }

        getData(children);
        var interpolatedString = i18n.services.interpolator.interpolate(targetString, _objectSpread$1({}, data, {}, combinedTOpts), i18n.language);
        var ast = htmlParseStringify2.parse("<0>".concat(interpolatedString, "</0>"));

        function renderInner(child, node, rootReactNode) {
          var childs = getChildren(child);
          var mappedChildren = mapAST(childs, node.children, rootReactNode);
          return hasValidReactChildren(childs) && mappedChildren.length === 0 ? childs : mappedChildren;
        }

        function pushTranslatedJSX(child, inner, mem, i) {
          if (child.dummy) child.children = inner;
          mem.push( /*#__PURE__*/React.cloneElement(child, _objectSpread$1({}, child.props, {
            key: i
          }), inner));
        }

        function mapAST(reactNode, astNode, rootReactNode) {
          var reactNodes = getAsArray(reactNode);
          var astNodes = getAsArray(astNode);
          return astNodes.reduce(function (mem, node, i) {
            var translationContent = node.children && node.children[0] && node.children[0].content;

            if (node.type === 'tag') {
              var tmp = reactNodes[parseInt(node.name, 10)];
              if (!tmp && rootReactNode.length === 1 && rootReactNode[0][node.name]) tmp = rootReactNode[0][node.name];
              if (!tmp) tmp = {};
              var child = Object.keys(node.attrs).length !== 0 ? mergeProps({
                props: node.attrs
              }, tmp) : tmp;
              var isElement = /*#__PURE__*/React.isValidElement(child);
              var isValidTranslationWithChildren = isElement && hasChildren(node, true) && !node.voidElement;
              var isEmptyTransWithHTML = emptyChildrenButNeedsHandling && _typeof_1(child) === 'object' && child.dummy && !isElement;
              var isKnownComponent = _typeof_1(children) === 'object' && children !== null && Object.hasOwnProperty.call(children, node.name);

              if (typeof child === 'string') {
                mem.push(child);
              } else if (hasChildren(child) || isValidTranslationWithChildren) {
                var inner = renderInner(child, node, rootReactNode);
                pushTranslatedJSX(child, inner, mem, i);
              } else if (isEmptyTransWithHTML) {
                var _inner = mapAST(reactNodes, node.children, rootReactNode);

                mem.push( /*#__PURE__*/React.cloneElement(child, _objectSpread$1({}, child.props, {
                  key: i
                }), _inner));
              } else if (Number.isNaN(parseFloat(node.name))) {
                if (isKnownComponent) {
                  var _inner2 = renderInner(child, node, rootReactNode);

                  pushTranslatedJSX(child, _inner2, mem, i);
                } else if (i18nOptions.transSupportBasicHtmlNodes && keepArray.indexOf(node.name) > -1) {
                  if (node.voidElement) {
                    mem.push( /*#__PURE__*/React.createElement(node.name, {
                      key: "".concat(node.name, "-").concat(i)
                    }));
                  } else {
                    var _inner3 = mapAST(reactNodes, node.children, rootReactNode);

                    mem.push( /*#__PURE__*/React.createElement(node.name, {
                      key: "".concat(node.name, "-").concat(i)
                    }, _inner3));
                  }
                } else if (node.voidElement) {
                  mem.push("<".concat(node.name, " />"));
                } else {
                  var _inner4 = mapAST(reactNodes, node.children, rootReactNode);

                  mem.push("<".concat(node.name, ">").concat(_inner4, "</").concat(node.name, ">"));
                }
              } else if (_typeof_1(child) === 'object' && !isElement) {
                var content = node.children[0] ? translationContent : null;
                if (content) mem.push(content);
              } else if (node.children.length === 1 && translationContent) {
                mem.push( /*#__PURE__*/React.cloneElement(child, _objectSpread$1({}, child.props, {
                  key: i
                }), translationContent));
              } else {
                mem.push( /*#__PURE__*/React.cloneElement(child, _objectSpread$1({}, child.props, {
                  key: i
                })));
              }
            } else if (node.type === 'text') {
              mem.push(node.content);
            }

            return mem;
          }, []);
        }

        var result = mapAST([{
          dummy: true,
          children: children
        }], ast, getAsArray(children || []));
        return getChildren(result[0]);
      }

      function Trans(_ref) {
        var children = _ref.children,
            count = _ref.count,
            parent = _ref.parent,
            i18nKey = _ref.i18nKey,
            tOptions = _ref.tOptions,
            values = _ref.values,
            defaults = _ref.defaults,
            components = _ref.components,
            ns = _ref.ns,
            i18nFromProps = _ref.i18n,
            tFromProps = _ref.t,
            additionalProps = objectWithoutProperties(_ref, ["children", "count", "parent", "i18nKey", "tOptions", "values", "defaults", "components", "ns", "i18n", "t"]);

        var _ref2 = useContext(I18nContext) || {},
            i18nFromContext = _ref2.i18n,
            defaultNSFromContext = _ref2.defaultNS;

        var i18n = i18nFromProps || i18nFromContext || getI18n();

        if (!i18n) {
          warnOnce('You will need pass in an i18next instance by using i18nextReactModule');
          return children;
        }

        var t = tFromProps || i18n.t.bind(i18n) || function (k) {
          return k;
        };

        var reactI18nextOptions = _objectSpread$1({}, getDefaults(), {}, i18n.options && i18n.options.react);

        var namespaces = ns || t.ns || defaultNSFromContext || i18n.options && i18n.options.defaultNS;
        namespaces = typeof namespaces === 'string' ? [namespaces] : namespaces || ['translation'];
        var defaultValue = defaults || nodesToString(children, reactI18nextOptions) || reactI18nextOptions.transEmptyNodeValue || i18nKey;
        var hashTransKey = reactI18nextOptions.hashTransKey;
        var key = i18nKey || (hashTransKey ? hashTransKey(defaultValue) : defaultValue);
        var interpolationOverride = values ? {} : {
          interpolation: {
            prefix: '#$?',
            suffix: '?$#'
          }
        };

        var combinedTOpts = _objectSpread$1({}, tOptions, {
          count: count
        }, values, {}, interpolationOverride, {
          defaultValue: defaultValue,
          ns: namespaces
        });

        var translation = key ? t(key, combinedTOpts) : defaultValue;
        var content = renderNodes(components || children, translation, i18n, reactI18nextOptions, combinedTOpts);
        var useAsParent = parent !== undefined ? parent : reactI18nextOptions.defaultTransParent;
        return useAsParent ? /*#__PURE__*/React.createElement(useAsParent, additionalProps, content) : content;
      }

      function prefixedObject(entries, prefix) {
        return Object.fromEntries(entries.filter(([v]) => v.startsWith(prefix)).map(([k, v]) => [k.substring(prefix.length), v]));
      }

      function normalizeField(item) {
        if (item.key && !item.name && typeof item.key === 'string') {
          item.name = item.key.split('.');
        } // FIXME do this when register


        if (!item.valuePropName && item.widget === 'switch') {
          item.valuePropName = 'checked';
        } // FIXME Do not do this here


        if (typeof item.label === 'string') {
          item.label = /*#__PURE__*/React.createElement(Trans, null, item.label);
        } // extract


        const entries = Object.entries(item); // widget

        item.widgetProps = Object.assign(prefixedObject(entries, 'widget:'), item.widgetProps); // 常用组件属性
        // defaultValue 无效 - 组件受控

        const {
          autoFocus,
          disabled,
          readOnly,
          placeholder
        } = item;
        Object.entries({
          autoFocus,
          disabled,
          readOnly,
          placeholder
        }).forEach(([k, v]) => {
          if (v === null || v === undefined) {
            return;
          }

          item.widgetProps[k] = v;
        }); // field

        item.fieldProps = Object.assign(prefixedObject(entries, 'field:'), item.fieldProps); // 常用字段属性
        // https://ant.design/components/form-cn/#Form.Item

        const {
          help,
          extra,
          normalize
        } = item;
        Object.entries({
          help,
          extra,
          normalize
        }).forEach(([k, v]) => {
          if (v === null || v === undefined) {
            return;
          }

          item.fieldProps[k] = v;
        });
        return item;
      }
      const Widgets = {
        default: Input,
        text: Input,
        password: Input.Password,
        textarea: Input.TextArea,
        number: InputNumber,
        slider: Slider,
        switch: Switch,
        select: ({
          field: {
            options,
            name
          },
          ...props
        }) => {
          options = normalizeOptions(options);
          return /*#__PURE__*/React.createElement(Select, props, options.map(({
            label,
            value
          }) => /*#__PURE__*/React.createElement(Select.Option, {
            value: value,
            key: label
          }, label)));
        }
      };

      function buildWidget(field, opts) {
        const {
          widget: w,
          widgetProps
        } = field;
        let widget = w !== null && w !== void 0 ? w : 'default';

        if (typeof widget === 'string') {
          var _widgets$find;

          const {
            widgets = []
          } = opts !== null && opts !== void 0 ? opts : {};
          widget = (_widgets$find = widgets.find(v => v && v['displayName'] === widget || v && v['factoryName'] === widget)) !== null && _widgets$find !== void 0 ? _widgets$find : Widgets[widget];

          if (!widget) {
            console.error(`invalid widget`, field);
            widget = Widgets['default'];
          }
        }

        if ( /*#__PURE__*/React.isValidElement(widget)) {
          if (Object.keys(widgetProps).length === 0) {
            return widget;
          }

          return /*#__PURE__*/React.cloneElement(widget, widgetProps);
        } // console.log(`createElement`, widget, widgetProps);


        return /*#__PURE__*/React.createElement(widget, Object.assign({
          field
        }, widgetProps));
      }

      function buildRules(item) {
        var _item$rules;

        const rules = Array.from((_item$rules = item.rules) !== null && _item$rules !== void 0 ? _item$rules : []);
        const {
          required,
          label,
          key
        } = item; // FIXME 应该有更好的方式 - 全局也能配置

        if (required) {
          rules.push({
            required,
            message: `请填写${typeof label === 'string' ? label : '该字段'}`
          });
        }

        return rules;
      }

      function buildFormFields(fields, opt) {
        return fields.map(v => buildFormField(v, opt));
      }

      function buildFormField(field, options) {
        field = normalizeField(field);
        const {
          render
        } = field;

        if (render) {
          return render({
            field
          });
        }

        const {
          label,
          key,
          name,
          valuePropName,
          fieldProps,
          children
        } = field;
        return /*#__PURE__*/React.createElement(Form.Item, _extends$1({
          key: key,
          valuePropName: valuePropName,
          label: label,
          name: name || key,
          rules: buildRules(field)
        }, fieldProps), children !== null && children !== void 0 ? children : buildWidget(field, options));
      }
      let objectHash;
      const FormFieldBuilder = props => {
        const {
          field,
          children,
          hash,
          pure,
          ...opts
        } = props;
        let deps;

        if (pure) {
          deps = [];
        } else if (hash) {
          if (objectHash) {
            deps = [objectHash(field)];
          } else {
            Promise.resolve().then(function () { return object_hash$1; }).then(({
              default: oh
            }) => objectHash = oh);
          }
        }

        deps = deps || [field, children];
        return useMemo(() => {
          // debug rerender
          // console.log(`render ${field.key}`, field)
          if (children) {
            return buildFormField({ ...field,
              children
            }, opts);
          }

          return buildFormField(field, opts);
        }, deps);
      };
      const FormFieldsBuilder = props => {
        const {
          fields,
          children,
          pure,
          ...opts
        } = props;
        let deps;

        if (pure) {
          deps = [];
        }

        deps = deps || [fields];
        return useMemo(() => buildFormFields(fields, opts), deps);
      };

      /** `Object#toString` result references. */

      var stringTag = '[object String]';
      /**
       * Checks if `value` is classified as a `String` primitive or object.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a string, else `false`.
       * @example
       *
       * _.isString('abc');
       * // => true
       *
       * _.isString(1);
       * // => false
       */

      function isString(value) {
        return typeof value == 'string' || !isArray_1(value) && isObjectLike_1(value) && _baseGetTag(value) == stringTag;
      }

      var isString_1 = isString;

      /**
       * Creates a base function for methods like `_.forIn` and `_.forOwn`.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */
      function createBaseFor(fromRight) {
        return function (object, iteratee, keysFunc) {
          var index = -1,
              iterable = Object(object),
              props = keysFunc(object),
              length = props.length;

          while (length--) {
            var key = props[fromRight ? length : ++index];

            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }

          return object;
        };
      }

      var _createBaseFor = createBaseFor;

      /**
       * The base implementation of `baseForOwn` which iterates over `object`
       * properties returned by `keysFunc` and invokes `iteratee` for each property.
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */

      var baseFor = _createBaseFor();
      var _baseFor = baseFor;

      /**
       * The base implementation of `_.times` without support for iteratee shorthands
       * or max array length checks.
       *
       * @private
       * @param {number} n The number of times to invoke `iteratee`.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the array of results.
       */
      function baseTimes(n, iteratee) {
        var index = -1,
            result = Array(n);

        while (++index < n) {
          result[index] = iteratee(index);
        }

        return result;
      }

      var _baseTimes = baseTimes;

      /** `Object#toString` result references. */

      var argsTag = '[object Arguments]';
      /**
       * The base implementation of `_.isArguments`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       */

      function baseIsArguments(value) {
        return isObjectLike_1(value) && _baseGetTag(value) == argsTag;
      }

      var _baseIsArguments = baseIsArguments;

      /** Used for built-in method references. */

      var objectProto$6 = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty$5 = objectProto$6.hasOwnProperty;
      /** Built-in value references. */

      var propertyIsEnumerable = objectProto$6.propertyIsEnumerable;
      /**
       * Checks if `value` is likely an `arguments` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       *  else `false`.
       * @example
       *
       * _.isArguments(function() { return arguments; }());
       * // => true
       *
       * _.isArguments([1, 2, 3]);
       * // => false
       */

      var isArguments = _baseIsArguments(function () {
        return arguments;
      }()) ? _baseIsArguments : function (value) {
        return isObjectLike_1(value) && hasOwnProperty$5.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
      };
      var isArguments_1 = isArguments;

      /**
       * This method returns `false`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `false`.
       * @example
       *
       * _.times(2, _.stubFalse);
       * // => [false, false]
       */
      function stubFalse() {
        return false;
      }

      var stubFalse_1 = stubFalse;

      var isBuffer_1 = createCommonjsModule(function (module, exports) {
        /** Detect free variable `exports`. */
        var freeExports =  exports && !exports.nodeType && exports;
        /** Detect free variable `module`. */

        var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
        /** Detect the popular CommonJS extension `module.exports`. */

        var moduleExports = freeModule && freeModule.exports === freeExports;
        /** Built-in value references. */

        var Buffer = moduleExports ? _root.Buffer : undefined;
        /* Built-in method references for those with the same name as other `lodash` methods. */

        var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
        /**
         * Checks if `value` is a buffer.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
         * @example
         *
         * _.isBuffer(new Buffer(2));
         * // => true
         *
         * _.isBuffer(new Uint8Array(2));
         * // => false
         */

        var isBuffer = nativeIsBuffer || stubFalse_1;
        module.exports = isBuffer;
      });

      /** Used as references for various `Number` constants. */
      var MAX_SAFE_INTEGER$1 = 9007199254740991;
      /**
       * Checks if `value` is a valid array-like length.
       *
       * **Note:** This method is loosely based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
       * @example
       *
       * _.isLength(3);
       * // => true
       *
       * _.isLength(Number.MIN_VALUE);
       * // => false
       *
       * _.isLength(Infinity);
       * // => false
       *
       * _.isLength('3');
       * // => false
       */

      function isLength(value) {
        return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
      }

      var isLength_1 = isLength;

      /** `Object#toString` result references. */

      var argsTag$1 = '[object Arguments]',
          arrayTag = '[object Array]',
          boolTag = '[object Boolean]',
          dateTag = '[object Date]',
          errorTag = '[object Error]',
          funcTag$1 = '[object Function]',
          mapTag = '[object Map]',
          numberTag = '[object Number]',
          objectTag = '[object Object]',
          regexpTag = '[object RegExp]',
          setTag = '[object Set]',
          stringTag$1 = '[object String]',
          weakMapTag = '[object WeakMap]';
      var arrayBufferTag = '[object ArrayBuffer]',
          dataViewTag = '[object DataView]',
          float32Tag = '[object Float32Array]',
          float64Tag = '[object Float64Array]',
          int8Tag = '[object Int8Array]',
          int16Tag = '[object Int16Array]',
          int32Tag = '[object Int32Array]',
          uint8Tag = '[object Uint8Array]',
          uint8ClampedTag = '[object Uint8ClampedArray]',
          uint16Tag = '[object Uint16Array]',
          uint32Tag = '[object Uint32Array]';
      /** Used to identify `toStringTag` values of typed arrays. */

      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag$1] = typedArrayTags[weakMapTag] = false;
      /**
       * The base implementation of `_.isTypedArray` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       */

      function baseIsTypedArray(value) {
        return isObjectLike_1(value) && isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
      }

      var _baseIsTypedArray = baseIsTypedArray;

      /**
       * The base implementation of `_.unary` without support for storing metadata.
       *
       * @private
       * @param {Function} func The function to cap arguments for.
       * @returns {Function} Returns the new capped function.
       */
      function baseUnary(func) {
        return function (value) {
          return func(value);
        };
      }

      var _baseUnary = baseUnary;

      var _nodeUtil = createCommonjsModule(function (module, exports) {
        /** Detect free variable `exports`. */
        var freeExports =  exports && !exports.nodeType && exports;
        /** Detect free variable `module`. */

        var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
        /** Detect the popular CommonJS extension `module.exports`. */

        var moduleExports = freeModule && freeModule.exports === freeExports;
        /** Detect free variable `process` from Node.js. */

        var freeProcess = moduleExports && _freeGlobal.process;
        /** Used to access faster Node.js helpers. */

        var nodeUtil = function () {
          try {
            // Use `util.types` for Node.js 10+.
            var types = freeModule && freeModule.require && freeModule.require('util').types;

            if (types) {
              return types;
            } // Legacy `process.binding('util')` for Node.js < 10.


            return freeProcess && freeProcess.binding && freeProcess.binding('util');
          } catch (e) {}
        }();

        module.exports = nodeUtil;
      });

      /* Node.js helper references. */

      var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;
      /**
       * Checks if `value` is classified as a typed array.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       * @example
       *
       * _.isTypedArray(new Uint8Array);
       * // => true
       *
       * _.isTypedArray([]);
       * // => false
       */

      var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;
      var isTypedArray_1 = isTypedArray;

      /** Used for built-in method references. */

      var objectProto$7 = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty$6 = objectProto$7.hasOwnProperty;
      /**
       * Creates an array of the enumerable property names of the array-like `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @param {boolean} inherited Specify returning inherited property names.
       * @returns {Array} Returns the array of property names.
       */

      function arrayLikeKeys(value, inherited) {
        var isArr = isArray_1(value),
            isArg = !isArr && isArguments_1(value),
            isBuff = !isArr && !isArg && isBuffer_1(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? _baseTimes(value.length, String) : [],
            length = result.length;

        for (var key in value) {
          if ((inherited || hasOwnProperty$6.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
          key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
          isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.
          isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
          _isIndex(key, length)))) {
            result.push(key);
          }
        }

        return result;
      }

      var _arrayLikeKeys = arrayLikeKeys;

      /** Used for built-in method references. */
      var objectProto$8 = Object.prototype;
      /**
       * Checks if `value` is likely a prototype object.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
       */

      function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$8;
        return value === proto;
      }

      var _isPrototype = isPrototype;

      /**
       * Creates a unary function that invokes `func` with its argument transformed.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {Function} transform The argument transform.
       * @returns {Function} Returns the new function.
       */
      function overArg(func, transform) {
        return function (arg) {
          return func(transform(arg));
        };
      }

      var _overArg = overArg;

      /* Built-in method references for those with the same name as other `lodash` methods. */

      var nativeKeys = _overArg(Object.keys, Object);
      var _nativeKeys = nativeKeys;

      /** Used for built-in method references. */

      var objectProto$9 = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty$7 = objectProto$9.hasOwnProperty;
      /**
       * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */

      function baseKeys(object) {
        if (!_isPrototype(object)) {
          return _nativeKeys(object);
        }

        var result = [];

        for (var key in Object(object)) {
          if (hasOwnProperty$7.call(object, key) && key != 'constructor') {
            result.push(key);
          }
        }

        return result;
      }

      var _baseKeys = baseKeys;

      /**
       * Checks if `value` is array-like. A value is considered array-like if it's
       * not a function and has a `value.length` that's an integer greater than or
       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
       * @example
       *
       * _.isArrayLike([1, 2, 3]);
       * // => true
       *
       * _.isArrayLike(document.body.children);
       * // => true
       *
       * _.isArrayLike('abc');
       * // => true
       *
       * _.isArrayLike(_.noop);
       * // => false
       */

      function isArrayLike(value) {
        return value != null && isLength_1(value.length) && !isFunction_1(value);
      }

      var isArrayLike_1 = isArrayLike;

      /**
       * Creates an array of the own enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects. See the
       * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * for more details.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keys(new Foo);
       * // => ['a', 'b'] (iteration order is not guaranteed)
       *
       * _.keys('hi');
       * // => ['0', '1']
       */

      function keys(object) {
        return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
      }

      var keys_1 = keys;

      /**
       * The base implementation of `_.forOwn` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */

      function baseForOwn(object, iteratee) {
        return object && _baseFor(object, iteratee, keys_1);
      }

      var _baseForOwn = baseForOwn;

      /**
       * This method returns the first argument it receives.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {*} value Any value.
       * @returns {*} Returns `value`.
       * @example
       *
       * var object = { 'a': 1 };
       *
       * console.log(_.identity(object) === object);
       * // => true
       */
      function identity(value) {
        return value;
      }

      var identity_1 = identity;

      /**
       * Casts `value` to `identity` if it's not a function.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Function} Returns cast function.
       */

      function castFunction(value) {
        return typeof value == 'function' ? value : identity_1;
      }

      var _castFunction = castFunction;

      /**
       * Iterates over own enumerable string keyed properties of an object and
       * invokes `iteratee` for each property. The iteratee is invoked with three
       * arguments: (value, key, object). Iteratee functions may exit iteration
       * early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 0.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forOwnRight
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */

      function forOwn(object, iteratee) {
        return object && _baseForOwn(object, _castFunction(iteratee));
      }

      var forOwn_1 = forOwn;

      /** Built-in value references. */

      var getPrototype = _overArg(Object.getPrototypeOf, Object);
      var _getPrototype = getPrototype;

      /** `Object#toString` result references. */

      var objectTag$1 = '[object Object]';
      /** Used for built-in method references. */

      var funcProto$2 = Function.prototype,
          objectProto$a = Object.prototype;
      /** Used to resolve the decompiled source of functions. */

      var funcToString$2 = funcProto$2.toString;
      /** Used to check objects for own properties. */

      var hasOwnProperty$8 = objectProto$a.hasOwnProperty;
      /** Used to infer the `Object` constructor. */

      var objectCtorString = funcToString$2.call(Object);
      /**
       * Checks if `value` is a plain object, that is, an object created by the
       * `Object` constructor or one with a `[[Prototype]]` of `null`.
       *
       * @static
       * @memberOf _
       * @since 0.8.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * _.isPlainObject(new Foo);
       * // => false
       *
       * _.isPlainObject([1, 2, 3]);
       * // => false
       *
       * _.isPlainObject({ 'x': 0, 'y': 0 });
       * // => true
       *
       * _.isPlainObject(Object.create(null));
       * // => true
       */

      function isPlainObject(value) {
        if (!isObjectLike_1(value) || _baseGetTag(value) != objectTag$1) {
          return false;
        }

        var proto = _getPrototype(value);

        if (proto === null) {
          return true;
        }

        var Ctor = hasOwnProperty$8.call(proto, 'constructor') && proto.constructor;
        return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString$2.call(Ctor) == objectCtorString;
      }

      var isPlainObject_1 = isPlainObject;

      /**
       * Removes all key-value entries from the stack.
       *
       * @private
       * @name clear
       * @memberOf Stack
       */

      function stackClear() {
        this.__data__ = new _ListCache();
        this.size = 0;
      }

      var _stackClear = stackClear;

      /**
       * Removes `key` and its value from the stack.
       *
       * @private
       * @name delete
       * @memberOf Stack
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function stackDelete(key) {
        var data = this.__data__,
            result = data['delete'](key);
        this.size = data.size;
        return result;
      }

      var _stackDelete = stackDelete;

      /**
       * Gets the stack value for `key`.
       *
       * @private
       * @name get
       * @memberOf Stack
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function stackGet(key) {
        return this.__data__.get(key);
      }

      var _stackGet = stackGet;

      /**
       * Checks if a stack value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Stack
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function stackHas(key) {
        return this.__data__.has(key);
      }

      var _stackHas = stackHas;

      /** Used as the size to enable large array optimizations. */

      var LARGE_ARRAY_SIZE = 200;
      /**
       * Sets the stack `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Stack
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the stack cache instance.
       */

      function stackSet(key, value) {
        var data = this.__data__;

        if (data instanceof _ListCache) {
          var pairs = data.__data__;

          if (!_Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }

          data = this.__data__ = new _MapCache(pairs);
        }

        data.set(key, value);
        this.size = data.size;
        return this;
      }

      var _stackSet = stackSet;

      /**
       * Creates a stack cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */

      function Stack(entries) {
        var data = this.__data__ = new _ListCache(entries);
        this.size = data.size;
      } // Add methods to `Stack`.


      Stack.prototype.clear = _stackClear;
      Stack.prototype['delete'] = _stackDelete;
      Stack.prototype.get = _stackGet;
      Stack.prototype.has = _stackHas;
      Stack.prototype.set = _stackSet;
      var _Stack = Stack;

      /** Used to stand-in for `undefined` hash values. */
      var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';
      /**
       * Adds `value` to the array cache.
       *
       * @private
       * @name add
       * @memberOf SetCache
       * @alias push
       * @param {*} value The value to cache.
       * @returns {Object} Returns the cache instance.
       */

      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED$2);

        return this;
      }

      var _setCacheAdd = setCacheAdd;

      /**
       * Checks if `value` is in the array cache.
       *
       * @private
       * @name has
       * @memberOf SetCache
       * @param {*} value The value to search for.
       * @returns {number} Returns `true` if `value` is found, else `false`.
       */
      function setCacheHas(value) {
        return this.__data__.has(value);
      }

      var _setCacheHas = setCacheHas;

      /**
       *
       * Creates an array cache object to store unique values.
       *
       * @private
       * @constructor
       * @param {Array} [values] The values to cache.
       */

      function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;
        this.__data__ = new _MapCache();

        while (++index < length) {
          this.add(values[index]);
        }
      } // Add methods to `SetCache`.


      SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;
      SetCache.prototype.has = _setCacheHas;
      var _SetCache = SetCache;

      /**
       * A specialized version of `_.some` for arrays without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       */
      function arraySome(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }

        return false;
      }

      var _arraySome = arraySome;

      /**
       * Checks if a `cache` value for `key` exists.
       *
       * @private
       * @param {Object} cache The cache to query.
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function cacheHas(cache, key) {
        return cache.has(key);
      }

      var _cacheHas = cacheHas;

      /** Used to compose bitmasks for value comparisons. */

      var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2;
      /**
       * A specialized version of `baseIsEqualDeep` for arrays with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Array} array The array to compare.
       * @param {Array} other The other array to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `array` and `other` objects.
       * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
       */

      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;

        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        } // Assume cyclic values are equal.


        var stacked = stack.get(array);

        if (stacked && stack.get(other)) {
          return stacked == other;
        }

        var index = -1,
            result = true,
            seen = bitmask & COMPARE_UNORDERED_FLAG ? new _SetCache() : undefined;
        stack.set(array, other);
        stack.set(other, array); // Ignore non-index properties.

        while (++index < arrLength) {
          var arrValue = array[index],
              othValue = other[index];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
          }

          if (compared !== undefined) {
            if (compared) {
              continue;
            }

            result = false;
            break;
          } // Recursively compare arrays (susceptible to call stack limits).


          if (seen) {
            if (!_arraySome(other, function (othValue, othIndex) {
              if (!_cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }

        stack['delete'](array);
        stack['delete'](other);
        return result;
      }

      var _equalArrays = equalArrays;

      /** Built-in value references. */

      var Uint8Array$1 = _root.Uint8Array;
      var _Uint8Array = Uint8Array$1;

      /**
       * Converts `map` to its key-value pairs.
       *
       * @private
       * @param {Object} map The map to convert.
       * @returns {Array} Returns the key-value pairs.
       */
      function mapToArray(map) {
        var index = -1,
            result = Array(map.size);
        map.forEach(function (value, key) {
          result[++index] = [key, value];
        });
        return result;
      }

      var _mapToArray = mapToArray;

      /**
       * Converts `set` to an array of its values.
       *
       * @private
       * @param {Object} set The set to convert.
       * @returns {Array} Returns the values.
       */
      function setToArray(set) {
        var index = -1,
            result = Array(set.size);
        set.forEach(function (value) {
          result[++index] = value;
        });
        return result;
      }

      var _setToArray = setToArray;

      /** Used to compose bitmasks for value comparisons. */

      var COMPARE_PARTIAL_FLAG$1 = 1,
          COMPARE_UNORDERED_FLAG$1 = 2;
      /** `Object#toString` result references. */

      var boolTag$1 = '[object Boolean]',
          dateTag$1 = '[object Date]',
          errorTag$1 = '[object Error]',
          mapTag$1 = '[object Map]',
          numberTag$1 = '[object Number]',
          regexpTag$1 = '[object RegExp]',
          setTag$1 = '[object Set]',
          stringTag$2 = '[object String]',
          symbolTag$1 = '[object Symbol]';
      var arrayBufferTag$1 = '[object ArrayBuffer]',
          dataViewTag$1 = '[object DataView]';
      /** Used to convert symbols to primitives and strings. */

      var symbolProto$1 = _Symbol ? _Symbol.prototype : undefined,
          symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : undefined;
      /**
       * A specialized version of `baseIsEqualDeep` for comparing objects of
       * the same `toStringTag`.
       *
       * **Note:** This function only supports comparing values with tags of
       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {string} tag The `toStringTag` of the objects to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */

      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag$1:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }

            object = object.buffer;
            other = other.buffer;

          case arrayBufferTag$1:
            if (object.byteLength != other.byteLength || !equalFunc(new _Uint8Array(object), new _Uint8Array(other))) {
              return false;
            }

            return true;

          case boolTag$1:
          case dateTag$1:
          case numberTag$1:
            // Coerce booleans to `1` or `0` and dates to milliseconds.
            // Invalid dates are coerced to `NaN`.
            return eq_1(+object, +other);

          case errorTag$1:
            return object.name == other.name && object.message == other.message;

          case regexpTag$1:
          case stringTag$2:
            // Coerce regexes to strings and treat strings, primitives and objects,
            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
            // for more details.
            return object == other + '';

          case mapTag$1:
            var convert = _mapToArray;

          case setTag$1:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1;
            convert || (convert = _setToArray);

            if (object.size != other.size && !isPartial) {
              return false;
            } // Assume cyclic values are equal.


            var stacked = stack.get(object);

            if (stacked) {
              return stacked == other;
            }

            bitmask |= COMPARE_UNORDERED_FLAG$1; // Recursively compare objects (susceptible to call stack limits).

            stack.set(object, other);
            var result = _equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;

          case symbolTag$1:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }

        }

        return false;
      }

      var _equalByTag = equalByTag;

      /**
       * Appends the elements of `values` to `array`.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {Array} values The values to append.
       * @returns {Array} Returns `array`.
       */
      function arrayPush(array, values) {
        var index = -1,
            length = values.length,
            offset = array.length;

        while (++index < length) {
          array[offset + index] = values[index];
        }

        return array;
      }

      var _arrayPush = arrayPush;

      /**
       * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
       * `keysFunc` and `symbolsFunc` to get the enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @param {Function} symbolsFunc The function to get the symbols of `object`.
       * @returns {Array} Returns the array of property names and symbols.
       */

      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray_1(object) ? result : _arrayPush(result, symbolsFunc(object));
      }

      var _baseGetAllKeys = baseGetAllKeys;

      /**
       * A specialized version of `_.filter` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       */
      function arrayFilter(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];

          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }

        return result;
      }

      var _arrayFilter = arrayFilter;

      /**
       * This method returns a new empty array.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Array} Returns the new empty array.
       * @example
       *
       * var arrays = _.times(2, _.stubArray);
       *
       * console.log(arrays);
       * // => [[], []]
       *
       * console.log(arrays[0] === arrays[1]);
       * // => false
       */
      function stubArray() {
        return [];
      }

      var stubArray_1 = stubArray;

      /** Used for built-in method references. */

      var objectProto$b = Object.prototype;
      /** Built-in value references. */

      var propertyIsEnumerable$1 = objectProto$b.propertyIsEnumerable;
      /* Built-in method references for those with the same name as other `lodash` methods. */

      var nativeGetSymbols = Object.getOwnPropertySymbols;
      /**
       * Creates an array of the own enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */

      var getSymbols = !nativeGetSymbols ? stubArray_1 : function (object) {
        if (object == null) {
          return [];
        }

        object = Object(object);
        return _arrayFilter(nativeGetSymbols(object), function (symbol) {
          return propertyIsEnumerable$1.call(object, symbol);
        });
      };
      var _getSymbols = getSymbols;

      /**
       * Creates an array of own enumerable property names and symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */

      function getAllKeys(object) {
        return _baseGetAllKeys(object, keys_1, _getSymbols);
      }

      var _getAllKeys = getAllKeys;

      /** Used to compose bitmasks for value comparisons. */

      var COMPARE_PARTIAL_FLAG$2 = 1;
      /** Used for built-in method references. */

      var objectProto$c = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty$9 = objectProto$c.hasOwnProperty;
      /**
       * A specialized version of `baseIsEqualDeep` for objects with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */

      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2,
            objProps = _getAllKeys(object),
            objLength = objProps.length,
            othProps = _getAllKeys(other),
            othLength = othProps.length;

        if (objLength != othLength && !isPartial) {
          return false;
        }

        var index = objLength;

        while (index--) {
          var key = objProps[index];

          if (!(isPartial ? key in other : hasOwnProperty$9.call(other, key))) {
            return false;
          }
        } // Assume cyclic values are equal.


        var stacked = stack.get(object);

        if (stacked && stack.get(other)) {
          return stacked == other;
        }

        var result = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;

        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key],
              othValue = other[key];

          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          } // Recursively compare objects (susceptible to call stack limits).


          if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }

          skipCtor || (skipCtor = key == 'constructor');
        }

        if (result && !skipCtor) {
          var objCtor = object.constructor,
              othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.

          if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
            result = false;
          }
        }

        stack['delete'](object);
        stack['delete'](other);
        return result;
      }

      var _equalObjects = equalObjects;

      /* Built-in method references that are verified to be native. */

      var DataView$1 = _getNative(_root, 'DataView');
      var _DataView = DataView$1;

      /* Built-in method references that are verified to be native. */

      var Promise$1 = _getNative(_root, 'Promise');
      var _Promise = Promise$1;

      /* Built-in method references that are verified to be native. */

      var Set$1 = _getNative(_root, 'Set');
      var _Set = Set$1;

      /* Built-in method references that are verified to be native. */

      var WeakMap = _getNative(_root, 'WeakMap');
      var _WeakMap = WeakMap;

      /** `Object#toString` result references. */

      var mapTag$2 = '[object Map]',
          objectTag$2 = '[object Object]',
          promiseTag = '[object Promise]',
          setTag$2 = '[object Set]',
          weakMapTag$1 = '[object WeakMap]';
      var dataViewTag$2 = '[object DataView]';
      /** Used to detect maps, sets, and weakmaps. */

      var dataViewCtorString = _toSource(_DataView),
          mapCtorString = _toSource(_Map),
          promiseCtorString = _toSource(_Promise),
          setCtorString = _toSource(_Set),
          weakMapCtorString = _toSource(_WeakMap);
      /**
       * Gets the `toStringTag` of `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */

      var getTag = _baseGetTag; // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

      if (_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag$2 || _Map && getTag(new _Map()) != mapTag$2 || _Promise && getTag(_Promise.resolve()) != promiseTag || _Set && getTag(new _Set()) != setTag$2 || _WeakMap && getTag(new _WeakMap()) != weakMapTag$1) {
        getTag = function (value) {
          var result = _baseGetTag(value),
              Ctor = result == objectTag$2 ? value.constructor : undefined,
              ctorString = Ctor ? _toSource(Ctor) : '';

          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag$2;

              case mapCtorString:
                return mapTag$2;

              case promiseCtorString:
                return promiseTag;

              case setCtorString:
                return setTag$2;

              case weakMapCtorString:
                return weakMapTag$1;
            }
          }

          return result;
        };
      }

      var _getTag = getTag;

      /** Used to compose bitmasks for value comparisons. */

      var COMPARE_PARTIAL_FLAG$3 = 1;
      /** `Object#toString` result references. */

      var argsTag$2 = '[object Arguments]',
          arrayTag$1 = '[object Array]',
          objectTag$3 = '[object Object]';
      /** Used for built-in method references. */

      var objectProto$d = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty$a = objectProto$d.hasOwnProperty;
      /**
       * A specialized version of `baseIsEqual` for arrays and objects which performs
       * deep comparisons and tracks traversed objects enabling objects with circular
       * references to be compared.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} [stack] Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */

      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray_1(object),
            othIsArr = isArray_1(other),
            objTag = objIsArr ? arrayTag$1 : _getTag(object),
            othTag = othIsArr ? arrayTag$1 : _getTag(other);
        objTag = objTag == argsTag$2 ? objectTag$3 : objTag;
        othTag = othTag == argsTag$2 ? objectTag$3 : othTag;
        var objIsObj = objTag == objectTag$3,
            othIsObj = othTag == objectTag$3,
            isSameTag = objTag == othTag;

        if (isSameTag && isBuffer_1(object)) {
          if (!isBuffer_1(other)) {
            return false;
          }

          objIsArr = true;
          objIsObj = false;
        }

        if (isSameTag && !objIsObj) {
          stack || (stack = new _Stack());
          return objIsArr || isTypedArray_1(object) ? _equalArrays(object, other, bitmask, customizer, equalFunc, stack) : _equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }

        if (!(bitmask & COMPARE_PARTIAL_FLAG$3)) {
          var objIsWrapped = objIsObj && hasOwnProperty$a.call(object, '__wrapped__'),
              othIsWrapped = othIsObj && hasOwnProperty$a.call(other, '__wrapped__');

          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new _Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }

        if (!isSameTag) {
          return false;
        }

        stack || (stack = new _Stack());
        return _equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }

      var _baseIsEqualDeep = baseIsEqualDeep;

      /**
       * The base implementation of `_.isEqual` which supports partial comparisons
       * and tracks traversed objects.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Unordered comparison
       *  2 - Partial comparison
       * @param {Function} [customizer] The function to customize comparisons.
       * @param {Object} [stack] Tracks traversed `value` and `other` objects.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       */

      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }

        if (value == null || other == null || !isObjectLike_1(value) && !isObjectLike_1(other)) {
          return value !== value && other !== other;
        }

        return _baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }

      var _baseIsEqual = baseIsEqual;

      /** Used to compose bitmasks for value comparisons. */

      var COMPARE_PARTIAL_FLAG$4 = 1,
          COMPARE_UNORDERED_FLAG$2 = 2;
      /**
       * The base implementation of `_.isMatch` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Array} matchData The property names, values, and compare flags to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       */

      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

        if (object == null) {
          return !length;
        }

        object = Object(object);

        while (index--) {
          var data = matchData[index];

          if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
            return false;
          }
        }

        while (++index < length) {
          data = matchData[index];
          var key = data[0],
              objValue = object[key],
              srcValue = data[1];

          if (noCustomizer && data[2]) {
            if (objValue === undefined && !(key in object)) {
              return false;
            }
          } else {
            var stack = new _Stack();

            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }

            if (!(result === undefined ? _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$4 | COMPARE_UNORDERED_FLAG$2, customizer, stack) : result)) {
              return false;
            }
          }
        }

        return true;
      }

      var _baseIsMatch = baseIsMatch;

      /**
       * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` if suitable for strict
       *  equality comparisons, else `false`.
       */

      function isStrictComparable(value) {
        return value === value && !isObject_1(value);
      }

      var _isStrictComparable = isStrictComparable;

      /**
       * Gets the property names, values, and compare flags of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the match data of `object`.
       */

      function getMatchData(object) {
        var result = keys_1(object),
            length = result.length;

        while (length--) {
          var key = result[length],
              value = object[key];
          result[length] = [key, value, _isStrictComparable(value)];
        }

        return result;
      }

      var _getMatchData = getMatchData;

      /**
       * A specialized version of `matchesProperty` for source values suitable
       * for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {string} key The key of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */
      function matchesStrictComparable(key, srcValue) {
        return function (object) {
          if (object == null) {
            return false;
          }

          return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
        };
      }

      var _matchesStrictComparable = matchesStrictComparable;

      /**
       * The base implementation of `_.matches` which doesn't clone `source`.
       *
       * @private
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new spec function.
       */

      function baseMatches(source) {
        var matchData = _getMatchData(source);

        if (matchData.length == 1 && matchData[0][2]) {
          return _matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }

        return function (object) {
          return object === source || _baseIsMatch(object, source, matchData);
        };
      }

      var _baseMatches = baseMatches;

      /**
       * The base implementation of `_.get` without support for default values.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @returns {*} Returns the resolved value.
       */

      function baseGet(object, path) {
        path = _castPath(path, object);
        var index = 0,
            length = path.length;

        while (object != null && index < length) {
          object = object[_toKey(path[index++])];
        }

        return index && index == length ? object : undefined;
      }

      var _baseGet = baseGet;

      /**
       * Gets the value at `path` of `object`. If the resolved value is
       * `undefined`, the `defaultValue` is returned in its place.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.get(object, 'a[0].b.c');
       * // => 3
       *
       * _.get(object, ['a', '0', 'b', 'c']);
       * // => 3
       *
       * _.get(object, 'a.b.c', 'default');
       * // => 'default'
       */

      function get(object, path, defaultValue) {
        var result = object == null ? undefined : _baseGet(object, path);
        return result === undefined ? defaultValue : result;
      }

      var get_1 = get;

      /**
       * The base implementation of `_.hasIn` without support for deep paths.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {Array|string} key The key to check.
       * @returns {boolean} Returns `true` if `key` exists, else `false`.
       */
      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }

      var _baseHasIn = baseHasIn;

      /**
       * Checks if `path` exists on `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @param {Function} hasFunc The function to check properties.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       */

      function hasPath(object, path, hasFunc) {
        path = _castPath(path, object);
        var index = -1,
            length = path.length,
            result = false;

        while (++index < length) {
          var key = _toKey(path[index]);

          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }

          object = object[key];
        }

        if (result || ++index != length) {
          return result;
        }

        length = object == null ? 0 : object.length;
        return !!length && isLength_1(length) && _isIndex(key, length) && (isArray_1(object) || isArguments_1(object));
      }

      var _hasPath = hasPath;

      /**
       * Checks if `path` is a direct or inherited property of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       * @example
       *
       * var object = _.create({ 'a': _.create({ 'b': 2 }) });
       *
       * _.hasIn(object, 'a');
       * // => true
       *
       * _.hasIn(object, 'a.b');
       * // => true
       *
       * _.hasIn(object, ['a', 'b']);
       * // => true
       *
       * _.hasIn(object, 'b');
       * // => false
       */

      function hasIn(object, path) {
        return object != null && _hasPath(object, path, _baseHasIn);
      }

      var hasIn_1 = hasIn;

      /** Used to compose bitmasks for value comparisons. */

      var COMPARE_PARTIAL_FLAG$5 = 1,
          COMPARE_UNORDERED_FLAG$3 = 2;
      /**
       * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
       *
       * @private
       * @param {string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */

      function baseMatchesProperty(path, srcValue) {
        if (_isKey(path) && _isStrictComparable(srcValue)) {
          return _matchesStrictComparable(_toKey(path), srcValue);
        }

        return function (object) {
          var objValue = get_1(object, path);
          return objValue === undefined && objValue === srcValue ? hasIn_1(object, path) : _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$5 | COMPARE_UNORDERED_FLAG$3);
        };
      }

      var _baseMatchesProperty = baseMatchesProperty;

      /**
       * The base implementation of `_.property` without support for deep paths.
       *
       * @private
       * @param {string} key The key of the property to get.
       * @returns {Function} Returns the new accessor function.
       */
      function baseProperty(key) {
        return function (object) {
          return object == null ? undefined : object[key];
        };
      }

      var _baseProperty = baseProperty;

      /**
       * A specialized version of `baseProperty` which supports deep paths.
       *
       * @private
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       */

      function basePropertyDeep(path) {
        return function (object) {
          return _baseGet(object, path);
        };
      }

      var _basePropertyDeep = basePropertyDeep;

      /**
       * Creates a function that returns the value at `path` of a given object.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': 2 } },
       *   { 'a': { 'b': 1 } }
       * ];
       *
       * _.map(objects, _.property('a.b'));
       * // => [2, 1]
       *
       * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
       * // => [1, 2]
       */

      function property(path) {
        return _isKey(path) ? _baseProperty(_toKey(path)) : _basePropertyDeep(path);
      }

      var property_1 = property;

      /**
       * The base implementation of `_.iteratee`.
       *
       * @private
       * @param {*} [value=_.identity] The value to convert to an iteratee.
       * @returns {Function} Returns the iteratee.
       */

      function baseIteratee(value) {
        // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
        // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
        if (typeof value == 'function') {
          return value;
        }

        if (value == null) {
          return identity_1;
        }

        if (typeof value == 'object') {
          return isArray_1(value) ? _baseMatchesProperty(value[0], value[1]) : _baseMatches(value);
        }

        return property_1(value);
      }

      var _baseIteratee = baseIteratee;

      /**
       * Creates a `baseEach` or `baseEachRight` function.
       *
       * @private
       * @param {Function} eachFunc The function to iterate over a collection.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */

      function createBaseEach(eachFunc, fromRight) {
        return function (collection, iteratee) {
          if (collection == null) {
            return collection;
          }

          if (!isArrayLike_1(collection)) {
            return eachFunc(collection, iteratee);
          }

          var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object(collection);

          while (fromRight ? index-- : ++index < length) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }

          return collection;
        };
      }

      var _createBaseEach = createBaseEach;

      /**
       * The base implementation of `_.forEach` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */

      var baseEach = _createBaseEach(_baseForOwn);
      var _baseEach = baseEach;

      /**
       * The base implementation of `_.map` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */

      function baseMap(collection, iteratee) {
        var index = -1,
            result = isArrayLike_1(collection) ? Array(collection.length) : [];
        _baseEach(collection, function (value, key, collection) {
          result[++index] = iteratee(value, key, collection);
        });
        return result;
      }

      var _baseMap = baseMap;

      /**
       * Creates an array of values by running each element in `collection` thru
       * `iteratee`. The iteratee is invoked with three arguments:
       * (value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
       *
       * The guarded methods are:
       * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
       * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
       * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
       * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * _.map([4, 8], square);
       * // => [16, 64]
       *
       * _.map({ 'a': 4, 'b': 8 }, square);
       * // => [16, 64] (iteration order is not guaranteed)
       *
       * var users = [
       *   { 'user': 'barney' },
       *   { 'user': 'fred' }
       * ];
       *
       * // The `_.property` iteratee shorthand.
       * _.map(users, 'user');
       * // => ['barney', 'fred']
       */

      function map(collection, iteratee) {
        var func = isArray_1(collection) ? _arrayMap : _baseMap;
        return func(collection, _baseIteratee(iteratee));
      }

      var map_1 = map;

      var flattenNames_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.flattenNames = undefined;

        var _isString3 = _interopRequireDefault(isString_1);

        var _forOwn3 = _interopRequireDefault(forOwn_1);

        var _isPlainObject3 = _interopRequireDefault(isPlainObject_1);

        var _map3 = _interopRequireDefault(map_1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var flattenNames = exports.flattenNames = function flattenNames() {
          var things = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          var names = [];
          (0, _map3.default)(things, function (thing) {
            if (Array.isArray(thing)) {
              flattenNames(thing).map(function (name) {
                return names.push(name);
              });
            } else if ((0, _isPlainObject3.default)(thing)) {
              (0, _forOwn3.default)(thing, function (value, key) {
                value === true && names.push(key);
                names.push(key + '-' + value);
              });
            } else if ((0, _isString3.default)(thing)) {
              names.push(thing);
            }
          });
          return names;
        };

        exports.default = flattenNames;
      });

      /**
       * A specialized version of `_.forEach` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns `array`.
       */
      function arrayEach(array, iteratee) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }

        return array;
      }

      var _arrayEach = arrayEach;

      /**
       * Copies properties of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy properties from.
       * @param {Array} props The property identifiers to copy.
       * @param {Object} [object={}] The object to copy properties to.
       * @param {Function} [customizer] The function to customize copied values.
       * @returns {Object} Returns `object`.
       */

      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

          if (newValue === undefined) {
            newValue = source[key];
          }

          if (isNew) {
            _baseAssignValue(object, key, newValue);
          } else {
            _assignValue(object, key, newValue);
          }
        }

        return object;
      }

      var _copyObject = copyObject;

      /**
       * The base implementation of `_.assign` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */

      function baseAssign(object, source) {
        return object && _copyObject(source, keys_1(source), object);
      }

      var _baseAssign = baseAssign;

      /**
       * This function is like
       * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * except that it includes inherited enumerable properties.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function nativeKeysIn(object) {
        var result = [];

        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }

        return result;
      }

      var _nativeKeysIn = nativeKeysIn;

      /** Used for built-in method references. */

      var objectProto$e = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty$b = objectProto$e.hasOwnProperty;
      /**
       * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */

      function baseKeysIn(object) {
        if (!isObject_1(object)) {
          return _nativeKeysIn(object);
        }

        var isProto = _isPrototype(object),
            result = [];

        for (var key in object) {
          if (!(key == 'constructor' && (isProto || !hasOwnProperty$b.call(object, key)))) {
            result.push(key);
          }
        }

        return result;
      }

      var _baseKeysIn = baseKeysIn;

      /**
       * Creates an array of the own and inherited enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keysIn(new Foo);
       * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
       */

      function keysIn$1(object) {
        return isArrayLike_1(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);
      }

      var keysIn_1 = keysIn$1;

      /**
       * The base implementation of `_.assignIn` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */

      function baseAssignIn(object, source) {
        return object && _copyObject(source, keysIn_1(source), object);
      }

      var _baseAssignIn = baseAssignIn;

      var _cloneBuffer = createCommonjsModule(function (module, exports) {
        /** Detect free variable `exports`. */
        var freeExports =  exports && !exports.nodeType && exports;
        /** Detect free variable `module`. */

        var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
        /** Detect the popular CommonJS extension `module.exports`. */

        var moduleExports = freeModule && freeModule.exports === freeExports;
        /** Built-in value references. */

        var Buffer = moduleExports ? _root.Buffer : undefined,
            allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
        /**
         * Creates a clone of  `buffer`.
         *
         * @private
         * @param {Buffer} buffer The buffer to clone.
         * @param {boolean} [isDeep] Specify a deep clone.
         * @returns {Buffer} Returns the cloned buffer.
         */

        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }

          var length = buffer.length,
              result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result);
          return result;
        }

        module.exports = cloneBuffer;
      });

      /**
       * Copies the values of `source` to `array`.
       *
       * @private
       * @param {Array} source The array to copy values from.
       * @param {Array} [array=[]] The array to copy values to.
       * @returns {Array} Returns `array`.
       */
      function copyArray(source, array) {
        var index = -1,
            length = source.length;
        array || (array = Array(length));

        while (++index < length) {
          array[index] = source[index];
        }

        return array;
      }

      var _copyArray = copyArray;

      /**
       * Copies own symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */

      function copySymbols(source, object) {
        return _copyObject(source, _getSymbols(source), object);
      }

      var _copySymbols = copySymbols;

      /* Built-in method references for those with the same name as other `lodash` methods. */

      var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
      /**
       * Creates an array of the own and inherited enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */

      var getSymbolsIn = !nativeGetSymbols$1 ? stubArray_1 : function (object) {
        var result = [];

        while (object) {
          _arrayPush(result, _getSymbols(object));
          object = _getPrototype(object);
        }

        return result;
      };
      var _getSymbolsIn = getSymbolsIn;

      /**
       * Copies own and inherited symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */

      function copySymbolsIn(source, object) {
        return _copyObject(source, _getSymbolsIn(source), object);
      }

      var _copySymbolsIn = copySymbolsIn;

      /**
       * Creates an array of own and inherited enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */

      function getAllKeysIn(object) {
        return _baseGetAllKeys(object, keysIn_1, _getSymbolsIn);
      }

      var _getAllKeysIn = getAllKeysIn;

      /** Used for built-in method references. */
      var objectProto$f = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty$c = objectProto$f.hasOwnProperty;
      /**
       * Initializes an array clone.
       *
       * @private
       * @param {Array} array The array to clone.
       * @returns {Array} Returns the initialized clone.
       */

      function initCloneArray(array) {
        var length = array.length,
            result = new array.constructor(length); // Add properties assigned by `RegExp#exec`.

        if (length && typeof array[0] == 'string' && hasOwnProperty$c.call(array, 'index')) {
          result.index = array.index;
          result.input = array.input;
        }

        return result;
      }

      var _initCloneArray = initCloneArray;

      /**
       * Creates a clone of `arrayBuffer`.
       *
       * @private
       * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
       * @returns {ArrayBuffer} Returns the cloned array buffer.
       */

      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));
        return result;
      }

      var _cloneArrayBuffer = cloneArrayBuffer;

      /**
       * Creates a clone of `dataView`.
       *
       * @private
       * @param {Object} dataView The data view to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned data view.
       */

      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? _cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }

      var _cloneDataView = cloneDataView;

      /** Used to match `RegExp` flags from their coerced string values. */
      var reFlags = /\w*$/;
      /**
       * Creates a clone of `regexp`.
       *
       * @private
       * @param {Object} regexp The regexp to clone.
       * @returns {Object} Returns the cloned regexp.
       */

      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }

      var _cloneRegExp = cloneRegExp;

      /** Used to convert symbols to primitives and strings. */

      var symbolProto$2 = _Symbol ? _Symbol.prototype : undefined,
          symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;
      /**
       * Creates a clone of the `symbol` object.
       *
       * @private
       * @param {Object} symbol The symbol object to clone.
       * @returns {Object} Returns the cloned symbol object.
       */

      function cloneSymbol(symbol) {
        return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
      }

      var _cloneSymbol = cloneSymbol;

      /**
       * Creates a clone of `typedArray`.
       *
       * @private
       * @param {Object} typedArray The typed array to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned typed array.
       */

      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }

      var _cloneTypedArray = cloneTypedArray;

      /** `Object#toString` result references. */

      var boolTag$2 = '[object Boolean]',
          dateTag$2 = '[object Date]',
          mapTag$3 = '[object Map]',
          numberTag$2 = '[object Number]',
          regexpTag$2 = '[object RegExp]',
          setTag$3 = '[object Set]',
          stringTag$3 = '[object String]',
          symbolTag$2 = '[object Symbol]';
      var arrayBufferTag$2 = '[object ArrayBuffer]',
          dataViewTag$3 = '[object DataView]',
          float32Tag$1 = '[object Float32Array]',
          float64Tag$1 = '[object Float64Array]',
          int8Tag$1 = '[object Int8Array]',
          int16Tag$1 = '[object Int16Array]',
          int32Tag$1 = '[object Int32Array]',
          uint8Tag$1 = '[object Uint8Array]',
          uint8ClampedTag$1 = '[object Uint8ClampedArray]',
          uint16Tag$1 = '[object Uint16Array]',
          uint32Tag$1 = '[object Uint32Array]';
      /**
       * Initializes an object clone based on its `toStringTag`.
       *
       * **Note:** This function only supports cloning values with tags of
       * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
       *
       * @private
       * @param {Object} object The object to clone.
       * @param {string} tag The `toStringTag` of the object to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the initialized clone.
       */

      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;

        switch (tag) {
          case arrayBufferTag$2:
            return _cloneArrayBuffer(object);

          case boolTag$2:
          case dateTag$2:
            return new Ctor(+object);

          case dataViewTag$3:
            return _cloneDataView(object, isDeep);

          case float32Tag$1:
          case float64Tag$1:
          case int8Tag$1:
          case int16Tag$1:
          case int32Tag$1:
          case uint8Tag$1:
          case uint8ClampedTag$1:
          case uint16Tag$1:
          case uint32Tag$1:
            return _cloneTypedArray(object, isDeep);

          case mapTag$3:
            return new Ctor();

          case numberTag$2:
          case stringTag$3:
            return new Ctor(object);

          case regexpTag$2:
            return _cloneRegExp(object);

          case setTag$3:
            return new Ctor();

          case symbolTag$2:
            return _cloneSymbol(object);
        }
      }

      var _initCloneByTag = initCloneByTag;

      /** Built-in value references. */

      var objectCreate = Object.create;
      /**
       * The base implementation of `_.create` without support for assigning
       * properties to the created object.
       *
       * @private
       * @param {Object} proto The object to inherit from.
       * @returns {Object} Returns the new object.
       */

      var baseCreate = function () {
        function object() {}

        return function (proto) {
          if (!isObject_1(proto)) {
            return {};
          }

          if (objectCreate) {
            return objectCreate(proto);
          }

          object.prototype = proto;
          var result = new object();
          object.prototype = undefined;
          return result;
        };
      }();

      var _baseCreate = baseCreate;

      /**
       * Initializes an object clone.
       *
       * @private
       * @param {Object} object The object to clone.
       * @returns {Object} Returns the initialized clone.
       */

      function initCloneObject(object) {
        return typeof object.constructor == 'function' && !_isPrototype(object) ? _baseCreate(_getPrototype(object)) : {};
      }

      var _initCloneObject = initCloneObject;

      /** `Object#toString` result references. */

      var mapTag$4 = '[object Map]';
      /**
       * The base implementation of `_.isMap` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       */

      function baseIsMap(value) {
        return isObjectLike_1(value) && _getTag(value) == mapTag$4;
      }

      var _baseIsMap = baseIsMap;

      /* Node.js helper references. */

      var nodeIsMap = _nodeUtil && _nodeUtil.isMap;
      /**
       * Checks if `value` is classified as a `Map` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       * @example
       *
       * _.isMap(new Map);
       * // => true
       *
       * _.isMap(new WeakMap);
       * // => false
       */

      var isMap = nodeIsMap ? _baseUnary(nodeIsMap) : _baseIsMap;
      var isMap_1 = isMap;

      /** `Object#toString` result references. */

      var setTag$4 = '[object Set]';
      /**
       * The base implementation of `_.isSet` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       */

      function baseIsSet(value) {
        return isObjectLike_1(value) && _getTag(value) == setTag$4;
      }

      var _baseIsSet = baseIsSet;

      /* Node.js helper references. */

      var nodeIsSet = _nodeUtil && _nodeUtil.isSet;
      /**
       * Checks if `value` is classified as a `Set` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       * @example
       *
       * _.isSet(new Set);
       * // => true
       *
       * _.isSet(new WeakSet);
       * // => false
       */

      var isSet = nodeIsSet ? _baseUnary(nodeIsSet) : _baseIsSet;
      var isSet_1 = isSet;

      /** Used to compose bitmasks for cloning. */

      var CLONE_DEEP_FLAG = 1,
          CLONE_FLAT_FLAG = 2,
          CLONE_SYMBOLS_FLAG = 4;
      /** `Object#toString` result references. */

      var argsTag$3 = '[object Arguments]',
          arrayTag$2 = '[object Array]',
          boolTag$3 = '[object Boolean]',
          dateTag$3 = '[object Date]',
          errorTag$2 = '[object Error]',
          funcTag$2 = '[object Function]',
          genTag$1 = '[object GeneratorFunction]',
          mapTag$5 = '[object Map]',
          numberTag$3 = '[object Number]',
          objectTag$4 = '[object Object]',
          regexpTag$3 = '[object RegExp]',
          setTag$5 = '[object Set]',
          stringTag$4 = '[object String]',
          symbolTag$3 = '[object Symbol]',
          weakMapTag$2 = '[object WeakMap]';
      var arrayBufferTag$3 = '[object ArrayBuffer]',
          dataViewTag$4 = '[object DataView]',
          float32Tag$2 = '[object Float32Array]',
          float64Tag$2 = '[object Float64Array]',
          int8Tag$2 = '[object Int8Array]',
          int16Tag$2 = '[object Int16Array]',
          int32Tag$2 = '[object Int32Array]',
          uint8Tag$2 = '[object Uint8Array]',
          uint8ClampedTag$2 = '[object Uint8ClampedArray]',
          uint16Tag$2 = '[object Uint16Array]',
          uint32Tag$2 = '[object Uint32Array]';
      /** Used to identify `toStringTag` values supported by `_.clone`. */

      var cloneableTags = {};
      cloneableTags[argsTag$3] = cloneableTags[arrayTag$2] = cloneableTags[arrayBufferTag$3] = cloneableTags[dataViewTag$4] = cloneableTags[boolTag$3] = cloneableTags[dateTag$3] = cloneableTags[float32Tag$2] = cloneableTags[float64Tag$2] = cloneableTags[int8Tag$2] = cloneableTags[int16Tag$2] = cloneableTags[int32Tag$2] = cloneableTags[mapTag$5] = cloneableTags[numberTag$3] = cloneableTags[objectTag$4] = cloneableTags[regexpTag$3] = cloneableTags[setTag$5] = cloneableTags[stringTag$4] = cloneableTags[symbolTag$3] = cloneableTags[uint8Tag$2] = cloneableTags[uint8ClampedTag$2] = cloneableTags[uint16Tag$2] = cloneableTags[uint32Tag$2] = true;
      cloneableTags[errorTag$2] = cloneableTags[funcTag$2] = cloneableTags[weakMapTag$2] = false;
      /**
       * The base implementation of `_.clone` and `_.cloneDeep` which tracks
       * traversed objects.
       *
       * @private
       * @param {*} value The value to clone.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Deep clone
       *  2 - Flatten inherited properties
       *  4 - Clone symbols
       * @param {Function} [customizer] The function to customize cloning.
       * @param {string} [key] The key of `value`.
       * @param {Object} [object] The parent object of `value`.
       * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
       * @returns {*} Returns the cloned value.
       */

      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;

        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }

        if (result !== undefined) {
          return result;
        }

        if (!isObject_1(value)) {
          return value;
        }

        var isArr = isArray_1(value);

        if (isArr) {
          result = _initCloneArray(value);

          if (!isDeep) {
            return _copyArray(value, result);
          }
        } else {
          var tag = _getTag(value),
              isFunc = tag == funcTag$2 || tag == genTag$1;

          if (isBuffer_1(value)) {
            return _cloneBuffer(value, isDeep);
          }

          if (tag == objectTag$4 || tag == argsTag$3 || isFunc && !object) {
            result = isFlat || isFunc ? {} : _initCloneObject(value);

            if (!isDeep) {
              return isFlat ? _copySymbolsIn(value, _baseAssignIn(result, value)) : _copySymbols(value, _baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }

            result = _initCloneByTag(value, tag, isDeep);
          }
        } // Check for circular references and return its corresponding clone.


        stack || (stack = new _Stack());
        var stacked = stack.get(value);

        if (stacked) {
          return stacked;
        }

        stack.set(value, result);

        if (isSet_1(value)) {
          value.forEach(function (subValue) {
            result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });
        } else if (isMap_1(value)) {
          value.forEach(function (subValue, key) {
            result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
          });
        }

        var keysFunc = isFull ? isFlat ? _getAllKeysIn : _getAllKeys : isFlat ? keysIn : keys_1;
        var props = isArr ? undefined : keysFunc(value);
        _arrayEach(props || value, function (subValue, key) {
          if (props) {
            key = subValue;
            subValue = value[key];
          } // Recursively populate clone (susceptible to call stack limits).


          _assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
        return result;
      }

      var _baseClone = baseClone;

      /** Used to compose bitmasks for cloning. */

      var CLONE_DEEP_FLAG$1 = 1,
          CLONE_SYMBOLS_FLAG$1 = 4;
      /**
       * This method is like `_.clone` except that it recursively clones `value`.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Lang
       * @param {*} value The value to recursively clone.
       * @returns {*} Returns the deep cloned value.
       * @see _.clone
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var deep = _.cloneDeep(objects);
       * console.log(deep[0] === objects[0]);
       * // => false
       */

      function cloneDeep(value) {
        return _baseClone(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$1);
      }

      var cloneDeep_1 = cloneDeep;

      var mergeClasses_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.mergeClasses = undefined;

        var _forOwn3 = _interopRequireDefault(forOwn_1);

        var _cloneDeep3 = _interopRequireDefault(cloneDeep_1);

        var _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var mergeClasses = exports.mergeClasses = function mergeClasses(classes) {
          var activeNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
          var styles = classes.default && (0, _cloneDeep3.default)(classes.default) || {};
          activeNames.map(function (name) {
            var toMerge = classes[name];

            if (toMerge) {
              (0, _forOwn3.default)(toMerge, function (value, key) {
                if (!styles[key]) {
                  styles[key] = {};
                }

                styles[key] = _extends({}, styles[key], toMerge[key]);
              });
            }

            return name;
          });
          return styles;
        };

        exports.default = mergeClasses;
      });

      var autoprefix_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.autoprefix = undefined;

        var _forOwn3 = _interopRequireDefault(forOwn_1);

        var _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var transforms = {
          borderRadius: function borderRadius(value) {
            return {
              msBorderRadius: value,
              MozBorderRadius: value,
              OBorderRadius: value,
              WebkitBorderRadius: value,
              borderRadius: value
            };
          },
          boxShadow: function boxShadow(value) {
            return {
              msBoxShadow: value,
              MozBoxShadow: value,
              OBoxShadow: value,
              WebkitBoxShadow: value,
              boxShadow: value
            };
          },
          userSelect: function userSelect(value) {
            return {
              WebkitTouchCallout: value,
              KhtmlUserSelect: value,
              MozUserSelect: value,
              msUserSelect: value,
              WebkitUserSelect: value,
              userSelect: value
            };
          },
          flex: function flex(value) {
            return {
              WebkitBoxFlex: value,
              MozBoxFlex: value,
              WebkitFlex: value,
              msFlex: value,
              flex: value
            };
          },
          flexBasis: function flexBasis(value) {
            return {
              WebkitFlexBasis: value,
              flexBasis: value
            };
          },
          justifyContent: function justifyContent(value) {
            return {
              WebkitJustifyContent: value,
              justifyContent: value
            };
          },
          transition: function transition(value) {
            return {
              msTransition: value,
              MozTransition: value,
              OTransition: value,
              WebkitTransition: value,
              transition: value
            };
          },
          transform: function transform(value) {
            return {
              msTransform: value,
              MozTransform: value,
              OTransform: value,
              WebkitTransform: value,
              transform: value
            };
          },
          absolute: function absolute(value) {
            var direction = value && value.split(' ');
            return {
              position: 'absolute',
              top: direction && direction[0],
              right: direction && direction[1],
              bottom: direction && direction[2],
              left: direction && direction[3]
            };
          },
          extend: function extend(name, otherElementStyles) {
            var otherStyle = otherElementStyles[name];

            if (otherStyle) {
              return otherStyle;
            }

            return {
              'extend': name
            };
          }
        };

        var autoprefix = exports.autoprefix = function autoprefix(elements) {
          var prefixed = {};
          (0, _forOwn3.default)(elements, function (styles, element) {
            var expanded = {};
            (0, _forOwn3.default)(styles, function (value, key) {
              var transform = transforms[key];

              if (transform) {
                expanded = _extends({}, expanded, transform(value));
              } else {
                expanded[key] = value;
              }
            });
            prefixed[element] = expanded;
          });
          return prefixed;
        };

        exports.default = autoprefix;
      });

      var hover_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.hover = undefined;

        var _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        var _react2 = _interopRequireDefault(React);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }

          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        var hover = exports.hover = function hover(Component) {
          var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'span';
          return function (_React$Component) {
            _inherits(Hover, _React$Component);

            function Hover() {
              var _ref;

              var _temp, _this, _ret;

              _classCallCheck(this, Hover);

              for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Hover.__proto__ || Object.getPrototypeOf(Hover)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                hover: false
              }, _this.handleMouseOver = function () {
                return _this.setState({
                  hover: true
                });
              }, _this.handleMouseOut = function () {
                return _this.setState({
                  hover: false
                });
              }, _this.render = function () {
                return _react2.default.createElement(Span, {
                  onMouseOver: _this.handleMouseOver,
                  onMouseOut: _this.handleMouseOut
                }, _react2.default.createElement(Component, _extends({}, _this.props, _this.state)));
              }, _temp), _possibleConstructorReturn(_this, _ret);
            }

            return Hover;
          }(_react2.default.Component);
        };

        exports.default = hover;
      });

      var active_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.active = undefined;

        var _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        var _react2 = _interopRequireDefault(React);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }

          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        var active = exports.active = function active(Component) {
          var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'span';
          return function (_React$Component) {
            _inherits(Active, _React$Component);

            function Active() {
              var _ref;

              var _temp, _this, _ret;

              _classCallCheck(this, Active);

              for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Active.__proto__ || Object.getPrototypeOf(Active)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                active: false
              }, _this.handleMouseDown = function () {
                return _this.setState({
                  active: true
                });
              }, _this.handleMouseUp = function () {
                return _this.setState({
                  active: false
                });
              }, _this.render = function () {
                return _react2.default.createElement(Span, {
                  onMouseDown: _this.handleMouseDown,
                  onMouseUp: _this.handleMouseUp
                }, _react2.default.createElement(Component, _extends({}, _this.props, _this.state)));
              }, _temp), _possibleConstructorReturn(_this, _ret);
            }

            return Active;
          }(_react2.default.Component);
        };

        exports.default = active;
      });

      var loop = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var loopable = function loopable(i, length) {
          var props = {};

          var setProp = function setProp(name) {
            var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            props[name] = value;
          };

          i === 0 && setProp('first-child');
          i === length - 1 && setProp('last-child');
          (i === 0 || i % 2 === 0) && setProp('even');
          Math.abs(i % 2) === 1 && setProp('odd');
          setProp('nth-child', i);
          return props;
        };

        exports.default = loopable;
        module.exports = exports.default;
        module.exports.default = exports.default;
      });

      var lib$1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ReactCSS = exports.loop = exports.handleActive = exports.handleHover = exports.hover = undefined;

        var _flattenNames2 = _interopRequireDefault(flattenNames_1);

        var _mergeClasses2 = _interopRequireDefault(mergeClasses_1);

        var _autoprefix2 = _interopRequireDefault(autoprefix_1);

        var _hover3 = _interopRequireDefault(hover_1);

        var _active2 = _interopRequireDefault(active_1);

        var _loop3 = _interopRequireDefault(loop);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        exports.hover = _hover3.default;
        exports.handleHover = _hover3.default;
        exports.handleActive = _active2.default;
        exports.loop = _loop3.default;

        var ReactCSS = exports.ReactCSS = function ReactCSS(classes) {
          for (var _len = arguments.length, activations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            activations[_key - 1] = arguments[_key];
          }

          var activeNames = (0, _flattenNames2.default)(activations);
          var merged = (0, _mergeClasses2.default)(classes, activeNames);
          return (0, _autoprefix2.default)(merged);
        };

        exports.default = ReactCSS;
      });

      var alpha = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var calculateChange = exports.calculateChange = function calculateChange(e, hsl, direction, initialA, container) {
          var containerWidth = container.clientWidth;
          var containerHeight = container.clientHeight;
          var x = typeof e.pageX === 'number' ? e.pageX : e.touches[0].pageX;
          var y = typeof e.pageY === 'number' ? e.pageY : e.touches[0].pageY;
          var left = x - (container.getBoundingClientRect().left + window.pageXOffset);
          var top = y - (container.getBoundingClientRect().top + window.pageYOffset);

          if (direction === 'vertical') {
            var a = void 0;

            if (top < 0) {
              a = 0;
            } else if (top > containerHeight) {
              a = 1;
            } else {
              a = Math.round(top * 100 / containerHeight) / 100;
            }

            if (hsl.a !== a) {
              return {
                h: hsl.h,
                s: hsl.s,
                l: hsl.l,
                a: a,
                source: 'rgb'
              };
            }
          } else {
            var _a = void 0;

            if (left < 0) {
              _a = 0;
            } else if (left > containerWidth) {
              _a = 1;
            } else {
              _a = Math.round(left * 100 / containerWidth) / 100;
            }

            if (initialA !== _a) {
              return {
                h: hsl.h,
                s: hsl.s,
                l: hsl.l,
                a: _a,
                source: 'rgb'
              };
            }
          }

          return null;
        };
      });

      var checkboard = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var checkboardCache = {};

        var render = exports.render = function render(c1, c2, size, serverCanvas) {
          if (typeof document === 'undefined' && !serverCanvas) {
            return null;
          }

          var canvas = serverCanvas ? new serverCanvas() : document.createElement('canvas');
          canvas.width = size * 2;
          canvas.height = size * 2;
          var ctx = canvas.getContext('2d');

          if (!ctx) {
            return null;
          } // If no context can be found, return early.


          ctx.fillStyle = c1;
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          ctx.fillStyle = c2;
          ctx.fillRect(0, 0, size, size);
          ctx.translate(size, size);
          ctx.fillRect(0, 0, size, size);
          return canvas.toDataURL();
        };

        var get = exports.get = function get(c1, c2, size, serverCanvas) {
          var key = c1 + '-' + c2 + '-' + size + (serverCanvas ? '-server' : '');

          if (checkboardCache[key]) {
            return checkboardCache[key];
          }

          var checkboard = render(c1, c2, size, serverCanvas);
          checkboardCache[key] = checkboard;
          return checkboard;
        };
      });

      var Checkboard_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Checkboard = undefined;

        var _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var checkboard$1 = _interopRequireWildcard(checkboard);

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var Checkboard = exports.Checkboard = function Checkboard(_ref) {
          var white = _ref.white,
              grey = _ref.grey,
              size = _ref.size,
              renderers = _ref.renderers,
              borderRadius = _ref.borderRadius,
              boxShadow = _ref.boxShadow,
              children = _ref.children;
          var styles = (0, _reactcss2.default)({
            'default': {
              grid: {
                borderRadius: borderRadius,
                boxShadow: boxShadow,
                absolute: '0px 0px 0px 0px',
                background: 'url(' + checkboard$1.get(white, grey, size, renderers.canvas) + ') center left'
              }
            }
          });
          return (0, React.isValidElement)(children) ? _react2.default.cloneElement(children, _extends({}, children.props, {
            style: _extends({}, children.props.style, styles.grid)
          })) : _react2.default.createElement('div', {
            style: styles.grid
          });
        };

        Checkboard.defaultProps = {
          size: 8,
          white: 'transparent',
          grey: 'rgba(0,0,0,.08)',
          renderers: {}
        };
        exports.default = Checkboard;
      });

      var Alpha_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Alpha = undefined;

        var _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        var _createClass = function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var alpha$1 = _interopRequireWildcard(alpha);

        var _Checkboard2 = _interopRequireDefault(Checkboard_1);

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }

          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        var Alpha = exports.Alpha = function (_ref) {
          _inherits(Alpha, _ref);

          function Alpha() {
            var _ref2;

            var _temp, _this, _ret;

            _classCallCheck(this, Alpha);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = Alpha.__proto__ || Object.getPrototypeOf(Alpha)).call.apply(_ref2, [this].concat(args))), _this), _this.handleChange = function (e) {
              var change = alpha$1.calculateChange(e, _this.props.hsl, _this.props.direction, _this.props.a, _this.container);
              change && typeof _this.props.onChange === 'function' && _this.props.onChange(change, e);
            }, _this.handleMouseDown = function (e) {
              _this.handleChange(e);

              window.addEventListener('mousemove', _this.handleChange);
              window.addEventListener('mouseup', _this.handleMouseUp);
            }, _this.handleMouseUp = function () {
              _this.unbindEventListeners();
            }, _this.unbindEventListeners = function () {
              window.removeEventListener('mousemove', _this.handleChange);
              window.removeEventListener('mouseup', _this.handleMouseUp);
            }, _temp), _possibleConstructorReturn(_this, _ret);
          }

          _createClass(Alpha, [{
            key: 'componentWillUnmount',
            value: function componentWillUnmount() {
              this.unbindEventListeners();
            }
          }, {
            key: 'render',
            value: function render() {
              var _this2 = this;

              var rgb = this.props.rgb;
              var styles = (0, _reactcss2.default)({
                'default': {
                  alpha: {
                    absolute: '0px 0px 0px 0px',
                    borderRadius: this.props.radius
                  },
                  checkboard: {
                    absolute: '0px 0px 0px 0px',
                    overflow: 'hidden',
                    borderRadius: this.props.radius
                  },
                  gradient: {
                    absolute: '0px 0px 0px 0px',
                    background: 'linear-gradient(to right, rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 0) 0%,\n           rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 1) 100%)',
                    boxShadow: this.props.shadow,
                    borderRadius: this.props.radius
                  },
                  container: {
                    position: 'relative',
                    height: '100%',
                    margin: '0 3px'
                  },
                  pointer: {
                    position: 'absolute',
                    left: rgb.a * 100 + '%'
                  },
                  slider: {
                    width: '4px',
                    borderRadius: '1px',
                    height: '8px',
                    boxShadow: '0 0 2px rgba(0, 0, 0, .6)',
                    background: '#fff',
                    marginTop: '1px',
                    transform: 'translateX(-2px)'
                  }
                },
                'vertical': {
                  gradient: {
                    background: 'linear-gradient(to bottom, rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 0) 0%,\n           rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 1) 100%)'
                  },
                  pointer: {
                    left: 0,
                    top: rgb.a * 100 + '%'
                  }
                },
                'overwrite': _extends({}, this.props.style)
              }, {
                vertical: this.props.direction === 'vertical',
                overwrite: true
              });
              return _react2.default.createElement('div', {
                style: styles.alpha
              }, _react2.default.createElement('div', {
                style: styles.checkboard
              }, _react2.default.createElement(_Checkboard2.default, {
                renderers: this.props.renderers
              })), _react2.default.createElement('div', {
                style: styles.gradient
              }), _react2.default.createElement('div', {
                style: styles.container,
                ref: function ref(container) {
                  return _this2.container = container;
                },
                onMouseDown: this.handleMouseDown,
                onTouchMove: this.handleChange,
                onTouchStart: this.handleChange
              }, _react2.default.createElement('div', {
                style: styles.pointer
              }, this.props.pointer ? _react2.default.createElement(this.props.pointer, this.props) : _react2.default.createElement('div', {
                style: styles.slider
              }))));
            }
          }]);

          return Alpha;
        }(React.PureComponent || React.Component);

        exports.default = Alpha;
      });

      var EditableInput_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.EditableInput = undefined;

        var _createClass = function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }

          return obj;
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }

          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        var DEFAULT_ARROW_OFFSET = 1;
        var UP_KEY_CODE = 38;
        var DOWN_KEY_CODE = 40;
        var VALID_KEY_CODES = [UP_KEY_CODE, DOWN_KEY_CODE];

        var isValidKeyCode = function isValidKeyCode(keyCode) {
          return VALID_KEY_CODES.indexOf(keyCode) > -1;
        };

        var getNumberValue = function getNumberValue(value) {
          return Number(String(value).replace(/%/g, ''));
        };

        var EditableInput = exports.EditableInput = function (_ref) {
          _inherits(EditableInput, _ref);

          function EditableInput(props) {
            _classCallCheck(this, EditableInput);

            var _this = _possibleConstructorReturn(this, (EditableInput.__proto__ || Object.getPrototypeOf(EditableInput)).call(this));

            _this.handleBlur = function () {
              if (_this.state.blurValue) {
                _this.setState({
                  value: _this.state.blurValue,
                  blurValue: null
                });
              }
            };

            _this.handleChange = function (e) {
              _this.setUpdatedValue(e.target.value, e);
            };

            _this.handleKeyDown = function (e) {
              // In case `e.target.value` is a percentage remove the `%` character
              // and update accordingly with a percentage
              // https://github.com/casesandberg/react-color/issues/383
              var value = getNumberValue(e.target.value);

              if (!isNaN(value) && isValidKeyCode(e.keyCode)) {
                var offset = _this.getArrowOffset();

                var updatedValue = e.keyCode === UP_KEY_CODE ? value + offset : value - offset;

                _this.setUpdatedValue(updatedValue, e);
              }
            };

            _this.handleDrag = function (e) {
              if (_this.props.dragLabel) {
                var newValue = Math.round(_this.props.value + e.movementX);

                if (newValue >= 0 && newValue <= _this.props.dragMax) {
                  _this.props.onChange && _this.props.onChange(_this.getValueObjectWithLabel(newValue), e);
                }
              }
            };

            _this.handleMouseDown = function (e) {
              if (_this.props.dragLabel) {
                e.preventDefault();

                _this.handleDrag(e);

                window.addEventListener('mousemove', _this.handleDrag);
                window.addEventListener('mouseup', _this.handleMouseUp);
              }
            };

            _this.handleMouseUp = function () {
              _this.unbindEventListeners();
            };

            _this.unbindEventListeners = function () {
              window.removeEventListener('mousemove', _this.handleDrag);
              window.removeEventListener('mouseup', _this.handleMouseUp);
            };

            _this.state = {
              value: String(props.value).toUpperCase(),
              blurValue: String(props.value).toUpperCase()
            };
            return _this;
          }

          _createClass(EditableInput, [{
            key: 'componentDidUpdate',
            value: function componentDidUpdate(prevProps, prevState) {
              if (this.props.value !== this.state.value && (prevProps.value !== this.props.value || prevState.value !== this.state.value)) {
                if (this.input === document.activeElement) {
                  this.setState({
                    blurValue: String(this.props.value).toUpperCase()
                  });
                } else {
                  this.setState({
                    value: String(this.props.value).toUpperCase(),
                    blurValue: !this.state.blurValue && String(this.props.value).toUpperCase()
                  });
                }
              }
            }
          }, {
            key: 'componentWillUnmount',
            value: function componentWillUnmount() {
              this.unbindEventListeners();
            }
          }, {
            key: 'getValueObjectWithLabel',
            value: function getValueObjectWithLabel(value) {
              return _defineProperty({}, this.props.label, value);
            }
          }, {
            key: 'getArrowOffset',
            value: function getArrowOffset() {
              return this.props.arrowOffset || DEFAULT_ARROW_OFFSET;
            }
          }, {
            key: 'setUpdatedValue',
            value: function setUpdatedValue(value, e) {
              var onChangeValue = this.props.label ? this.getValueObjectWithLabel(value) : value;
              this.props.onChange && this.props.onChange(onChangeValue, e);
              this.setState({
                value: value
              });
            }
          }, {
            key: 'render',
            value: function render() {
              var _this2 = this;

              var styles = (0, _reactcss2.default)({
                'default': {
                  wrap: {
                    position: 'relative'
                  }
                },
                'user-override': {
                  wrap: this.props.style && this.props.style.wrap ? this.props.style.wrap : {},
                  input: this.props.style && this.props.style.input ? this.props.style.input : {},
                  label: this.props.style && this.props.style.label ? this.props.style.label : {}
                },
                'dragLabel-true': {
                  label: {
                    cursor: 'ew-resize'
                  }
                }
              }, {
                'user-override': true
              }, this.props);
              return _react2.default.createElement('div', {
                style: styles.wrap
              }, _react2.default.createElement('input', {
                style: styles.input,
                ref: function ref(input) {
                  return _this2.input = input;
                },
                value: this.state.value,
                onKeyDown: this.handleKeyDown,
                onChange: this.handleChange,
                onBlur: this.handleBlur,
                placeholder: this.props.placeholder,
                spellCheck: 'false'
              }), this.props.label && !this.props.hideLabel ? _react2.default.createElement('span', {
                style: styles.label,
                onMouseDown: this.handleMouseDown
              }, this.props.label) : null);
            }
          }]);

          return EditableInput;
        }(React.PureComponent || React.Component);

        exports.default = EditableInput;
      });

      var hue = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var calculateChange = exports.calculateChange = function calculateChange(e, direction, hsl, container) {
          var containerWidth = container.clientWidth;
          var containerHeight = container.clientHeight;
          var x = typeof e.pageX === 'number' ? e.pageX : e.touches[0].pageX;
          var y = typeof e.pageY === 'number' ? e.pageY : e.touches[0].pageY;
          var left = x - (container.getBoundingClientRect().left + window.pageXOffset);
          var top = y - (container.getBoundingClientRect().top + window.pageYOffset);

          if (direction === 'vertical') {
            var h = void 0;

            if (top < 0) {
              h = 359;
            } else if (top > containerHeight) {
              h = 0;
            } else {
              var percent = -(top * 100 / containerHeight) + 100;
              h = 360 * percent / 100;
            }

            if (hsl.h !== h) {
              return {
                h: h,
                s: hsl.s,
                l: hsl.l,
                a: hsl.a,
                source: 'hsl'
              };
            }
          } else {
            var _h = void 0;

            if (left < 0) {
              _h = 0;
            } else if (left > containerWidth) {
              _h = 359;
            } else {
              var _percent = left * 100 / containerWidth;

              _h = 360 * _percent / 100;
            }

            if (hsl.h !== _h) {
              return {
                h: _h,
                s: hsl.s,
                l: hsl.l,
                a: hsl.a,
                source: 'hsl'
              };
            }
          }

          return null;
        };
      });

      var Hue_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Hue = undefined;

        var _createClass = function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var hue$1 = _interopRequireWildcard(hue);

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }

          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        var Hue = exports.Hue = function (_ref) {
          _inherits(Hue, _ref);

          function Hue() {
            var _ref2;

            var _temp, _this, _ret;

            _classCallCheck(this, Hue);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = Hue.__proto__ || Object.getPrototypeOf(Hue)).call.apply(_ref2, [this].concat(args))), _this), _this.handleChange = function (e) {
              var change = hue$1.calculateChange(e, _this.props.direction, _this.props.hsl, _this.container);
              change && typeof _this.props.onChange === 'function' && _this.props.onChange(change, e);
            }, _this.handleMouseDown = function (e) {
              _this.handleChange(e);

              window.addEventListener('mousemove', _this.handleChange);
              window.addEventListener('mouseup', _this.handleMouseUp);
            }, _this.handleMouseUp = function () {
              _this.unbindEventListeners();
            }, _temp), _possibleConstructorReturn(_this, _ret);
          }

          _createClass(Hue, [{
            key: 'componentWillUnmount',
            value: function componentWillUnmount() {
              this.unbindEventListeners();
            }
          }, {
            key: 'unbindEventListeners',
            value: function unbindEventListeners() {
              window.removeEventListener('mousemove', this.handleChange);
              window.removeEventListener('mouseup', this.handleMouseUp);
            }
          }, {
            key: 'render',
            value: function render() {
              var _this2 = this;

              var _props$direction = this.props.direction,
                  direction = _props$direction === undefined ? 'horizontal' : _props$direction;
              var styles = (0, _reactcss2.default)({
                'default': {
                  hue: {
                    absolute: '0px 0px 0px 0px',
                    borderRadius: this.props.radius,
                    boxShadow: this.props.shadow
                  },
                  container: {
                    padding: '0 2px',
                    position: 'relative',
                    height: '100%',
                    borderRadius: this.props.radius
                  },
                  pointer: {
                    position: 'absolute',
                    left: this.props.hsl.h * 100 / 360 + '%'
                  },
                  slider: {
                    marginTop: '1px',
                    width: '4px',
                    borderRadius: '1px',
                    height: '8px',
                    boxShadow: '0 0 2px rgba(0, 0, 0, .6)',
                    background: '#fff',
                    transform: 'translateX(-2px)'
                  }
                },
                'vertical': {
                  pointer: {
                    left: '0px',
                    top: -(this.props.hsl.h * 100 / 360) + 100 + '%'
                  }
                }
              }, {
                vertical: direction === 'vertical'
              });
              return _react2.default.createElement('div', {
                style: styles.hue
              }, _react2.default.createElement('div', {
                className: 'hue-' + direction,
                style: styles.container,
                ref: function ref(container) {
                  return _this2.container = container;
                },
                onMouseDown: this.handleMouseDown,
                onTouchMove: this.handleChange,
                onTouchStart: this.handleChange
              }, _react2.default.createElement('style', null, '\n            .hue-horizontal {\n              background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0\n                33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to right, #f00 0%, #ff0\n                17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n\n            .hue-vertical {\n              background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%,\n                #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n              background: -webkit-linear-gradient(to top, #f00 0%, #ff0 17%,\n                #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\n            }\n          '), _react2.default.createElement('div', {
                style: styles.pointer
              }, this.props.pointer ? _react2.default.createElement(this.props.pointer, this.props) : _react2.default.createElement('div', {
                style: styles.slider
              }))));
            }
          }]);

          return Hue;
        }(React.PureComponent || React.Component);

        exports.default = Hue;
      });

      /**
       * This function is like `assignValue` except that it doesn't assign
       * `undefined` values.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */

      function assignMergeValue(object, key, value) {
        if (value !== undefined && !eq_1(object[key], value) || value === undefined && !(key in object)) {
          _baseAssignValue(object, key, value);
        }
      }

      var _assignMergeValue = assignMergeValue;

      /**
       * This method is like `_.isArrayLike` except that it also checks if `value`
       * is an object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array-like object,
       *  else `false`.
       * @example
       *
       * _.isArrayLikeObject([1, 2, 3]);
       * // => true
       *
       * _.isArrayLikeObject(document.body.children);
       * // => true
       *
       * _.isArrayLikeObject('abc');
       * // => false
       *
       * _.isArrayLikeObject(_.noop);
       * // => false
       */

      function isArrayLikeObject(value) {
        return isObjectLike_1(value) && isArrayLike_1(value);
      }

      var isArrayLikeObject_1 = isArrayLikeObject;

      /**
       * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the property to get.
       * @returns {*} Returns the property value.
       */
      function safeGet(object, key) {
        if (key === 'constructor' && typeof object[key] === 'function') {
          return;
        }

        if (key == '__proto__') {
          return;
        }

        return object[key];
      }

      var _safeGet = safeGet;

      /**
       * Converts `value` to a plain object flattening inherited enumerable string
       * keyed properties of `value` to own properties of the plain object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Object} Returns the converted plain object.
       * @example
       *
       * function Foo() {
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.assign({ 'a': 1 }, new Foo);
       * // => { 'a': 1, 'b': 2 }
       *
       * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
       * // => { 'a': 1, 'b': 2, 'c': 3 }
       */

      function toPlainObject(value) {
        return _copyObject(value, keysIn_1(value));
      }

      var toPlainObject_1 = toPlainObject;

      /**
       * A specialized version of `baseMerge` for arrays and objects which performs
       * deep merges and tracks traversed objects enabling objects with circular
       * references to be merged.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {string} key The key of the value to merge.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} mergeFunc The function to merge values.
       * @param {Function} [customizer] The function to customize assigned values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */

      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = _safeGet(object, key),
            srcValue = _safeGet(source, key),
            stacked = stack.get(srcValue);

        if (stacked) {
          _assignMergeValue(object, key, stacked);
          return;
        }

        var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
        var isCommon = newValue === undefined;

        if (isCommon) {
          var isArr = isArray_1(srcValue),
              isBuff = !isArr && isBuffer_1(srcValue),
              isTyped = !isArr && !isBuff && isTypedArray_1(srcValue);
          newValue = srcValue;

          if (isArr || isBuff || isTyped) {
            if (isArray_1(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject_1(objValue)) {
              newValue = _copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = _cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = _cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject_1(srcValue) || isArguments_1(srcValue)) {
            newValue = objValue;

            if (isArguments_1(objValue)) {
              newValue = toPlainObject_1(objValue);
            } else if (!isObject_1(objValue) || isFunction_1(objValue)) {
              newValue = _initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }

        if (isCommon) {
          // Recursively merge objects and arrays (susceptible to call stack limits).
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack['delete'](srcValue);
        }

        _assignMergeValue(object, key, newValue);
      }

      var _baseMergeDeep = baseMergeDeep;

      /**
       * The base implementation of `_.merge` without support for multiple sources.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} [customizer] The function to customize merged values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */

      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }

        _baseFor(source, function (srcValue, key) {
          stack || (stack = new _Stack());

          if (isObject_1(srcValue)) {
            _baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(_safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;

            if (newValue === undefined) {
              newValue = srcValue;
            }

            _assignMergeValue(object, key, newValue);
          }
        }, keysIn_1);
      }

      var _baseMerge = baseMerge;

      /**
       * A faster alternative to `Function#apply`, this function invokes `func`
       * with the `this` binding of `thisArg` and the arguments of `args`.
       *
       * @private
       * @param {Function} func The function to invoke.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {Array} args The arguments to invoke `func` with.
       * @returns {*} Returns the result of `func`.
       */
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);

          case 1:
            return func.call(thisArg, args[0]);

          case 2:
            return func.call(thisArg, args[0], args[1]);

          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }

        return func.apply(thisArg, args);
      }

      var _apply = apply;

      /* Built-in method references for those with the same name as other `lodash` methods. */

      var nativeMax = Math.max;
      /**
       * A specialized version of `baseRest` which transforms the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @param {Function} transform The rest array transform.
       * @returns {Function} Returns the new function.
       */

      function overRest(func, start, transform) {
        start = nativeMax(start === undefined ? func.length - 1 : start, 0);
        return function () {
          var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

          while (++index < length) {
            array[index] = args[start + index];
          }

          index = -1;
          var otherArgs = Array(start + 1);

          while (++index < start) {
            otherArgs[index] = args[index];
          }

          otherArgs[start] = transform(array);
          return _apply(func, this, otherArgs);
        };
      }

      var _overRest = overRest;

      /**
       * Creates a function that returns `value`.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {*} value The value to return from the new function.
       * @returns {Function} Returns the new constant function.
       * @example
       *
       * var objects = _.times(2, _.constant({ 'a': 1 }));
       *
       * console.log(objects);
       * // => [{ 'a': 1 }, { 'a': 1 }]
       *
       * console.log(objects[0] === objects[1]);
       * // => true
       */
      function constant(value) {
        return function () {
          return value;
        };
      }

      var constant_1 = constant;

      /**
       * The base implementation of `setToString` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */

      var baseSetToString = !_defineProperty$1 ? identity_1 : function (func, string) {
        return _defineProperty$1(func, 'toString', {
          'configurable': true,
          'enumerable': false,
          'value': constant_1(string),
          'writable': true
        });
      };
      var _baseSetToString = baseSetToString;

      /** Used to detect hot functions by number of calls within a span of milliseconds. */
      var HOT_COUNT = 800,
          HOT_SPAN = 16;
      /* Built-in method references for those with the same name as other `lodash` methods. */

      var nativeNow = Date.now;
      /**
       * Creates a function that'll short out and invoke `identity` instead
       * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
       * milliseconds.
       *
       * @private
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new shortable function.
       */

      function shortOut(func) {
        var count = 0,
            lastCalled = 0;
        return function () {
          var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;

          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }

          return func.apply(undefined, arguments);
        };
      }

      var _shortOut = shortOut;

      /**
       * Sets the `toString` method of `func` to return `string`.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */

      var setToString = _shortOut(_baseSetToString);
      var _setToString = setToString;

      /**
       * The base implementation of `_.rest` which doesn't validate or coerce arguments.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       */

      function baseRest(func, start) {
        return _setToString(_overRest(func, start, identity_1), func + '');
      }

      var _baseRest = baseRest;

      /**
       * Checks if the given arguments are from an iteratee call.
       *
       * @private
       * @param {*} value The potential iteratee value argument.
       * @param {*} index The potential iteratee index or key argument.
       * @param {*} object The potential iteratee object argument.
       * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
       *  else `false`.
       */

      function isIterateeCall(value, index, object) {
        if (!isObject_1(object)) {
          return false;
        }

        var type = typeof index;

        if (type == 'number' ? isArrayLike_1(object) && _isIndex(index, object.length) : type == 'string' && index in object) {
          return eq_1(object[index], value);
        }

        return false;
      }

      var _isIterateeCall = isIterateeCall;

      /**
       * Creates a function like `_.assign`.
       *
       * @private
       * @param {Function} assigner The function to assign values.
       * @returns {Function} Returns the new assigner function.
       */

      function createAssigner(assigner) {
        return _baseRest(function (object, sources) {
          var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined,
              guard = length > 2 ? sources[2] : undefined;
          customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

          if (guard && _isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
          }

          object = Object(object);

          while (++index < length) {
            var source = sources[index];

            if (source) {
              assigner(object, source, index, customizer);
            }
          }

          return object;
        });
      }

      var _createAssigner = createAssigner;

      /**
       * This method is like `_.assign` except that it recursively merges own and
       * inherited enumerable string keyed properties of source objects into the
       * destination object. Source properties that resolve to `undefined` are
       * skipped if a destination value exists. Array and plain object properties
       * are merged recursively. Other objects and value types are overridden by
       * assignment. Source objects are applied from left to right. Subsequent
       * sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {
       *   'a': [{ 'b': 2 }, { 'd': 4 }]
       * };
       *
       * var other = {
       *   'a': [{ 'c': 3 }, { 'e': 5 }]
       * };
       *
       * _.merge(object, other);
       * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
       */

      var merge = _createAssigner(function (object, source, srcIndex) {
        _baseMerge(object, source, srcIndex);
      });
      var merge_1 = merge;

      var Raised_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Raised = undefined;

        var _react2 = _interopRequireDefault(React);

        var _propTypes2 = _interopRequireDefault(propTypes);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _merge2 = _interopRequireDefault(merge_1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var Raised = exports.Raised = function Raised(_ref) {
          var zDepth = _ref.zDepth,
              radius = _ref.radius,
              background = _ref.background,
              children = _ref.children,
              _ref$styles = _ref.styles,
              passedStyles = _ref$styles === undefined ? {} : _ref$styles;
          var styles = (0, _reactcss2.default)((0, _merge2.default)({
            'default': {
              wrap: {
                position: 'relative',
                display: 'inline-block'
              },
              content: {
                position: 'relative'
              },
              bg: {
                absolute: '0px 0px 0px 0px',
                boxShadow: '0 ' + zDepth + 'px ' + zDepth * 4 + 'px rgba(0,0,0,.24)',
                borderRadius: radius,
                background: background
              }
            },
            'zDepth-0': {
              bg: {
                boxShadow: 'none'
              }
            },
            'zDepth-1': {
              bg: {
                boxShadow: '0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16)'
              }
            },
            'zDepth-2': {
              bg: {
                boxShadow: '0 6px 20px rgba(0,0,0,.19), 0 8px 17px rgba(0,0,0,.2)'
              }
            },
            'zDepth-3': {
              bg: {
                boxShadow: '0 17px 50px rgba(0,0,0,.19), 0 12px 15px rgba(0,0,0,.24)'
              }
            },
            'zDepth-4': {
              bg: {
                boxShadow: '0 25px 55px rgba(0,0,0,.21), 0 16px 28px rgba(0,0,0,.22)'
              }
            },
            'zDepth-5': {
              bg: {
                boxShadow: '0 40px 77px rgba(0,0,0,.22), 0 27px 24px rgba(0,0,0,.2)'
              }
            },
            'square': {
              bg: {
                borderRadius: '0'
              }
            },
            'circle': {
              bg: {
                borderRadius: '50%'
              }
            }
          }, passedStyles), {
            'zDepth-1': zDepth === 1
          });
          return _react2.default.createElement('div', {
            style: styles.wrap
          }, _react2.default.createElement('div', {
            style: styles.bg
          }), _react2.default.createElement('div', {
            style: styles.content
          }, children));
        };

        Raised.propTypes = {
          background: _propTypes2.default.string,
          zDepth: _propTypes2.default.oneOf([0, 1, 2, 3, 4, 5]),
          radius: _propTypes2.default.number,
          styles: _propTypes2.default.object
        };
        Raised.defaultProps = {
          background: '#fff',
          zDepth: 1,
          radius: 2,
          styles: {}
        };
        exports.default = Raised;
      });

      /**
       * Gets the timestamp of the number of milliseconds that have elapsed since
       * the Unix epoch (1 January 1970 00:00:00 UTC).
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Date
       * @returns {number} Returns the timestamp.
       * @example
       *
       * _.defer(function(stamp) {
       *   console.log(_.now() - stamp);
       * }, _.now());
       * // => Logs the number of milliseconds it took for the deferred invocation.
       */

      var now = function () {
        return _root.Date.now();
      };

      var now_1 = now;

      /** Used as references for various `Number` constants. */

      var NAN = 0 / 0;
      /** Used to match leading and trailing whitespace. */

      var reTrim = /^\s+|\s+$/g;
      /** Used to detect bad signed hexadecimal string values. */

      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      /** Used to detect binary string values. */

      var reIsBinary = /^0b[01]+$/i;
      /** Used to detect octal string values. */

      var reIsOctal = /^0o[0-7]+$/i;
      /** Built-in method references without a dependency on `root`. */

      var freeParseInt = parseInt;
      /**
       * Converts `value` to a number.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       * @example
       *
       * _.toNumber(3.2);
       * // => 3.2
       *
       * _.toNumber(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toNumber(Infinity);
       * // => Infinity
       *
       * _.toNumber('3.2');
       * // => 3.2
       */

      function toNumber(value) {
        if (typeof value == 'number') {
          return value;
        }

        if (isSymbol_1(value)) {
          return NAN;
        }

        if (isObject_1(value)) {
          var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
          value = isObject_1(other) ? other + '' : other;
        }

        if (typeof value != 'string') {
          return value === 0 ? value : +value;
        }

        value = value.replace(reTrim, '');
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }

      var toNumber_1 = toNumber;

      /** Error message constants. */

      var FUNC_ERROR_TEXT$1 = 'Expected a function';
      /* Built-in method references for those with the same name as other `lodash` methods. */

      var nativeMax$1 = Math.max,
          nativeMin = Math.min;
      /**
       * Creates a debounced function that delays invoking `func` until after `wait`
       * milliseconds have elapsed since the last time the debounced function was
       * invoked. The debounced function comes with a `cancel` method to cancel
       * delayed `func` invocations and a `flush` method to immediately invoke them.
       * Provide `options` to indicate whether `func` should be invoked on the
       * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
       * with the last arguments provided to the debounced function. Subsequent
       * calls to the debounced function return the result of the last `func`
       * invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the debounced function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.debounce` and `_.throttle`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to debounce.
       * @param {number} [wait=0] The number of milliseconds to delay.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=false]
       *  Specify invoking on the leading edge of the timeout.
       * @param {number} [options.maxWait]
       *  The maximum time `func` is allowed to be delayed before it's invoked.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new debounced function.
       * @example
       *
       * // Avoid costly calculations while the window size is in flux.
       * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
       *
       * // Invoke `sendMail` when clicked, debouncing subsequent calls.
       * jQuery(element).on('click', _.debounce(sendMail, 300, {
       *   'leading': true,
       *   'trailing': false
       * }));
       *
       * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
       * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
       * var source = new EventSource('/stream');
       * jQuery(source).on('message', debounced);
       *
       * // Cancel the trailing debounced invocation.
       * jQuery(window).on('popstate', debounced.cancel);
       */

      function debounce(func, wait, options) {
        var lastArgs,
            lastThis,
            maxWait,
            result,
            timerId,
            lastCallTime,
            lastInvokeTime = 0,
            leading = false,
            maxing = false,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT$1);
        }

        wait = toNumber_1(wait) || 0;

        if (isObject_1(options)) {
          leading = !!options.leading;
          maxing = 'maxWait' in options;
          maxWait = maxing ? nativeMax$1(toNumber_1(options.maxWait) || 0, wait) : maxWait;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        function invokeFunc(time) {
          var args = lastArgs,
              thisArg = lastThis;
          lastArgs = lastThis = undefined;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }

        function leadingEdge(time) {
          // Reset any `maxWait` timer.
          lastInvokeTime = time; // Start the timer for the trailing edge.

          timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.

          return leading ? invokeFunc(time) : result;
        }

        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime,
              timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }

        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the
          // trailing edge, the system time has gone backwards and we're treating
          // it as the trailing edge, or we've hit the `maxWait` limit.

          return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }

        function timerExpired() {
          var time = now_1();

          if (shouldInvoke(time)) {
            return trailingEdge(time);
          } // Restart the timer.


          timerId = setTimeout(timerExpired, remainingWait(time));
        }

        function trailingEdge(time) {
          timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been
          // debounced at least once.

          if (trailing && lastArgs) {
            return invokeFunc(time);
          }

          lastArgs = lastThis = undefined;
          return result;
        }

        function cancel() {
          if (timerId !== undefined) {
            clearTimeout(timerId);
          }

          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined;
        }

        function flush() {
          return timerId === undefined ? result : trailingEdge(now_1());
        }

        function debounced() {
          var time = now_1(),
              isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;

          if (isInvoking) {
            if (timerId === undefined) {
              return leadingEdge(lastCallTime);
            }

            if (maxing) {
              // Handle invocations in a tight loop.
              clearTimeout(timerId);
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }

          if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
          }

          return result;
        }

        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }

      var debounce_1 = debounce;

      /** Error message constants. */

      var FUNC_ERROR_TEXT$2 = 'Expected a function';
      /**
       * Creates a throttled function that only invokes `func` at most once per
       * every `wait` milliseconds. The throttled function comes with a `cancel`
       * method to cancel delayed `func` invocations and a `flush` method to
       * immediately invoke them. Provide `options` to indicate whether `func`
       * should be invoked on the leading and/or trailing edge of the `wait`
       * timeout. The `func` is invoked with the last arguments provided to the
       * throttled function. Subsequent calls to the throttled function return the
       * result of the last `func` invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the throttled function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.throttle` and `_.debounce`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to throttle.
       * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=true]
       *  Specify invoking on the leading edge of the timeout.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new throttled function.
       * @example
       *
       * // Avoid excessively updating the position while scrolling.
       * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
       *
       * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
       * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
       * jQuery(element).on('click', throttled);
       *
       * // Cancel the trailing throttled invocation.
       * jQuery(window).on('popstate', throttled.cancel);
       */

      function throttle(func, wait, options) {
        var leading = true,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT$2);
        }

        if (isObject_1(options)) {
          leading = 'leading' in options ? !!options.leading : leading;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        return debounce_1(func, wait, {
          'leading': leading,
          'maxWait': wait,
          'trailing': trailing
        });
      }

      var throttle_1 = throttle;

      var saturation = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var calculateChange = exports.calculateChange = function calculateChange(e, hsl, container) {
          var _container$getBoundin = container.getBoundingClientRect(),
              containerWidth = _container$getBoundin.width,
              containerHeight = _container$getBoundin.height;

          var x = typeof e.pageX === 'number' ? e.pageX : e.touches[0].pageX;
          var y = typeof e.pageY === 'number' ? e.pageY : e.touches[0].pageY;
          var left = x - (container.getBoundingClientRect().left + window.pageXOffset);
          var top = y - (container.getBoundingClientRect().top + window.pageYOffset);

          if (left < 0) {
            left = 0;
          } else if (left > containerWidth) {
            left = containerWidth;
          }

          if (top < 0) {
            top = 0;
          } else if (top > containerHeight) {
            top = containerHeight;
          }

          var saturation = left / containerWidth;
          var bright = 1 - top / containerHeight;
          return {
            h: hsl.h,
            s: saturation,
            v: bright,
            a: hsl.a,
            source: 'hsv'
          };
        };
      });

      var Saturation_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Saturation = undefined;

        var _createClass = function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _throttle2 = _interopRequireDefault(throttle_1);

        var saturation$1 = _interopRequireWildcard(saturation);

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }

          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        var Saturation = exports.Saturation = function (_ref) {
          _inherits(Saturation, _ref);

          function Saturation(props) {
            _classCallCheck(this, Saturation);

            var _this = _possibleConstructorReturn(this, (Saturation.__proto__ || Object.getPrototypeOf(Saturation)).call(this, props));

            _this.handleChange = function (e) {
              typeof _this.props.onChange === 'function' && _this.throttle(_this.props.onChange, saturation$1.calculateChange(e, _this.props.hsl, _this.container), e);
            };

            _this.handleMouseDown = function (e) {
              _this.handleChange(e);

              window.addEventListener('mousemove', _this.handleChange);
              window.addEventListener('mouseup', _this.handleMouseUp);
            };

            _this.handleMouseUp = function () {
              _this.unbindEventListeners();
            };

            _this.throttle = (0, _throttle2.default)(function (fn, data, e) {
              fn(data, e);
            }, 50);
            return _this;
          }

          _createClass(Saturation, [{
            key: 'componentWillUnmount',
            value: function componentWillUnmount() {
              this.throttle.cancel();
              this.unbindEventListeners();
            }
          }, {
            key: 'unbindEventListeners',
            value: function unbindEventListeners() {
              window.removeEventListener('mousemove', this.handleChange);
              window.removeEventListener('mouseup', this.handleMouseUp);
            }
          }, {
            key: 'render',
            value: function render() {
              var _this2 = this;

              var _ref2 = this.props.style || {},
                  color = _ref2.color,
                  white = _ref2.white,
                  black = _ref2.black,
                  pointer = _ref2.pointer,
                  circle = _ref2.circle;

              var styles = (0, _reactcss2.default)({
                'default': {
                  color: {
                    absolute: '0px 0px 0px 0px',
                    background: 'hsl(' + this.props.hsl.h + ',100%, 50%)',
                    borderRadius: this.props.radius
                  },
                  white: {
                    absolute: '0px 0px 0px 0px',
                    borderRadius: this.props.radius
                  },
                  black: {
                    absolute: '0px 0px 0px 0px',
                    boxShadow: this.props.shadow,
                    borderRadius: this.props.radius
                  },
                  pointer: {
                    position: 'absolute',
                    top: -(this.props.hsv.v * 100) + 100 + '%',
                    left: this.props.hsv.s * 100 + '%',
                    cursor: 'default'
                  },
                  circle: {
                    width: '4px',
                    height: '4px',
                    boxShadow: '0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3),\n            0 0 1px 2px rgba(0,0,0,.4)',
                    borderRadius: '50%',
                    cursor: 'hand',
                    transform: 'translate(-2px, -2px)'
                  }
                },
                'custom': {
                  color: color,
                  white: white,
                  black: black,
                  pointer: pointer,
                  circle: circle
                }
              }, {
                'custom': !!this.props.style
              });
              return _react2.default.createElement('div', {
                style: styles.color,
                ref: function ref(container) {
                  return _this2.container = container;
                },
                onMouseDown: this.handleMouseDown,
                onTouchMove: this.handleChange,
                onTouchStart: this.handleChange
              }, _react2.default.createElement('style', null, '\n          .saturation-white {\n            background: -webkit-linear-gradient(to right, #fff, rgba(255,255,255,0));\n            background: linear-gradient(to right, #fff, rgba(255,255,255,0));\n          }\n          .saturation-black {\n            background: -webkit-linear-gradient(to top, #000, rgba(0,0,0,0));\n            background: linear-gradient(to top, #000, rgba(0,0,0,0));\n          }\n        '), _react2.default.createElement('div', {
                style: styles.white,
                className: 'saturation-white'
              }, _react2.default.createElement('div', {
                style: styles.black,
                className: 'saturation-black'
              }), _react2.default.createElement('div', {
                style: styles.pointer
              }, this.props.pointer ? _react2.default.createElement(this.props.pointer, this.props) : _react2.default.createElement('div', {
                style: styles.circle
              }))));
            }
          }]);

          return Saturation;
        }(React.PureComponent || React.Component);

        exports.default = Saturation;
      });

      /**
       * Iterates over elements of `collection` and invokes `iteratee` for each element.
       * The iteratee is invoked with three arguments: (value, index|key, collection).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * **Note:** As with other "Collections" methods, objects with a "length"
       * property are iterated like arrays. To avoid this behavior use `_.forIn`
       * or `_.forOwn` for object iteration.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias each
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEachRight
       * @example
       *
       * _.forEach([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `1` then `2`.
       *
       * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */

      function forEach(collection, iteratee) {
        var func = isArray_1(collection) ? _arrayEach : _baseEach;
        return func(collection, _castFunction(iteratee));
      }

      var forEach_1 = forEach;

      var each = forEach_1;

      var tinycolor = createCommonjsModule(function (module) {
        // TinyColor v1.4.1
        // https://github.com/bgrins/TinyColor
        // Brian Grinstead, MIT License
        (function (Math) {
          var trimLeft = /^\s+/,
              trimRight = /\s+$/,
              tinyCounter = 0,
              mathRound = Math.round,
              mathMin = Math.min,
              mathMax = Math.max,
              mathRandom = Math.random;

          function tinycolor(color, opts) {
            color = color ? color : '';
            opts = opts || {}; // If input is already a tinycolor, return itself

            if (color instanceof tinycolor) {
              return color;
            } // If we are called as a function, call using new instead


            if (!(this instanceof tinycolor)) {
              return new tinycolor(color, opts);
            }

            var rgb = inputToRGB(color);
            this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;
            this._gradientType = opts.gradientType; // Don't let the range of [0,255] come back in [0,1].
            // Potentially lose a little bit of precision here, but will fix issues where
            // .5 gets interpreted as half of the total, instead of half of 1
            // If it was supposed to be 128, this was already taken care of by `inputToRgb`

            if (this._r < 1) {
              this._r = mathRound(this._r);
            }

            if (this._g < 1) {
              this._g = mathRound(this._g);
            }

            if (this._b < 1) {
              this._b = mathRound(this._b);
            }

            this._ok = rgb.ok;
            this._tc_id = tinyCounter++;
          }

          tinycolor.prototype = {
            isDark: function () {
              return this.getBrightness() < 128;
            },
            isLight: function () {
              return !this.isDark();
            },
            isValid: function () {
              return this._ok;
            },
            getOriginalInput: function () {
              return this._originalInput;
            },
            getFormat: function () {
              return this._format;
            },
            getAlpha: function () {
              return this._a;
            },
            getBrightness: function () {
              //http://www.w3.org/TR/AERT#color-contrast
              var rgb = this.toRgb();
              return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
            },
            getLuminance: function () {
              //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
              var rgb = this.toRgb();
              var RsRGB, GsRGB, BsRGB, R, G, B;
              RsRGB = rgb.r / 255;
              GsRGB = rgb.g / 255;
              BsRGB = rgb.b / 255;

              if (RsRGB <= 0.03928) {
                R = RsRGB / 12.92;
              } else {
                R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
              }

              if (GsRGB <= 0.03928) {
                G = GsRGB / 12.92;
              } else {
                G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
              }

              if (BsRGB <= 0.03928) {
                B = BsRGB / 12.92;
              } else {
                B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
              }

              return 0.2126 * R + 0.7152 * G + 0.0722 * B;
            },
            setAlpha: function (value) {
              this._a = boundAlpha(value);
              this._roundA = mathRound(100 * this._a) / 100;
              return this;
            },
            toHsv: function () {
              var hsv = rgbToHsv(this._r, this._g, this._b);
              return {
                h: hsv.h * 360,
                s: hsv.s,
                v: hsv.v,
                a: this._a
              };
            },
            toHsvString: function () {
              var hsv = rgbToHsv(this._r, this._g, this._b);
              var h = mathRound(hsv.h * 360),
                  s = mathRound(hsv.s * 100),
                  v = mathRound(hsv.v * 100);
              return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
            },
            toHsl: function () {
              var hsl = rgbToHsl(this._r, this._g, this._b);
              return {
                h: hsl.h * 360,
                s: hsl.s,
                l: hsl.l,
                a: this._a
              };
            },
            toHslString: function () {
              var hsl = rgbToHsl(this._r, this._g, this._b);
              var h = mathRound(hsl.h * 360),
                  s = mathRound(hsl.s * 100),
                  l = mathRound(hsl.l * 100);
              return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
            },
            toHex: function (allow3Char) {
              return rgbToHex(this._r, this._g, this._b, allow3Char);
            },
            toHexString: function (allow3Char) {
              return '#' + this.toHex(allow3Char);
            },
            toHex8: function (allow4Char) {
              return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
            },
            toHex8String: function (allow4Char) {
              return '#' + this.toHex8(allow4Char);
            },
            toRgb: function () {
              return {
                r: mathRound(this._r),
                g: mathRound(this._g),
                b: mathRound(this._b),
                a: this._a
              };
            },
            toRgbString: function () {
              return this._a == 1 ? "rgb(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" : "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
            },
            toPercentageRgb: function () {
              return {
                r: mathRound(bound01(this._r, 255) * 100) + "%",
                g: mathRound(bound01(this._g, 255) * 100) + "%",
                b: mathRound(bound01(this._b, 255) * 100) + "%",
                a: this._a
              };
            },
            toPercentageRgbString: function () {
              return this._a == 1 ? "rgb(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" : "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
            },
            toName: function () {
              if (this._a === 0) {
                return "transparent";
              }

              if (this._a < 1) {
                return false;
              }

              return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
            },
            toFilter: function (secondColor) {
              var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
              var secondHex8String = hex8String;
              var gradientType = this._gradientType ? "GradientType = 1, " : "";

              if (secondColor) {
                var s = tinycolor(secondColor);
                secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
              }

              return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
            },
            toString: function (format) {
              var formatSet = !!format;
              format = format || this._format;
              var formattedString = false;
              var hasAlpha = this._a < 1 && this._a >= 0;
              var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");

              if (needsAlphaFormat) {
                // Special case for "transparent", all other non-alpha formats
                // will return rgba when there is transparency.
                if (format === "name" && this._a === 0) {
                  return this.toName();
                }

                return this.toRgbString();
              }

              if (format === "rgb") {
                formattedString = this.toRgbString();
              }

              if (format === "prgb") {
                formattedString = this.toPercentageRgbString();
              }

              if (format === "hex" || format === "hex6") {
                formattedString = this.toHexString();
              }

              if (format === "hex3") {
                formattedString = this.toHexString(true);
              }

              if (format === "hex4") {
                formattedString = this.toHex8String(true);
              }

              if (format === "hex8") {
                formattedString = this.toHex8String();
              }

              if (format === "name") {
                formattedString = this.toName();
              }

              if (format === "hsl") {
                formattedString = this.toHslString();
              }

              if (format === "hsv") {
                formattedString = this.toHsvString();
              }

              return formattedString || this.toHexString();
            },
            clone: function () {
              return tinycolor(this.toString());
            },
            _applyModification: function (fn, args) {
              var color = fn.apply(null, [this].concat([].slice.call(args)));
              this._r = color._r;
              this._g = color._g;
              this._b = color._b;
              this.setAlpha(color._a);
              return this;
            },
            lighten: function () {
              return this._applyModification(lighten, arguments);
            },
            brighten: function () {
              return this._applyModification(brighten, arguments);
            },
            darken: function () {
              return this._applyModification(darken, arguments);
            },
            desaturate: function () {
              return this._applyModification(desaturate, arguments);
            },
            saturate: function () {
              return this._applyModification(saturate, arguments);
            },
            greyscale: function () {
              return this._applyModification(greyscale, arguments);
            },
            spin: function () {
              return this._applyModification(spin, arguments);
            },
            _applyCombination: function (fn, args) {
              return fn.apply(null, [this].concat([].slice.call(args)));
            },
            analogous: function () {
              return this._applyCombination(analogous, arguments);
            },
            complement: function () {
              return this._applyCombination(complement, arguments);
            },
            monochromatic: function () {
              return this._applyCombination(monochromatic, arguments);
            },
            splitcomplement: function () {
              return this._applyCombination(splitcomplement, arguments);
            },
            triad: function () {
              return this._applyCombination(triad, arguments);
            },
            tetrad: function () {
              return this._applyCombination(tetrad, arguments);
            }
          }; // If input is an object, force 1 into "1.0" to handle ratios properly
          // String input requires "1.0" as input, so 1 will be treated as 1

          tinycolor.fromRatio = function (color, opts) {
            if (typeof color == "object") {
              var newColor = {};

              for (var i in color) {
                if (color.hasOwnProperty(i)) {
                  if (i === "a") {
                    newColor[i] = color[i];
                  } else {
                    newColor[i] = convertToPercentage(color[i]);
                  }
                }
              }

              color = newColor;
            }

            return tinycolor(color, opts);
          }; // Given a string or object, convert that input to RGB
          // Possible string inputs:
          //
          //     "red"
          //     "#f00" or "f00"
          //     "#ff0000" or "ff0000"
          //     "#ff000000" or "ff000000"
          //     "rgb 255 0 0" or "rgb (255, 0, 0)"
          //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
          //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
          //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
          //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
          //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
          //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
          //


          function inputToRGB(color) {
            var rgb = {
              r: 0,
              g: 0,
              b: 0
            };
            var a = 1;
            var s = null;
            var v = null;
            var l = null;
            var ok = false;
            var format = false;

            if (typeof color == "string") {
              color = stringInputToObject(color);
            }

            if (typeof color == "object") {
              if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
                rgb = rgbToRgb(color.r, color.g, color.b);
                ok = true;
                format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
              } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
                s = convertToPercentage(color.s);
                v = convertToPercentage(color.v);
                rgb = hsvToRgb(color.h, s, v);
                ok = true;
                format = "hsv";
              } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
                s = convertToPercentage(color.s);
                l = convertToPercentage(color.l);
                rgb = hslToRgb(color.h, s, l);
                ok = true;
                format = "hsl";
              }

              if (color.hasOwnProperty("a")) {
                a = color.a;
              }
            }

            a = boundAlpha(a);
            return {
              ok: ok,
              format: color.format || format,
              r: mathMin(255, mathMax(rgb.r, 0)),
              g: mathMin(255, mathMax(rgb.g, 0)),
              b: mathMin(255, mathMax(rgb.b, 0)),
              a: a
            };
          } // Conversion Functions
          // --------------------
          // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
          // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>
          // `rgbToRgb`
          // Handle bounds / percentage checking to conform to CSS color spec
          // <http://www.w3.org/TR/css3-color/>
          // *Assumes:* r, g, b in [0, 255] or [0, 1]
          // *Returns:* { r, g, b } in [0, 255]


          function rgbToRgb(r, g, b) {
            return {
              r: bound01(r, 255) * 255,
              g: bound01(g, 255) * 255,
              b: bound01(b, 255) * 255
            };
          } // `rgbToHsl`
          // Converts an RGB color value to HSL.
          // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
          // *Returns:* { h, s, l } in [0,1]


          function rgbToHsl(r, g, b) {
            r = bound01(r, 255);
            g = bound01(g, 255);
            b = bound01(b, 255);
            var max = mathMax(r, g, b),
                min = mathMin(r, g, b);
            var h,
                s,
                l = (max + min) / 2;

            if (max == min) {
              h = s = 0; // achromatic
            } else {
              var d = max - min;
              s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

              switch (max) {
                case r:
                  h = (g - b) / d + (g < b ? 6 : 0);
                  break;

                case g:
                  h = (b - r) / d + 2;
                  break;

                case b:
                  h = (r - g) / d + 4;
                  break;
              }

              h /= 6;
            }

            return {
              h: h,
              s: s,
              l: l
            };
          } // `hslToRgb`
          // Converts an HSL color value to RGB.
          // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
          // *Returns:* { r, g, b } in the set [0, 255]


          function hslToRgb(h, s, l) {
            var r, g, b;
            h = bound01(h, 360);
            s = bound01(s, 100);
            l = bound01(l, 100);

            function hue2rgb(p, q, t) {
              if (t < 0) t += 1;
              if (t > 1) t -= 1;
              if (t < 1 / 6) return p + (q - p) * 6 * t;
              if (t < 1 / 2) return q;
              if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
              return p;
            }

            if (s === 0) {
              r = g = b = l; // achromatic
            } else {
              var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
              var p = 2 * l - q;
              r = hue2rgb(p, q, h + 1 / 3);
              g = hue2rgb(p, q, h);
              b = hue2rgb(p, q, h - 1 / 3);
            }

            return {
              r: r * 255,
              g: g * 255,
              b: b * 255
            };
          } // `rgbToHsv`
          // Converts an RGB color value to HSV
          // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
          // *Returns:* { h, s, v } in [0,1]


          function rgbToHsv(r, g, b) {
            r = bound01(r, 255);
            g = bound01(g, 255);
            b = bound01(b, 255);
            var max = mathMax(r, g, b),
                min = mathMin(r, g, b);
            var h,
                s,
                v = max;
            var d = max - min;
            s = max === 0 ? 0 : d / max;

            if (max == min) {
              h = 0; // achromatic
            } else {
              switch (max) {
                case r:
                  h = (g - b) / d + (g < b ? 6 : 0);
                  break;

                case g:
                  h = (b - r) / d + 2;
                  break;

                case b:
                  h = (r - g) / d + 4;
                  break;
              }

              h /= 6;
            }

            return {
              h: h,
              s: s,
              v: v
            };
          } // `hsvToRgb`
          // Converts an HSV color value to RGB.
          // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
          // *Returns:* { r, g, b } in the set [0, 255]


          function hsvToRgb(h, s, v) {
            h = bound01(h, 360) * 6;
            s = bound01(s, 100);
            v = bound01(v, 100);
            var i = Math.floor(h),
                f = h - i,
                p = v * (1 - s),
                q = v * (1 - f * s),
                t = v * (1 - (1 - f) * s),
                mod = i % 6,
                r = [v, q, p, p, t, v][mod],
                g = [t, v, v, q, p, p][mod],
                b = [p, p, t, v, v, q][mod];
            return {
              r: r * 255,
              g: g * 255,
              b: b * 255
            };
          } // `rgbToHex`
          // Converts an RGB color to hex
          // Assumes r, g, and b are contained in the set [0, 255]
          // Returns a 3 or 6 character hex


          function rgbToHex(r, g, b, allow3Char) {
            var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))]; // Return a 3 character hex if possible

            if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
              return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
            }

            return hex.join("");
          } // `rgbaToHex`
          // Converts an RGBA color plus alpha transparency to hex
          // Assumes r, g, b are contained in the set [0, 255] and
          // a in [0, 1]. Returns a 4 or 8 character rgba hex


          function rgbaToHex(r, g, b, a, allow4Char) {
            var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16)), pad2(convertDecimalToHex(a))]; // Return a 4 character hex if possible

            if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
              return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
            }

            return hex.join("");
          } // `rgbaToArgbHex`
          // Converts an RGBA color to an ARGB Hex8 string
          // Rarely used, but required for "toFilter()"


          function rgbaToArgbHex(r, g, b, a) {
            var hex = [pad2(convertDecimalToHex(a)), pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];
            return hex.join("");
          } // `equals`
          // Can be called with any tinycolor input


          tinycolor.equals = function (color1, color2) {
            if (!color1 || !color2) {
              return false;
            }

            return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
          };

          tinycolor.random = function () {
            return tinycolor.fromRatio({
              r: mathRandom(),
              g: mathRandom(),
              b: mathRandom()
            });
          }; // Modification Functions
          // ----------------------
          // Thanks to less.js for some of the basics here
          // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>


          function desaturate(color, amount) {
            amount = amount === 0 ? 0 : amount || 10;
            var hsl = tinycolor(color).toHsl();
            hsl.s -= amount / 100;
            hsl.s = clamp01(hsl.s);
            return tinycolor(hsl);
          }

          function saturate(color, amount) {
            amount = amount === 0 ? 0 : amount || 10;
            var hsl = tinycolor(color).toHsl();
            hsl.s += amount / 100;
            hsl.s = clamp01(hsl.s);
            return tinycolor(hsl);
          }

          function greyscale(color) {
            return tinycolor(color).desaturate(100);
          }

          function lighten(color, amount) {
            amount = amount === 0 ? 0 : amount || 10;
            var hsl = tinycolor(color).toHsl();
            hsl.l += amount / 100;
            hsl.l = clamp01(hsl.l);
            return tinycolor(hsl);
          }

          function brighten(color, amount) {
            amount = amount === 0 ? 0 : amount || 10;
            var rgb = tinycolor(color).toRgb();
            rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));
            rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));
            rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));
            return tinycolor(rgb);
          }

          function darken(color, amount) {
            amount = amount === 0 ? 0 : amount || 10;
            var hsl = tinycolor(color).toHsl();
            hsl.l -= amount / 100;
            hsl.l = clamp01(hsl.l);
            return tinycolor(hsl);
          } // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
          // Values outside of this range will be wrapped into this range.


          function spin(color, amount) {
            var hsl = tinycolor(color).toHsl();
            var hue = (hsl.h + amount) % 360;
            hsl.h = hue < 0 ? 360 + hue : hue;
            return tinycolor(hsl);
          } // Combination Functions
          // ---------------------
          // Thanks to jQuery xColor for some of the ideas behind these
          // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>


          function complement(color) {
            var hsl = tinycolor(color).toHsl();
            hsl.h = (hsl.h + 180) % 360;
            return tinycolor(hsl);
          }

          function triad(color) {
            var hsl = tinycolor(color).toHsl();
            var h = hsl.h;
            return [tinycolor(color), tinycolor({
              h: (h + 120) % 360,
              s: hsl.s,
              l: hsl.l
            }), tinycolor({
              h: (h + 240) % 360,
              s: hsl.s,
              l: hsl.l
            })];
          }

          function tetrad(color) {
            var hsl = tinycolor(color).toHsl();
            var h = hsl.h;
            return [tinycolor(color), tinycolor({
              h: (h + 90) % 360,
              s: hsl.s,
              l: hsl.l
            }), tinycolor({
              h: (h + 180) % 360,
              s: hsl.s,
              l: hsl.l
            }), tinycolor({
              h: (h + 270) % 360,
              s: hsl.s,
              l: hsl.l
            })];
          }

          function splitcomplement(color) {
            var hsl = tinycolor(color).toHsl();
            var h = hsl.h;
            return [tinycolor(color), tinycolor({
              h: (h + 72) % 360,
              s: hsl.s,
              l: hsl.l
            }), tinycolor({
              h: (h + 216) % 360,
              s: hsl.s,
              l: hsl.l
            })];
          }

          function analogous(color, results, slices) {
            results = results || 6;
            slices = slices || 30;
            var hsl = tinycolor(color).toHsl();
            var part = 360 / slices;
            var ret = [tinycolor(color)];

            for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {
              hsl.h = (hsl.h + part) % 360;
              ret.push(tinycolor(hsl));
            }

            return ret;
          }

          function monochromatic(color, results) {
            results = results || 6;
            var hsv = tinycolor(color).toHsv();
            var h = hsv.h,
                s = hsv.s,
                v = hsv.v;
            var ret = [];
            var modification = 1 / results;

            while (results--) {
              ret.push(tinycolor({
                h: h,
                s: s,
                v: v
              }));
              v = (v + modification) % 1;
            }

            return ret;
          } // Utility Functions
          // ---------------------


          tinycolor.mix = function (color1, color2, amount) {
            amount = amount === 0 ? 0 : amount || 50;
            var rgb1 = tinycolor(color1).toRgb();
            var rgb2 = tinycolor(color2).toRgb();
            var p = amount / 100;
            var rgba = {
              r: (rgb2.r - rgb1.r) * p + rgb1.r,
              g: (rgb2.g - rgb1.g) * p + rgb1.g,
              b: (rgb2.b - rgb1.b) * p + rgb1.b,
              a: (rgb2.a - rgb1.a) * p + rgb1.a
            };
            return tinycolor(rgba);
          }; // Readability Functions
          // ---------------------
          // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)
          // `contrast`
          // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)


          tinycolor.readability = function (color1, color2) {
            var c1 = tinycolor(color1);
            var c2 = tinycolor(color2);
            return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
          }; // `isReadable`
          // Ensure that foreground and background color combinations meet WCAG2 guidelines.
          // The third argument is an optional Object.
          //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
          //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
          // If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.
          // *Example*
          //    tinycolor.isReadable("#000", "#111") => false
          //    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false


          tinycolor.isReadable = function (color1, color2, wcag2) {
            var readability = tinycolor.readability(color1, color2);
            var wcag2Parms, out;
            out = false;
            wcag2Parms = validateWCAG2Parms(wcag2);

            switch (wcag2Parms.level + wcag2Parms.size) {
              case "AAsmall":
              case "AAAlarge":
                out = readability >= 4.5;
                break;

              case "AAlarge":
                out = readability >= 3;
                break;

              case "AAAsmall":
                out = readability >= 7;
                break;
            }

            return out;
          }; // `mostReadable`
          // Given a base color and a list of possible foreground or background
          // colors for that base, returns the most readable color.
          // Optionally returns Black or White if the most readable color is unreadable.
          // *Example*
          //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
          //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
          //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
          //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"


          tinycolor.mostReadable = function (baseColor, colorList, args) {
            var bestColor = null;
            var bestScore = 0;
            var readability;
            var includeFallbackColors, level, size;
            args = args || {};
            includeFallbackColors = args.includeFallbackColors;
            level = args.level;
            size = args.size;

            for (var i = 0; i < colorList.length; i++) {
              readability = tinycolor.readability(baseColor, colorList[i]);

              if (readability > bestScore) {
                bestScore = readability;
                bestColor = tinycolor(colorList[i]);
              }
            }

            if (tinycolor.isReadable(baseColor, bestColor, {
              "level": level,
              "size": size
            }) || !includeFallbackColors) {
              return bestColor;
            } else {
              args.includeFallbackColors = false;
              return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
            }
          }; // Big List of Colors
          // ------------------
          // <http://www.w3.org/TR/css3-color/#svg-color>


          var names = tinycolor.names = {
            aliceblue: "f0f8ff",
            antiquewhite: "faebd7",
            aqua: "0ff",
            aquamarine: "7fffd4",
            azure: "f0ffff",
            beige: "f5f5dc",
            bisque: "ffe4c4",
            black: "000",
            blanchedalmond: "ffebcd",
            blue: "00f",
            blueviolet: "8a2be2",
            brown: "a52a2a",
            burlywood: "deb887",
            burntsienna: "ea7e5d",
            cadetblue: "5f9ea0",
            chartreuse: "7fff00",
            chocolate: "d2691e",
            coral: "ff7f50",
            cornflowerblue: "6495ed",
            cornsilk: "fff8dc",
            crimson: "dc143c",
            cyan: "0ff",
            darkblue: "00008b",
            darkcyan: "008b8b",
            darkgoldenrod: "b8860b",
            darkgray: "a9a9a9",
            darkgreen: "006400",
            darkgrey: "a9a9a9",
            darkkhaki: "bdb76b",
            darkmagenta: "8b008b",
            darkolivegreen: "556b2f",
            darkorange: "ff8c00",
            darkorchid: "9932cc",
            darkred: "8b0000",
            darksalmon: "e9967a",
            darkseagreen: "8fbc8f",
            darkslateblue: "483d8b",
            darkslategray: "2f4f4f",
            darkslategrey: "2f4f4f",
            darkturquoise: "00ced1",
            darkviolet: "9400d3",
            deeppink: "ff1493",
            deepskyblue: "00bfff",
            dimgray: "696969",
            dimgrey: "696969",
            dodgerblue: "1e90ff",
            firebrick: "b22222",
            floralwhite: "fffaf0",
            forestgreen: "228b22",
            fuchsia: "f0f",
            gainsboro: "dcdcdc",
            ghostwhite: "f8f8ff",
            gold: "ffd700",
            goldenrod: "daa520",
            gray: "808080",
            green: "008000",
            greenyellow: "adff2f",
            grey: "808080",
            honeydew: "f0fff0",
            hotpink: "ff69b4",
            indianred: "cd5c5c",
            indigo: "4b0082",
            ivory: "fffff0",
            khaki: "f0e68c",
            lavender: "e6e6fa",
            lavenderblush: "fff0f5",
            lawngreen: "7cfc00",
            lemonchiffon: "fffacd",
            lightblue: "add8e6",
            lightcoral: "f08080",
            lightcyan: "e0ffff",
            lightgoldenrodyellow: "fafad2",
            lightgray: "d3d3d3",
            lightgreen: "90ee90",
            lightgrey: "d3d3d3",
            lightpink: "ffb6c1",
            lightsalmon: "ffa07a",
            lightseagreen: "20b2aa",
            lightskyblue: "87cefa",
            lightslategray: "789",
            lightslategrey: "789",
            lightsteelblue: "b0c4de",
            lightyellow: "ffffe0",
            lime: "0f0",
            limegreen: "32cd32",
            linen: "faf0e6",
            magenta: "f0f",
            maroon: "800000",
            mediumaquamarine: "66cdaa",
            mediumblue: "0000cd",
            mediumorchid: "ba55d3",
            mediumpurple: "9370db",
            mediumseagreen: "3cb371",
            mediumslateblue: "7b68ee",
            mediumspringgreen: "00fa9a",
            mediumturquoise: "48d1cc",
            mediumvioletred: "c71585",
            midnightblue: "191970",
            mintcream: "f5fffa",
            mistyrose: "ffe4e1",
            moccasin: "ffe4b5",
            navajowhite: "ffdead",
            navy: "000080",
            oldlace: "fdf5e6",
            olive: "808000",
            olivedrab: "6b8e23",
            orange: "ffa500",
            orangered: "ff4500",
            orchid: "da70d6",
            palegoldenrod: "eee8aa",
            palegreen: "98fb98",
            paleturquoise: "afeeee",
            palevioletred: "db7093",
            papayawhip: "ffefd5",
            peachpuff: "ffdab9",
            peru: "cd853f",
            pink: "ffc0cb",
            plum: "dda0dd",
            powderblue: "b0e0e6",
            purple: "800080",
            rebeccapurple: "663399",
            red: "f00",
            rosybrown: "bc8f8f",
            royalblue: "4169e1",
            saddlebrown: "8b4513",
            salmon: "fa8072",
            sandybrown: "f4a460",
            seagreen: "2e8b57",
            seashell: "fff5ee",
            sienna: "a0522d",
            silver: "c0c0c0",
            skyblue: "87ceeb",
            slateblue: "6a5acd",
            slategray: "708090",
            slategrey: "708090",
            snow: "fffafa",
            springgreen: "00ff7f",
            steelblue: "4682b4",
            tan: "d2b48c",
            teal: "008080",
            thistle: "d8bfd8",
            tomato: "ff6347",
            turquoise: "40e0d0",
            violet: "ee82ee",
            wheat: "f5deb3",
            white: "fff",
            whitesmoke: "f5f5f5",
            yellow: "ff0",
            yellowgreen: "9acd32"
          }; // Make it easy to access colors via `hexNames[hex]`

          var hexNames = tinycolor.hexNames = flip(names); // Utilities
          // ---------
          // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`

          function flip(o) {
            var flipped = {};

            for (var i in o) {
              if (o.hasOwnProperty(i)) {
                flipped[o[i]] = i;
              }
            }

            return flipped;
          } // Return a valid alpha value [0,1] with all invalid values being set to 1


          function boundAlpha(a) {
            a = parseFloat(a);

            if (isNaN(a) || a < 0 || a > 1) {
              a = 1;
            }

            return a;
          } // Take input from [0, n] and return it as [0, 1]


          function bound01(n, max) {
            if (isOnePointZero(n)) {
              n = "100%";
            }

            var processPercent = isPercentage(n);
            n = mathMin(max, mathMax(0, parseFloat(n))); // Automatically convert percentage into number

            if (processPercent) {
              n = parseInt(n * max, 10) / 100;
            } // Handle floating point rounding errors


            if (Math.abs(n - max) < 0.000001) {
              return 1;
            } // Convert into [0, 1] range if it isn't already


            return n % max / parseFloat(max);
          } // Force a number between 0 and 1


          function clamp01(val) {
            return mathMin(1, mathMax(0, val));
          } // Parse a base-16 hex value into a base-10 integer


          function parseIntFromHex(val) {
            return parseInt(val, 16);
          } // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
          // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>


          function isOnePointZero(n) {
            return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
          } // Check to see if string passed in is a percentage


          function isPercentage(n) {
            return typeof n === "string" && n.indexOf('%') != -1;
          } // Force a hex value to have 2 characters


          function pad2(c) {
            return c.length == 1 ? '0' + c : '' + c;
          } // Replace a decimal with it's percentage value


          function convertToPercentage(n) {
            if (n <= 1) {
              n = n * 100 + "%";
            }

            return n;
          } // Converts a decimal to a hex value


          function convertDecimalToHex(d) {
            return Math.round(parseFloat(d) * 255).toString(16);
          } // Converts a hex value to a decimal


          function convertHexToDecimal(h) {
            return parseIntFromHex(h) / 255;
          }

          var matchers = function () {
            // <http://www.w3.org/TR/css3-values/#integers>
            var CSS_INTEGER = "[-\\+]?\\d+%?"; // <http://www.w3.org/TR/css3-values/#number-value>

            var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?"; // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.

            var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")"; // Actual matching.
            // Parentheses and commas are optional, but not required.
            // Whitespace can take the place of commas or opening paren

            var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
            var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
            return {
              CSS_UNIT: new RegExp(CSS_UNIT),
              rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
              rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
              hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
              hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
              hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
              hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
              hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
              hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
              hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
              hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
            };
          }(); // `isValidCSSUnit`
          // Take in a single string / number and check to see if it looks like a CSS unit
          // (see `matchers` above for definition).


          function isValidCSSUnit(color) {
            return !!matchers.CSS_UNIT.exec(color);
          } // `stringInputToObject`
          // Permissive string parsing.  Take in a number of formats, and output an object
          // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`


          function stringInputToObject(color) {
            color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();
            var named = false;

            if (names[color]) {
              color = names[color];
              named = true;
            } else if (color == 'transparent') {
              return {
                r: 0,
                g: 0,
                b: 0,
                a: 0,
                format: "name"
              };
            } // Try to match string input using regular expressions.
            // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
            // Just return an object and let the conversion functions handle that.
            // This way the result will be the same whether the tinycolor is initialized with string or object.


            var match;

            if (match = matchers.rgb.exec(color)) {
              return {
                r: match[1],
                g: match[2],
                b: match[3]
              };
            }

            if (match = matchers.rgba.exec(color)) {
              return {
                r: match[1],
                g: match[2],
                b: match[3],
                a: match[4]
              };
            }

            if (match = matchers.hsl.exec(color)) {
              return {
                h: match[1],
                s: match[2],
                l: match[3]
              };
            }

            if (match = matchers.hsla.exec(color)) {
              return {
                h: match[1],
                s: match[2],
                l: match[3],
                a: match[4]
              };
            }

            if (match = matchers.hsv.exec(color)) {
              return {
                h: match[1],
                s: match[2],
                v: match[3]
              };
            }

            if (match = matchers.hsva.exec(color)) {
              return {
                h: match[1],
                s: match[2],
                v: match[3],
                a: match[4]
              };
            }

            if (match = matchers.hex8.exec(color)) {
              return {
                r: parseIntFromHex(match[1]),
                g: parseIntFromHex(match[2]),
                b: parseIntFromHex(match[3]),
                a: convertHexToDecimal(match[4]),
                format: named ? "name" : "hex8"
              };
            }

            if (match = matchers.hex6.exec(color)) {
              return {
                r: parseIntFromHex(match[1]),
                g: parseIntFromHex(match[2]),
                b: parseIntFromHex(match[3]),
                format: named ? "name" : "hex"
              };
            }

            if (match = matchers.hex4.exec(color)) {
              return {
                r: parseIntFromHex(match[1] + '' + match[1]),
                g: parseIntFromHex(match[2] + '' + match[2]),
                b: parseIntFromHex(match[3] + '' + match[3]),
                a: convertHexToDecimal(match[4] + '' + match[4]),
                format: named ? "name" : "hex8"
              };
            }

            if (match = matchers.hex3.exec(color)) {
              return {
                r: parseIntFromHex(match[1] + '' + match[1]),
                g: parseIntFromHex(match[2] + '' + match[2]),
                b: parseIntFromHex(match[3] + '' + match[3]),
                format: named ? "name" : "hex"
              };
            }

            return false;
          }

          function validateWCAG2Parms(parms) {
            // return valid WCAG2 parms for isReadable.
            // If input parms are invalid, return {"level":"AA", "size":"small"}
            var level, size;
            parms = parms || {
              "level": "AA",
              "size": "small"
            };
            level = (parms.level || "AA").toUpperCase();
            size = (parms.size || "small").toLowerCase();

            if (level !== "AA" && level !== "AAA") {
              level = "AA";
            }

            if (size !== "small" && size !== "large") {
              size = "small";
            }

            return {
              "level": level,
              "size": size
            };
          } // Node: Export function


          if ( module.exports) {
            module.exports = tinycolor;
          } // AMD/requirejs: Define the module
          else {
                window.tinycolor = tinycolor;
              }
        })(Math);
      });

      var color = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.red = exports.getContrastingColor = exports.isValidHex = exports.toState = exports.simpleCheckForValidColor = undefined;

        var _each2 = _interopRequireDefault(each);

        var _tinycolor2 = _interopRequireDefault(tinycolor);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var simpleCheckForValidColor = exports.simpleCheckForValidColor = function simpleCheckForValidColor(data) {
          var keysToCheck = ['r', 'g', 'b', 'a', 'h', 's', 'l', 'v'];
          var checked = 0;
          var passed = 0;
          (0, _each2.default)(keysToCheck, function (letter) {
            if (data[letter]) {
              checked += 1;

              if (!isNaN(data[letter])) {
                passed += 1;
              }

              if (letter === 's' || letter === 'l') {
                var percentPatt = /^\d+%$/;

                if (percentPatt.test(data[letter])) {
                  passed += 1;
                }
              }
            }
          });
          return checked === passed ? data : false;
        };

        var toState = exports.toState = function toState(data, oldHue) {
          var color = data.hex ? (0, _tinycolor2.default)(data.hex) : (0, _tinycolor2.default)(data);
          var hsl = color.toHsl();
          var hsv = color.toHsv();
          var rgb = color.toRgb();
          var hex = color.toHex();

          if (hsl.s === 0) {
            hsl.h = oldHue || 0;
            hsv.h = oldHue || 0;
          }

          var transparent = hex === '000000' && rgb.a === 0;
          return {
            hsl: hsl,
            hex: transparent ? 'transparent' : '#' + hex,
            rgb: rgb,
            hsv: hsv,
            oldHue: data.h || oldHue || hsl.h,
            source: data.source
          };
        };

        var isValidHex = exports.isValidHex = function isValidHex(hex) {
          // disable hex4 and hex8
          var lh = String(hex).charAt(0) === '#' ? 1 : 0;
          return hex.length !== 4 + lh && hex.length < 7 + lh && (0, _tinycolor2.default)(hex).isValid();
        };

        var getContrastingColor = exports.getContrastingColor = function getContrastingColor(data) {
          if (!data) {
            return '#fff';
          }

          var col = toState(data);

          if (col.hex === 'transparent') {
            return 'rgba(0,0,0,0.4)';
          }

          var yiq = (col.rgb.r * 299 + col.rgb.g * 587 + col.rgb.b * 114) / 1000;
          return yiq >= 128 ? '#000' : '#fff';
        };

        var red = exports.red = {
          hsl: {
            a: 1,
            h: 0,
            l: 0.5,
            s: 1
          },
          hex: '#ff0000',
          rgb: {
            r: 255,
            g: 0,
            b: 0,
            a: 1
          },
          hsv: {
            h: 0,
            s: 1,
            v: 1,
            a: 1
          }
        };
        exports.default = exports;
      });

      var ColorWrap_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ColorWrap = undefined;

        var _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        var _createClass = function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();

        var _react2 = _interopRequireDefault(React);

        var _debounce2 = _interopRequireDefault(debounce_1);

        var _color2 = _interopRequireDefault(color);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }

          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        var ColorWrap = exports.ColorWrap = function ColorWrap(Picker) {
          var ColorPicker = function (_ref) {
            _inherits(ColorPicker, _ref);

            function ColorPicker(props) {
              _classCallCheck(this, ColorPicker);

              var _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this));

              _this.handleChange = function (data, event) {
                var isValidColor = _color2.default.simpleCheckForValidColor(data);

                if (isValidColor) {
                  var colors = _color2.default.toState(data, data.h || _this.state.oldHue);

                  _this.setState(colors);

                  _this.props.onChangeComplete && _this.debounce(_this.props.onChangeComplete, colors, event);
                  _this.props.onChange && _this.props.onChange(colors, event);
                }
              };

              _this.handleSwatchHover = function (data, event) {
                var isValidColor = _color2.default.simpleCheckForValidColor(data);

                if (isValidColor) {
                  var colors = _color2.default.toState(data, data.h || _this.state.oldHue);

                  _this.props.onSwatchHover && _this.props.onSwatchHover(colors, event);
                }
              };

              _this.state = _extends({}, _color2.default.toState(props.color, 0));
              _this.debounce = (0, _debounce2.default)(function (fn, data, event) {
                fn(data, event);
              }, 100);
              return _this;
            }

            _createClass(ColorPicker, [{
              key: 'render',
              value: function render() {
                var optionalEvents = {};

                if (this.props.onSwatchHover) {
                  optionalEvents.onSwatchHover = this.handleSwatchHover;
                }

                return _react2.default.createElement(Picker, _extends({}, this.props, this.state, {
                  onChange: this.handleChange
                }, optionalEvents));
              }
            }], [{
              key: 'getDerivedStateFromProps',
              value: function getDerivedStateFromProps(nextProps, state) {
                return _extends({}, _color2.default.toState(nextProps.color, state.oldHue));
              }
            }]);

            return ColorPicker;
          }(React.PureComponent || React.Component);

          ColorPicker.propTypes = _extends({}, Picker.propTypes);
          ColorPicker.defaultProps = _extends({}, Picker.defaultProps, {
            color: {
              h: 250,
              s: 0.50,
              l: 0.20,
              a: 1
            }
          });
          return ColorPicker;
        };

        exports.default = ColorWrap;
      });

      var interaction = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.handleFocus = undefined;

        var _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        var _createClass = function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();

        var _react2 = _interopRequireDefault(React);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }

          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        /* eslint-disable no-invalid-this */


        var handleFocus = exports.handleFocus = function handleFocus(Component) {
          var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'span';
          return function (_React$Component) {
            _inherits(Focus, _React$Component);

            function Focus() {
              var _ref;

              var _temp, _this, _ret;

              _classCallCheck(this, Focus);

              for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Focus.__proto__ || Object.getPrototypeOf(Focus)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
                focus: false
              }, _this.handleFocus = function () {
                return _this.setState({
                  focus: true
                });
              }, _this.handleBlur = function () {
                return _this.setState({
                  focus: false
                });
              }, _temp), _possibleConstructorReturn(_this, _ret);
            }

            _createClass(Focus, [{
              key: 'render',
              value: function render() {
                return _react2.default.createElement(Span, {
                  onFocus: this.handleFocus,
                  onBlur: this.handleBlur
                }, _react2.default.createElement(Component, _extends({}, this.props, this.state)));
              }
            }]);

            return Focus;
          }(_react2.default.Component);
        };
      });

      var Swatch_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Swatch = undefined;

        var _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _Checkboard2 = _interopRequireDefault(Checkboard_1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var ENTER = 13;

        var Swatch = exports.Swatch = function Swatch(_ref) {
          var color = _ref.color,
              style = _ref.style,
              _ref$onClick = _ref.onClick,
              onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,
              onHover = _ref.onHover,
              _ref$title = _ref.title,
              title = _ref$title === undefined ? color : _ref$title,
              children = _ref.children,
              focus = _ref.focus,
              _ref$focusStyle = _ref.focusStyle,
              focusStyle = _ref$focusStyle === undefined ? {} : _ref$focusStyle;
          var transparent = color === 'transparent';
          var styles = (0, _reactcss2.default)({
            default: {
              swatch: _extends({
                background: color,
                height: '100%',
                width: '100%',
                cursor: 'pointer',
                position: 'relative',
                outline: 'none'
              }, style, focus ? focusStyle : {})
            }
          });

          var handleClick = function handleClick(e) {
            return onClick(color, e);
          };

          var handleKeyDown = function handleKeyDown(e) {
            return e.keyCode === ENTER && onClick(color, e);
          };

          var handleHover = function handleHover(e) {
            return onHover(color, e);
          };

          var optionalEvents = {};

          if (onHover) {
            optionalEvents.onMouseOver = handleHover;
          }

          return _react2.default.createElement('div', _extends({
            style: styles.swatch,
            onClick: handleClick,
            title: title,
            tabIndex: 0,
            onKeyDown: handleKeyDown
          }, optionalEvents), children, transparent && _react2.default.createElement(_Checkboard2.default, {
            borderRadius: styles.swatch.borderRadius,
            boxShadow: 'inset 0 0 0 1px rgba(0,0,0,0.1)'
          }));
        };

        exports.default = (0, interaction.handleFocus)(Swatch);
      });

      var common = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        Object.defineProperty(exports, 'Alpha', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(Alpha_1).default;
          }
        });
        Object.defineProperty(exports, 'Checkboard', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(Checkboard_1).default;
          }
        });
        Object.defineProperty(exports, 'EditableInput', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(EditableInput_1).default;
          }
        });
        Object.defineProperty(exports, 'Hue', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(Hue_1).default;
          }
        });
        Object.defineProperty(exports, 'Raised', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(Raised_1).default;
          }
        });
        Object.defineProperty(exports, 'Saturation', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(Saturation_1).default;
          }
        });
        Object.defineProperty(exports, 'ColorWrap', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(ColorWrap_1).default;
          }
        });
        Object.defineProperty(exports, 'Swatch', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(Swatch_1).default;
          }
        });

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }
      });

      var AlphaPointer_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.AlphaPointer = undefined;

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var AlphaPointer = exports.AlphaPointer = function AlphaPointer(_ref) {
          var direction = _ref.direction;
          var styles = (0, _reactcss2.default)({
            'default': {
              picker: {
                width: '18px',
                height: '18px',
                borderRadius: '50%',
                transform: 'translate(-9px, -1px)',
                backgroundColor: 'rgb(248, 248, 248)',
                boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)'
              }
            },
            'vertical': {
              picker: {
                transform: 'translate(-3px, -9px)'
              }
            }
          }, {
            vertical: direction === 'vertical'
          });
          return _react2.default.createElement('div', {
            style: styles.picker
          });
        };

        exports.default = AlphaPointer;
      });

      var Alpha = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.AlphaPicker = undefined;

        var _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _AlphaPointer2 = _interopRequireDefault(AlphaPointer_1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var AlphaPicker = exports.AlphaPicker = function AlphaPicker(_ref) {
          var rgb = _ref.rgb,
              hsl = _ref.hsl,
              width = _ref.width,
              height = _ref.height,
              onChange = _ref.onChange,
              direction = _ref.direction,
              style = _ref.style,
              renderers = _ref.renderers,
              pointer = _ref.pointer,
              _ref$className = _ref.className,
              className = _ref$className === undefined ? '' : _ref$className;
          var styles = (0, _reactcss2.default)({
            'default': {
              picker: {
                position: 'relative',
                width: width,
                height: height
              },
              alpha: {
                radius: '2px',
                style: style
              }
            }
          });
          return _react2.default.createElement('div', {
            style: styles.picker,
            className: 'alpha-picker ' + className
          }, _react2.default.createElement(common.Alpha, _extends({}, styles.alpha, {
            rgb: rgb,
            hsl: hsl,
            pointer: pointer,
            renderers: renderers,
            onChange: onChange,
            direction: direction
          })));
        };

        AlphaPicker.defaultProps = {
          width: '316px',
          height: '16px',
          direction: 'horizontal',
          pointer: _AlphaPointer2.default
        };
        exports.default = (0, common.ColorWrap)(AlphaPicker);
      });

      var BlockSwatches_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BlockSwatches = undefined;

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _map2 = _interopRequireDefault(map_1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var BlockSwatches = exports.BlockSwatches = function BlockSwatches(_ref) {
          var colors = _ref.colors,
              onClick = _ref.onClick,
              onSwatchHover = _ref.onSwatchHover;
          var styles = (0, _reactcss2.default)({
            'default': {
              swatches: {
                marginRight: '-10px'
              },
              swatch: {
                width: '22px',
                height: '22px',
                float: 'left',
                marginRight: '10px',
                marginBottom: '10px',
                borderRadius: '4px'
              },
              clear: {
                clear: 'both'
              }
            }
          });
          return _react2.default.createElement('div', {
            style: styles.swatches
          }, (0, _map2.default)(colors, function (c) {
            return _react2.default.createElement(common.Swatch, {
              key: c,
              color: c,
              style: styles.swatch,
              onClick: onClick,
              onHover: onSwatchHover,
              focusStyle: {
                boxShadow: '0 0 4px ' + c
              }
            });
          }), _react2.default.createElement('div', {
            style: styles.clear
          }));
        };

        exports.default = BlockSwatches;
      });

      var Block_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Block = undefined;

        var _react2 = _interopRequireDefault(React);

        var _propTypes2 = _interopRequireDefault(propTypes);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _merge2 = _interopRequireDefault(merge_1);

        var _color2 = _interopRequireDefault(color);

        var _BlockSwatches2 = _interopRequireDefault(BlockSwatches_1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var Block = exports.Block = function Block(_ref) {
          var onChange = _ref.onChange,
              onSwatchHover = _ref.onSwatchHover,
              hex = _ref.hex,
              colors = _ref.colors,
              width = _ref.width,
              triangle = _ref.triangle,
              _ref$styles = _ref.styles,
              passedStyles = _ref$styles === undefined ? {} : _ref$styles,
              _ref$className = _ref.className,
              className = _ref$className === undefined ? '' : _ref$className;
          var transparent = hex === 'transparent';

          var handleChange = function handleChange(hexCode, e) {
            _color2.default.isValidHex(hexCode) && onChange({
              hex: hexCode,
              source: 'hex'
            }, e);
          };

          var styles = (0, _reactcss2.default)((0, _merge2.default)({
            'default': {
              card: {
                width: width,
                background: '#fff',
                boxShadow: '0 1px rgba(0,0,0,.1)',
                borderRadius: '6px',
                position: 'relative'
              },
              head: {
                height: '110px',
                background: hex,
                borderRadius: '6px 6px 0 0',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                position: 'relative'
              },
              body: {
                padding: '10px'
              },
              label: {
                fontSize: '18px',
                color: _color2.default.getContrastingColor(hex),
                position: 'relative'
              },
              triangle: {
                width: '0px',
                height: '0px',
                borderStyle: 'solid',
                borderWidth: '0 10px 10px 10px',
                borderColor: 'transparent transparent ' + hex + ' transparent',
                position: 'absolute',
                top: '-10px',
                left: '50%',
                marginLeft: '-10px'
              },
              input: {
                width: '100%',
                fontSize: '12px',
                color: '#666',
                border: '0px',
                outline: 'none',
                height: '22px',
                boxShadow: 'inset 0 0 0 1px #ddd',
                borderRadius: '4px',
                padding: '0 7px',
                boxSizing: 'border-box'
              }
            },
            'hide-triangle': {
              triangle: {
                display: 'none'
              }
            }
          }, passedStyles), {
            'hide-triangle': triangle === 'hide'
          });
          return _react2.default.createElement('div', {
            style: styles.card,
            className: 'block-picker ' + className
          }, _react2.default.createElement('div', {
            style: styles.triangle
          }), _react2.default.createElement('div', {
            style: styles.head
          }, transparent && _react2.default.createElement(common.Checkboard, {
            borderRadius: '6px 6px 0 0'
          }), _react2.default.createElement('div', {
            style: styles.label
          }, hex)), _react2.default.createElement('div', {
            style: styles.body
          }, _react2.default.createElement(_BlockSwatches2.default, {
            colors: colors,
            onClick: handleChange,
            onSwatchHover: onSwatchHover
          }), _react2.default.createElement(common.EditableInput, {
            style: {
              input: styles.input
            },
            value: hex,
            onChange: handleChange
          })));
        };

        Block.propTypes = {
          width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
          colors: _propTypes2.default.arrayOf(_propTypes2.default.string),
          triangle: _propTypes2.default.oneOf(['top', 'hide']),
          styles: _propTypes2.default.object
        };
        Block.defaultProps = {
          width: 170,
          colors: ['#D9E3F0', '#F47373', '#697689', '#37D67A', '#2CCCE4', '#555555', '#dce775', '#ff8a65', '#ba68c8'],
          triangle: 'top',
          styles: {}
        };
        exports.default = (0, common.ColorWrap)(Block);
      });

      var red = {
        "50": "#ffebee",
        "100": "#ffcdd2",
        "200": "#ef9a9a",
        "300": "#e57373",
        "400": "#ef5350",
        "500": "#f44336",
        "600": "#e53935",
        "700": "#d32f2f",
        "800": "#c62828",
        "900": "#b71c1c",
        "a100": "#ff8a80",
        "a200": "#ff5252",
        "a400": "#ff1744",
        "a700": "#d50000"
      };
      var pink = {
        "50": "#fce4ec",
        "100": "#f8bbd0",
        "200": "#f48fb1",
        "300": "#f06292",
        "400": "#ec407a",
        "500": "#e91e63",
        "600": "#d81b60",
        "700": "#c2185b",
        "800": "#ad1457",
        "900": "#880e4f",
        "a100": "#ff80ab",
        "a200": "#ff4081",
        "a400": "#f50057",
        "a700": "#c51162"
      };
      var purple = {
        "50": "#f3e5f5",
        "100": "#e1bee7",
        "200": "#ce93d8",
        "300": "#ba68c8",
        "400": "#ab47bc",
        "500": "#9c27b0",
        "600": "#8e24aa",
        "700": "#7b1fa2",
        "800": "#6a1b9a",
        "900": "#4a148c",
        "a100": "#ea80fc",
        "a200": "#e040fb",
        "a400": "#d500f9",
        "a700": "#aa00ff"
      };
      var deepPurple = {
        "50": "#ede7f6",
        "100": "#d1c4e9",
        "200": "#b39ddb",
        "300": "#9575cd",
        "400": "#7e57c2",
        "500": "#673ab7",
        "600": "#5e35b1",
        "700": "#512da8",
        "800": "#4527a0",
        "900": "#311b92",
        "a100": "#b388ff",
        "a200": "#7c4dff",
        "a400": "#651fff",
        "a700": "#6200ea"
      };
      var indigo = {
        "50": "#e8eaf6",
        "100": "#c5cae9",
        "200": "#9fa8da",
        "300": "#7986cb",
        "400": "#5c6bc0",
        "500": "#3f51b5",
        "600": "#3949ab",
        "700": "#303f9f",
        "800": "#283593",
        "900": "#1a237e",
        "a100": "#8c9eff",
        "a200": "#536dfe",
        "a400": "#3d5afe",
        "a700": "#304ffe"
      };
      var blue = {
        "50": "#e3f2fd",
        "100": "#bbdefb",
        "200": "#90caf9",
        "300": "#64b5f6",
        "400": "#42a5f5",
        "500": "#2196f3",
        "600": "#1e88e5",
        "700": "#1976d2",
        "800": "#1565c0",
        "900": "#0d47a1",
        "a100": "#82b1ff",
        "a200": "#448aff",
        "a400": "#2979ff",
        "a700": "#2962ff"
      };
      var lightBlue = {
        "50": "#e1f5fe",
        "100": "#b3e5fc",
        "200": "#81d4fa",
        "300": "#4fc3f7",
        "400": "#29b6f6",
        "500": "#03a9f4",
        "600": "#039be5",
        "700": "#0288d1",
        "800": "#0277bd",
        "900": "#01579b",
        "a100": "#80d8ff",
        "a200": "#40c4ff",
        "a400": "#00b0ff",
        "a700": "#0091ea"
      };
      var cyan = {
        "50": "#e0f7fa",
        "100": "#b2ebf2",
        "200": "#80deea",
        "300": "#4dd0e1",
        "400": "#26c6da",
        "500": "#00bcd4",
        "600": "#00acc1",
        "700": "#0097a7",
        "800": "#00838f",
        "900": "#006064",
        "a100": "#84ffff",
        "a200": "#18ffff",
        "a400": "#00e5ff",
        "a700": "#00b8d4"
      };
      var teal = {
        "50": "#e0f2f1",
        "100": "#b2dfdb",
        "200": "#80cbc4",
        "300": "#4db6ac",
        "400": "#26a69a",
        "500": "#009688",
        "600": "#00897b",
        "700": "#00796b",
        "800": "#00695c",
        "900": "#004d40",
        "a100": "#a7ffeb",
        "a200": "#64ffda",
        "a400": "#1de9b6",
        "a700": "#00bfa5"
      };
      var green = {
        "50": "#e8f5e9",
        "100": "#c8e6c9",
        "200": "#a5d6a7",
        "300": "#81c784",
        "400": "#66bb6a",
        "500": "#4caf50",
        "600": "#43a047",
        "700": "#388e3c",
        "800": "#2e7d32",
        "900": "#1b5e20",
        "a100": "#b9f6ca",
        "a200": "#69f0ae",
        "a400": "#00e676",
        "a700": "#00c853"
      };
      var lightGreen = {
        "50": "#f1f8e9",
        "100": "#dcedc8",
        "200": "#c5e1a5",
        "300": "#aed581",
        "400": "#9ccc65",
        "500": "#8bc34a",
        "600": "#7cb342",
        "700": "#689f38",
        "800": "#558b2f",
        "900": "#33691e",
        "a100": "#ccff90",
        "a200": "#b2ff59",
        "a400": "#76ff03",
        "a700": "#64dd17"
      };
      var lime = {
        "50": "#f9fbe7",
        "100": "#f0f4c3",
        "200": "#e6ee9c",
        "300": "#dce775",
        "400": "#d4e157",
        "500": "#cddc39",
        "600": "#c0ca33",
        "700": "#afb42b",
        "800": "#9e9d24",
        "900": "#827717",
        "a100": "#f4ff81",
        "a200": "#eeff41",
        "a400": "#c6ff00",
        "a700": "#aeea00"
      };
      var yellow = {
        "50": "#fffde7",
        "100": "#fff9c4",
        "200": "#fff59d",
        "300": "#fff176",
        "400": "#ffee58",
        "500": "#ffeb3b",
        "600": "#fdd835",
        "700": "#fbc02d",
        "800": "#f9a825",
        "900": "#f57f17",
        "a100": "#ffff8d",
        "a200": "#ffff00",
        "a400": "#ffea00",
        "a700": "#ffd600"
      };
      var amber = {
        "50": "#fff8e1",
        "100": "#ffecb3",
        "200": "#ffe082",
        "300": "#ffd54f",
        "400": "#ffca28",
        "500": "#ffc107",
        "600": "#ffb300",
        "700": "#ffa000",
        "800": "#ff8f00",
        "900": "#ff6f00",
        "a100": "#ffe57f",
        "a200": "#ffd740",
        "a400": "#ffc400",
        "a700": "#ffab00"
      };
      var orange = {
        "50": "#fff3e0",
        "100": "#ffe0b2",
        "200": "#ffcc80",
        "300": "#ffb74d",
        "400": "#ffa726",
        "500": "#ff9800",
        "600": "#fb8c00",
        "700": "#f57c00",
        "800": "#ef6c00",
        "900": "#e65100",
        "a100": "#ffd180",
        "a200": "#ffab40",
        "a400": "#ff9100",
        "a700": "#ff6d00"
      };
      var deepOrange = {
        "50": "#fbe9e7",
        "100": "#ffccbc",
        "200": "#ffab91",
        "300": "#ff8a65",
        "400": "#ff7043",
        "500": "#ff5722",
        "600": "#f4511e",
        "700": "#e64a19",
        "800": "#d84315",
        "900": "#bf360c",
        "a100": "#ff9e80",
        "a200": "#ff6e40",
        "a400": "#ff3d00",
        "a700": "#dd2c00"
      };
      var brown = {
        "50": "#efebe9",
        "100": "#d7ccc8",
        "200": "#bcaaa4",
        "300": "#a1887f",
        "400": "#8d6e63",
        "500": "#795548",
        "600": "#6d4c41",
        "700": "#5d4037",
        "800": "#4e342e",
        "900": "#3e2723"
      };
      var grey = {
        "50": "#fafafa",
        "100": "#f5f5f5",
        "200": "#eeeeee",
        "300": "#e0e0e0",
        "400": "#bdbdbd",
        "500": "#9e9e9e",
        "600": "#757575",
        "700": "#616161",
        "800": "#424242",
        "900": "#212121"
      };
      var blueGrey = {
        "50": "#eceff1",
        "100": "#cfd8dc",
        "200": "#b0bec5",
        "300": "#90a4ae",
        "400": "#78909c",
        "500": "#607d8b",
        "600": "#546e7a",
        "700": "#455a64",
        "800": "#37474f",
        "900": "#263238"
      };
      var darkText = {
        "primary": "rgba(0, 0, 0, 0.87)",
        "secondary": "rgba(0, 0, 0, 0.54)",
        "disabled": "rgba(0, 0, 0, 0.38)",
        "dividers": "rgba(0, 0, 0, 0.12)"
      };
      var lightText = {
        "primary": "rgba(255, 255, 255, 1)",
        "secondary": "rgba(255, 255, 255, 0.7)",
        "disabled": "rgba(255, 255, 255, 0.5)",
        "dividers": "rgba(255, 255, 255, 0.12)"
      };
      var darkIcons = {
        "active": "rgba(0, 0, 0, 0.54)",
        "inactive": "rgba(0, 0, 0, 0.38)"
      };
      var lightIcons = {
        "active": "rgba(255, 255, 255, 1)",
        "inactive": "rgba(255, 255, 255, 0.5)"
      };
      var white = "#ffffff";
      var black = "#000000";
      var _materialColors = {
        red: red,
        pink: pink,
        purple: purple,
        deepPurple: deepPurple,
        indigo: indigo,
        blue: blue,
        lightBlue: lightBlue,
        cyan: cyan,
        teal: teal,
        green: green,
        lightGreen: lightGreen,
        lime: lime,
        yellow: yellow,
        amber: amber,
        orange: orange,
        deepOrange: deepOrange,
        brown: brown,
        grey: grey,
        blueGrey: blueGrey,
        darkText: darkText,
        lightText: lightText,
        darkIcons: darkIcons,
        lightIcons: lightIcons,
        white: white,
        black: black
      };

      var CircleSwatch_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CircleSwatch = undefined;

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var CircleSwatch = exports.CircleSwatch = function CircleSwatch(_ref) {
          var color = _ref.color,
              onClick = _ref.onClick,
              onSwatchHover = _ref.onSwatchHover,
              hover = _ref.hover,
              active = _ref.active,
              circleSize = _ref.circleSize,
              circleSpacing = _ref.circleSpacing;
          var styles = (0, _reactcss2.default)({
            'default': {
              swatch: {
                width: circleSize,
                height: circleSize,
                marginRight: circleSpacing,
                marginBottom: circleSpacing,
                transform: 'scale(1)',
                transition: '100ms transform ease'
              },
              Swatch: {
                borderRadius: '50%',
                background: 'transparent',
                boxShadow: 'inset 0 0 0 ' + (circleSize / 2 + 1) + 'px ' + color,
                transition: '100ms box-shadow ease'
              }
            },
            'hover': {
              swatch: {
                transform: 'scale(1.2)'
              }
            },
            'active': {
              Swatch: {
                boxShadow: 'inset 0 0 0 3px ' + color
              }
            }
          }, {
            hover: hover,
            active: active
          });
          return _react2.default.createElement('div', {
            style: styles.swatch
          }, _react2.default.createElement(common.Swatch, {
            style: styles.Swatch,
            color: color,
            onClick: onClick,
            onHover: onSwatchHover,
            focusStyle: {
              boxShadow: styles.Swatch.boxShadow + ', 0 0 5px ' + color
            }
          }));
        };

        CircleSwatch.defaultProps = {
          circleSize: 28,
          circleSpacing: 14
        };
        exports.default = (0, lib$1.handleHover)(CircleSwatch);
      });

      var Circle_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Circle = undefined;

        var _react2 = _interopRequireDefault(React);

        var _propTypes2 = _interopRequireDefault(propTypes);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _map2 = _interopRequireDefault(map_1);

        var _merge2 = _interopRequireDefault(merge_1);

        var material = _interopRequireWildcard(_materialColors);

        var _CircleSwatch2 = _interopRequireDefault(CircleSwatch_1);

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var Circle = exports.Circle = function Circle(_ref) {
          var width = _ref.width,
              onChange = _ref.onChange,
              onSwatchHover = _ref.onSwatchHover,
              colors = _ref.colors,
              hex = _ref.hex,
              circleSize = _ref.circleSize,
              _ref$styles = _ref.styles,
              passedStyles = _ref$styles === undefined ? {} : _ref$styles,
              circleSpacing = _ref.circleSpacing,
              _ref$className = _ref.className,
              className = _ref$className === undefined ? '' : _ref$className;
          var styles = (0, _reactcss2.default)((0, _merge2.default)({
            'default': {
              card: {
                width: width,
                display: 'flex',
                flexWrap: 'wrap',
                marginRight: -circleSpacing,
                marginBottom: -circleSpacing
              }
            }
          }, passedStyles));

          var handleChange = function handleChange(hexCode, e) {
            return onChange({
              hex: hexCode,
              source: 'hex'
            }, e);
          };

          return _react2.default.createElement('div', {
            style: styles.card,
            className: 'circle-picker ' + className
          }, (0, _map2.default)(colors, function (c) {
            return _react2.default.createElement(_CircleSwatch2.default, {
              key: c,
              color: c,
              onClick: handleChange,
              onSwatchHover: onSwatchHover,
              active: hex === c.toLowerCase(),
              circleSize: circleSize,
              circleSpacing: circleSpacing
            });
          }));
        };

        Circle.propTypes = {
          width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
          circleSize: _propTypes2.default.number,
          circleSpacing: _propTypes2.default.number,
          styles: _propTypes2.default.object
        };
        Circle.defaultProps = {
          width: 252,
          circleSize: 28,
          circleSpacing: 14,
          colors: [material.red['500'], material.pink['500'], material.purple['500'], material.deepPurple['500'], material.indigo['500'], material.blue['500'], material.lightBlue['500'], material.cyan['500'], material.teal['500'], material.green['500'], material.lightGreen['500'], material.lime['500'], material.yellow['500'], material.amber['500'], material.orange['500'], material.deepOrange['500'], material.brown['500'], material.blueGrey['500']],
          styles: {}
        };
        exports.default = (0, common.ColorWrap)(Circle);
      });

      /**
       * Checks if `value` is `undefined`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
       * @example
       *
       * _.isUndefined(void 0);
       * // => true
       *
       * _.isUndefined(null);
       * // => false
       */
      function isUndefined(value) {
        return value === undefined;
      }

      var isUndefined_1 = isUndefined;

      var UnfoldMoreHorizontalIcon = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        var _react2 = _interopRequireDefault(React);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        function _objectWithoutProperties(obj, keys) {
          var target = {};

          for (var i in obj) {
            if (keys.indexOf(i) >= 0) continue;
            if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
            target[i] = obj[i];
          }

          return target;
        }

        var DEFAULT_SIZE = 24;

        exports.default = function (_ref) {
          var _ref$fill = _ref.fill,
              fill = _ref$fill === undefined ? 'currentColor' : _ref$fill,
              _ref$width = _ref.width,
              width = _ref$width === undefined ? DEFAULT_SIZE : _ref$width,
              _ref$height = _ref.height,
              height = _ref$height === undefined ? DEFAULT_SIZE : _ref$height,
              _ref$style = _ref.style,
              style = _ref$style === undefined ? {} : _ref$style,
              props = _objectWithoutProperties(_ref, ['fill', 'width', 'height', 'style']);

          return _react2.default.createElement('svg', _extends({
            viewBox: '0 0 ' + DEFAULT_SIZE + ' ' + DEFAULT_SIZE,
            style: _extends({
              fill: fill,
              width: width,
              height: height
            }, style)
          }, props), _react2.default.createElement('path', {
            d: 'M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z'
          }));
        };

        module.exports = exports.default;
        module.exports.default = exports.default;
      });

      var ChromeFields_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ChromeFields = undefined;

        var _createClass = function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _color2 = _interopRequireDefault(color);

        var _isUndefined2 = _interopRequireDefault(isUndefined_1);

        var _UnfoldMoreHorizontalIcon2 = _interopRequireDefault(UnfoldMoreHorizontalIcon);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }

          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        /* eslint-disable react/no-did-mount-set-state, no-param-reassign */


        var ChromeFields = exports.ChromeFields = function (_React$Component) {
          _inherits(ChromeFields, _React$Component);

          function ChromeFields(props) {
            _classCallCheck(this, ChromeFields);

            var _this = _possibleConstructorReturn(this, (ChromeFields.__proto__ || Object.getPrototypeOf(ChromeFields)).call(this));

            _this.toggleViews = function () {
              if (_this.state.view === 'hex') {
                _this.setState({
                  view: 'rgb'
                });
              } else if (_this.state.view === 'rgb') {
                _this.setState({
                  view: 'hsl'
                });
              } else if (_this.state.view === 'hsl') {
                if (_this.props.hsl.a === 1) {
                  _this.setState({
                    view: 'hex'
                  });
                } else {
                  _this.setState({
                    view: 'rgb'
                  });
                }
              }
            };

            _this.handleChange = function (data, e) {
              if (data.hex) {
                _color2.default.isValidHex(data.hex) && _this.props.onChange({
                  hex: data.hex,
                  source: 'hex'
                }, e);
              } else if (data.r || data.g || data.b) {
                _this.props.onChange({
                  r: data.r || _this.props.rgb.r,
                  g: data.g || _this.props.rgb.g,
                  b: data.b || _this.props.rgb.b,
                  source: 'rgb'
                }, e);
              } else if (data.a) {
                if (data.a < 0) {
                  data.a = 0;
                } else if (data.a > 1) {
                  data.a = 1;
                }

                _this.props.onChange({
                  h: _this.props.hsl.h,
                  s: _this.props.hsl.s,
                  l: _this.props.hsl.l,
                  a: Math.round(data.a * 100) / 100,
                  source: 'rgb'
                }, e);
              } else if (data.h || data.s || data.l) {
                // Remove any occurances of '%'.
                if (typeof data.s === 'string' && data.s.includes('%')) {
                  data.s = data.s.replace('%', '');
                }

                if (typeof data.l === 'string' && data.l.includes('%')) {
                  data.l = data.l.replace('%', '');
                } // We store HSL as a unit interval so we need to override the 1 input to 0.01


                if (data.s == 1) {
                  data.s = 0.01;
                } else if (data.l == 1) {
                  data.l = 0.01;
                }

                _this.props.onChange({
                  h: data.h || _this.props.hsl.h,
                  s: Number(!(0, _isUndefined2.default)(data.s) ? data.s : _this.props.hsl.s),
                  l: Number(!(0, _isUndefined2.default)(data.l) ? data.l : _this.props.hsl.l),
                  source: 'hsl'
                }, e);
              }
            };

            _this.showHighlight = function (e) {
              e.currentTarget.style.background = '#eee';
            };

            _this.hideHighlight = function (e) {
              e.currentTarget.style.background = 'transparent';
            };

            if (props.hsl.a !== 1 && props.view === "hex") {
              _this.state = {
                view: "rgb"
              };
            } else {
              _this.state = {
                view: props.view
              };
            }

            return _this;
          }

          _createClass(ChromeFields, [{
            key: 'render',
            value: function render() {
              var _this2 = this;

              var styles = (0, _reactcss2.default)({
                'default': {
                  wrap: {
                    paddingTop: '16px',
                    display: 'flex'
                  },
                  fields: {
                    flex: '1',
                    display: 'flex',
                    marginLeft: '-6px'
                  },
                  field: {
                    paddingLeft: '6px',
                    width: '100%'
                  },
                  alpha: {
                    paddingLeft: '6px',
                    width: '100%'
                  },
                  toggle: {
                    width: '32px',
                    textAlign: 'right',
                    position: 'relative'
                  },
                  icon: {
                    marginRight: '-4px',
                    marginTop: '12px',
                    cursor: 'pointer',
                    position: 'relative'
                  },
                  iconHighlight: {
                    position: 'absolute',
                    width: '24px',
                    height: '28px',
                    background: '#eee',
                    borderRadius: '4px',
                    top: '10px',
                    left: '12px',
                    display: 'none'
                  },
                  input: {
                    fontSize: '11px',
                    color: '#333',
                    width: '100%',
                    borderRadius: '2px',
                    border: 'none',
                    boxShadow: 'inset 0 0 0 1px #dadada',
                    height: '21px',
                    textAlign: 'center'
                  },
                  label: {
                    textTransform: 'uppercase',
                    fontSize: '11px',
                    lineHeight: '11px',
                    color: '#969696',
                    textAlign: 'center',
                    display: 'block',
                    marginTop: '12px'
                  },
                  svg: {
                    fill: '#333',
                    width: '24px',
                    height: '24px',
                    border: '1px transparent solid',
                    borderRadius: '5px'
                  }
                },
                'disableAlpha': {
                  alpha: {
                    display: 'none'
                  }
                }
              }, this.props, this.state);
              var fields = void 0;

              if (this.state.view === 'hex') {
                fields = _react2.default.createElement('div', {
                  style: styles.fields,
                  className: 'flexbox-fix'
                }, _react2.default.createElement('div', {
                  style: styles.field
                }, _react2.default.createElement(common.EditableInput, {
                  style: {
                    input: styles.input,
                    label: styles.label
                  },
                  label: 'hex',
                  value: this.props.hex,
                  onChange: this.handleChange
                })));
              } else if (this.state.view === 'rgb') {
                fields = _react2.default.createElement('div', {
                  style: styles.fields,
                  className: 'flexbox-fix'
                }, _react2.default.createElement('div', {
                  style: styles.field
                }, _react2.default.createElement(common.EditableInput, {
                  style: {
                    input: styles.input,
                    label: styles.label
                  },
                  label: 'r',
                  value: this.props.rgb.r,
                  onChange: this.handleChange
                })), _react2.default.createElement('div', {
                  style: styles.field
                }, _react2.default.createElement(common.EditableInput, {
                  style: {
                    input: styles.input,
                    label: styles.label
                  },
                  label: 'g',
                  value: this.props.rgb.g,
                  onChange: this.handleChange
                })), _react2.default.createElement('div', {
                  style: styles.field
                }, _react2.default.createElement(common.EditableInput, {
                  style: {
                    input: styles.input,
                    label: styles.label
                  },
                  label: 'b',
                  value: this.props.rgb.b,
                  onChange: this.handleChange
                })), _react2.default.createElement('div', {
                  style: styles.alpha
                }, _react2.default.createElement(common.EditableInput, {
                  style: {
                    input: styles.input,
                    label: styles.label
                  },
                  label: 'a',
                  value: this.props.rgb.a,
                  arrowOffset: 0.01,
                  onChange: this.handleChange
                })));
              } else if (this.state.view === 'hsl') {
                fields = _react2.default.createElement('div', {
                  style: styles.fields,
                  className: 'flexbox-fix'
                }, _react2.default.createElement('div', {
                  style: styles.field
                }, _react2.default.createElement(common.EditableInput, {
                  style: {
                    input: styles.input,
                    label: styles.label
                  },
                  label: 'h',
                  value: Math.round(this.props.hsl.h),
                  onChange: this.handleChange
                })), _react2.default.createElement('div', {
                  style: styles.field
                }, _react2.default.createElement(common.EditableInput, {
                  style: {
                    input: styles.input,
                    label: styles.label
                  },
                  label: 's',
                  value: Math.round(this.props.hsl.s * 100) + '%',
                  onChange: this.handleChange
                })), _react2.default.createElement('div', {
                  style: styles.field
                }, _react2.default.createElement(common.EditableInput, {
                  style: {
                    input: styles.input,
                    label: styles.label
                  },
                  label: 'l',
                  value: Math.round(this.props.hsl.l * 100) + '%',
                  onChange: this.handleChange
                })), _react2.default.createElement('div', {
                  style: styles.alpha
                }, _react2.default.createElement(common.EditableInput, {
                  style: {
                    input: styles.input,
                    label: styles.label
                  },
                  label: 'a',
                  value: this.props.hsl.a,
                  arrowOffset: 0.01,
                  onChange: this.handleChange
                })));
              }

              return _react2.default.createElement('div', {
                style: styles.wrap,
                className: 'flexbox-fix'
              }, fields, _react2.default.createElement('div', {
                style: styles.toggle
              }, _react2.default.createElement('div', {
                style: styles.icon,
                onClick: this.toggleViews,
                ref: function ref(icon) {
                  return _this2.icon = icon;
                }
              }, _react2.default.createElement(_UnfoldMoreHorizontalIcon2.default, {
                style: styles.svg,
                onMouseOver: this.showHighlight,
                onMouseEnter: this.showHighlight,
                onMouseOut: this.hideHighlight
              }))));
            }
          }], [{
            key: 'getDerivedStateFromProps',
            value: function getDerivedStateFromProps(nextProps, state) {
              if (nextProps.hsl.a !== 1 && state.view === 'hex') {
                return {
                  view: 'rgb'
                };
              }

              return null;
            }
          }]);

          return ChromeFields;
        }(_react2.default.Component);

        ChromeFields.defaultProps = {
          view: "hex"
        };
        exports.default = ChromeFields;
      });

      var ChromePointer_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ChromePointer = undefined;

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var ChromePointer = exports.ChromePointer = function ChromePointer() {
          var styles = (0, _reactcss2.default)({
            'default': {
              picker: {
                width: '12px',
                height: '12px',
                borderRadius: '6px',
                transform: 'translate(-6px, -1px)',
                backgroundColor: 'rgb(248, 248, 248)',
                boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)'
              }
            }
          });
          return _react2.default.createElement('div', {
            style: styles.picker
          });
        };

        exports.default = ChromePointer;
      });

      var ChromePointerCircle_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ChromePointerCircle = undefined;

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var ChromePointerCircle = exports.ChromePointerCircle = function ChromePointerCircle() {
          var styles = (0, _reactcss2.default)({
            'default': {
              picker: {
                width: '12px',
                height: '12px',
                borderRadius: '6px',
                boxShadow: 'inset 0 0 0 1px #fff',
                transform: 'translate(-6px, -6px)'
              }
            }
          });
          return _react2.default.createElement('div', {
            style: styles.picker
          });
        };

        exports.default = ChromePointerCircle;
      });

      var Chrome_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Chrome = undefined;

        var _react2 = _interopRequireDefault(React);

        var _propTypes2 = _interopRequireDefault(propTypes);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _merge2 = _interopRequireDefault(merge_1);

        var _ChromeFields2 = _interopRequireDefault(ChromeFields_1);

        var _ChromePointer2 = _interopRequireDefault(ChromePointer_1);

        var _ChromePointerCircle2 = _interopRequireDefault(ChromePointerCircle_1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var Chrome = exports.Chrome = function Chrome(_ref) {
          var width = _ref.width,
              onChange = _ref.onChange,
              disableAlpha = _ref.disableAlpha,
              rgb = _ref.rgb,
              hsl = _ref.hsl,
              hsv = _ref.hsv,
              hex = _ref.hex,
              renderers = _ref.renderers,
              _ref$styles = _ref.styles,
              passedStyles = _ref$styles === undefined ? {} : _ref$styles,
              _ref$className = _ref.className,
              className = _ref$className === undefined ? '' : _ref$className,
              defaultView = _ref.defaultView;
          var styles = (0, _reactcss2.default)((0, _merge2.default)({
            'default': {
              picker: {
                width: width,
                background: '#fff',
                borderRadius: '2px',
                boxShadow: '0 0 2px rgba(0,0,0,.3), 0 4px 8px rgba(0,0,0,.3)',
                boxSizing: 'initial',
                fontFamily: 'Menlo'
              },
              saturation: {
                width: '100%',
                paddingBottom: '55%',
                position: 'relative',
                borderRadius: '2px 2px 0 0',
                overflow: 'hidden'
              },
              Saturation: {
                radius: '2px 2px 0 0'
              },
              body: {
                padding: '16px 16px 12px'
              },
              controls: {
                display: 'flex'
              },
              color: {
                width: '32px'
              },
              swatch: {
                marginTop: '6px',
                width: '16px',
                height: '16px',
                borderRadius: '8px',
                position: 'relative',
                overflow: 'hidden'
              },
              active: {
                absolute: '0px 0px 0px 0px',
                borderRadius: '8px',
                boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.1)',
                background: 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + rgb.a + ')',
                zIndex: '2'
              },
              toggles: {
                flex: '1'
              },
              hue: {
                height: '10px',
                position: 'relative',
                marginBottom: '8px'
              },
              Hue: {
                radius: '2px'
              },
              alpha: {
                height: '10px',
                position: 'relative'
              },
              Alpha: {
                radius: '2px'
              }
            },
            'disableAlpha': {
              color: {
                width: '22px'
              },
              alpha: {
                display: 'none'
              },
              hue: {
                marginBottom: '0px'
              },
              swatch: {
                width: '10px',
                height: '10px',
                marginTop: '0px'
              }
            }
          }, passedStyles), {
            disableAlpha: disableAlpha
          });
          return _react2.default.createElement('div', {
            style: styles.picker,
            className: 'chrome-picker ' + className
          }, _react2.default.createElement('div', {
            style: styles.saturation
          }, _react2.default.createElement(common.Saturation, {
            style: styles.Saturation,
            hsl: hsl,
            hsv: hsv,
            pointer: _ChromePointerCircle2.default,
            onChange: onChange
          })), _react2.default.createElement('div', {
            style: styles.body
          }, _react2.default.createElement('div', {
            style: styles.controls,
            className: 'flexbox-fix'
          }, _react2.default.createElement('div', {
            style: styles.color
          }, _react2.default.createElement('div', {
            style: styles.swatch
          }, _react2.default.createElement('div', {
            style: styles.active
          }), _react2.default.createElement(common.Checkboard, {
            renderers: renderers
          }))), _react2.default.createElement('div', {
            style: styles.toggles
          }, _react2.default.createElement('div', {
            style: styles.hue
          }, _react2.default.createElement(common.Hue, {
            style: styles.Hue,
            hsl: hsl,
            pointer: _ChromePointer2.default,
            onChange: onChange
          })), _react2.default.createElement('div', {
            style: styles.alpha
          }, _react2.default.createElement(common.Alpha, {
            style: styles.Alpha,
            rgb: rgb,
            hsl: hsl,
            pointer: _ChromePointer2.default,
            renderers: renderers,
            onChange: onChange
          })))), _react2.default.createElement(_ChromeFields2.default, {
            rgb: rgb,
            hsl: hsl,
            hex: hex,
            view: defaultView,
            onChange: onChange,
            disableAlpha: disableAlpha
          })));
        };

        Chrome.propTypes = {
          width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
          disableAlpha: _propTypes2.default.bool,
          styles: _propTypes2.default.object,
          defaultView: _propTypes2.default.oneOf(["hex", "rgb", "hsl"])
        };
        Chrome.defaultProps = {
          width: 225,
          disableAlpha: false,
          styles: {}
        };
        exports.default = (0, common.ColorWrap)(Chrome);
      });

      var CompactColor_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CompactColor = undefined;

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _color2 = _interopRequireDefault(color);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var CompactColor = exports.CompactColor = function CompactColor(_ref) {
          var color = _ref.color,
              _ref$onClick = _ref.onClick,
              onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,
              onSwatchHover = _ref.onSwatchHover,
              active = _ref.active;
          var styles = (0, _reactcss2.default)({
            'default': {
              color: {
                background: color,
                width: '15px',
                height: '15px',
                float: 'left',
                marginRight: '5px',
                marginBottom: '5px',
                position: 'relative',
                cursor: 'pointer'
              },
              dot: {
                absolute: '5px 5px 5px 5px',
                background: _color2.default.getContrastingColor(color),
                borderRadius: '50%',
                opacity: '0'
              }
            },
            'active': {
              dot: {
                opacity: '1'
              }
            },
            'color-#FFFFFF': {
              color: {
                boxShadow: 'inset 0 0 0 1px #ddd'
              },
              dot: {
                background: '#000'
              }
            },
            'transparent': {
              dot: {
                background: '#000'
              }
            }
          }, {
            active: active,
            'color-#FFFFFF': color === '#FFFFFF',
            'transparent': color === 'transparent'
          });
          return _react2.default.createElement(common.Swatch, {
            style: styles.color,
            color: color,
            onClick: onClick,
            onHover: onSwatchHover,
            focusStyle: {
              boxShadow: '0 0 4px ' + color
            }
          }, _react2.default.createElement('div', {
            style: styles.dot
          }));
        };

        exports.default = CompactColor;
      });

      var CompactFields_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CompactFields = undefined;

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var CompactFields = exports.CompactFields = function CompactFields(_ref) {
          var hex = _ref.hex,
              rgb = _ref.rgb,
              onChange = _ref.onChange;
          var styles = (0, _reactcss2.default)({
            'default': {
              fields: {
                display: 'flex',
                paddingBottom: '6px',
                paddingRight: '5px',
                position: 'relative'
              },
              active: {
                position: 'absolute',
                top: '6px',
                left: '5px',
                height: '9px',
                width: '9px',
                background: hex
              },
              HEXwrap: {
                flex: '6',
                position: 'relative'
              },
              HEXinput: {
                width: '80%',
                padding: '0px',
                paddingLeft: '20%',
                border: 'none',
                outline: 'none',
                background: 'none',
                fontSize: '12px',
                color: '#333',
                height: '16px'
              },
              HEXlabel: {
                display: 'none'
              },
              RGBwrap: {
                flex: '3',
                position: 'relative'
              },
              RGBinput: {
                width: '70%',
                padding: '0px',
                paddingLeft: '30%',
                border: 'none',
                outline: 'none',
                background: 'none',
                fontSize: '12px',
                color: '#333',
                height: '16px'
              },
              RGBlabel: {
                position: 'absolute',
                top: '3px',
                left: '0px',
                lineHeight: '16px',
                textTransform: 'uppercase',
                fontSize: '12px',
                color: '#999'
              }
            }
          });

          var handleChange = function handleChange(data, e) {
            if (data.r || data.g || data.b) {
              onChange({
                r: data.r || rgb.r,
                g: data.g || rgb.g,
                b: data.b || rgb.b,
                source: 'rgb'
              }, e);
            } else {
              onChange({
                hex: data.hex,
                source: 'hex'
              }, e);
            }
          };

          return _react2.default.createElement('div', {
            style: styles.fields,
            className: 'flexbox-fix'
          }, _react2.default.createElement('div', {
            style: styles.active
          }), _react2.default.createElement(common.EditableInput, {
            style: {
              wrap: styles.HEXwrap,
              input: styles.HEXinput,
              label: styles.HEXlabel
            },
            label: 'hex',
            value: hex,
            onChange: handleChange
          }), _react2.default.createElement(common.EditableInput, {
            style: {
              wrap: styles.RGBwrap,
              input: styles.RGBinput,
              label: styles.RGBlabel
            },
            label: 'r',
            value: rgb.r,
            onChange: handleChange
          }), _react2.default.createElement(common.EditableInput, {
            style: {
              wrap: styles.RGBwrap,
              input: styles.RGBinput,
              label: styles.RGBlabel
            },
            label: 'g',
            value: rgb.g,
            onChange: handleChange
          }), _react2.default.createElement(common.EditableInput, {
            style: {
              wrap: styles.RGBwrap,
              input: styles.RGBinput,
              label: styles.RGBlabel
            },
            label: 'b',
            value: rgb.b,
            onChange: handleChange
          }));
        };

        exports.default = CompactFields;
      });

      var Compact_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Compact = undefined;

        var _react2 = _interopRequireDefault(React);

        var _propTypes2 = _interopRequireDefault(propTypes);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _map2 = _interopRequireDefault(map_1);

        var _merge2 = _interopRequireDefault(merge_1);

        var _color2 = _interopRequireDefault(color);

        var _CompactColor2 = _interopRequireDefault(CompactColor_1);

        var _CompactFields2 = _interopRequireDefault(CompactFields_1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var Compact = exports.Compact = function Compact(_ref) {
          var onChange = _ref.onChange,
              onSwatchHover = _ref.onSwatchHover,
              colors = _ref.colors,
              hex = _ref.hex,
              rgb = _ref.rgb,
              _ref$styles = _ref.styles,
              passedStyles = _ref$styles === undefined ? {} : _ref$styles,
              _ref$className = _ref.className,
              className = _ref$className === undefined ? '' : _ref$className;
          var styles = (0, _reactcss2.default)((0, _merge2.default)({
            'default': {
              Compact: {
                background: '#f6f6f6',
                radius: '4px'
              },
              compact: {
                paddingTop: '5px',
                paddingLeft: '5px',
                boxSizing: 'initial',
                width: '240px'
              },
              clear: {
                clear: 'both'
              }
            }
          }, passedStyles));

          var handleChange = function handleChange(data, e) {
            if (data.hex) {
              _color2.default.isValidHex(data.hex) && onChange({
                hex: data.hex,
                source: 'hex'
              }, e);
            } else {
              onChange(data, e);
            }
          };

          return _react2.default.createElement(common.Raised, {
            style: styles.Compact,
            styles: passedStyles
          }, _react2.default.createElement('div', {
            style: styles.compact,
            className: 'compact-picker ' + className
          }, _react2.default.createElement('div', null, (0, _map2.default)(colors, function (c) {
            return _react2.default.createElement(_CompactColor2.default, {
              key: c,
              color: c,
              active: c.toLowerCase() === hex,
              onClick: handleChange,
              onSwatchHover: onSwatchHover
            });
          }), _react2.default.createElement('div', {
            style: styles.clear
          })), _react2.default.createElement(_CompactFields2.default, {
            hex: hex,
            rgb: rgb,
            onChange: handleChange
          })));
        };

        Compact.propTypes = {
          colors: _propTypes2.default.arrayOf(_propTypes2.default.string),
          styles: _propTypes2.default.object
        };
        Compact.defaultProps = {
          colors: ['#4D4D4D', '#999999', '#FFFFFF', '#F44E3B', '#FE9200', '#FCDC00', '#DBDF00', '#A4DD00', '#68CCCA', '#73D8FF', '#AEA1FF', '#FDA1FF', '#333333', '#808080', '#cccccc', '#D33115', '#E27300', '#FCC400', '#B0BC00', '#68BC00', '#16A5A5', '#009CE0', '#7B64FF', '#FA28FF', '#000000', '#666666', '#B3B3B3', '#9F0500', '#C45100', '#FB9E00', '#808900', '#194D33', '#0C797D', '#0062B1', '#653294', '#AB149E'],
          styles: {}
        };
        exports.default = (0, common.ColorWrap)(Compact);
      });

      var GithubSwatch_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GithubSwatch = undefined;

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var GithubSwatch = exports.GithubSwatch = function GithubSwatch(_ref) {
          var hover = _ref.hover,
              color = _ref.color,
              onClick = _ref.onClick,
              onSwatchHover = _ref.onSwatchHover;
          var hoverSwatch = {
            position: 'relative',
            zIndex: '2',
            outline: '2px solid #fff',
            boxShadow: '0 0 5px 2px rgba(0,0,0,0.25)'
          };
          var styles = (0, _reactcss2.default)({
            'default': {
              swatch: {
                width: '25px',
                height: '25px',
                fontSize: '0'
              }
            },
            'hover': {
              swatch: hoverSwatch
            }
          }, {
            hover: hover
          });
          return _react2.default.createElement('div', {
            style: styles.swatch
          }, _react2.default.createElement(common.Swatch, {
            color: color,
            onClick: onClick,
            onHover: onSwatchHover,
            focusStyle: hoverSwatch
          }));
        };

        exports.default = (0, lib$1.handleHover)(GithubSwatch);
      });

      var Github_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Github = undefined;

        var _react2 = _interopRequireDefault(React);

        var _propTypes2 = _interopRequireDefault(propTypes);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _map2 = _interopRequireDefault(map_1);

        var _merge2 = _interopRequireDefault(merge_1);

        var _GithubSwatch2 = _interopRequireDefault(GithubSwatch_1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var Github = exports.Github = function Github(_ref) {
          var width = _ref.width,
              colors = _ref.colors,
              onChange = _ref.onChange,
              onSwatchHover = _ref.onSwatchHover,
              triangle = _ref.triangle,
              _ref$styles = _ref.styles,
              passedStyles = _ref$styles === undefined ? {} : _ref$styles,
              _ref$className = _ref.className,
              className = _ref$className === undefined ? '' : _ref$className;
          var styles = (0, _reactcss2.default)((0, _merge2.default)({
            'default': {
              card: {
                width: width,
                background: '#fff',
                border: '1px solid rgba(0,0,0,0.2)',
                boxShadow: '0 3px 12px rgba(0,0,0,0.15)',
                borderRadius: '4px',
                position: 'relative',
                padding: '5px',
                display: 'flex',
                flexWrap: 'wrap'
              },
              triangle: {
                position: 'absolute',
                border: '7px solid transparent',
                borderBottomColor: '#fff'
              },
              triangleShadow: {
                position: 'absolute',
                border: '8px solid transparent',
                borderBottomColor: 'rgba(0,0,0,0.15)'
              }
            },
            'hide-triangle': {
              triangle: {
                display: 'none'
              },
              triangleShadow: {
                display: 'none'
              }
            },
            'top-left-triangle': {
              triangle: {
                top: '-14px',
                left: '10px'
              },
              triangleShadow: {
                top: '-16px',
                left: '9px'
              }
            },
            'top-right-triangle': {
              triangle: {
                top: '-14px',
                right: '10px'
              },
              triangleShadow: {
                top: '-16px',
                right: '9px'
              }
            },
            'bottom-left-triangle': {
              triangle: {
                top: '35px',
                left: '10px',
                transform: 'rotate(180deg)'
              },
              triangleShadow: {
                top: '37px',
                left: '9px',
                transform: 'rotate(180deg)'
              }
            },
            'bottom-right-triangle': {
              triangle: {
                top: '35px',
                right: '10px',
                transform: 'rotate(180deg)'
              },
              triangleShadow: {
                top: '37px',
                right: '9px',
                transform: 'rotate(180deg)'
              }
            }
          }, passedStyles), {
            'hide-triangle': triangle === 'hide',
            'top-left-triangle': triangle === 'top-left',
            'top-right-triangle': triangle === 'top-right',
            'bottom-left-triangle': triangle === 'bottom-left',
            'bottom-right-triangle': triangle === 'bottom-right'
          });

          var handleChange = function handleChange(hex, e) {
            return onChange({
              hex: hex,
              source: 'hex'
            }, e);
          };

          return _react2.default.createElement('div', {
            style: styles.card,
            className: 'github-picker ' + className
          }, _react2.default.createElement('div', {
            style: styles.triangleShadow
          }), _react2.default.createElement('div', {
            style: styles.triangle
          }), (0, _map2.default)(colors, function (c) {
            return _react2.default.createElement(_GithubSwatch2.default, {
              color: c,
              key: c,
              onClick: handleChange,
              onSwatchHover: onSwatchHover
            });
          }));
        };

        Github.propTypes = {
          width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
          colors: _propTypes2.default.arrayOf(_propTypes2.default.string),
          triangle: _propTypes2.default.oneOf(['hide', 'top-left', 'top-right', 'bottom-left', 'bottom-right']),
          styles: _propTypes2.default.object
        };
        Github.defaultProps = {
          width: 200,
          colors: ['#B80000', '#DB3E00', '#FCCB00', '#008B02', '#006B76', '#1273DE', '#004DCF', '#5300EB', '#EB9694', '#FAD0C3', '#FEF3BD', '#C1E1C5', '#BEDADC', '#C4DEF6', '#BED3F3', '#D4C4FB'],
          triangle: 'top-left',
          styles: {}
        };
        exports.default = (0, common.ColorWrap)(Github);
      });

      var HuePointer = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SliderPointer = undefined;

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var SliderPointer = exports.SliderPointer = function SliderPointer(_ref) {
          var direction = _ref.direction;
          var styles = (0, _reactcss2.default)({
            'default': {
              picker: {
                width: '18px',
                height: '18px',
                borderRadius: '50%',
                transform: 'translate(-9px, -1px)',
                backgroundColor: 'rgb(248, 248, 248)',
                boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)'
              }
            },
            'vertical': {
              picker: {
                transform: 'translate(-3px, -9px)'
              }
            }
          }, {
            vertical: direction === 'vertical'
          });
          return _react2.default.createElement('div', {
            style: styles.picker
          });
        };

        exports.default = SliderPointer;
      });

      var Hue = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.HuePicker = undefined;

        var _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        var _react2 = _interopRequireDefault(React);

        var _propTypes2 = _interopRequireDefault(propTypes);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _merge2 = _interopRequireDefault(merge_1);

        var _HuePointer2 = _interopRequireDefault(HuePointer);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var HuePicker = exports.HuePicker = function HuePicker(_ref) {
          var width = _ref.width,
              height = _ref.height,
              onChange = _ref.onChange,
              hsl = _ref.hsl,
              direction = _ref.direction,
              pointer = _ref.pointer,
              _ref$styles = _ref.styles,
              passedStyles = _ref$styles === undefined ? {} : _ref$styles,
              _ref$className = _ref.className,
              className = _ref$className === undefined ? '' : _ref$className;
          var styles = (0, _reactcss2.default)((0, _merge2.default)({
            'default': {
              picker: {
                position: 'relative',
                width: width,
                height: height
              },
              hue: {
                radius: '2px'
              }
            }
          }, passedStyles)); // Overwrite to provide pure hue color

          var handleChange = function handleChange(data) {
            return onChange({
              a: 1,
              h: data.h,
              l: 0.5,
              s: 1
            });
          };

          return _react2.default.createElement('div', {
            style: styles.picker,
            className: 'hue-picker ' + className
          }, _react2.default.createElement(common.Hue, _extends({}, styles.hue, {
            hsl: hsl,
            pointer: pointer,
            onChange: handleChange,
            direction: direction
          })));
        };

        HuePicker.propTypes = {
          styles: _propTypes2.default.object
        };
        HuePicker.defaultProps = {
          width: '316px',
          height: '16px',
          direction: 'horizontal',
          pointer: _HuePointer2.default,
          styles: {}
        };
        exports.default = (0, common.ColorWrap)(HuePicker);
      });

      var Material_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Material = undefined;

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _merge2 = _interopRequireDefault(merge_1);

        var _color2 = _interopRequireDefault(color);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var Material = exports.Material = function Material(_ref) {
          var onChange = _ref.onChange,
              hex = _ref.hex,
              rgb = _ref.rgb,
              _ref$styles = _ref.styles,
              passedStyles = _ref$styles === undefined ? {} : _ref$styles,
              _ref$className = _ref.className,
              className = _ref$className === undefined ? '' : _ref$className;
          var styles = (0, _reactcss2.default)((0, _merge2.default)({
            'default': {
              material: {
                width: '98px',
                height: '98px',
                padding: '16px',
                fontFamily: 'Roboto'
              },
              HEXwrap: {
                position: 'relative'
              },
              HEXinput: {
                width: '100%',
                marginTop: '12px',
                fontSize: '15px',
                color: '#333',
                padding: '0px',
                border: '0px',
                borderBottom: '2px solid ' + hex,
                outline: 'none',
                height: '30px'
              },
              HEXlabel: {
                position: 'absolute',
                top: '0px',
                left: '0px',
                fontSize: '11px',
                color: '#999999',
                textTransform: 'capitalize'
              },
              Hex: {
                style: {}
              },
              RGBwrap: {
                position: 'relative'
              },
              RGBinput: {
                width: '100%',
                marginTop: '12px',
                fontSize: '15px',
                color: '#333',
                padding: '0px',
                border: '0px',
                borderBottom: '1px solid #eee',
                outline: 'none',
                height: '30px'
              },
              RGBlabel: {
                position: 'absolute',
                top: '0px',
                left: '0px',
                fontSize: '11px',
                color: '#999999',
                textTransform: 'capitalize'
              },
              split: {
                display: 'flex',
                marginRight: '-10px',
                paddingTop: '11px'
              },
              third: {
                flex: '1',
                paddingRight: '10px'
              }
            }
          }, passedStyles));

          var handleChange = function handleChange(data, e) {
            if (data.hex) {
              _color2.default.isValidHex(data.hex) && onChange({
                hex: data.hex,
                source: 'hex'
              }, e);
            } else if (data.r || data.g || data.b) {
              onChange({
                r: data.r || rgb.r,
                g: data.g || rgb.g,
                b: data.b || rgb.b,
                source: 'rgb'
              }, e);
            }
          };

          return _react2.default.createElement(common.Raised, {
            styles: passedStyles
          }, _react2.default.createElement('div', {
            style: styles.material,
            className: 'material-picker ' + className
          }, _react2.default.createElement(common.EditableInput, {
            style: {
              wrap: styles.HEXwrap,
              input: styles.HEXinput,
              label: styles.HEXlabel
            },
            label: 'hex',
            value: hex,
            onChange: handleChange
          }), _react2.default.createElement('div', {
            style: styles.split,
            className: 'flexbox-fix'
          }, _react2.default.createElement('div', {
            style: styles.third
          }, _react2.default.createElement(common.EditableInput, {
            style: {
              wrap: styles.RGBwrap,
              input: styles.RGBinput,
              label: styles.RGBlabel
            },
            label: 'r',
            value: rgb.r,
            onChange: handleChange
          })), _react2.default.createElement('div', {
            style: styles.third
          }, _react2.default.createElement(common.EditableInput, {
            style: {
              wrap: styles.RGBwrap,
              input: styles.RGBinput,
              label: styles.RGBlabel
            },
            label: 'g',
            value: rgb.g,
            onChange: handleChange
          })), _react2.default.createElement('div', {
            style: styles.third
          }, _react2.default.createElement(common.EditableInput, {
            style: {
              wrap: styles.RGBwrap,
              input: styles.RGBinput,
              label: styles.RGBlabel
            },
            label: 'b',
            value: rgb.b,
            onChange: handleChange
          })))));
        };

        exports.default = (0, common.ColorWrap)(Material);
      });

      var PhotoshopFields = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PhotoshopPicker = undefined;

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _color2 = _interopRequireDefault(color);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var PhotoshopPicker = exports.PhotoshopPicker = function PhotoshopPicker(_ref) {
          var onChange = _ref.onChange,
              rgb = _ref.rgb,
              hsv = _ref.hsv,
              hex = _ref.hex;
          var styles = (0, _reactcss2.default)({
            'default': {
              fields: {
                paddingTop: '5px',
                paddingBottom: '9px',
                width: '80px',
                position: 'relative'
              },
              divider: {
                height: '5px'
              },
              RGBwrap: {
                position: 'relative'
              },
              RGBinput: {
                marginLeft: '40%',
                width: '40%',
                height: '18px',
                border: '1px solid #888888',
                boxShadow: 'inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC',
                marginBottom: '5px',
                fontSize: '13px',
                paddingLeft: '3px',
                marginRight: '10px'
              },
              RGBlabel: {
                left: '0px',
                width: '34px',
                textTransform: 'uppercase',
                fontSize: '13px',
                height: '18px',
                lineHeight: '22px',
                position: 'absolute'
              },
              HEXwrap: {
                position: 'relative'
              },
              HEXinput: {
                marginLeft: '20%',
                width: '80%',
                height: '18px',
                border: '1px solid #888888',
                boxShadow: 'inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC',
                marginBottom: '6px',
                fontSize: '13px',
                paddingLeft: '3px'
              },
              HEXlabel: {
                position: 'absolute',
                top: '0px',
                left: '0px',
                width: '14px',
                textTransform: 'uppercase',
                fontSize: '13px',
                height: '18px',
                lineHeight: '22px'
              },
              fieldSymbols: {
                position: 'absolute',
                top: '5px',
                right: '-7px',
                fontSize: '13px'
              },
              symbol: {
                height: '20px',
                lineHeight: '22px',
                paddingBottom: '7px'
              }
            }
          });

          var handleChange = function handleChange(data, e) {
            if (data['#']) {
              _color2.default.isValidHex(data['#']) && onChange({
                hex: data['#'],
                source: 'hex'
              }, e);
            } else if (data.r || data.g || data.b) {
              onChange({
                r: data.r || rgb.r,
                g: data.g || rgb.g,
                b: data.b || rgb.b,
                source: 'rgb'
              }, e);
            } else if (data.h || data.s || data.v) {
              onChange({
                h: data.h || hsv.h,
                s: data.s || hsv.s,
                v: data.v || hsv.v,
                source: 'hsv'
              }, e);
            }
          };

          return _react2.default.createElement('div', {
            style: styles.fields
          }, _react2.default.createElement(common.EditableInput, {
            style: {
              wrap: styles.RGBwrap,
              input: styles.RGBinput,
              label: styles.RGBlabel
            },
            label: 'h',
            value: Math.round(hsv.h),
            onChange: handleChange
          }), _react2.default.createElement(common.EditableInput, {
            style: {
              wrap: styles.RGBwrap,
              input: styles.RGBinput,
              label: styles.RGBlabel
            },
            label: 's',
            value: Math.round(hsv.s * 100),
            onChange: handleChange
          }), _react2.default.createElement(common.EditableInput, {
            style: {
              wrap: styles.RGBwrap,
              input: styles.RGBinput,
              label: styles.RGBlabel
            },
            label: 'v',
            value: Math.round(hsv.v * 100),
            onChange: handleChange
          }), _react2.default.createElement('div', {
            style: styles.divider
          }), _react2.default.createElement(common.EditableInput, {
            style: {
              wrap: styles.RGBwrap,
              input: styles.RGBinput,
              label: styles.RGBlabel
            },
            label: 'r',
            value: rgb.r,
            onChange: handleChange
          }), _react2.default.createElement(common.EditableInput, {
            style: {
              wrap: styles.RGBwrap,
              input: styles.RGBinput,
              label: styles.RGBlabel
            },
            label: 'g',
            value: rgb.g,
            onChange: handleChange
          }), _react2.default.createElement(common.EditableInput, {
            style: {
              wrap: styles.RGBwrap,
              input: styles.RGBinput,
              label: styles.RGBlabel
            },
            label: 'b',
            value: rgb.b,
            onChange: handleChange
          }), _react2.default.createElement('div', {
            style: styles.divider
          }), _react2.default.createElement(common.EditableInput, {
            style: {
              wrap: styles.HEXwrap,
              input: styles.HEXinput,
              label: styles.HEXlabel
            },
            label: '#',
            value: hex.replace('#', ''),
            onChange: handleChange
          }), _react2.default.createElement('div', {
            style: styles.fieldSymbols
          }, _react2.default.createElement('div', {
            style: styles.symbol
          }, '\xB0'), _react2.default.createElement('div', {
            style: styles.symbol
          }, '%'), _react2.default.createElement('div', {
            style: styles.symbol
          }, '%')));
        };

        exports.default = PhotoshopPicker;
      });

      var PhotoshopPointerCircle_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PhotoshopPointerCircle = undefined;

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var PhotoshopPointerCircle = exports.PhotoshopPointerCircle = function PhotoshopPointerCircle(_ref) {
          var hsl = _ref.hsl;
          var styles = (0, _reactcss2.default)({
            'default': {
              picker: {
                width: '12px',
                height: '12px',
                borderRadius: '6px',
                boxShadow: 'inset 0 0 0 1px #fff',
                transform: 'translate(-6px, -6px)'
              }
            },
            'black-outline': {
              picker: {
                boxShadow: 'inset 0 0 0 1px #000'
              }
            }
          }, {
            'black-outline': hsl.l > 0.5
          });
          return _react2.default.createElement('div', {
            style: styles.picker
          });
        };

        exports.default = PhotoshopPointerCircle;
      });

      var PhotoshopPointer = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PhotoshopPointerCircle = undefined;

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var PhotoshopPointerCircle = exports.PhotoshopPointerCircle = function PhotoshopPointerCircle() {
          var styles = (0, _reactcss2.default)({
            'default': {
              triangle: {
                width: 0,
                height: 0,
                borderStyle: 'solid',
                borderWidth: '4px 0 4px 6px',
                borderColor: 'transparent transparent transparent #fff',
                position: 'absolute',
                top: '1px',
                left: '1px'
              },
              triangleBorder: {
                width: 0,
                height: 0,
                borderStyle: 'solid',
                borderWidth: '5px 0 5px 8px',
                borderColor: 'transparent transparent transparent #555'
              },
              left: {
                Extend: 'triangleBorder',
                transform: 'translate(-13px, -4px)'
              },
              leftInside: {
                Extend: 'triangle',
                transform: 'translate(-8px, -5px)'
              },
              right: {
                Extend: 'triangleBorder',
                transform: 'translate(20px, -14px) rotate(180deg)'
              },
              rightInside: {
                Extend: 'triangle',
                transform: 'translate(-8px, -5px)'
              }
            }
          });
          return _react2.default.createElement('div', {
            style: styles.pointer
          }, _react2.default.createElement('div', {
            style: styles.left
          }, _react2.default.createElement('div', {
            style: styles.leftInside
          })), _react2.default.createElement('div', {
            style: styles.right
          }, _react2.default.createElement('div', {
            style: styles.rightInside
          })));
        };

        exports.default = PhotoshopPointerCircle;
      });

      var PhotoshopButton_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PhotoshopButton = undefined;

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var PhotoshopButton = exports.PhotoshopButton = function PhotoshopButton(_ref) {
          var onClick = _ref.onClick,
              label = _ref.label,
              children = _ref.children,
              active = _ref.active;
          var styles = (0, _reactcss2.default)({
            'default': {
              button: {
                backgroundImage: 'linear-gradient(-180deg, #FFFFFF 0%, #E6E6E6 100%)',
                border: '1px solid #878787',
                borderRadius: '2px',
                height: '20px',
                boxShadow: '0 1px 0 0 #EAEAEA',
                fontSize: '14px',
                color: '#000',
                lineHeight: '20px',
                textAlign: 'center',
                marginBottom: '10px',
                cursor: 'pointer'
              }
            },
            'active': {
              button: {
                boxShadow: '0 0 0 1px #878787'
              }
            }
          }, {
            active: active
          });
          return _react2.default.createElement('div', {
            style: styles.button,
            onClick: onClick
          }, label || children);
        };

        exports.default = PhotoshopButton;
      });

      var PhotoshopPreviews_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PhotoshopPreviews = undefined;

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var PhotoshopPreviews = exports.PhotoshopPreviews = function PhotoshopPreviews(_ref) {
          var rgb = _ref.rgb,
              currentColor = _ref.currentColor;
          var styles = (0, _reactcss2.default)({
            'default': {
              swatches: {
                border: '1px solid #B3B3B3',
                borderBottom: '1px solid #F0F0F0',
                marginBottom: '2px',
                marginTop: '1px'
              },
              new: {
                height: '34px',
                background: 'rgb(' + rgb.r + ',' + rgb.g + ', ' + rgb.b + ')',
                boxShadow: 'inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 1px 0 #000'
              },
              current: {
                height: '34px',
                background: currentColor,
                boxShadow: 'inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 -1px 0 #000'
              },
              label: {
                fontSize: '14px',
                color: '#000',
                textAlign: 'center'
              }
            }
          });
          return _react2.default.createElement('div', null, _react2.default.createElement('div', {
            style: styles.label
          }, 'new'), _react2.default.createElement('div', {
            style: styles.swatches
          }, _react2.default.createElement('div', {
            style: styles.new
          }), _react2.default.createElement('div', {
            style: styles.current
          })), _react2.default.createElement('div', {
            style: styles.label
          }, 'current'));
        };

        exports.default = PhotoshopPreviews;
      });

      var Photoshop_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Photoshop = undefined;

        var _createClass = function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();

        var _react2 = _interopRequireDefault(React);

        var _propTypes2 = _interopRequireDefault(propTypes);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _merge2 = _interopRequireDefault(merge_1);

        var _PhotoshopFields2 = _interopRequireDefault(PhotoshopFields);

        var _PhotoshopPointerCircle2 = _interopRequireDefault(PhotoshopPointerCircle_1);

        var _PhotoshopPointer2 = _interopRequireDefault(PhotoshopPointer);

        var _PhotoshopButton2 = _interopRequireDefault(PhotoshopButton_1);

        var _PhotoshopPreviews2 = _interopRequireDefault(PhotoshopPreviews_1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }

          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        var Photoshop = exports.Photoshop = function (_React$Component) {
          _inherits(Photoshop, _React$Component);

          function Photoshop(props) {
            _classCallCheck(this, Photoshop);

            var _this = _possibleConstructorReturn(this, (Photoshop.__proto__ || Object.getPrototypeOf(Photoshop)).call(this));

            _this.state = {
              currentColor: props.hex
            };
            return _this;
          }

          _createClass(Photoshop, [{
            key: 'render',
            value: function render() {
              var _props = this.props,
                  _props$styles = _props.styles,
                  passedStyles = _props$styles === undefined ? {} : _props$styles,
                  _props$className = _props.className,
                  className = _props$className === undefined ? '' : _props$className;
              var styles = (0, _reactcss2.default)((0, _merge2.default)({
                'default': {
                  picker: {
                    background: '#DCDCDC',
                    borderRadius: '4px',
                    boxShadow: '0 0 0 1px rgba(0,0,0,.25), 0 8px 16px rgba(0,0,0,.15)',
                    boxSizing: 'initial',
                    width: '513px'
                  },
                  head: {
                    backgroundImage: 'linear-gradient(-180deg, #F0F0F0 0%, #D4D4D4 100%)',
                    borderBottom: '1px solid #B1B1B1',
                    boxShadow: 'inset 0 1px 0 0 rgba(255,255,255,.2), inset 0 -1px 0 0 rgba(0,0,0,.02)',
                    height: '23px',
                    lineHeight: '24px',
                    borderRadius: '4px 4px 0 0',
                    fontSize: '13px',
                    color: '#4D4D4D',
                    textAlign: 'center'
                  },
                  body: {
                    padding: '15px 15px 0',
                    display: 'flex'
                  },
                  saturation: {
                    width: '256px',
                    height: '256px',
                    position: 'relative',
                    border: '2px solid #B3B3B3',
                    borderBottom: '2px solid #F0F0F0',
                    overflow: 'hidden'
                  },
                  hue: {
                    position: 'relative',
                    height: '256px',
                    width: '19px',
                    marginLeft: '10px',
                    border: '2px solid #B3B3B3',
                    borderBottom: '2px solid #F0F0F0'
                  },
                  controls: {
                    width: '180px',
                    marginLeft: '10px'
                  },
                  top: {
                    display: 'flex'
                  },
                  previews: {
                    width: '60px'
                  },
                  actions: {
                    flex: '1',
                    marginLeft: '20px'
                  }
                }
              }, passedStyles));
              return _react2.default.createElement('div', {
                style: styles.picker,
                className: 'photoshop-picker ' + className
              }, _react2.default.createElement('div', {
                style: styles.head
              }, this.props.header), _react2.default.createElement('div', {
                style: styles.body,
                className: 'flexbox-fix'
              }, _react2.default.createElement('div', {
                style: styles.saturation
              }, _react2.default.createElement(common.Saturation, {
                hsl: this.props.hsl,
                hsv: this.props.hsv,
                pointer: _PhotoshopPointerCircle2.default,
                onChange: this.props.onChange
              })), _react2.default.createElement('div', {
                style: styles.hue
              }, _react2.default.createElement(common.Hue, {
                direction: 'vertical',
                hsl: this.props.hsl,
                pointer: _PhotoshopPointer2.default,
                onChange: this.props.onChange
              })), _react2.default.createElement('div', {
                style: styles.controls
              }, _react2.default.createElement('div', {
                style: styles.top,
                className: 'flexbox-fix'
              }, _react2.default.createElement('div', {
                style: styles.previews
              }, _react2.default.createElement(_PhotoshopPreviews2.default, {
                rgb: this.props.rgb,
                currentColor: this.state.currentColor
              })), _react2.default.createElement('div', {
                style: styles.actions
              }, _react2.default.createElement(_PhotoshopButton2.default, {
                label: 'OK',
                onClick: this.props.onAccept,
                active: true
              }), _react2.default.createElement(_PhotoshopButton2.default, {
                label: 'Cancel',
                onClick: this.props.onCancel
              }), _react2.default.createElement(_PhotoshopFields2.default, {
                onChange: this.props.onChange,
                rgb: this.props.rgb,
                hsv: this.props.hsv,
                hex: this.props.hex
              }))))));
            }
          }]);

          return Photoshop;
        }(_react2.default.Component);

        Photoshop.propTypes = {
          header: _propTypes2.default.string,
          styles: _propTypes2.default.object
        };
        Photoshop.defaultProps = {
          header: 'Color Picker',
          styles: {}
        };
        exports.default = (0, common.ColorWrap)(Photoshop);
      });

      var SketchFields_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SketchFields = undefined;

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _color2 = _interopRequireDefault(color);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }
        /* eslint-disable no-param-reassign */


        var SketchFields = exports.SketchFields = function SketchFields(_ref) {
          var onChange = _ref.onChange,
              rgb = _ref.rgb,
              hsl = _ref.hsl,
              hex = _ref.hex,
              disableAlpha = _ref.disableAlpha;
          var styles = (0, _reactcss2.default)({
            'default': {
              fields: {
                display: 'flex',
                paddingTop: '4px'
              },
              single: {
                flex: '1',
                paddingLeft: '6px'
              },
              alpha: {
                flex: '1',
                paddingLeft: '6px'
              },
              double: {
                flex: '2'
              },
              input: {
                width: '80%',
                padding: '4px 10% 3px',
                border: 'none',
                boxShadow: 'inset 0 0 0 1px #ccc',
                fontSize: '11px'
              },
              label: {
                display: 'block',
                textAlign: 'center',
                fontSize: '11px',
                color: '#222',
                paddingTop: '3px',
                paddingBottom: '4px',
                textTransform: 'capitalize'
              }
            },
            'disableAlpha': {
              alpha: {
                display: 'none'
              }
            }
          }, {
            disableAlpha: disableAlpha
          });

          var handleChange = function handleChange(data, e) {
            if (data.hex) {
              _color2.default.isValidHex(data.hex) && onChange({
                hex: data.hex,
                source: 'hex'
              }, e);
            } else if (data.r || data.g || data.b) {
              onChange({
                r: data.r || rgb.r,
                g: data.g || rgb.g,
                b: data.b || rgb.b,
                a: rgb.a,
                source: 'rgb'
              }, e);
            } else if (data.a) {
              if (data.a < 0) {
                data.a = 0;
              } else if (data.a > 100) {
                data.a = 100;
              }

              data.a /= 100;
              onChange({
                h: hsl.h,
                s: hsl.s,
                l: hsl.l,
                a: data.a,
                source: 'rgb'
              }, e);
            }
          };

          return _react2.default.createElement('div', {
            style: styles.fields,
            className: 'flexbox-fix'
          }, _react2.default.createElement('div', {
            style: styles.double
          }, _react2.default.createElement(common.EditableInput, {
            style: {
              input: styles.input,
              label: styles.label
            },
            label: 'hex',
            value: hex.replace('#', ''),
            onChange: handleChange
          })), _react2.default.createElement('div', {
            style: styles.single
          }, _react2.default.createElement(common.EditableInput, {
            style: {
              input: styles.input,
              label: styles.label
            },
            label: 'r',
            value: rgb.r,
            onChange: handleChange,
            dragLabel: 'true',
            dragMax: '255'
          })), _react2.default.createElement('div', {
            style: styles.single
          }, _react2.default.createElement(common.EditableInput, {
            style: {
              input: styles.input,
              label: styles.label
            },
            label: 'g',
            value: rgb.g,
            onChange: handleChange,
            dragLabel: 'true',
            dragMax: '255'
          })), _react2.default.createElement('div', {
            style: styles.single
          }, _react2.default.createElement(common.EditableInput, {
            style: {
              input: styles.input,
              label: styles.label
            },
            label: 'b',
            value: rgb.b,
            onChange: handleChange,
            dragLabel: 'true',
            dragMax: '255'
          })), _react2.default.createElement('div', {
            style: styles.alpha
          }, _react2.default.createElement(common.EditableInput, {
            style: {
              input: styles.input,
              label: styles.label
            },
            label: 'a',
            value: Math.round(rgb.a * 100),
            onChange: handleChange,
            dragLabel: 'true',
            dragMax: '100'
          })));
        };

        exports.default = SketchFields;
      });

      var SketchPresetColors_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SketchPresetColors = undefined;

        var _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        var _react2 = _interopRequireDefault(React);

        var _propTypes2 = _interopRequireDefault(propTypes);

        var _reactcss2 = _interopRequireDefault(lib$1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var SketchPresetColors = exports.SketchPresetColors = function SketchPresetColors(_ref) {
          var colors = _ref.colors,
              _ref$onClick = _ref.onClick,
              onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,
              onSwatchHover = _ref.onSwatchHover;
          var styles = (0, _reactcss2.default)({
            'default': {
              colors: {
                margin: '0 -10px',
                padding: '10px 0 0 10px',
                borderTop: '1px solid #eee',
                display: 'flex',
                flexWrap: 'wrap',
                position: 'relative'
              },
              swatchWrap: {
                width: '16px',
                height: '16px',
                margin: '0 10px 10px 0'
              },
              swatch: {
                borderRadius: '3px',
                boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15)'
              }
            },
            'no-presets': {
              colors: {
                display: 'none'
              }
            }
          }, {
            'no-presets': !colors || !colors.length
          });

          var handleClick = function handleClick(hex, e) {
            onClick({
              hex: hex,
              source: 'hex'
            }, e);
          };

          return _react2.default.createElement('div', {
            style: styles.colors,
            className: 'flexbox-fix'
          }, colors.map(function (colorObjOrString) {
            var c = typeof colorObjOrString === 'string' ? {
              color: colorObjOrString
            } : colorObjOrString;
            var key = '' + c.color + (c.title || '');
            return _react2.default.createElement('div', {
              key: key,
              style: styles.swatchWrap
            }, _react2.default.createElement(common.Swatch, _extends({}, c, {
              style: styles.swatch,
              onClick: handleClick,
              onHover: onSwatchHover,
              focusStyle: {
                boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15), 0 0 4px ' + c.color
              }
            })));
          }));
        };

        SketchPresetColors.propTypes = {
          colors: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
            color: _propTypes2.default.string,
            title: _propTypes2.default.string
          })])).isRequired
        };
        exports.default = SketchPresetColors;
      });

      var Sketch_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Sketch = undefined;

        var _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        var _react2 = _interopRequireDefault(React);

        var _propTypes2 = _interopRequireDefault(propTypes);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _merge2 = _interopRequireDefault(merge_1);

        var _SketchFields2 = _interopRequireDefault(SketchFields_1);

        var _SketchPresetColors2 = _interopRequireDefault(SketchPresetColors_1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var Sketch = exports.Sketch = function Sketch(_ref) {
          var width = _ref.width,
              rgb = _ref.rgb,
              hex = _ref.hex,
              hsv = _ref.hsv,
              hsl = _ref.hsl,
              onChange = _ref.onChange,
              onSwatchHover = _ref.onSwatchHover,
              disableAlpha = _ref.disableAlpha,
              presetColors = _ref.presetColors,
              renderers = _ref.renderers,
              _ref$styles = _ref.styles,
              passedStyles = _ref$styles === undefined ? {} : _ref$styles,
              _ref$className = _ref.className,
              className = _ref$className === undefined ? '' : _ref$className;
          var styles = (0, _reactcss2.default)((0, _merge2.default)({
            'default': _extends({
              picker: {
                width: width,
                padding: '10px 10px 0',
                boxSizing: 'initial',
                background: '#fff',
                borderRadius: '4px',
                boxShadow: '0 0 0 1px rgba(0,0,0,.15), 0 8px 16px rgba(0,0,0,.15)'
              },
              saturation: {
                width: '100%',
                paddingBottom: '75%',
                position: 'relative',
                overflow: 'hidden'
              },
              Saturation: {
                radius: '3px',
                shadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'
              },
              controls: {
                display: 'flex'
              },
              sliders: {
                padding: '4px 0',
                flex: '1'
              },
              color: {
                width: '24px',
                height: '24px',
                position: 'relative',
                marginTop: '4px',
                marginLeft: '4px',
                borderRadius: '3px'
              },
              activeColor: {
                absolute: '0px 0px 0px 0px',
                borderRadius: '2px',
                background: 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + rgb.a + ')',
                boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'
              },
              hue: {
                position: 'relative',
                height: '10px',
                overflow: 'hidden'
              },
              Hue: {
                radius: '2px',
                shadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'
              },
              alpha: {
                position: 'relative',
                height: '10px',
                marginTop: '4px',
                overflow: 'hidden'
              },
              Alpha: {
                radius: '2px',
                shadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'
              }
            }, passedStyles),
            'disableAlpha': {
              color: {
                height: '10px'
              },
              hue: {
                height: '10px'
              },
              alpha: {
                display: 'none'
              }
            }
          }, passedStyles), {
            disableAlpha: disableAlpha
          });
          return _react2.default.createElement('div', {
            style: styles.picker,
            className: 'sketch-picker ' + className
          }, _react2.default.createElement('div', {
            style: styles.saturation
          }, _react2.default.createElement(common.Saturation, {
            style: styles.Saturation,
            hsl: hsl,
            hsv: hsv,
            onChange: onChange
          })), _react2.default.createElement('div', {
            style: styles.controls,
            className: 'flexbox-fix'
          }, _react2.default.createElement('div', {
            style: styles.sliders
          }, _react2.default.createElement('div', {
            style: styles.hue
          }, _react2.default.createElement(common.Hue, {
            style: styles.Hue,
            hsl: hsl,
            onChange: onChange
          })), _react2.default.createElement('div', {
            style: styles.alpha
          }, _react2.default.createElement(common.Alpha, {
            style: styles.Alpha,
            rgb: rgb,
            hsl: hsl,
            renderers: renderers,
            onChange: onChange
          }))), _react2.default.createElement('div', {
            style: styles.color
          }, _react2.default.createElement(common.Checkboard, null), _react2.default.createElement('div', {
            style: styles.activeColor
          }))), _react2.default.createElement(_SketchFields2.default, {
            rgb: rgb,
            hsl: hsl,
            hex: hex,
            onChange: onChange,
            disableAlpha: disableAlpha
          }), _react2.default.createElement(_SketchPresetColors2.default, {
            colors: presetColors,
            onClick: onChange,
            onSwatchHover: onSwatchHover
          }));
        };

        Sketch.propTypes = {
          disableAlpha: _propTypes2.default.bool,
          width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
          styles: _propTypes2.default.object
        };
        Sketch.defaultProps = {
          disableAlpha: false,
          width: 200,
          styles: {},
          presetColors: ['#D0021B', '#F5A623', '#F8E71C', '#8B572A', '#7ED321', '#417505', '#BD10E0', '#9013FE', '#4A90E2', '#50E3C2', '#B8E986', '#000000', '#4A4A4A', '#9B9B9B', '#FFFFFF']
        };
        exports.default = (0, common.ColorWrap)(Sketch);
      });

      var SliderSwatch_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SliderSwatch = undefined;

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var SliderSwatch = exports.SliderSwatch = function SliderSwatch(_ref) {
          var hsl = _ref.hsl,
              offset = _ref.offset,
              _ref$onClick = _ref.onClick,
              onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,
              active = _ref.active,
              first = _ref.first,
              last = _ref.last;
          var styles = (0, _reactcss2.default)({
            'default': {
              swatch: {
                height: '12px',
                background: 'hsl(' + hsl.h + ', 50%, ' + offset * 100 + '%)',
                cursor: 'pointer'
              }
            },
            'first': {
              swatch: {
                borderRadius: '2px 0 0 2px'
              }
            },
            'last': {
              swatch: {
                borderRadius: '0 2px 2px 0'
              }
            },
            'active': {
              swatch: {
                transform: 'scaleY(1.8)',
                borderRadius: '3.6px/2px'
              }
            }
          }, {
            active: active,
            first: first,
            last: last
          });

          var handleClick = function handleClick(e) {
            return onClick({
              h: hsl.h,
              s: 0.5,
              l: offset,
              source: 'hsl'
            }, e);
          };

          return _react2.default.createElement('div', {
            style: styles.swatch,
            onClick: handleClick
          });
        };

        exports.default = SliderSwatch;
      });

      var SliderSwatches_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SliderSwatches = undefined;

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _SliderSwatch2 = _interopRequireDefault(SliderSwatch_1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var SliderSwatches = exports.SliderSwatches = function SliderSwatches(_ref) {
          var onClick = _ref.onClick,
              hsl = _ref.hsl;
          var styles = (0, _reactcss2.default)({
            'default': {
              swatches: {
                marginTop: '20px'
              },
              swatch: {
                boxSizing: 'border-box',
                width: '20%',
                paddingRight: '1px',
                float: 'left'
              },
              clear: {
                clear: 'both'
              }
            }
          }); // Acceptible difference in floating point equality

          var epsilon = 0.1;
          return _react2.default.createElement('div', {
            style: styles.swatches
          }, _react2.default.createElement('div', {
            style: styles.swatch
          }, _react2.default.createElement(_SliderSwatch2.default, {
            hsl: hsl,
            offset: '.80',
            active: Math.abs(hsl.l - 0.80) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,
            onClick: onClick,
            first: true
          })), _react2.default.createElement('div', {
            style: styles.swatch
          }, _react2.default.createElement(_SliderSwatch2.default, {
            hsl: hsl,
            offset: '.65',
            active: Math.abs(hsl.l - 0.65) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,
            onClick: onClick
          })), _react2.default.createElement('div', {
            style: styles.swatch
          }, _react2.default.createElement(_SliderSwatch2.default, {
            hsl: hsl,
            offset: '.50',
            active: Math.abs(hsl.l - 0.50) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,
            onClick: onClick
          })), _react2.default.createElement('div', {
            style: styles.swatch
          }, _react2.default.createElement(_SliderSwatch2.default, {
            hsl: hsl,
            offset: '.35',
            active: Math.abs(hsl.l - 0.35) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,
            onClick: onClick
          })), _react2.default.createElement('div', {
            style: styles.swatch
          }, _react2.default.createElement(_SliderSwatch2.default, {
            hsl: hsl,
            offset: '.20',
            active: Math.abs(hsl.l - 0.20) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,
            onClick: onClick,
            last: true
          })), _react2.default.createElement('div', {
            style: styles.clear
          }));
        };

        exports.default = SliderSwatches;
      });

      var SliderPointer_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SliderPointer = undefined;

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var SliderPointer = exports.SliderPointer = function SliderPointer() {
          var styles = (0, _reactcss2.default)({
            'default': {
              picker: {
                width: '14px',
                height: '14px',
                borderRadius: '6px',
                transform: 'translate(-7px, -1px)',
                backgroundColor: 'rgb(248, 248, 248)',
                boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)'
              }
            }
          });
          return _react2.default.createElement('div', {
            style: styles.picker
          });
        };

        exports.default = SliderPointer;
      });

      var Slider_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Slider = undefined;

        var _react2 = _interopRequireDefault(React);

        var _propTypes2 = _interopRequireDefault(propTypes);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _merge2 = _interopRequireDefault(merge_1);

        var _SliderSwatches2 = _interopRequireDefault(SliderSwatches_1);

        var _SliderPointer2 = _interopRequireDefault(SliderPointer_1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var Slider = exports.Slider = function Slider(_ref) {
          var hsl = _ref.hsl,
              onChange = _ref.onChange,
              pointer = _ref.pointer,
              _ref$styles = _ref.styles,
              passedStyles = _ref$styles === undefined ? {} : _ref$styles,
              _ref$className = _ref.className,
              className = _ref$className === undefined ? '' : _ref$className;
          var styles = (0, _reactcss2.default)((0, _merge2.default)({
            'default': {
              hue: {
                height: '12px',
                position: 'relative'
              },
              Hue: {
                radius: '2px'
              }
            }
          }, passedStyles));
          return _react2.default.createElement('div', {
            style: styles.wrap || {},
            className: 'slider-picker ' + className
          }, _react2.default.createElement('div', {
            style: styles.hue
          }, _react2.default.createElement(common.Hue, {
            style: styles.Hue,
            hsl: hsl,
            pointer: pointer,
            onChange: onChange
          })), _react2.default.createElement('div', {
            style: styles.swatches
          }, _react2.default.createElement(_SliderSwatches2.default, {
            hsl: hsl,
            onClick: onChange
          })));
        };

        Slider.propTypes = {
          styles: _propTypes2.default.object
        };
        Slider.defaultProps = {
          pointer: _SliderPointer2.default,
          styles: {}
        };
        exports.default = (0, common.ColorWrap)(Slider);
      });

      var CheckIcon = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        var _react2 = _interopRequireDefault(React);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        function _objectWithoutProperties(obj, keys) {
          var target = {};

          for (var i in obj) {
            if (keys.indexOf(i) >= 0) continue;
            if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
            target[i] = obj[i];
          }

          return target;
        }

        var DEFAULT_SIZE = 24;

        exports.default = function (_ref) {
          var _ref$fill = _ref.fill,
              fill = _ref$fill === undefined ? 'currentColor' : _ref$fill,
              _ref$width = _ref.width,
              width = _ref$width === undefined ? DEFAULT_SIZE : _ref$width,
              _ref$height = _ref.height,
              height = _ref$height === undefined ? DEFAULT_SIZE : _ref$height,
              _ref$style = _ref.style,
              style = _ref$style === undefined ? {} : _ref$style,
              props = _objectWithoutProperties(_ref, ['fill', 'width', 'height', 'style']);

          return _react2.default.createElement('svg', _extends({
            viewBox: '0 0 ' + DEFAULT_SIZE + ' ' + DEFAULT_SIZE,
            style: _extends({
              fill: fill,
              width: width,
              height: height
            }, style)
          }, props), _react2.default.createElement('path', {
            d: 'M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z'
          }));
        };

        module.exports = exports.default;
        module.exports.default = exports.default;
      });

      var SwatchesColor_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SwatchesColor = undefined;

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _color2 = _interopRequireDefault(color);

        var _CheckIcon2 = _interopRequireDefault(CheckIcon);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var SwatchesColor = exports.SwatchesColor = function SwatchesColor(_ref) {
          var color = _ref.color,
              _ref$onClick = _ref.onClick,
              onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,
              onSwatchHover = _ref.onSwatchHover,
              first = _ref.first,
              last = _ref.last,
              active = _ref.active;
          var styles = (0, _reactcss2.default)({
            'default': {
              color: {
                width: '40px',
                height: '24px',
                cursor: 'pointer',
                background: color,
                marginBottom: '1px'
              },
              check: {
                color: _color2.default.getContrastingColor(color),
                marginLeft: '8px',
                display: 'none'
              }
            },
            'first': {
              color: {
                overflow: 'hidden',
                borderRadius: '2px 2px 0 0'
              }
            },
            'last': {
              color: {
                overflow: 'hidden',
                borderRadius: '0 0 2px 2px'
              }
            },
            'active': {
              check: {
                display: 'block'
              }
            },
            'color-#FFFFFF': {
              color: {
                boxShadow: 'inset 0 0 0 1px #ddd'
              },
              check: {
                color: '#333'
              }
            },
            'transparent': {
              check: {
                color: '#333'
              }
            }
          }, {
            first: first,
            last: last,
            active: active,
            'color-#FFFFFF': color === '#FFFFFF',
            'transparent': color === 'transparent'
          });
          return _react2.default.createElement(common.Swatch, {
            color: color,
            style: styles.color,
            onClick: onClick,
            onHover: onSwatchHover,
            focusStyle: {
              boxShadow: '0 0 4px ' + color
            }
          }, _react2.default.createElement('div', {
            style: styles.check
          }, _react2.default.createElement(_CheckIcon2.default, null)));
        };

        exports.default = SwatchesColor;
      });

      var SwatchesGroup_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SwatchesGroup = undefined;

        var _react2 = _interopRequireDefault(React);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _map2 = _interopRequireDefault(map_1);

        var _SwatchesColor2 = _interopRequireDefault(SwatchesColor_1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var SwatchesGroup = exports.SwatchesGroup = function SwatchesGroup(_ref) {
          var onClick = _ref.onClick,
              onSwatchHover = _ref.onSwatchHover,
              group = _ref.group,
              active = _ref.active;
          var styles = (0, _reactcss2.default)({
            'default': {
              group: {
                paddingBottom: '10px',
                width: '40px',
                float: 'left',
                marginRight: '10px'
              }
            }
          });
          return _react2.default.createElement('div', {
            style: styles.group
          }, (0, _map2.default)(group, function (color, i) {
            return _react2.default.createElement(_SwatchesColor2.default, {
              key: color,
              color: color,
              active: color.toLowerCase() === active,
              first: i === 0,
              last: i === group.length - 1,
              onClick: onClick,
              onSwatchHover: onSwatchHover
            });
          }));
        };

        exports.default = SwatchesGroup;
      });

      var Swatches_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Swatches = undefined;

        var _react2 = _interopRequireDefault(React);

        var _propTypes2 = _interopRequireDefault(propTypes);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _map2 = _interopRequireDefault(map_1);

        var _merge2 = _interopRequireDefault(merge_1);

        var material = _interopRequireWildcard(_materialColors);

        var _SwatchesGroup2 = _interopRequireDefault(SwatchesGroup_1);

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};

            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
              }
            }

            newObj.default = obj;
            return newObj;
          }
        }

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var Swatches = exports.Swatches = function Swatches(_ref) {
          var width = _ref.width,
              height = _ref.height,
              onChange = _ref.onChange,
              onSwatchHover = _ref.onSwatchHover,
              colors = _ref.colors,
              hex = _ref.hex,
              _ref$styles = _ref.styles,
              passedStyles = _ref$styles === undefined ? {} : _ref$styles,
              _ref$className = _ref.className,
              className = _ref$className === undefined ? '' : _ref$className;
          var styles = (0, _reactcss2.default)((0, _merge2.default)({
            'default': {
              picker: {
                width: width,
                height: height
              },
              overflow: {
                height: height,
                overflowY: 'scroll'
              },
              body: {
                padding: '16px 0 6px 16px'
              },
              clear: {
                clear: 'both'
              }
            }
          }, passedStyles));

          var handleChange = function handleChange(data, e) {
            return onChange({
              hex: data,
              source: 'hex'
            }, e);
          };

          return _react2.default.createElement('div', {
            style: styles.picker,
            className: 'swatches-picker ' + className
          }, _react2.default.createElement(common.Raised, null, _react2.default.createElement('div', {
            style: styles.overflow
          }, _react2.default.createElement('div', {
            style: styles.body
          }, (0, _map2.default)(colors, function (group) {
            return _react2.default.createElement(_SwatchesGroup2.default, {
              key: group.toString(),
              group: group,
              active: hex,
              onClick: handleChange,
              onSwatchHover: onSwatchHover
            });
          }), _react2.default.createElement('div', {
            style: styles.clear
          })))));
        };

        Swatches.propTypes = {
          width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
          height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
          colors: _propTypes2.default.arrayOf(_propTypes2.default.arrayOf(_propTypes2.default.string)),
          styles: _propTypes2.default.object
          /* eslint-disable max-len */

        };
        Swatches.defaultProps = {
          width: 320,
          height: 240,
          colors: [[material.red['900'], material.red['700'], material.red['500'], material.red['300'], material.red['100']], [material.pink['900'], material.pink['700'], material.pink['500'], material.pink['300'], material.pink['100']], [material.purple['900'], material.purple['700'], material.purple['500'], material.purple['300'], material.purple['100']], [material.deepPurple['900'], material.deepPurple['700'], material.deepPurple['500'], material.deepPurple['300'], material.deepPurple['100']], [material.indigo['900'], material.indigo['700'], material.indigo['500'], material.indigo['300'], material.indigo['100']], [material.blue['900'], material.blue['700'], material.blue['500'], material.blue['300'], material.blue['100']], [material.lightBlue['900'], material.lightBlue['700'], material.lightBlue['500'], material.lightBlue['300'], material.lightBlue['100']], [material.cyan['900'], material.cyan['700'], material.cyan['500'], material.cyan['300'], material.cyan['100']], [material.teal['900'], material.teal['700'], material.teal['500'], material.teal['300'], material.teal['100']], ['#194D33', material.green['700'], material.green['500'], material.green['300'], material.green['100']], [material.lightGreen['900'], material.lightGreen['700'], material.lightGreen['500'], material.lightGreen['300'], material.lightGreen['100']], [material.lime['900'], material.lime['700'], material.lime['500'], material.lime['300'], material.lime['100']], [material.yellow['900'], material.yellow['700'], material.yellow['500'], material.yellow['300'], material.yellow['100']], [material.amber['900'], material.amber['700'], material.amber['500'], material.amber['300'], material.amber['100']], [material.orange['900'], material.orange['700'], material.orange['500'], material.orange['300'], material.orange['100']], [material.deepOrange['900'], material.deepOrange['700'], material.deepOrange['500'], material.deepOrange['300'], material.deepOrange['100']], [material.brown['900'], material.brown['700'], material.brown['500'], material.brown['300'], material.brown['100']], [material.blueGrey['900'], material.blueGrey['700'], material.blueGrey['500'], material.blueGrey['300'], material.blueGrey['100']], ['#000000', '#525252', '#969696', '#D9D9D9', '#FFFFFF']],
          styles: {}
        };
        exports.default = (0, common.ColorWrap)(Swatches);
      });

      var Twitter_1 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Twitter = undefined;

        var _react2 = _interopRequireDefault(React);

        var _propTypes2 = _interopRequireDefault(propTypes);

        var _reactcss2 = _interopRequireDefault(lib$1);

        var _map2 = _interopRequireDefault(map_1);

        var _merge2 = _interopRequireDefault(merge_1);

        var _color2 = _interopRequireDefault(color);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        var Twitter = exports.Twitter = function Twitter(_ref) {
          var onChange = _ref.onChange,
              onSwatchHover = _ref.onSwatchHover,
              hex = _ref.hex,
              colors = _ref.colors,
              width = _ref.width,
              triangle = _ref.triangle,
              _ref$styles = _ref.styles,
              passedStyles = _ref$styles === undefined ? {} : _ref$styles,
              _ref$className = _ref.className,
              className = _ref$className === undefined ? '' : _ref$className;
          var styles = (0, _reactcss2.default)((0, _merge2.default)({
            'default': {
              card: {
                width: width,
                background: '#fff',
                border: '0 solid rgba(0,0,0,0.25)',
                boxShadow: '0 1px 4px rgba(0,0,0,0.25)',
                borderRadius: '4px',
                position: 'relative'
              },
              body: {
                padding: '15px 9px 9px 15px'
              },
              label: {
                fontSize: '18px',
                color: '#fff'
              },
              triangle: {
                width: '0px',
                height: '0px',
                borderStyle: 'solid',
                borderWidth: '0 9px 10px 9px',
                borderColor: 'transparent transparent #fff transparent',
                position: 'absolute'
              },
              triangleShadow: {
                width: '0px',
                height: '0px',
                borderStyle: 'solid',
                borderWidth: '0 9px 10px 9px',
                borderColor: 'transparent transparent rgba(0,0,0,.1) transparent',
                position: 'absolute'
              },
              hash: {
                background: '#F0F0F0',
                height: '30px',
                width: '30px',
                borderRadius: '4px 0 0 4px',
                float: 'left',
                color: '#98A1A4',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
              },
              input: {
                width: '100px',
                fontSize: '14px',
                color: '#666',
                border: '0px',
                outline: 'none',
                height: '28px',
                boxShadow: 'inset 0 0 0 1px #F0F0F0',
                boxSizing: 'content-box',
                borderRadius: '0 4px 4px 0',
                float: 'left',
                paddingLeft: '8px'
              },
              swatch: {
                width: '30px',
                height: '30px',
                float: 'left',
                borderRadius: '4px',
                margin: '0 6px 6px 0'
              },
              clear: {
                clear: 'both'
              }
            },
            'hide-triangle': {
              triangle: {
                display: 'none'
              },
              triangleShadow: {
                display: 'none'
              }
            },
            'top-left-triangle': {
              triangle: {
                top: '-10px',
                left: '12px'
              },
              triangleShadow: {
                top: '-11px',
                left: '12px'
              }
            },
            'top-right-triangle': {
              triangle: {
                top: '-10px',
                right: '12px'
              },
              triangleShadow: {
                top: '-11px',
                right: '12px'
              }
            }
          }, passedStyles), {
            'hide-triangle': triangle === 'hide',
            'top-left-triangle': triangle === 'top-left',
            'top-right-triangle': triangle === 'top-right'
          });

          var handleChange = function handleChange(hexcode, e) {
            _color2.default.isValidHex(hexcode) && onChange({
              hex: hexcode,
              source: 'hex'
            }, e);
          };

          return _react2.default.createElement('div', {
            style: styles.card,
            className: 'twitter-picker ' + className
          }, _react2.default.createElement('div', {
            style: styles.triangleShadow
          }), _react2.default.createElement('div', {
            style: styles.triangle
          }), _react2.default.createElement('div', {
            style: styles.body
          }, (0, _map2.default)(colors, function (c, i) {
            return _react2.default.createElement(common.Swatch, {
              key: i,
              color: c,
              hex: c,
              style: styles.swatch,
              onClick: handleChange,
              onHover: onSwatchHover,
              focusStyle: {
                boxShadow: '0 0 4px ' + c
              }
            });
          }), _react2.default.createElement('div', {
            style: styles.hash
          }, '#'), _react2.default.createElement(common.EditableInput, {
            label: null,
            style: {
              input: styles.input
            },
            value: hex.replace('#', ''),
            onChange: handleChange
          }), _react2.default.createElement('div', {
            style: styles.clear
          })));
        };

        Twitter.propTypes = {
          width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
          triangle: _propTypes2.default.oneOf(['hide', 'top-left', 'top-right']),
          colors: _propTypes2.default.arrayOf(_propTypes2.default.string),
          styles: _propTypes2.default.object
        };
        Twitter.defaultProps = {
          width: 276,
          colors: ['#FF6900', '#FCB900', '#7BDCB5', '#00D084', '#8ED1FC', '#0693E3', '#ABB8C3', '#EB144C', '#F78DA7', '#9900EF'],
          triangle: 'top-left',
          styles: {}
        };
        exports.default = (0, common.ColorWrap)(Twitter);
      });

      var lib$2 = createCommonjsModule(function (module, exports) {

        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CustomPicker = exports.TwitterPicker = exports.SwatchesPicker = exports.SliderPicker = exports.SketchPicker = exports.PhotoshopPicker = exports.MaterialPicker = exports.HuePicker = exports.GithubPicker = exports.CompactPicker = exports.ChromePicker = exports.default = exports.CirclePicker = exports.BlockPicker = exports.AlphaPicker = undefined;
        Object.defineProperty(exports, 'AlphaPicker', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(Alpha).default;
          }
        });
        Object.defineProperty(exports, 'BlockPicker', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(Block_1).default;
          }
        });
        Object.defineProperty(exports, 'CirclePicker', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(Circle_1).default;
          }
        });
        Object.defineProperty(exports, 'ChromePicker', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(Chrome_1).default;
          }
        });
        Object.defineProperty(exports, 'CompactPicker', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(Compact_1).default;
          }
        });
        Object.defineProperty(exports, 'GithubPicker', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(Github_1).default;
          }
        });
        Object.defineProperty(exports, 'HuePicker', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(Hue).default;
          }
        });
        Object.defineProperty(exports, 'MaterialPicker', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(Material_1).default;
          }
        });
        Object.defineProperty(exports, 'PhotoshopPicker', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(Photoshop_1).default;
          }
        });
        Object.defineProperty(exports, 'SketchPicker', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(Sketch_1).default;
          }
        });
        Object.defineProperty(exports, 'SliderPicker', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(Slider_1).default;
          }
        });
        Object.defineProperty(exports, 'SwatchesPicker', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(Swatches_1).default;
          }
        });
        Object.defineProperty(exports, 'TwitterPicker', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(Twitter_1).default;
          }
        });
        Object.defineProperty(exports, 'CustomPicker', {
          enumerable: true,
          get: function get() {
            return _interopRequireDefault(ColorWrap_1).default;
          }
        });

        var _Chrome2 = _interopRequireDefault(Chrome_1);

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }

        exports.default = _Chrome2.default;
      });

      function stylis_min(W) {
        function M(d, c, e, h, a) {
          for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B = e.length, J = B - 1, y, f = '', p = '', F = '', G = '', C; l < B;) {
            g = e.charCodeAt(l);
            l === J && 0 !== b + n + v + m && (0 !== b && (g = 47 === b ? 10 : 47), n = v = m = 0, B++, J++);

            if (0 === b + n + v + m) {
              if (l === J && (0 < r && (f = f.replace(N, '')), 0 < f.trim().length)) {
                switch (g) {
                  case 32:
                  case 9:
                  case 59:
                  case 13:
                  case 10:
                    break;

                  default:
                    f += e.charAt(l);
                }

                g = 59;
              }

              switch (g) {
                case 123:
                  f = f.trim();
                  q = f.charCodeAt(0);
                  k = 1;

                  for (t = ++l; l < B;) {
                    switch (g = e.charCodeAt(l)) {
                      case 123:
                        k++;
                        break;

                      case 125:
                        k--;
                        break;

                      case 47:
                        switch (g = e.charCodeAt(l + 1)) {
                          case 42:
                          case 47:
                            a: {
                              for (u = l + 1; u < J; ++u) {
                                switch (e.charCodeAt(u)) {
                                  case 47:
                                    if (42 === g && 42 === e.charCodeAt(u - 1) && l + 2 !== u) {
                                      l = u + 1;
                                      break a;
                                    }

                                    break;

                                  case 10:
                                    if (47 === g) {
                                      l = u + 1;
                                      break a;
                                    }

                                }
                              }

                              l = u;
                            }

                        }

                        break;

                      case 91:
                        g++;

                      case 40:
                        g++;

                      case 34:
                      case 39:
                        for (; l++ < J && e.charCodeAt(l) !== g;) {}

                    }

                    if (0 === k) break;
                    l++;
                  }

                  k = e.substring(t, l);
                  0 === q && (q = (f = f.replace(ca, '').trim()).charCodeAt(0));

                  switch (q) {
                    case 64:
                      0 < r && (f = f.replace(N, ''));
                      g = f.charCodeAt(1);

                      switch (g) {
                        case 100:
                        case 109:
                        case 115:
                        case 45:
                          r = c;
                          break;

                        default:
                          r = O;
                      }

                      k = M(c, r, k, g, a + 1);
                      t = k.length;
                      0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(''), void 0 !== C && 0 === (t = (k = C.trim()).length) && (g = 0, k = ''));
                      if (0 < t) switch (g) {
                        case 115:
                          f = f.replace(da, ea);

                        case 100:
                        case 109:
                        case 45:
                          k = f + '{' + k + '}';
                          break;

                        case 107:
                          f = f.replace(fa, '$1 $2');
                          k = f + '{' + k + '}';
                          k = 1 === w || 2 === w && L('@' + k, 3) ? '@-webkit-' + k + '@' + k : '@' + k;
                          break;

                        default:
                          k = f + k, 112 === h && (k = (p += k, ''));
                      } else k = '';
                      break;

                    default:
                      k = M(c, X(c, f, I), k, h, a + 1);
                  }

                  F += k;
                  k = I = r = u = q = 0;
                  f = '';
                  g = e.charCodeAt(++l);
                  break;

                case 125:
                case 59:
                  f = (0 < r ? f.replace(N, '') : f).trim();
                  if (1 < (t = f.length)) switch (0 === u && (q = f.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (f = f.replace(' ', ':')).length), 0 < A && void 0 !== (C = H(1, f, c, d, D, z, p.length, h, a, h)) && 0 === (t = (f = C.trim()).length) && (f = '\x00\x00'), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {
                    case 0:
                      break;

                    case 64:
                      if (105 === g || 99 === g) {
                        G += f + e.charAt(l);
                        break;
                      }

                    default:
                      58 !== f.charCodeAt(t - 1) && (p += P(f, q, g, f.charCodeAt(2)));
                  }
                  I = r = u = q = 0;
                  f = '';
                  g = e.charCodeAt(++l);
              }
            }

            switch (g) {
              case 13:
              case 10:
                47 === b ? b = 0 : 0 === 1 + q && 107 !== h && 0 < f.length && (r = 1, f += '\x00');
                0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);
                z = 1;
                D++;
                break;

              case 59:
              case 125:
                if (0 === b + n + v + m) {
                  z++;
                  break;
                }

              default:
                z++;
                y = e.charAt(l);

                switch (g) {
                  case 9:
                  case 32:
                    if (0 === n + m + b) switch (x) {
                      case 44:
                      case 58:
                      case 9:
                      case 32:
                        y = '';
                        break;

                      default:
                        32 !== g && (y = ' ');
                    }
                    break;

                  case 0:
                    y = '\\0';
                    break;

                  case 12:
                    y = '\\f';
                    break;

                  case 11:
                    y = '\\v';
                    break;

                  case 38:
                    0 === n + b + m && (r = I = 1, y = '\f' + y);
                    break;

                  case 108:
                    if (0 === n + b + m + E && 0 < u) switch (l - u) {
                      case 2:
                        112 === x && 58 === e.charCodeAt(l - 3) && (E = x);

                      case 8:
                        111 === K && (E = K);
                    }
                    break;

                  case 58:
                    0 === n + b + m && (u = l);
                    break;

                  case 44:
                    0 === b + v + n + m && (r = 1, y += '\r');
                    break;

                  case 34:
                  case 39:
                    0 === b && (n = n === g ? 0 : 0 === n ? g : n);
                    break;

                  case 91:
                    0 === n + b + v && m++;
                    break;

                  case 93:
                    0 === n + b + v && m--;
                    break;

                  case 41:
                    0 === n + b + m && v--;
                    break;

                  case 40:
                    if (0 === n + b + m) {
                      if (0 === q) switch (2 * x + 3 * K) {
                        case 533:
                          break;

                        default:
                          q = 1;
                      }
                      v++;
                    }

                    break;

                  case 64:
                    0 === b + v + n + m + u + k && (k = 1);
                    break;

                  case 42:
                  case 47:
                    if (!(0 < n + m + v)) switch (b) {
                      case 0:
                        switch (2 * g + 3 * e.charCodeAt(l + 1)) {
                          case 235:
                            b = 47;
                            break;

                          case 220:
                            t = l, b = 42;
                        }

                        break;

                      case 42:
                        47 === g && 42 === x && t + 2 !== l && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l + 1)), y = '', b = 0);
                    }
                }

                0 === b && (f += y);
            }

            K = x;
            x = g;
            l++;
          }

          t = p.length;

          if (0 < t) {
            r = c;
            if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), void 0 !== C && 0 === (p = C).length)) return G + p + F;
            p = r.join(',') + '{' + p + '}';

            if (0 !== w * E) {
              2 !== w || L(p, 2) || (E = 0);

              switch (E) {
                case 111:
                  p = p.replace(ha, ':-moz-$1') + p;
                  break;

                case 112:
                  p = p.replace(Q, '::-webkit-input-$1') + p.replace(Q, '::-moz-$1') + p.replace(Q, ':-ms-input-$1') + p;
              }

              E = 0;
            }
          }

          return G + p + F;
        }

        function X(d, c, e) {
          var h = c.trim().split(ia);
          c = h;
          var a = h.length,
              m = d.length;

          switch (m) {
            case 0:
            case 1:
              var b = 0;

              for (d = 0 === m ? '' : d[0] + ' '; b < a; ++b) {
                c[b] = Z(d, c[b], e).trim();
              }

              break;

            default:
              var v = b = 0;

              for (c = []; b < a; ++b) {
                for (var n = 0; n < m; ++n) {
                  c[v++] = Z(d[n] + ' ', h[b], e).trim();
                }
              }

          }

          return c;
        }

        function Z(d, c, e) {
          var h = c.charCodeAt(0);
          33 > h && (h = (c = c.trim()).charCodeAt(0));

          switch (h) {
            case 38:
              return c.replace(F, '$1' + d.trim());

            case 58:
              return d.trim() + c.replace(F, '$1' + d.trim());

            default:
              if (0 < 1 * e && 0 < c.indexOf('\f')) return c.replace(F, (58 === d.charCodeAt(0) ? '' : '$1') + d.trim());
          }

          return d + c;
        }

        function P(d, c, e, h) {
          var a = d + ';',
              m = 2 * c + 3 * e + 4 * h;

          if (944 === m) {
            d = a.indexOf(':', 9) + 1;
            var b = a.substring(d, a.length - 1).trim();
            b = a.substring(0, d).trim() + b + ';';
            return 1 === w || 2 === w && L(b, 1) ? '-webkit-' + b + b : b;
          }

          if (0 === w || 2 === w && !L(a, 1)) return a;

          switch (m) {
            case 1015:
              return 97 === a.charCodeAt(10) ? '-webkit-' + a + a : a;

            case 951:
              return 116 === a.charCodeAt(3) ? '-webkit-' + a + a : a;

            case 963:
              return 110 === a.charCodeAt(5) ? '-webkit-' + a + a : a;

            case 1009:
              if (100 !== a.charCodeAt(4)) break;

            case 969:
            case 942:
              return '-webkit-' + a + a;

            case 978:
              return '-webkit-' + a + '-moz-' + a + a;

            case 1019:
            case 983:
              return '-webkit-' + a + '-moz-' + a + '-ms-' + a + a;

            case 883:
              if (45 === a.charCodeAt(8)) return '-webkit-' + a + a;
              if (0 < a.indexOf('image-set(', 11)) return a.replace(ja, '$1-webkit-$2') + a;
              break;

            case 932:
              if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {
                case 103:
                  return '-webkit-box-' + a.replace('-grow', '') + '-webkit-' + a + '-ms-' + a.replace('grow', 'positive') + a;

                case 115:
                  return '-webkit-' + a + '-ms-' + a.replace('shrink', 'negative') + a;

                case 98:
                  return '-webkit-' + a + '-ms-' + a.replace('basis', 'preferred-size') + a;
              }
              return '-webkit-' + a + '-ms-' + a + a;

            case 964:
              return '-webkit-' + a + '-ms-flex-' + a + a;

            case 1023:
              if (99 !== a.charCodeAt(8)) break;
              b = a.substring(a.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');
              return '-webkit-box-pack' + b + '-webkit-' + a + '-ms-flex-pack' + b + a;

            case 1005:
              return ka.test(a) ? a.replace(aa, ':-webkit-') + a.replace(aa, ':-moz-') + a : a;

            case 1e3:
              b = a.substring(13).trim();
              c = b.indexOf('-') + 1;

              switch (b.charCodeAt(0) + b.charCodeAt(c)) {
                case 226:
                  b = a.replace(G, 'tb');
                  break;

                case 232:
                  b = a.replace(G, 'tb-rl');
                  break;

                case 220:
                  b = a.replace(G, 'lr');
                  break;

                default:
                  return a;
              }

              return '-webkit-' + a + '-ms-' + b + a;

            case 1017:
              if (-1 === a.indexOf('sticky', 9)) break;

            case 975:
              c = (a = d).length - 10;
              b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(':', 7) + 1).trim();

              switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {
                case 203:
                  if (111 > b.charCodeAt(8)) break;

                case 115:
                  a = a.replace(b, '-webkit-' + b) + ';' + a;
                  break;

                case 207:
                case 102:
                  a = a.replace(b, '-webkit-' + (102 < m ? 'inline-' : '') + 'box') + ';' + a.replace(b, '-webkit-' + b) + ';' + a.replace(b, '-ms-' + b + 'box') + ';' + a;
              }

              return a + ';';

            case 938:
              if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {
                case 105:
                  return b = a.replace('-items', ''), '-webkit-' + a + '-webkit-box-' + b + '-ms-flex-' + b + a;

                case 115:
                  return '-webkit-' + a + '-ms-flex-item-' + a.replace(ba, '') + a;

                default:
                  return '-webkit-' + a + '-ms-flex-line-pack' + a.replace('align-content', '').replace(ba, '') + a;
              }
              break;

            case 973:
            case 989:
              if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4)) break;

            case 931:
            case 953:
              if (!0 === la.test(d)) return 115 === (b = d.substring(d.indexOf(':') + 1)).charCodeAt(0) ? P(d.replace('stretch', 'fill-available'), c, e, h).replace(':fill-available', ':stretch') : a.replace(b, '-webkit-' + b) + a.replace(b, '-moz-' + b.replace('fill-', '')) + a;
              break;

            case 962:
              if (a = '-webkit-' + a + (102 === a.charCodeAt(5) ? '-ms-' + a : '') + a, 211 === e + h && 105 === a.charCodeAt(13) && 0 < a.indexOf('transform', 10)) return a.substring(0, a.indexOf(';', 27) + 1).replace(ma, '$1-webkit-$2') + a;
          }

          return a;
        }

        function L(d, c) {
          var e = d.indexOf(1 === c ? ':' : '{'),
              h = d.substring(0, 3 !== c ? e : 10);
          e = d.substring(e + 1, d.length - 1);
          return R(2 !== c ? h : h.replace(na, '$1'), e, c);
        }

        function ea(d, c) {
          var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));
          return e !== c + ';' ? e.replace(oa, ' or ($1)').substring(4) : '(' + c + ')';
        }

        function H(d, c, e, h, a, m, b, v, n, q) {
          for (var g = 0, x = c, w; g < A; ++g) {
            switch (w = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {
              case void 0:
              case !1:
              case !0:
              case null:
                break;

              default:
                x = w;
            }
          }

          if (x !== c) return x;
        }

        function T(d) {
          switch (d) {
            case void 0:
            case null:
              A = S.length = 0;
              break;

            default:
              if ('function' === typeof d) S[A++] = d;else if ('object' === typeof d) for (var c = 0, e = d.length; c < e; ++c) {
                T(d[c]);
              } else Y = !!d | 0;
          }

          return T;
        }

        function U(d) {
          d = d.prefix;
          void 0 !== d && (R = null, d ? 'function' !== typeof d ? w = 1 : (w = 2, R = d) : w = 0);
          return U;
        }

        function B(d, c) {
          var e = d;
          33 > e.charCodeAt(0) && (e = e.trim());
          V = e;
          e = [V];

          if (0 < A) {
            var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);
            void 0 !== h && 'string' === typeof h && (c = h);
          }

          var a = M(O, e, c, 0, 0);
          0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), void 0 !== h && (a = h));
          V = '';
          E = 0;
          z = D = 1;
          return a;
        }

        var ca = /^\0+/g,
            N = /[\0\r\f]/g,
            aa = /: */g,
            ka = /zoo|gra/,
            ma = /([,: ])(transform)/g,
            ia = /,\r+?/g,
            F = /([\t\r\n ])*\f?&/g,
            fa = /@(k\w+)\s*(\S*)\s*/,
            Q = /::(place)/g,
            ha = /:(read-only)/g,
            G = /[svh]\w+-[tblr]{2}/,
            da = /\(\s*(.*)\s*\)/g,
            oa = /([\s\S]*?);/g,
            ba = /-self|flex-/g,
            na = /[^]*?(:[rp][el]a[\w-]+)[^]*/,
            la = /stretch|:\s*\w+\-(?:conte|avail)/,
            ja = /([^-])(image-set\()/,
            z = 1,
            D = 1,
            E = 0,
            w = 1,
            O = [],
            S = [],
            A = 0,
            R = null,
            Y = 0,
            V = '';
        B.use = T;
        B.set = U;
        void 0 !== W && U(W);
        return B;
      }

      var unitlessKeys = {
        animationIterationCount: 1,
        borderImageOutset: 1,
        borderImageSlice: 1,
        borderImageWidth: 1,
        boxFlex: 1,
        boxFlexGroup: 1,
        boxOrdinalGroup: 1,
        columnCount: 1,
        columns: 1,
        flex: 1,
        flexGrow: 1,
        flexPositive: 1,
        flexShrink: 1,
        flexNegative: 1,
        flexOrder: 1,
        gridRow: 1,
        gridRowEnd: 1,
        gridRowSpan: 1,
        gridRowStart: 1,
        gridColumn: 1,
        gridColumnEnd: 1,
        gridColumnSpan: 1,
        gridColumnStart: 1,
        msGridRow: 1,
        msGridRowSpan: 1,
        msGridColumn: 1,
        msGridColumnSpan: 1,
        fontWeight: 1,
        lineHeight: 1,
        opacity: 1,
        order: 1,
        orphans: 1,
        tabSize: 1,
        widows: 1,
        zIndex: 1,
        zoom: 1,
        WebkitLineClamp: 1,
        // SVG-related properties
        fillOpacity: 1,
        floodOpacity: 1,
        stopOpacity: 1,
        strokeDasharray: 1,
        strokeDashoffset: 1,
        strokeMiterlimit: 1,
        strokeOpacity: 1,
        strokeWidth: 1
      };

      function memoize$1(fn) {
        var cache = {};
        return function (arg) {
          if (cache[arg] === undefined) cache[arg] = fn(arg);
          return cache[arg];
        };
      }

      var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

      var index = memoize$1(function (prop) {
        return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
        /* o */
        && prop.charCodeAt(1) === 110
        /* n */
        && prop.charCodeAt(2) < 91;
      }
      /* Z+1 */
      );

      /**
       * Copyright 2015, Yahoo! Inc.
       * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
       */


      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        '$$typeof': true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        '$$typeof': true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

      function getStatics(component) {
        // React v16.11 and below
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        } // React v16.12 and above


        return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
      }

      var defineProperty$2 = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;

      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== 'string') {
          // don't hoist over string (html) components
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);

            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }

          var keys = getOwnPropertyNames(sourceComponent);

          if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
          }

          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);

          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];

            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

              try {
                // Avoid failures from read-only properties
                defineProperty$2(targetComponent, key, descriptor);
              } catch (e) {}
            }
          }
        }

        return targetComponent;
      }

      var hoistNonReactStatics_cjs = hoistNonReactStatics;

      function _extends$2() {
        _extends$2 = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends$2.apply(this, arguments);
      }

      function _objectWithoutPropertiesLoose$2(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;

        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }

        return target;
      } // 


      var interleave = function (strings, interpolations) {
        var result = [strings[0]];

        for (var i = 0, len = interpolations.length; i < len; i += 1) {
          result.push(interpolations[i], strings[i + 1]);
        }

        return result;
      }; // 


      var isPlainObject$1 = function (x) {
        return x !== null && typeof x === 'object' && (x.toString ? x.toString() : Object.prototype.toString.call(x)) === '[object Object]' && !typeOf(x);
      }; // 


      var EMPTY_ARRAY = Object.freeze([]);
      var EMPTY_OBJECT = Object.freeze({}); // 

      function isFunction$1(test) {
        return typeof test === 'function';
      } // 


      function getComponentName(target) {
        return (process.env.NODE_ENV !== 'production' ? typeof target === 'string' && target : false) || // $FlowFixMe
        target.displayName || // $FlowFixMe
        target.name || 'Component';
      } // 


      function isStatelessFunction(test) {
        return typeof test === 'function' && !(test.prototype && test.prototype.isReactComponent);
      } // 


      function isStyledComponent(target) {
        return target && typeof target.styledComponentId === 'string';
      } // 


      var SC_ATTR = typeof process !== 'undefined' && (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR) || 'data-styled';
      var SC_ATTR_ACTIVE = 'active';
      var SC_ATTR_VERSION = 'data-styled-version';
      var SC_VERSION = "5.1.1";
      var SPLITTER = '/*!sc*/\n';
      var IS_BROWSER = typeof window !== 'undefined' && 'HTMLElement' in window;
      var DISABLE_SPEEDY = typeof SC_DISABLE_SPEEDY === 'boolean' && SC_DISABLE_SPEEDY || typeof process !== 'undefined' && (process.env.REACT_APP_SC_DISABLE_SPEEDY || process.env.SC_DISABLE_SPEEDY) || process.env.NODE_ENV !== 'production'; // Shared empty execution context when generating static styles

      /* eslint-disable camelcase, no-undef */

      var getNonce = function getNonce() {
        return typeof __webpack_nonce__ !== 'undefined' ? __webpack_nonce__ : null;
      };

      var errorMap = {
        "1": "Cannot create styled-component for component: %s.\n\n",
        "2": "Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n",
        "3": "Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n",
        "4": "The `StyleSheetManager` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n",
        "5": "The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n",
        "6": "Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n",
        "7": "ThemeProvider: Please return an object from your \"theme\" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n",
        "8": "ThemeProvider: Please make your \"theme\" prop an object.\n\n",
        "9": "Missing document `<head>`\n\n",
        "10": "Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n",
        "11": "_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n",
        "12": "It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\`\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\n\n",
        "13": "%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n\n",
        "14": "ThemeProvider: \"theme\" prop is required.\n\n",
        "15": "A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\n\n```js\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\n```\n\n",
        "16": "Reached the limit of how many styled components may be created at group %s.\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\nas for instance in your render method then you may be running into this limitation.\n\n",
        "17": "CSSStyleSheet could not be found on HTMLStyleElement.\nHas styled-components' style tag been unmounted or altered by another script?\n"
      }; // 

      var ERRORS = process.env.NODE_ENV !== 'production' ? errorMap : {};
      /**
       * super basic version of sprintf
       */

      function format() {
        var a = arguments.length <= 0 ? undefined : arguments[0];
        var b = [];

        for (var c = 1, len = arguments.length; c < len; c += 1) {
          b.push(c < 0 || arguments.length <= c ? undefined : arguments[c]);
        }

        b.forEach(function (d) {
          a = a.replace(/%[a-z]/, d);
        });
        return a;
      }
      /**
       * Create an error file out of errors.md for development and a simple web link to the full errors
       * in production mode.
       */


      function throwStyledComponentsError(code) {
        for (var _len = arguments.length, interpolations = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          interpolations[_key - 1] = arguments[_key];
        }

        if (process.env.NODE_ENV === 'production') {
          throw new Error("An error occurred. See https://github.com/styled-components/styled-components/blob/master/packages/styled-components/src/utils/errors.md#" + code + " for more information." + (interpolations.length > 0 ? " Additional arguments: " + interpolations.join(', ') : ''));
        } else {
          throw new Error(format.apply(void 0, [ERRORS[code]].concat(interpolations)).trim());
        }
      } // 


      var ELEMENT_TYPE = 1;
      /* Node.ELEMENT_TYPE */

      /** Find last style element if any inside target */

      var findLastStyleTag = function findLastStyleTag(target) {
        var childNodes = target.childNodes;

        for (var i = childNodes.length; i >= 0; i--) {
          var child = childNodes[i];

          if (child && child.nodeType === ELEMENT_TYPE && child.hasAttribute(SC_ATTR)) {
            return child;
          }
        }

        return undefined;
      };
      /** Create a style element inside `target` or <head> after the last */


      var makeStyleTag = function makeStyleTag(target) {
        var head = document.head;
        var parent = target || head;
        var style = document.createElement('style');
        var prevStyle = findLastStyleTag(parent);
        var nextSibling = prevStyle !== undefined ? prevStyle.nextSibling : null;
        style.setAttribute(SC_ATTR, SC_ATTR_ACTIVE);
        style.setAttribute(SC_ATTR_VERSION, SC_VERSION);
        var nonce = getNonce();
        if (nonce) style.setAttribute('nonce', nonce);
        parent.insertBefore(style, nextSibling);
        return style;
      };
      /** Get the CSSStyleSheet instance for a given style element */


      var getSheet = function getSheet(tag) {
        if (tag.sheet) {
          return tag.sheet;
        } // Avoid Firefox quirk where the style element might not have a sheet property


        var _document = document,
            styleSheets = _document.styleSheets;

        for (var i = 0, l = styleSheets.length; i < l; i++) {
          var sheet = styleSheets[i];

          if (sheet.ownerNode === tag) {
            return sheet;
          }
        }

        throwStyledComponentsError(17);
        return undefined;
      }; // 

      /** Create a CSSStyleSheet-like tag depending on the environment */


      var makeTag = function makeTag(_ref) {
        var isServer = _ref.isServer,
            useCSSOMInjection = _ref.useCSSOMInjection,
            target = _ref.target;

        if (isServer) {
          return new VirtualTag(target);
        } else if (useCSSOMInjection) {
          return new CSSOMTag(target);
        } else {
          return new TextTag(target);
        }
      };

      var CSSOMTag = /*#__PURE__*/function () {
        function CSSOMTag(target) {
          var element = this.element = makeStyleTag(target); // Avoid Edge bug where empty style elements don't create sheets

          element.appendChild(document.createTextNode(''));
          this.sheet = getSheet(element);
          this.length = 0;
        }

        var _proto = CSSOMTag.prototype;

        _proto.insertRule = function insertRule(index, rule) {
          try {
            this.sheet.insertRule(rule, index);
            this.length++;
            return true;
          } catch (_error) {
            return false;
          }
        };

        _proto.deleteRule = function deleteRule(index) {
          this.sheet.deleteRule(index);
          this.length--;
        };

        _proto.getRule = function getRule(index) {
          var rule = this.sheet.cssRules[index]; // Avoid IE11 quirk where cssText is inaccessible on some invalid rules

          if (rule !== undefined && typeof rule.cssText === 'string') {
            return rule.cssText;
          } else {
            return '';
          }
        };

        return CSSOMTag;
      }();
      /** A Tag that emulates the CSSStyleSheet API but uses text nodes */


      var TextTag = /*#__PURE__*/function () {
        function TextTag(target) {
          var element = this.element = makeStyleTag(target);
          this.nodes = element.childNodes;
          this.length = 0;
        }

        var _proto2 = TextTag.prototype;

        _proto2.insertRule = function insertRule(index, rule) {
          if (index <= this.length && index >= 0) {
            var node = document.createTextNode(rule);
            var refNode = this.nodes[index];
            this.element.insertBefore(node, refNode || null);
            this.length++;
            return true;
          } else {
            return false;
          }
        };

        _proto2.deleteRule = function deleteRule(index) {
          this.element.removeChild(this.nodes[index]);
          this.length--;
        };

        _proto2.getRule = function getRule(index) {
          if (index < this.length) {
            return this.nodes[index].textContent;
          } else {
            return '';
          }
        };

        return TextTag;
      }();
      /** A completely virtual (server-side) Tag that doesn't manipulate the DOM */


      var VirtualTag = /*#__PURE__*/function () {
        function VirtualTag(_target) {
          this.rules = [];
          this.length = 0;
        }

        var _proto3 = VirtualTag.prototype;

        _proto3.insertRule = function insertRule(index, rule) {
          if (index <= this.length) {
            this.rules.splice(index, 0, rule);
            this.length++;
            return true;
          } else {
            return false;
          }
        };

        _proto3.deleteRule = function deleteRule(index) {
          this.rules.splice(index, 1);
          this.length--;
        };

        _proto3.getRule = function getRule(index) {
          if (index < this.length) {
            return this.rules[index];
          } else {
            return '';
          }
        };

        return VirtualTag;
      }(); // 

      /** Create a GroupedTag with an underlying Tag implementation */


      var makeGroupedTag = function makeGroupedTag(tag) {
        return new DefaultGroupedTag(tag);
      };

      var BASE_SIZE = 1 << 9;

      var DefaultGroupedTag = /*#__PURE__*/function () {
        function DefaultGroupedTag(tag) {
          this.groupSizes = new Uint32Array(BASE_SIZE);
          this.length = BASE_SIZE;
          this.tag = tag;
        }

        var _proto = DefaultGroupedTag.prototype;

        _proto.indexOfGroup = function indexOfGroup(group) {
          var index = 0;

          for (var i = 0; i < group; i++) {
            index += this.groupSizes[i];
          }

          return index;
        };

        _proto.insertRules = function insertRules(group, rules) {
          if (group >= this.groupSizes.length) {
            var oldBuffer = this.groupSizes;
            var oldSize = oldBuffer.length;
            var newSize = oldSize;

            while (group >= newSize) {
              newSize <<= 1;

              if (newSize < 0) {
                throwStyledComponentsError(16, "" + group);
              }
            }

            this.groupSizes = new Uint32Array(newSize);
            this.groupSizes.set(oldBuffer);
            this.length = newSize;

            for (var i = oldSize; i < newSize; i++) {
              this.groupSizes[i] = 0;
            }
          }

          var ruleIndex = this.indexOfGroup(group + 1);

          for (var _i = 0, l = rules.length; _i < l; _i++) {
            if (this.tag.insertRule(ruleIndex, rules[_i])) {
              this.groupSizes[group]++;
              ruleIndex++;
            }
          }
        };

        _proto.clearGroup = function clearGroup(group) {
          if (group < this.length) {
            var length = this.groupSizes[group];
            var startIndex = this.indexOfGroup(group);
            var endIndex = startIndex + length;
            this.groupSizes[group] = 0;

            for (var i = startIndex; i < endIndex; i++) {
              this.tag.deleteRule(startIndex);
            }
          }
        };

        _proto.getGroup = function getGroup(group) {
          var css = '';

          if (group >= this.length || this.groupSizes[group] === 0) {
            return css;
          }

          var length = this.groupSizes[group];
          var startIndex = this.indexOfGroup(group);
          var endIndex = startIndex + length;

          for (var i = startIndex; i < endIndex; i++) {
            css += "" + this.tag.getRule(i) + SPLITTER;
          }

          return css;
        };

        return DefaultGroupedTag;
      }(); // 


      var MAX_SMI = 1 << 31 - 1;
      var groupIDRegister = new Map();
      var reverseRegister = new Map();
      var nextFreeGroup = 1;

      var getGroupForId = function getGroupForId(id) {
        if (groupIDRegister.has(id)) {
          return groupIDRegister.get(id);
        }

        var group = nextFreeGroup++;

        if (process.env.NODE_ENV !== 'production' && ((group | 0) < 0 || group > MAX_SMI)) {
          throwStyledComponentsError(16, "" + group);
        }

        groupIDRegister.set(id, group);
        reverseRegister.set(group, id);
        return group;
      };

      var getIdForGroup = function getIdForGroup(group) {
        return reverseRegister.get(group);
      };

      var setGroupForId = function setGroupForId(id, group) {
        if (group >= nextFreeGroup) {
          nextFreeGroup = group + 1;
        }

        groupIDRegister.set(id, group);
        reverseRegister.set(group, id);
      }; // 


      var SELECTOR = "style[" + SC_ATTR + "][" + SC_ATTR_VERSION + "=\"" + SC_VERSION + "\"]";
      var MARKER_RE = new RegExp("^" + SC_ATTR + "\\.g(\\d+)\\[id=\"([\\w\\d-]+)\"\\].*?\"([^\"]*)");

      var outputSheet = function outputSheet(sheet) {
        var tag = sheet.getTag();
        var length = tag.length;
        var css = '';

        for (var group = 0; group < length; group++) {
          var id = getIdForGroup(group);
          if (id === undefined) continue;
          var names = sheet.names.get(id);
          var rules = tag.getGroup(group);
          if (names === undefined || rules.length === 0) continue;
          var selector = SC_ATTR + ".g" + group + "[id=\"" + id + "\"]";
          var content = '';

          if (names !== undefined) {
            names.forEach(function (name) {
              if (name.length > 0) {
                content += name + ",";
              }
            });
          } // NOTE: It's easier to collect rules and have the marker
          // after the actual rules to simplify the rehydration


          css += "" + rules + selector + "{content:\"" + content + "\"}" + SPLITTER;
        }

        return css;
      };

      var rehydrateNamesFromContent = function rehydrateNamesFromContent(sheet, id, content) {
        var names = content.split(',');
        var name;

        for (var i = 0, l = names.length; i < l; i++) {
          // eslint-disable-next-line
          if (name = names[i]) {
            sheet.registerName(id, name);
          }
        }
      };

      var rehydrateSheetFromTag = function rehydrateSheetFromTag(sheet, style) {
        var parts = style.innerHTML.split(SPLITTER);
        var rules = [];

        for (var i = 0, l = parts.length; i < l; i++) {
          var part = parts[i].trim();
          if (!part) continue;
          var marker = part.match(MARKER_RE);

          if (marker) {
            var group = parseInt(marker[1], 10) | 0;
            var id = marker[2];

            if (group !== 0) {
              // Rehydrate componentId to group index mapping
              setGroupForId(id, group); // Rehydrate names and rules
              // looks like: data-styled.g11[id="idA"]{content:"nameA,"}

              rehydrateNamesFromContent(sheet, id, marker[3]);
              sheet.getTag().insertRules(group, rules);
            }

            rules.length = 0;
          } else {
            rules.push(part);
          }
        }
      };

      var rehydrateSheet = function rehydrateSheet(sheet) {
        var nodes = document.querySelectorAll(SELECTOR);

        for (var i = 0, l = nodes.length; i < l; i++) {
          var node = nodes[i];

          if (node && node.getAttribute(SC_ATTR) !== SC_ATTR_ACTIVE) {
            rehydrateSheetFromTag(sheet, node);

            if (node.parentNode) {
              node.parentNode.removeChild(node);
            }
          }
        }
      };

      var SHOULD_REHYDRATE = IS_BROWSER;
      var defaultOptions$1 = {
        isServer: !IS_BROWSER,
        useCSSOMInjection: !DISABLE_SPEEDY
      };
      /** Contains the main stylesheet logic for stringification and caching */

      var StyleSheet = /*#__PURE__*/function () {
        /** Register a group ID to give it an index */
        StyleSheet.registerId = function registerId(id) {
          return getGroupForId(id);
        };

        function StyleSheet(options, globalStyles, names) {
          if (options === void 0) {
            options = defaultOptions$1;
          }

          if (globalStyles === void 0) {
            globalStyles = {};
          }

          this.options = _extends$2({}, defaultOptions$1, {}, options);
          this.gs = globalStyles;
          this.names = new Map(names); // We rehydrate only once and use the sheet that is created first

          if (!this.options.isServer && IS_BROWSER && SHOULD_REHYDRATE) {
            SHOULD_REHYDRATE = false;
            rehydrateSheet(this);
          }
        }

        var _proto = StyleSheet.prototype;

        _proto.reconstructWithOptions = function reconstructWithOptions(options) {
          return new StyleSheet(_extends$2({}, this.options, {}, options), this.gs, this.names);
        };

        _proto.allocateGSInstance = function allocateGSInstance(id) {
          return this.gs[id] = (this.gs[id] || 0) + 1;
        }
        /** Lazily initialises a GroupedTag for when it's actually needed */
        ;

        _proto.getTag = function getTag() {
          return this.tag || (this.tag = makeGroupedTag(makeTag(this.options)));
        }
        /** Check whether a name is known for caching */
        ;

        _proto.hasNameForId = function hasNameForId(id, name) {
          return this.names.has(id) && this.names.get(id).has(name);
        }
        /** Mark a group's name as known for caching */
        ;

        _proto.registerName = function registerName(id, name) {
          getGroupForId(id);

          if (!this.names.has(id)) {
            var groupNames = new Set();
            groupNames.add(name);
            this.names.set(id, groupNames);
          } else {
            this.names.get(id).add(name);
          }
        }
        /** Insert new rules which also marks the name as known */
        ;

        _proto.insertRules = function insertRules(id, name, rules) {
          this.registerName(id, name);
          this.getTag().insertRules(getGroupForId(id), rules);
        }
        /** Clears all cached names for a given group ID */
        ;

        _proto.clearNames = function clearNames(id) {
          if (this.names.has(id)) {
            this.names.get(id).clear();
          }
        }
        /** Clears all rules for a given group ID */
        ;

        _proto.clearRules = function clearRules(id) {
          this.getTag().clearGroup(getGroupForId(id));
          this.clearNames(id);
        }
        /** Clears the entire tag which deletes all rules but not its names */
        ;

        _proto.clearTag = function clearTag() {
          // NOTE: This does not clear the names, since it's only used during SSR
          // so that we can continuously output only new rules
          this.tag = undefined;
        }
        /** Outputs the current sheet as a CSS string with markers for SSR */
        ;

        _proto.toString = function toString() {
          return outputSheet(this);
        };

        return StyleSheet;
      }(); // 

      /* eslint-disable */


      var SEED = 5381; // When we have separate strings it's useful to run a progressive
      // version of djb2 where we pretend that we're still looping over
      // the same string

      var phash = function phash(h, x) {
        var i = x.length;

        while (i) {
          h = h * 33 ^ x.charCodeAt(--i);
        }

        return h;
      }; // This is a djb2 hashing function


      var hash = function hash(x) {
        return phash(SEED, x);
      };
      /**
       * MIT License
       *
       * Copyright (c) 2016 Sultan Tarimo
       *
       * Permission is hereby granted, free of charge, to any person obtaining a copy of
       * this software and associated documentation files (the "Software"),
       * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
       * sell copies of the Software and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
       *
       * The above copyright notice and this permission notice shall be included in all
       * copies or substantial portions of the Software.
       *
       * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
       * OR IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
       * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
       * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
       * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
       * IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
       */

      /* eslint-disable */


      function insertRulePlugin(insertRule) {
        var delimiter = '/*|*/';
        var needle = delimiter + "}";

        function toSheet(block) {
          if (block) {
            try {
              insertRule(block + "}");
            } catch (e) {}
          }
        }

        return function ruleSheet(context, content, selectors, parents, line, column, length, ns, depth, at) {
          switch (context) {
            // property
            case 1:
              // @import
              if (depth === 0 && content.charCodeAt(0) === 64) return insertRule(content + ";"), '';
              break;
            // selector

            case 2:
              if (ns === 0) return content + delimiter;
              break;
            // at-rule

            case 3:
              switch (ns) {
                // @font-face, @page
                case 102:
                case 112:
                  return insertRule(selectors[0] + content), '';

                default:
                  return content + (at === 0 ? delimiter : '');
              }

            case -2:
              content.split(needle).forEach(toSheet);
          }
        };
      }

      var COMMENT_REGEX = /^\s*\/\/.*$/gm;

      function createStylisInstance(_temp) {
        var _ref = _temp === void 0 ? EMPTY_OBJECT : _temp,
            _ref$options = _ref.options,
            options = _ref$options === void 0 ? EMPTY_OBJECT : _ref$options,
            _ref$plugins = _ref.plugins,
            plugins = _ref$plugins === void 0 ? EMPTY_ARRAY : _ref$plugins;

        var stylis = new stylis_min(options); // Wrap `insertRulePlugin to build a list of rules,
        // and then make our own plugin to return the rules. This
        // makes it easier to hook into the existing SSR architecture

        var parsingRules = []; // eslint-disable-next-line consistent-return

        var returnRulesPlugin = function returnRulesPlugin(context) {
          if (context === -2) {
            var parsedRules = parsingRules;
            parsingRules = [];
            return parsedRules;
          }
        };

        var parseRulesPlugin = insertRulePlugin(function (rule) {
          parsingRules.push(rule);
        });

        var _componentId;

        var _selector;

        var _selectorRegexp;

        var selfReferenceReplacer = function selfReferenceReplacer(match, offset, string) {
          if ( // the first self-ref is always untouched
          offset > 0 && // there should be at least two self-refs to do a replacement (.b > .b)
          string.slice(0, offset).indexOf(_selector) !== -1 && // no consecutive self refs (.b.b); that is a precedence boost and treated differently
          string.slice(offset - _selector.length, offset) !== _selector) {
            return "." + _componentId;
          }

          return match;
        };
        /**
         * When writing a style like
         *
         * & + & {
         *   color: red;
         * }
         *
         * The second ampersand should be a reference to the static component class. stylis
         * has no knowledge of static class so we have to intelligently replace the base selector.
         *
         * https://github.com/thysultan/stylis.js#plugins <- more info about the context phase values
         * "2" means this plugin is taking effect at the very end after all other processing is complete
         */


        var selfReferenceReplacementPlugin = function selfReferenceReplacementPlugin(context, _, selectors) {
          if (context === 2 && selectors.length && selectors[0].lastIndexOf(_selector) > 0) {
            // eslint-disable-next-line no-param-reassign
            selectors[0] = selectors[0].replace(_selectorRegexp, selfReferenceReplacer);
          }
        };

        stylis.use([].concat(plugins, [selfReferenceReplacementPlugin, parseRulesPlugin, returnRulesPlugin]));

        function stringifyRules(css, selector, prefix, componentId) {
          if (componentId === void 0) {
            componentId = '&';
          }

          var flatCSS = css.replace(COMMENT_REGEX, '');
          var cssStr = selector && prefix ? prefix + " " + selector + " { " + flatCSS + " }" : flatCSS; // stylis has no concept of state to be passed to plugins
          // but since JS is single=threaded, we can rely on that to ensure
          // these properties stay in sync with the current stylis run

          _componentId = componentId;
          _selector = selector;
          _selectorRegexp = new RegExp("\\" + _selector + "\\b", 'g');
          return stylis(prefix || !selector ? '' : selector, cssStr);
        }

        stringifyRules.hash = plugins.length ? plugins.reduce(function (acc, plugin) {
          if (!plugin.name) {
            throwStyledComponentsError(15);
          }

          return phash(acc, plugin.name);
        }, SEED).toString() : '';
        return stringifyRules;
      } // 


      var StyleSheetContext = /*#__PURE__*/React.createContext();
      var StyleSheetConsumer = StyleSheetContext.Consumer;
      var StylisContext = /*#__PURE__*/React.createContext();
      var StylisConsumer = StylisContext.Consumer;
      var masterSheet = new StyleSheet();
      var masterStylis = createStylisInstance();

      function useStyleSheet() {
        return useContext(StyleSheetContext) || masterSheet;
      }

      function useStylis() {
        return useContext(StylisContext) || masterStylis;
      }


      var Keyframes = /*#__PURE__*/function () {
        function Keyframes(name, stringifyArgs) {
          var _this = this;

          this.inject = function (styleSheet) {
            if (!styleSheet.hasNameForId(_this.id, _this.name)) {
              styleSheet.insertRules(_this.id, _this.name, masterStylis.apply(void 0, _this.stringifyArgs));
            }
          };

          this.toString = function () {
            return throwStyledComponentsError(12, String(_this.name));
          };

          this.name = name;
          this.id = "sc-keyframes-" + name;
          this.stringifyArgs = stringifyArgs;
        }

        var _proto = Keyframes.prototype;

        _proto.getName = function getName() {
          return this.name;
        };

        return Keyframes;
      }(); // 

      /**
       * inlined version of
       * https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/hyphenateStyleName.js
       */


      var uppercasePattern = /([A-Z])/g;
      var msPattern = /^ms-/;
      /**
       * Hyphenates a camelcased CSS property name, for example:
       *
       *   > hyphenateStyleName('backgroundColor')
       *   < "background-color"
       *   > hyphenateStyleName('MozTransition')
       *   < "-moz-transition"
       *   > hyphenateStyleName('msTransition')
       *   < "-ms-transition"
       *
       * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
       * is converted to `-ms-`.
       *
       * @param {string} string
       * @return {string}
       */

      function hyphenateStyleName(string) {
        return string.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
      } // 


      function addUnitIfNeeded(name, value) {
        // https://github.com/amilajack/eslint-plugin-flowtype-errors/issues/133
        // $FlowFixMe
        if (value == null || typeof value === 'boolean' || value === '') {
          return '';
        }

        if (typeof value === 'number' && value !== 0 && !(name in unitlessKeys)) {
          return value + "px"; // Presumes implicit 'px' suffix for unitless numbers
        }

        return String(value).trim();
      } // 

      /**
       * It's falsish not falsy because 0 is allowed.
       */


      var isFalsish = function isFalsish(chunk) {
        return chunk === undefined || chunk === null || chunk === false || chunk === '';
      };

      var objToCssArray = function objToCssArray(obj, prevKey) {
        var rules = [];
        var keys = Object.keys(obj);
        keys.forEach(function (key) {
          if (!isFalsish(obj[key])) {
            if (isPlainObject$1(obj[key])) {
              rules.push.apply(rules, objToCssArray(obj[key], key));
              return rules;
            } else if (isFunction$1(obj[key])) {
              rules.push(hyphenateStyleName(key) + ":", obj[key], ';');
              return rules;
            }

            rules.push(hyphenateStyleName(key) + ": " + addUnitIfNeeded(key, obj[key]) + ";");
          }

          return rules;
        });
        return prevKey ? [prevKey + " {"].concat(rules, ['}']) : rules;
      };

      function flatten(chunk, executionContext, styleSheet) {
        if (Array.isArray(chunk)) {
          var ruleSet = [];

          for (var i = 0, len = chunk.length, result; i < len; i += 1) {
            result = flatten(chunk[i], executionContext, styleSheet);
            if (result === '') continue;else if (Array.isArray(result)) ruleSet.push.apply(ruleSet, result);else ruleSet.push(result);
          }

          return ruleSet;
        }

        if (isFalsish(chunk)) {
          return '';
        }
        /* Handle other components */


        if (isStyledComponent(chunk)) {
          return "." + chunk.styledComponentId;
        }
        /* Either execute or defer the function */


        if (isFunction$1(chunk)) {
          if (isStatelessFunction(chunk) && executionContext) {
            var _result = chunk(executionContext);

            if (process.env.NODE_ENV !== 'production' && isElement(_result)) {
              // eslint-disable-next-line no-console
              console.warn(getComponentName(chunk) + " is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.");
            }

            return flatten(_result, executionContext, styleSheet);
          } else return chunk;
        }

        if (chunk instanceof Keyframes) {
          if (styleSheet) {
            chunk.inject(styleSheet);
            return chunk.getName();
          } else return chunk;
        }
        /* Handle objects */


        return isPlainObject$1(chunk) ? objToCssArray(chunk) : chunk.toString();
      } // 


      function css(styles) {
        for (var _len = arguments.length, interpolations = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          interpolations[_key - 1] = arguments[_key];
        }

        if (isFunction$1(styles) || isPlainObject$1(styles)) {
          // $FlowFixMe
          return flatten(interleave(EMPTY_ARRAY, [styles].concat(interpolations)));
        }

        if (interpolations.length === 0 && styles.length === 1 && typeof styles[0] === "string") {
          // $FlowFixMe
          return styles;
        } // $FlowFixMe


        return flatten(interleave(styles, interpolations));
      }

      function constructWithOptions(componentConstructor, tag, options) {
        if (options === void 0) {
          options = EMPTY_OBJECT;
        }

        if (!isValidElementType(tag)) {
          return throwStyledComponentsError(1, String(tag));
        }
        /* This is callable directly as a template function */
        // $FlowFixMe: Not typed to avoid destructuring arguments


        var templateFunction = function templateFunction() {
          return componentConstructor(tag, options, css.apply(void 0, arguments));
        };
        /* If config methods are called, wrap up a new template function and merge options */


        templateFunction.withConfig = function (config) {
          return constructWithOptions(componentConstructor, tag, _extends$2({}, options, {}, config));
        };
        /* Modify/inject new props at runtime */


        templateFunction.attrs = function (attrs) {
          return constructWithOptions(componentConstructor, tag, _extends$2({}, options, {
            attrs: Array.prototype.concat(options.attrs, attrs).filter(Boolean)
          }));
        };

        return templateFunction;
      }
      /* eslint-disable */

      /**
        mixin-deep; https://github.com/jonschlinkert/mixin-deep
        Inlined such that it will be consistently transpiled to an IE-compatible syntax.

        The MIT License (MIT)

        Copyright (c) 2014-present, Jon Schlinkert.

        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in
        all copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
        THE SOFTWARE.
      */


      var isObject$1 = function isObject(val) {
        return typeof val === 'function' || typeof val === 'object' && val !== null && !Array.isArray(val);
      };

      var isValidKey = function isValidKey(key) {
        return key !== '__proto__' && key !== 'constructor' && key !== 'prototype';
      };

      function mixin(target, val, key) {
        var obj = target[key];

        if (isObject$1(val) && isObject$1(obj)) {
          mixinDeep(obj, val);
        } else {
          target[key] = val;
        }
      }

      function mixinDeep(target) {
        for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          rest[_key - 1] = arguments[_key];
        }

        for (var _i = 0, _rest = rest; _i < _rest.length; _i++) {
          var obj = _rest[_i];

          if (isObject$1(obj)) {
            for (var key in obj) {
              if (isValidKey(key)) {
                mixin(target, obj[key], key);
              }
            }
          }
        }

        return target;
      } // 

      /* eslint-disable no-bitwise */


      var AD_REPLACER_R = /(a)(d)/gi;
      /* This is the "capacity" of our alphabet i.e. 2x26 for all letters plus their capitalised
       * counterparts */

      var charsLength = 52;
      /* start at 75 for 'a' until 'z' (25) and then start at 65 for capitalised letters */

      var getAlphabeticChar = function getAlphabeticChar(code) {
        return String.fromCharCode(code + (code > 25 ? 39 : 97));
      };
      /* input a number, usually a hash and convert it to base-52 */


      function generateAlphabeticName(code) {
        var name = '';
        var x;
        /* get a char and divide by alphabet-length */

        for (x = Math.abs(code); x > charsLength; x = x / charsLength | 0) {
          name = getAlphabeticChar(x % charsLength) + name;
        }

        return (getAlphabeticChar(x % charsLength) + name).replace(AD_REPLACER_R, '$1-$2');
      } // 


      function isStaticRules(rules) {
        for (var i = 0; i < rules.length; i += 1) {
          var rule = rules[i];

          if (isFunction$1(rule) && !isStyledComponent(rule)) {
            // functions are allowed to be static if they're just being
            // used to get the classname of a nested styled component
            return false;
          }
        }

        return true;
      } // 

      /*
       ComponentStyle is all the CSS-specific stuff, not
       the React-specific stuff.
       */


      var ComponentStyle = /*#__PURE__*/function () {
        function ComponentStyle(rules, componentId) {
          this.rules = rules;
          this.staticRulesId = '';
          this.isStatic = process.env.NODE_ENV === 'production' && isStaticRules(rules);
          this.componentId = componentId;
          this.baseHash = hash(componentId); // NOTE: This registers the componentId, which ensures a consistent order
          // for this component's styles compared to others

          StyleSheet.registerId(componentId);
        }
        /*
         * Flattens a rule set into valid CSS
         * Hashes it, wraps the whole chunk in a .hash1234 {}
         * Returns the hash to be injected on render()
         * */


        var _proto = ComponentStyle.prototype;

        _proto.generateAndInjectStyles = function generateAndInjectStyles(executionContext, styleSheet, stylis) {
          var componentId = this.componentId; // force dynamic classnames if user-supplied stylis plugins are in use

          if (this.isStatic && !stylis.hash) {
            if (this.staticRulesId && styleSheet.hasNameForId(componentId, this.staticRulesId)) {
              return this.staticRulesId;
            }

            var cssStatic = flatten(this.rules, executionContext, styleSheet).join('');
            var name = generateAlphabeticName(phash(this.baseHash, cssStatic.length) >>> 0);

            if (!styleSheet.hasNameForId(componentId, name)) {
              var cssStaticFormatted = stylis(cssStatic, "." + name, undefined, componentId);
              styleSheet.insertRules(componentId, name, cssStaticFormatted);
            }

            this.staticRulesId = name;
            return name;
          } else {
            var length = this.rules.length;
            var dynamicHash = phash(this.baseHash, stylis.hash);
            var css = '';

            for (var i = 0; i < length; i++) {
              var partRule = this.rules[i];

              if (typeof partRule === 'string') {
                css += partRule;
                if (process.env.NODE_ENV !== 'production') dynamicHash = phash(dynamicHash, partRule + i);
              } else {
                var partChunk = flatten(partRule, executionContext, styleSheet);
                var partString = Array.isArray(partChunk) ? partChunk.join('') : partChunk;
                dynamicHash = phash(dynamicHash, partString + i);
                css += partString;
              }
            }

            var _name = generateAlphabeticName(dynamicHash >>> 0);

            if (!styleSheet.hasNameForId(componentId, _name)) {
              var cssFormatted = stylis(css, "." + _name, undefined, componentId);
              styleSheet.insertRules(componentId, _name, cssFormatted);
            }

            return _name;
          }
        };

        return ComponentStyle;
      }(); // 


      var LIMIT = 200;

      var createWarnTooManyClasses = function (displayName, componentId) {
        var generatedClasses = {};
        var warningSeen = false;
        return function (className) {
          if (!warningSeen) {
            generatedClasses[className] = true;

            if (Object.keys(generatedClasses).length >= LIMIT) {
              // Unable to find latestRule in test environment.

              /* eslint-disable no-console, prefer-template */
              var parsedIdString = componentId ? " with the id of \"" + componentId + "\"" : '';
              console.warn("Over " + LIMIT + " classes were generated for component " + displayName + parsedIdString + ".\n" + 'Consider using the attrs method, together with a style object for frequently changed styles.\n' + 'Example:\n' + '  const Component = styled.div.attrs(props => ({\n' + '    style: {\n' + '      background: props.background,\n' + '    },\n' + '  }))`width: 100%;`\n\n' + '  <Component />');
              warningSeen = true;
              generatedClasses = {};
            }
          }
        };
      }; // 


      var invalidHookCallRe = /invalid hook call/i;
      var seen = new Set();

      var checkDynamicCreation = function checkDynamicCreation(displayName, componentId) {
        if (process.env.NODE_ENV !== 'production') {
          var parsedIdString = componentId ? " with the id of \"" + componentId + "\"" : '';
          var message = "The component " + displayName + parsedIdString + " has been created dynamically.\n" + 'You may see this warning because you\'ve called styled inside another component.\n' + 'To resolve this only create new StyledComponents outside of any render method and function component.';

          try {
            // We purposefully call `useRef` outside of a component and expect it to throw
            // If it doesn't, then we're inside another component.
            // eslint-disable-next-line react-hooks/rules-of-hooks
            useRef();

            if (!seen.has(message)) {
              // eslint-disable-next-line no-console
              console.warn(message);
              seen.add(message);
            }
          } catch (error) {
            // The error here is expected, since we're expecting anything that uses `checkDynamicCreation` to
            // be called outside of a React component.
            if (invalidHookCallRe.test(error.message)) {
              // This shouldn't happen, but resets `warningSeen` if we had this error happen intermittently
              seen["delete"](message);
            }
          }
        }
      }; // 


      var determineTheme = function (props, providedTheme, defaultProps) {
        if (defaultProps === void 0) {
          defaultProps = EMPTY_OBJECT;
        }

        return props.theme !== defaultProps.theme && props.theme || providedTheme || defaultProps.theme;
      }; // 
      // Source: https://www.w3.org/TR/cssom-1/#serialize-an-identifier
      // Control characters and non-letter first symbols are not supported


      var escapeRegex = /[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g;
      var dashesAtEnds = /(^-|-$)/g;
      /**
       * TODO: Explore using CSS.escape when it becomes more available
       * in evergreen browsers.
       */

      function escape$1(str) {
        return str // Replace all possible CSS selectors
        .replace(escapeRegex, '-') // Remove extraneous hyphens at the start and end
        .replace(dashesAtEnds, '');
      } // 


      function isTag(target) {
        return typeof target === 'string' && (process.env.NODE_ENV !== 'production' ? target.charAt(0) === target.charAt(0).toLowerCase() : true);
      } // 


      function generateDisplayName(target) {
        // $FlowFixMe
        return isTag(target) ? "styled." + target : "Styled(" + getComponentName(target) + ")";
      } // 


      var generateComponentId = function (str) {
        return generateAlphabeticName(hash(str) >>> 0);
      };
      /**
       * Convenience function for joining strings to form className chains
       */


      function joinStrings(a, b) {
        return a && b ? a + " " + b : a || b;
      }

      var ThemeContext = /*#__PURE__*/React.createContext();
      var ThemeConsumer = ThemeContext.Consumer;
      /* global $Call */


      var identifiers = {};
      /* We depend on components having unique IDs */

      function generateId(displayName, parentComponentId) {
        var name = typeof displayName !== 'string' ? 'sc' : escape$1(displayName); // Ensure that no displayName can lead to duplicate componentIds

        identifiers[name] = (identifiers[name] || 0) + 1;
        var componentId = name + "-" + generateComponentId(name + identifiers[name]);
        return parentComponentId ? parentComponentId + "-" + componentId : componentId;
      }

      function useResolvedAttrs(theme, props, attrs) {
        if (theme === void 0) {
          theme = EMPTY_OBJECT;
        } // NOTE: can't memoize this
        // returns [context, resolvedAttrs]
        // where resolvedAttrs is only the things injected by the attrs themselves


        var context = _extends$2({}, props, {
          theme: theme
        });

        var resolvedAttrs = {};
        attrs.forEach(function (attrDef) {
          var resolvedAttrDef = attrDef;
          var key;

          if (isFunction$1(resolvedAttrDef)) {
            resolvedAttrDef = resolvedAttrDef(context);
          }
          /* eslint-disable guard-for-in */


          for (key in resolvedAttrDef) {
            context[key] = resolvedAttrs[key] = key === 'className' ? joinStrings(resolvedAttrs[key], resolvedAttrDef[key]) : resolvedAttrDef[key];
          }
          /* eslint-enable guard-for-in */

        });
        return [context, resolvedAttrs];
      }

      function useInjectedStyle(componentStyle, hasAttrs, resolvedAttrs, warnTooManyClasses) {
        var styleSheet = useStyleSheet();
        var stylis = useStylis(); // statically styled-components don't need to build an execution context object,
        // and shouldn't be increasing the number of class names

        var isStatic = componentStyle.isStatic && !hasAttrs;
        var className = isStatic ? componentStyle.generateAndInjectStyles(EMPTY_OBJECT, styleSheet, stylis) : componentStyle.generateAndInjectStyles(resolvedAttrs, styleSheet, stylis);
        useDebugValue(className);

        if (process.env.NODE_ENV !== 'production' && !isStatic && warnTooManyClasses) {
          warnTooManyClasses(className);
        }

        return className;
      }

      function useStyledComponentImpl(forwardedComponent, props, forwardedRef) {
        var componentAttrs = forwardedComponent.attrs,
            componentStyle = forwardedComponent.componentStyle,
            defaultProps = forwardedComponent.defaultProps,
            foldedComponentIds = forwardedComponent.foldedComponentIds,
            shouldForwardProp = forwardedComponent.shouldForwardProp,
            styledComponentId = forwardedComponent.styledComponentId,
            target = forwardedComponent.target;
        useDebugValue(styledComponentId); // NOTE: the non-hooks version only subscribes to this when !componentStyle.isStatic,
        // but that'd be against the rules-of-hooks. We could be naughty and do it anyway as it
        // should be an immutable value, but behave for now.

        var theme = determineTheme(props, useContext(ThemeContext), defaultProps);

        var _useResolvedAttrs = useResolvedAttrs(theme || EMPTY_OBJECT, props, componentAttrs),
            context = _useResolvedAttrs[0],
            attrs = _useResolvedAttrs[1];

        var generatedClassName = useInjectedStyle(componentStyle, componentAttrs.length > 0, context, process.env.NODE_ENV !== 'production' ? forwardedComponent.warnTooManyClasses : undefined);
        var refToForward = forwardedRef;
        var elementToBeCreated = attrs.$as || props.$as || attrs.as || props.as || target;
        var isTargetTag = isTag(elementToBeCreated);
        var computedProps = attrs !== props ? _extends$2({}, props, {}, attrs) : props;
        var propFilterFn = shouldForwardProp || isTargetTag && index;
        var propsForElement = {}; // eslint-disable-next-line guard-for-in

        for (var key in computedProps) {
          if (key[0] === '$' || key === 'as') continue;else if (key === 'forwardedAs') {
            propsForElement.as = computedProps[key];
          } else if (!propFilterFn || propFilterFn(key, index)) {
            // Don't pass through non HTML tags through to HTML elements
            propsForElement[key] = computedProps[key];
          }
        }

        if (props.style && attrs.style !== props.style) {
          propsForElement.style = _extends$2({}, props.style, {}, attrs.style);
        }

        propsForElement.className = Array.prototype.concat(foldedComponentIds, styledComponentId, generatedClassName !== styledComponentId ? generatedClassName : null, props.className, attrs.className).filter(Boolean).join(' ');
        propsForElement.ref = refToForward;
        return /*#__PURE__*/createElement(elementToBeCreated, propsForElement);
      }

      function createStyledComponent(target, options, rules) {
        var isTargetStyledComp = isStyledComponent(target);
        var isCompositeComponent = !isTag(target);
        var _options$displayName = options.displayName,
            displayName = _options$displayName === void 0 ? generateDisplayName(target) : _options$displayName,
            _options$componentId = options.componentId,
            componentId = _options$componentId === void 0 ? generateId(options.displayName, options.parentComponentId) : _options$componentId,
            _options$attrs = options.attrs,
            attrs = _options$attrs === void 0 ? EMPTY_ARRAY : _options$attrs;
        var styledComponentId = options.displayName && options.componentId ? escape$1(options.displayName) + "-" + options.componentId : options.componentId || componentId; // fold the underlying StyledComponent attrs up (implicit extend)

        var finalAttrs = // $FlowFixMe
        isTargetStyledComp && target.attrs ? Array.prototype.concat(target.attrs, attrs).filter(Boolean) : attrs; // eslint-disable-next-line prefer-destructuring

        var shouldForwardProp = options.shouldForwardProp; // $FlowFixMe

        if (isTargetStyledComp && target.shouldForwardProp) {
          if (shouldForwardProp) {
            // compose nested shouldForwardProp calls
            shouldForwardProp = function shouldForwardProp(prop, filterFn) {
              return (// $FlowFixMe
                target.shouldForwardProp(prop, filterFn) && options.shouldForwardProp(prop, filterFn)
              );
            };
          } else {
            // eslint-disable-next-line prefer-destructuring
            shouldForwardProp = target.shouldForwardProp;
          }
        }

        var componentStyle = new ComponentStyle(isTargetStyledComp ? // fold the underlying StyledComponent rules up (implicit extend)
        // $FlowFixMe
        target.componentStyle.rules.concat(rules) : rules, styledComponentId);
        /**
         * forwardRef creates a new interim component, which we'll take advantage of
         * instead of extending ParentComponent to create _another_ interim class
         */

        var WrappedStyledComponent; // eslint-disable-next-line react-hooks/rules-of-hooks

        var forwardRef = function forwardRef(props, ref) {
          return useStyledComponentImpl(WrappedStyledComponent, props, ref);
        };

        forwardRef.displayName = displayName; // $FlowFixMe this is a forced cast to merge it StyledComponentWrapperProperties

        WrappedStyledComponent = /*#__PURE__*/React.forwardRef(forwardRef);
        WrappedStyledComponent.attrs = finalAttrs;
        WrappedStyledComponent.componentStyle = componentStyle;
        WrappedStyledComponent.displayName = displayName;
        WrappedStyledComponent.shouldForwardProp = shouldForwardProp; // this static is used to preserve the cascade of static classes for component selector
        // purposes; this is especially important with usage of the css prop

        WrappedStyledComponent.foldedComponentIds = isTargetStyledComp ? // $FlowFixMe
        Array.prototype.concat(target.foldedComponentIds, target.styledComponentId) : EMPTY_ARRAY;
        WrappedStyledComponent.styledComponentId = styledComponentId; // fold the underlying StyledComponent target up since we folded the styles

        WrappedStyledComponent.target = isTargetStyledComp ? // $FlowFixMe
        target.target : target; // $FlowFixMe

        WrappedStyledComponent.withComponent = function withComponent(tag) {
          var previousComponentId = options.componentId,
              optionsToCopy = _objectWithoutPropertiesLoose$2(options, ["componentId"]);

          var newComponentId = previousComponentId && previousComponentId + "-" + (isTag(tag) ? tag : escape$1(getComponentName(tag)));

          var newOptions = _extends$2({}, optionsToCopy, {
            attrs: finalAttrs,
            componentId: newComponentId
          });

          return createStyledComponent(tag, newOptions, rules);
        }; // $FlowFixMe


        Object.defineProperty(WrappedStyledComponent, 'defaultProps', {
          get: function get() {
            return this._foldedDefaultProps;
          },
          set: function set(obj) {
            // $FlowFixMe
            this._foldedDefaultProps = isTargetStyledComp ? mixinDeep({}, target.defaultProps, obj) : obj;
          }
        });

        if (process.env.NODE_ENV !== 'production') {
          checkDynamicCreation(displayName, styledComponentId);
          WrappedStyledComponent.warnTooManyClasses = createWarnTooManyClasses(displayName, styledComponentId);
        } // $FlowFixMe


        WrappedStyledComponent.toString = function () {
          return "." + WrappedStyledComponent.styledComponentId;
        };

        if (isCompositeComponent) {
          hoistNonReactStatics_cjs(WrappedStyledComponent, target, {
            // all SC-specific things should not be hoisted
            attrs: true,
            componentStyle: true,
            displayName: true,
            foldedComponentIds: true,
            shouldForwardProp: true,
            self: true,
            styledComponentId: true,
            target: true,
            withComponent: true
          });
        }

        return WrappedStyledComponent;
      } // 
      // Thanks to ReactDOMFactories for this handy list!


      var domElements = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG
      'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'marker', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan']; // 

      var styled = function styled(tag) {
        return constructWithOptions(createStyledComponent, tag);
      }; // Shorthands for all valid HTML Elements


      domElements.forEach(function (domElement) {
        styled[domElement] = styled(domElement);
      }); // 
      /* Warning if you've imported this file on React Native */

      if (process.env.NODE_ENV !== 'production' && typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
        // eslint-disable-next-line no-console
        console.warn("It looks like you've imported 'styled-components' on React Native.\n" + "Perhaps you're looking to import 'styled-components/native'?\n" + 'Read more about this at https://www.styled-components.com/docs/basics#react-native');
      }
      /* Warning if there are several instances of styled-components */


      if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test' && typeof window !== 'undefined') {
        window['__styled-components-init__'] = window['__styled-components-init__'] || 0;

        if (window['__styled-components-init__'] === 1) {
          // eslint-disable-next-line no-console
          console.warn("It looks like there are several instances of 'styled-components' initialized in this application. " + 'This may cause dynamic styles not rendering properly, errors happening during rehydration process, ' + 'missing theme prop, and makes your application bigger without a good reason.\n\n' + 'See https://s-c.sh/2BAXzed for more info.');
        }

        window['__styled-components-init__'] += 1;
      }

      const SketchPopover = styled(Popover)`
  .ant-popover__no-padding .ant-popover-inner-content {
    padding: 0 !important;
  }
`;
      const SketchColorPicker = /*#__PURE__*/React.forwardRef(({
        value,
        onChange
      }, ref) => {
        const [picking, setPicking] = useState(false);
        return /*#__PURE__*/React.createElement(SketchPopover, {
          ref: ref,
          overlayClassName: "ant-popover__no-padding",
          content: /*#__PURE__*/React.createElement(lib$2.SketchPicker, {
            color: value,
            onChangeComplete: ({
              hex
            }) => onChange(hex)
          }),
          trigger: "click",
          visible: picking,
          onVisibleChange: setPicking
        }, /*#__PURE__*/React.createElement(Button, {
          style: {
            backgroundColor: value
          },
          icon: /*#__PURE__*/React.createElement(HighlightOutlined, null)
        }));
      });
      SketchColorPicker.displayName = 'SketchColorPicker';

      const ResourceLinkButton = props => {
        const {
          formats = [],
          nameProvider,
          linkProvider
        } = props;
        const [format, setFormat] = useState(formats[0]);

        const doCopy = () => {
          copy(linkProvider({
            format
          }));
          message.success('复制成功');
        };

        const doDownload = () => {
          var _nameProvider;

          const link = linkProvider({
            format
          });
          const a = document.createElement('a');
          a.download = (_nameProvider = nameProvider === null || nameProvider === void 0 ? void 0 : nameProvider({
            format
          })) !== null && _nameProvider !== void 0 ? _nameProvider : link.split(/[\\/]/).pop();
          a.href = link;
          a.click();
        };

        const menu = useMemo(() => formats.length > 1 && /*#__PURE__*/React.createElement(Menu, null, formats.map(v => /*#__PURE__*/React.createElement(Menu.Item, {
          key: v,
          onClick: () => setFormat(v)
        }, v.toUpperCase()))), formats);
        return /*#__PURE__*/React.createElement("div", {
          style: {
            display: 'flex',
            justifyContent: 'space-around'
          }
        }, /*#__PURE__*/React.createElement("div", null, menu && /*#__PURE__*/React.createElement(Dropdown.Button, {
          type: "primary",
          onClick: doDownload,
          overlay: menu
        }, "\u4E0B\u8F7D ", format.toUpperCase(), " \u56FE\u7247"), !menu && /*#__PURE__*/React.createElement(Button, {
          type: "primary",
          onClick: doDownload
        }, "\u4E0B\u8F7D ", format.toUpperCase(), " \u56FE\u7247")), /*#__PURE__*/React.createElement(Button, {
          onClick: doCopy
        }, "\u590D\u5236\u94FE\u63A5"));
      };

      /// https://github.com/jekrb/next-absolute-url/blob/master/index.ts
      function parseRequestUrl(req, def = 'http://localhost:3000') {
        let host = (req ? req.headers.host : window.location.host) || def;
        let protocol = /^localhost(:\d+)?$/.test(host) ? 'http:' : 'https:';

        if (req && req.headers['x-forwarded-host'] && typeof req.headers['x-forwarded-host'] === 'string') {
          host = req.headers['x-forwarded-host'];
        }

        if (req && req.headers['x-forwarded-proto'] && typeof req.headers['x-forwarded-proto'] === 'string') {
          protocol = `${req.headers['x-forwarded-proto']}:`;
        }

        return {
          protocol,
          host,
          origin: protocol + '//' + host
        };
      }

      const API = {
        get origin() {
          if (typeof window === 'undefined') {
            return isDev() ? `http://localhost:${process.env.PORT || '3000'}` : 'https://apis.wener.me';
          }

          return window.location.origin;
        },

        apiOf(apiPath, req) {
          if (/^http?s:/.test(apiPath)) {
            return apiPath;
          }

          let origin = API.origin;

          if (req) {
            origin = parseRequestUrl(req, API.origin).origin;
          } // https://wener-apis.herokuapp.com


          if (!origin.includes('localhost')) {
            if (/^[/]api[/]webrtc[/]session/.test(apiPath)) {
              origin = 'https://wener-apis.herokuapp.com';
            }
          }

          return urljoin(origin, apiPath);
        }

      };

      var punycode = createCommonjsModule(function (module, exports) {

        (function (root) {
          /** Detect free variables */
          var freeExports =  exports && !exports.nodeType && exports;
          var freeModule =  module && !module.nodeType && module;
          var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal;

          if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
            root = freeGlobal;
          }
          /**
           * The `punycode` object.
           * @name punycode
           * @type Object
           */


          var punycode,

          /** Highest positive signed 32-bit float value */
          maxInt = 2147483647,
              // aka. 0x7FFFFFFF or 2^31-1

          /** Bootstring parameters */
          base = 36,
              tMin = 1,
              tMax = 26,
              skew = 38,
              damp = 700,
              initialBias = 72,
              initialN = 128,
              // 0x80
          delimiter = '-',
              // '\x2D'

          /** Regular expressions */
          regexPunycode = /^xn--/,
              regexNonASCII = /[^\x20-\x7E]/,
              // unprintable ASCII chars + non-ASCII chars
          regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
              // RFC 3490 separators

          /** Error messages */
          errors = {
            'overflow': 'Overflow: input needs wider integers to process',
            'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
            'invalid-input': 'Invalid input'
          },

          /** Convenience shortcuts */
          baseMinusTMin = base - tMin,
              floor = Math.floor,
              stringFromCharCode = String.fromCharCode,

          /** Temporary variable */
          key;
          /*--------------------------------------------------------------------------*/

          /**
           * A generic error utility function.
           * @private
           * @param {String} type The error type.
           * @returns {Error} Throws a `RangeError` with the applicable error message.
           */

          function error(type) {
            throw RangeError(errors[type]);
          }
          /**
           * A generic `Array#map` utility function.
           * @private
           * @param {Array} array The array to iterate over.
           * @param {Function} callback The function that gets called for every array
           * item.
           * @returns {Array} A new array of values returned by the callback function.
           */


          function map(array, fn) {
            var length = array.length;
            var result = [];

            while (length--) {
              result[length] = fn(array[length]);
            }

            return result;
          }
          /**
           * A simple `Array#map`-like wrapper to work with domain name strings or email
           * addresses.
           * @private
           * @param {String} domain The domain name or email address.
           * @param {Function} callback The function that gets called for every
           * character.
           * @returns {Array} A new string of characters returned by the callback
           * function.
           */


          function mapDomain(string, fn) {
            var parts = string.split('@');
            var result = '';

            if (parts.length > 1) {
              // In email addresses, only the domain name should be punycoded. Leave
              // the local part (i.e. everything up to `@`) intact.
              result = parts[0] + '@';
              string = parts[1];
            } // Avoid `split(regex)` for IE8 compatibility. See #17.


            string = string.replace(regexSeparators, '\x2E');
            var labels = string.split('.');
            var encoded = map(labels, fn).join('.');
            return result + encoded;
          }
          /**
           * Creates an array containing the numeric code points of each Unicode
           * character in the string. While JavaScript uses UCS-2 internally,
           * this function will convert a pair of surrogate halves (each of which
           * UCS-2 exposes as separate characters) into a single code point,
           * matching UTF-16.
           * @see `punycode.ucs2.encode`
           * @see <https://mathiasbynens.be/notes/javascript-encoding>
           * @memberOf punycode.ucs2
           * @name decode
           * @param {String} string The Unicode input string (UCS-2).
           * @returns {Array} The new array of code points.
           */


          function ucs2decode(string) {
            var output = [],
                counter = 0,
                length = string.length,
                value,
                extra;

            while (counter < length) {
              value = string.charCodeAt(counter++);

              if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                // high surrogate, and there is a next character
                extra = string.charCodeAt(counter++);

                if ((extra & 0xFC00) == 0xDC00) {
                  // low surrogate
                  output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                } else {
                  // unmatched surrogate; only append this code unit, in case the next
                  // code unit is the high surrogate of a surrogate pair
                  output.push(value);
                  counter--;
                }
              } else {
                output.push(value);
              }
            }

            return output;
          }
          /**
           * Creates a string based on an array of numeric code points.
           * @see `punycode.ucs2.decode`
           * @memberOf punycode.ucs2
           * @name encode
           * @param {Array} codePoints The array of numeric code points.
           * @returns {String} The new Unicode string (UCS-2).
           */


          function ucs2encode(array) {
            return map(array, function (value) {
              var output = '';

              if (value > 0xFFFF) {
                value -= 0x10000;
                output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                value = 0xDC00 | value & 0x3FF;
              }

              output += stringFromCharCode(value);
              return output;
            }).join('');
          }
          /**
           * Converts a basic code point into a digit/integer.
           * @see `digitToBasic()`
           * @private
           * @param {Number} codePoint The basic numeric code point value.
           * @returns {Number} The numeric value of a basic code point (for use in
           * representing integers) in the range `0` to `base - 1`, or `base` if
           * the code point does not represent a value.
           */


          function basicToDigit(codePoint) {
            if (codePoint - 48 < 10) {
              return codePoint - 22;
            }

            if (codePoint - 65 < 26) {
              return codePoint - 65;
            }

            if (codePoint - 97 < 26) {
              return codePoint - 97;
            }

            return base;
          }
          /**
           * Converts a digit/integer into a basic code point.
           * @see `basicToDigit()`
           * @private
           * @param {Number} digit The numeric value of a basic code point.
           * @returns {Number} The basic code point whose value (when used for
           * representing integers) is `digit`, which needs to be in the range
           * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
           * used; else, the lowercase form is used. The behavior is undefined
           * if `flag` is non-zero and `digit` has no uppercase form.
           */


          function digitToBasic(digit, flag) {
            //  0..25 map to ASCII a..z or A..Z
            // 26..35 map to ASCII 0..9
            return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
          }
          /**
           * Bias adaptation function as per section 3.4 of RFC 3492.
           * http://tools.ietf.org/html/rfc3492#section-3.4
           * @private
           */


          function adapt(delta, numPoints, firstTime) {
            var k = 0;
            delta = firstTime ? floor(delta / damp) : delta >> 1;
            delta += floor(delta / numPoints);

            for (;
            /* no initialization */
            delta > baseMinusTMin * tMax >> 1; k += base) {
              delta = floor(delta / baseMinusTMin);
            }

            return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
          }
          /**
           * Converts a Punycode string of ASCII-only symbols to a string of Unicode
           * symbols.
           * @memberOf punycode
           * @param {String} input The Punycode string of ASCII-only symbols.
           * @returns {String} The resulting string of Unicode symbols.
           */


          function decode(input) {
            // Don't use UCS-2
            var output = [],
                inputLength = input.length,
                out,
                i = 0,
                n = initialN,
                bias = initialBias,
                basic,
                j,
                index,
                oldi,
                w,
                k,
                digit,
                t,

            /** Cached calculation results */
            baseMinusT; // Handle the basic code points: let `basic` be the number of input code
            // points before the last delimiter, or `0` if there is none, then copy
            // the first basic code points to the output.

            basic = input.lastIndexOf(delimiter);

            if (basic < 0) {
              basic = 0;
            }

            for (j = 0; j < basic; ++j) {
              // if it's not a basic code point
              if (input.charCodeAt(j) >= 0x80) {
                error('not-basic');
              }

              output.push(input.charCodeAt(j));
            } // Main decoding loop: start just after the last delimiter if any basic code
            // points were copied; start at the beginning otherwise.


            for (index = basic > 0 ? basic + 1 : 0; index < inputLength;)
            /* no final expression */
            {
              // `index` is the index of the next character to be consumed.
              // Decode a generalized variable-length integer into `delta`,
              // which gets added to `i`. The overflow checking is easier
              // if we increase `i` as we go, then subtract off its starting
              // value at the end to obtain `delta`.
              for (oldi = i, w = 1, k = base;;
              /* no condition */
              k += base) {
                if (index >= inputLength) {
                  error('invalid-input');
                }

                digit = basicToDigit(input.charCodeAt(index++));

                if (digit >= base || digit > floor((maxInt - i) / w)) {
                  error('overflow');
                }

                i += digit * w;
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

                if (digit < t) {
                  break;
                }

                baseMinusT = base - t;

                if (w > floor(maxInt / baseMinusT)) {
                  error('overflow');
                }

                w *= baseMinusT;
              }

              out = output.length + 1;
              bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,
              // incrementing `n` each time, so we'll fix that now:

              if (floor(i / out) > maxInt - n) {
                error('overflow');
              }

              n += floor(i / out);
              i %= out; // Insert `n` at position `i` of the output

              output.splice(i++, 0, n);
            }

            return ucs2encode(output);
          }
          /**
           * Converts a string of Unicode symbols (e.g. a domain name label) to a
           * Punycode string of ASCII-only symbols.
           * @memberOf punycode
           * @param {String} input The string of Unicode symbols.
           * @returns {String} The resulting Punycode string of ASCII-only symbols.
           */


          function encode(input) {
            var n,
                delta,
                handledCPCount,
                basicLength,
                bias,
                j,
                m,
                q,
                k,
                t,
                currentValue,
                output = [],

            /** `inputLength` will hold the number of code points in `input`. */
            inputLength,

            /** Cached calculation results */
            handledCPCountPlusOne,
                baseMinusT,
                qMinusT; // Convert the input in UCS-2 to Unicode

            input = ucs2decode(input); // Cache the length

            inputLength = input.length; // Initialize the state

            n = initialN;
            delta = 0;
            bias = initialBias; // Handle the basic code points

            for (j = 0; j < inputLength; ++j) {
              currentValue = input[j];

              if (currentValue < 0x80) {
                output.push(stringFromCharCode(currentValue));
              }
            }

            handledCPCount = basicLength = output.length; // `handledCPCount` is the number of code points that have been handled;
            // `basicLength` is the number of basic code points.
            // Finish the basic string - if it is not empty - with a delimiter

            if (basicLength) {
              output.push(delimiter);
            } // Main encoding loop:


            while (handledCPCount < inputLength) {
              // All non-basic code points < n have been handled already. Find the next
              // larger one:
              for (m = maxInt, j = 0; j < inputLength; ++j) {
                currentValue = input[j];

                if (currentValue >= n && currentValue < m) {
                  m = currentValue;
                }
              } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
              // but guard against overflow


              handledCPCountPlusOne = handledCPCount + 1;

              if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                error('overflow');
              }

              delta += (m - n) * handledCPCountPlusOne;
              n = m;

              for (j = 0; j < inputLength; ++j) {
                currentValue = input[j];

                if (currentValue < n && ++delta > maxInt) {
                  error('overflow');
                }

                if (currentValue == n) {
                  // Represent delta as a generalized variable-length integer
                  for (q = delta, k = base;;
                  /* no condition */
                  k += base) {
                    t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

                    if (q < t) {
                      break;
                    }

                    qMinusT = q - t;
                    baseMinusT = base - t;
                    output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                    q = floor(qMinusT / baseMinusT);
                  }

                  output.push(stringFromCharCode(digitToBasic(q, 0)));
                  bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                  delta = 0;
                  ++handledCPCount;
                }
              }

              ++delta;
              ++n;
            }

            return output.join('');
          }
          /**
           * Converts a Punycode string representing a domain name or an email address
           * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
           * it doesn't matter if you call it on a string that has already been
           * converted to Unicode.
           * @memberOf punycode
           * @param {String} input The Punycoded domain name or email address to
           * convert to Unicode.
           * @returns {String} The Unicode representation of the given Punycode
           * string.
           */


          function toUnicode(input) {
            return mapDomain(input, function (string) {
              return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
            });
          }
          /**
           * Converts a Unicode string representing a domain name or an email address to
           * Punycode. Only the non-ASCII parts of the domain name will be converted,
           * i.e. it doesn't matter if you call it with a domain that's already in
           * ASCII.
           * @memberOf punycode
           * @param {String} input The domain name or email address to convert, as a
           * Unicode string.
           * @returns {String} The Punycode representation of the given domain name or
           * email address.
           */


          function toASCII(input) {
            return mapDomain(input, function (string) {
              return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
            });
          }
          /*--------------------------------------------------------------------------*/

          /** Define the public API */


          punycode = {
            /**
             * A string representing the current Punycode.js version number.
             * @memberOf punycode
             * @type String
             */
            'version': '1.3.2',

            /**
             * An object of methods to convert from JavaScript's internal character
             * representation (UCS-2) to Unicode code points, and back.
             * @see <https://mathiasbynens.be/notes/javascript-encoding>
             * @memberOf punycode
             * @type Object
             */
            'ucs2': {
              'decode': ucs2decode,
              'encode': ucs2encode
            },
            'decode': decode,
            'encode': encode,
            'toASCII': toASCII,
            'toUnicode': toUnicode
          };
          /** Expose `punycode` */
          // Some AMD build optimizers, like r.js, check for specific condition patterns
          // like the following:

          if (freeExports && freeModule) {
            if (module.exports == freeExports) {
              // in Node.js or RingoJS v0.8.0+
              freeModule.exports = punycode;
            } else {
              // in Narwhal or RingoJS v0.7.0-
              for (key in punycode) {
                punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
              }
            }
          } else {
            // in Rhino or a web browser
            root.punycode = punycode;
          }
        })(commonjsGlobal);
      });

      var util$1 = {
        isString: function (arg) {
          return typeof arg === 'string';
        },
        isObject: function (arg) {
          return typeof arg === 'object' && arg !== null;
        },
        isNull: function (arg) {
          return arg === null;
        },
        isNullOrUndefined: function (arg) {
          return arg == null;
        }
      };

      // Copyright Joyent, Inc. and other Node contributors.
      // obj.hasOwnProperty(prop) will break.
      // See: https://github.com/joyent/node/issues/1707

      function hasOwnProperty$d(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
      }

      var decode = function (qs, sep, eq, options) {
        sep = sep || '&';
        eq = eq || '=';
        var obj = {};

        if (typeof qs !== 'string' || qs.length === 0) {
          return obj;
        }

        var regexp = /\+/g;
        qs = qs.split(sep);
        var maxKeys = 1000;

        if (options && typeof options.maxKeys === 'number') {
          maxKeys = options.maxKeys;
        }

        var len = qs.length; // maxKeys <= 0 means that we should not limit keys count

        if (maxKeys > 0 && len > maxKeys) {
          len = maxKeys;
        }

        for (var i = 0; i < len; ++i) {
          var x = qs[i].replace(regexp, '%20'),
              idx = x.indexOf(eq),
              kstr,
              vstr,
              k,
              v;

          if (idx >= 0) {
            kstr = x.substr(0, idx);
            vstr = x.substr(idx + 1);
          } else {
            kstr = x;
            vstr = '';
          }

          k = decodeURIComponent(kstr);
          v = decodeURIComponent(vstr);

          if (!hasOwnProperty$d(obj, k)) {
            obj[k] = v;
          } else if (Array.isArray(obj[k])) {
            obj[k].push(v);
          } else {
            obj[k] = [obj[k], v];
          }
        }

        return obj;
      };

      // Copyright Joyent, Inc. and other Node contributors.

      var stringifyPrimitive = function (v) {
        switch (typeof v) {
          case 'string':
            return v;

          case 'boolean':
            return v ? 'true' : 'false';

          case 'number':
            return isFinite(v) ? v : '';

          default:
            return '';
        }
      };

      var encode = function (obj, sep, eq, name) {
        sep = sep || '&';
        eq = eq || '=';

        if (obj === null) {
          obj = undefined;
        }

        if (typeof obj === 'object') {
          return Object.keys(obj).map(function (k) {
            var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;

            if (Array.isArray(obj[k])) {
              return obj[k].map(function (v) {
                return ks + encodeURIComponent(stringifyPrimitive(v));
              }).join(sep);
            } else {
              return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
            }
          }).join(sep);
        }

        if (!name) return '';
        return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
      };

      var querystring = createCommonjsModule(function (module, exports) {

        exports.decode = exports.parse = decode;
        exports.encode = exports.stringify = encode;
      });

      var parse$1 = urlParse;
      var resolve = urlResolve;
      var resolveObject = urlResolveObject;
      var format$1 = urlFormat;
      var Url_1 = Url;

      function Url() {
        this.protocol = null;
        this.slashes = null;
        this.auth = null;
        this.host = null;
        this.port = null;
        this.hostname = null;
        this.hash = null;
        this.search = null;
        this.query = null;
        this.pathname = null;
        this.path = null;
        this.href = null;
      } // Reference: RFC 3986, RFC 1808, RFC 2396
      // define these here so at least they only have to be
      // compiled once on the first module load.


      var protocolPattern = /^([a-z0-9.+-]+:)/i,
          portPattern = /:[0-9]*$/,
          // Special case for a simple path URL
      simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
          // RFC 2396: characters reserved for delimiting URLs.
      // We actually just auto-escape these.
      delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
          // RFC 2396: characters not allowed for various reasons.
      unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
          // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
      autoEscape = ['\''].concat(unwise),
          // Characters that are never ever allowed in a hostname.
      // Note that any invalid chars are also handled, but these
      // are the ones that are *expected* to be seen, so we fast-path
      // them.
      nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
          hostEndingChars = ['/', '?', '#'],
          hostnameMaxLen = 255,
          hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
          hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
          // protocols that can allow "unsafe" and "unwise" chars.
      unsafeProtocol = {
        'javascript': true,
        'javascript:': true
      },
          // protocols that never have a hostname.
      hostlessProtocol = {
        'javascript': true,
        'javascript:': true
      },
          // protocols that always contain a // bit.
      slashedProtocol = {
        'http': true,
        'https': true,
        'ftp': true,
        'gopher': true,
        'file': true,
        'http:': true,
        'https:': true,
        'ftp:': true,
        'gopher:': true,
        'file:': true
      };

      function urlParse(url, parseQueryString, slashesDenoteHost) {
        if (url && util$1.isObject(url) && url instanceof Url) return url;
        var u = new Url();
        u.parse(url, parseQueryString, slashesDenoteHost);
        return u;
      }

      Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
        if (!util$1.isString(url)) {
          throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
        } // Copy chrome, IE, opera backslash-handling behavior.
        // Back slashes before the query string get converted to forward slashes
        // See: https://code.google.com/p/chromium/issues/detail?id=25916


        var queryIndex = url.indexOf('?'),
            splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
            uSplit = url.split(splitter),
            slashRegex = /\\/g;
        uSplit[0] = uSplit[0].replace(slashRegex, '/');
        url = uSplit.join(splitter);
        var rest = url; // trim before proceeding.
        // This is to support parse stuff like "  http://foo.com  \n"

        rest = rest.trim();

        if (!slashesDenoteHost && url.split('#').length === 1) {
          // Try fast path regexp
          var simplePath = simplePathPattern.exec(rest);

          if (simplePath) {
            this.path = rest;
            this.href = rest;
            this.pathname = simplePath[1];

            if (simplePath[2]) {
              this.search = simplePath[2];

              if (parseQueryString) {
                this.query = querystring.parse(this.search.substr(1));
              } else {
                this.query = this.search.substr(1);
              }
            } else if (parseQueryString) {
              this.search = '';
              this.query = {};
            }

            return this;
          }
        }

        var proto = protocolPattern.exec(rest);

        if (proto) {
          proto = proto[0];
          var lowerProto = proto.toLowerCase();
          this.protocol = lowerProto;
          rest = rest.substr(proto.length);
        } // figure out if it's got a host
        // user@server is *always* interpreted as a hostname, and url
        // resolution will treat //foo/bar as host=foo,path=bar because that's
        // how the browser resolves relative URLs.


        if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
          var slashes = rest.substr(0, 2) === '//';

          if (slashes && !(proto && hostlessProtocol[proto])) {
            rest = rest.substr(2);
            this.slashes = true;
          }
        }

        if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
          // there's a hostname.
          // the first instance of /, ?, ;, or # ends the host.
          //
          // If there is an @ in the hostname, then non-host chars *are* allowed
          // to the left of the last @ sign, unless some host-ending character
          // comes *before* the @-sign.
          // URLs are obnoxious.
          //
          // ex:
          // http://a@b@c/ => user:a@b host:c
          // http://a@b?@c => user:a host:c path:/?@c
          // v0.12 TODO(isaacs): This is not quite how Chrome does things.
          // Review our test case against browsers more comprehensively.
          // find the first instance of any hostEndingChars
          var hostEnd = -1;

          for (var i = 0; i < hostEndingChars.length; i++) {
            var hec = rest.indexOf(hostEndingChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
          } // at this point, either we have an explicit point where the
          // auth portion cannot go past, or the last @ char is the decider.


          var auth, atSign;

          if (hostEnd === -1) {
            // atSign can be anywhere.
            atSign = rest.lastIndexOf('@');
          } else {
            // atSign must be in auth portion.
            // http://a@b/c@d => host:b auth:a path:/c@d
            atSign = rest.lastIndexOf('@', hostEnd);
          } // Now we have a portion which is definitely the auth.
          // Pull that off.


          if (atSign !== -1) {
            auth = rest.slice(0, atSign);
            rest = rest.slice(atSign + 1);
            this.auth = decodeURIComponent(auth);
          } // the host is the remaining to the left of the first non-host char


          hostEnd = -1;

          for (var i = 0; i < nonHostChars.length; i++) {
            var hec = rest.indexOf(nonHostChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
          } // if we still have not hit it, then the entire thing is a host.


          if (hostEnd === -1) hostEnd = rest.length;
          this.host = rest.slice(0, hostEnd);
          rest = rest.slice(hostEnd); // pull out port.

          this.parseHost(); // we've indicated that there is a hostname,
          // so even if it's empty, it has to be present.

          this.hostname = this.hostname || ''; // if hostname begins with [ and ends with ]
          // assume that it's an IPv6 address.

          var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']'; // validate a little.

          if (!ipv6Hostname) {
            var hostparts = this.hostname.split(/\./);

            for (var i = 0, l = hostparts.length; i < l; i++) {
              var part = hostparts[i];
              if (!part) continue;

              if (!part.match(hostnamePartPattern)) {
                var newpart = '';

                for (var j = 0, k = part.length; j < k; j++) {
                  if (part.charCodeAt(j) > 127) {
                    // we replace non-ASCII char with a temporary placeholder
                    // we need this to make sure size of hostname is not
                    // broken by replacing non-ASCII by nothing
                    newpart += 'x';
                  } else {
                    newpart += part[j];
                  }
                } // we test again with ASCII char only


                if (!newpart.match(hostnamePartPattern)) {
                  var validParts = hostparts.slice(0, i);
                  var notHost = hostparts.slice(i + 1);
                  var bit = part.match(hostnamePartStart);

                  if (bit) {
                    validParts.push(bit[1]);
                    notHost.unshift(bit[2]);
                  }

                  if (notHost.length) {
                    rest = '/' + notHost.join('.') + rest;
                  }

                  this.hostname = validParts.join('.');
                  break;
                }
              }
            }
          }

          if (this.hostname.length > hostnameMaxLen) {
            this.hostname = '';
          } else {
            // hostnames are always lower case.
            this.hostname = this.hostname.toLowerCase();
          }

          if (!ipv6Hostname) {
            // IDNA Support: Returns a punycoded representation of "domain".
            // It only converts parts of the domain name that
            // have non-ASCII characters, i.e. it doesn't matter if
            // you call it with a domain that already is ASCII-only.
            this.hostname = punycode.toASCII(this.hostname);
          }

          var p = this.port ? ':' + this.port : '';
          var h = this.hostname || '';
          this.host = h + p;
          this.href += this.host; // strip [ and ] from the hostname
          // the host field still retains them, though

          if (ipv6Hostname) {
            this.hostname = this.hostname.substr(1, this.hostname.length - 2);

            if (rest[0] !== '/') {
              rest = '/' + rest;
            }
          }
        } // now rest is set to the post-host stuff.
        // chop off any delim chars.


        if (!unsafeProtocol[lowerProto]) {
          // First, make 100% sure that any "autoEscape" chars get
          // escaped, even if encodeURIComponent doesn't think they
          // need to be.
          for (var i = 0, l = autoEscape.length; i < l; i++) {
            var ae = autoEscape[i];
            if (rest.indexOf(ae) === -1) continue;
            var esc = encodeURIComponent(ae);

            if (esc === ae) {
              esc = escape(ae);
            }

            rest = rest.split(ae).join(esc);
          }
        } // chop off from the tail first.


        var hash = rest.indexOf('#');

        if (hash !== -1) {
          // got a fragment string.
          this.hash = rest.substr(hash);
          rest = rest.slice(0, hash);
        }

        var qm = rest.indexOf('?');

        if (qm !== -1) {
          this.search = rest.substr(qm);
          this.query = rest.substr(qm + 1);

          if (parseQueryString) {
            this.query = querystring.parse(this.query);
          }

          rest = rest.slice(0, qm);
        } else if (parseQueryString) {
          // no query string, but parseQueryString still requested
          this.search = '';
          this.query = {};
        }

        if (rest) this.pathname = rest;

        if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
          this.pathname = '/';
        } //to support http.request


        if (this.pathname || this.search) {
          var p = this.pathname || '';
          var s = this.search || '';
          this.path = p + s;
        } // finally, reconstruct the href based on what has been validated.


        this.href = this.format();
        return this;
      }; // format a parsed object into a url string


      function urlFormat(obj) {
        // ensure it's an object, and not a string url.
        // If it's an obj, this is a no-op.
        // this way, you can call url_format() on strings
        // to clean up potentially wonky urls.
        if (util$1.isString(obj)) obj = urlParse(obj);
        if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
        return obj.format();
      }

      Url.prototype.format = function () {
        var auth = this.auth || '';

        if (auth) {
          auth = encodeURIComponent(auth);
          auth = auth.replace(/%3A/i, ':');
          auth += '@';
        }

        var protocol = this.protocol || '',
            pathname = this.pathname || '',
            hash = this.hash || '',
            host = false,
            query = '';

        if (this.host) {
          host = auth + this.host;
        } else if (this.hostname) {
          host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');

          if (this.port) {
            host += ':' + this.port;
          }
        }

        if (this.query && util$1.isObject(this.query) && Object.keys(this.query).length) {
          query = querystring.stringify(this.query);
        }

        var search = this.search || query && '?' + query || '';
        if (protocol && protocol.substr(-1) !== ':') protocol += ':'; // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
        // unless they had them to begin with.

        if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
          host = '//' + (host || '');
          if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
        } else if (!host) {
          host = '';
        }

        if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
        if (search && search.charAt(0) !== '?') search = '?' + search;
        pathname = pathname.replace(/[?#]/g, function (match) {
          return encodeURIComponent(match);
        });
        search = search.replace('#', '%23');
        return protocol + host + pathname + search + hash;
      };

      function urlResolve(source, relative) {
        return urlParse(source, false, true).resolve(relative);
      }

      Url.prototype.resolve = function (relative) {
        return this.resolveObject(urlParse(relative, false, true)).format();
      };

      function urlResolveObject(source, relative) {
        if (!source) return relative;
        return urlParse(source, false, true).resolveObject(relative);
      }

      Url.prototype.resolveObject = function (relative) {
        if (util$1.isString(relative)) {
          var rel = new Url();
          rel.parse(relative, false, true);
          relative = rel;
        }

        var result = new Url();
        var tkeys = Object.keys(this);

        for (var tk = 0; tk < tkeys.length; tk++) {
          var tkey = tkeys[tk];
          result[tkey] = this[tkey];
        } // hash is always overridden, no matter what.
        // even href="" will remove it.


        result.hash = relative.hash; // if the relative url is empty, then there's nothing left to do here.

        if (relative.href === '') {
          result.href = result.format();
          return result;
        } // hrefs like //foo/bar always cut to the protocol.


        if (relative.slashes && !relative.protocol) {
          // take everything except the protocol from relative
          var rkeys = Object.keys(relative);

          for (var rk = 0; rk < rkeys.length; rk++) {
            var rkey = rkeys[rk];
            if (rkey !== 'protocol') result[rkey] = relative[rkey];
          } //urlParse appends trailing / to urls like http://www.example.com


          if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
            result.path = result.pathname = '/';
          }

          result.href = result.format();
          return result;
        }

        if (relative.protocol && relative.protocol !== result.protocol) {
          // if it's a known url protocol, then changing
          // the protocol does weird things
          // first, if it's not file:, then we MUST have a host,
          // and if there was a path
          // to begin with, then we MUST have a path.
          // if it is file:, then the host is dropped,
          // because that's known to be hostless.
          // anything else is assumed to be absolute.
          if (!slashedProtocol[relative.protocol]) {
            var keys = Object.keys(relative);

            for (var v = 0; v < keys.length; v++) {
              var k = keys[v];
              result[k] = relative[k];
            }

            result.href = result.format();
            return result;
          }

          result.protocol = relative.protocol;

          if (!relative.host && !hostlessProtocol[relative.protocol]) {
            var relPath = (relative.pathname || '').split('/');

            while (relPath.length && !(relative.host = relPath.shift()));

            if (!relative.host) relative.host = '';
            if (!relative.hostname) relative.hostname = '';
            if (relPath[0] !== '') relPath.unshift('');
            if (relPath.length < 2) relPath.unshift('');
            result.pathname = relPath.join('/');
          } else {
            result.pathname = relative.pathname;
          }

          result.search = relative.search;
          result.query = relative.query;
          result.host = relative.host || '';
          result.auth = relative.auth;
          result.hostname = relative.hostname || relative.host;
          result.port = relative.port; // to support http.request

          if (result.pathname || result.search) {
            var p = result.pathname || '';
            var s = result.search || '';
            result.path = p + s;
          }

          result.slashes = result.slashes || relative.slashes;
          result.href = result.format();
          return result;
        }

        var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
            isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
            mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
            removeAllDots = mustEndAbs,
            srcPath = result.pathname && result.pathname.split('/') || [],
            relPath = relative.pathname && relative.pathname.split('/') || [],
            psychotic = result.protocol && !slashedProtocol[result.protocol]; // if the url is a non-slashed url, then relative
        // links like ../.. should be able
        // to crawl up to the hostname, as well.  This is strange.
        // result.protocol has already been set by now.
        // Later on, put the first path part into the host field.

        if (psychotic) {
          result.hostname = '';
          result.port = null;

          if (result.host) {
            if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
          }

          result.host = '';

          if (relative.protocol) {
            relative.hostname = null;
            relative.port = null;

            if (relative.host) {
              if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
            }

            relative.host = null;
          }

          mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
        }

        if (isRelAbs) {
          // it's absolute.
          result.host = relative.host || relative.host === '' ? relative.host : result.host;
          result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
          result.search = relative.search;
          result.query = relative.query;
          srcPath = relPath; // fall through to the dot-handling below.
        } else if (relPath.length) {
          // it's relative
          // throw away the existing file, and take the new path instead.
          if (!srcPath) srcPath = [];
          srcPath.pop();
          srcPath = srcPath.concat(relPath);
          result.search = relative.search;
          result.query = relative.query;
        } else if (!util$1.isNullOrUndefined(relative.search)) {
          // just pull out the search.
          // like href='?foo'.
          // Put this after the other two cases because it simplifies the booleans
          if (psychotic) {
            result.hostname = result.host = srcPath.shift(); //occationaly the auth can get stuck only in host
            //this especially happens in cases like
            //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

            var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

            if (authInHost) {
              result.auth = authInHost.shift();
              result.host = result.hostname = authInHost.shift();
            }
          }

          result.search = relative.search;
          result.query = relative.query; //to support http.request

          if (!util$1.isNull(result.pathname) || !util$1.isNull(result.search)) {
            result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
          }

          result.href = result.format();
          return result;
        }

        if (!srcPath.length) {
          // no path at all.  easy.
          // we've already handled the other stuff above.
          result.pathname = null; //to support http.request

          if (result.search) {
            result.path = '/' + result.search;
          } else {
            result.path = null;
          }

          result.href = result.format();
          return result;
        } // if a url ENDs in . or .., then it must get a trailing slash.
        // however, if it ends in anything else non-slashy,
        // then it must NOT get a trailing slash.


        var last = srcPath.slice(-1)[0];
        var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === ''; // strip single dots, resolve double dots to parent dir
        // if the path tries to go above the root, `up` ends up > 0

        var up = 0;

        for (var i = srcPath.length; i >= 0; i--) {
          last = srcPath[i];

          if (last === '.') {
            srcPath.splice(i, 1);
          } else if (last === '..') {
            srcPath.splice(i, 1);
            up++;
          } else if (up) {
            srcPath.splice(i, 1);
            up--;
          }
        } // if the path is allowed to go above the root, restore leading ..s


        if (!mustEndAbs && !removeAllDots) {
          for (; up--; up) {
            srcPath.unshift('..');
          }
        }

        if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
          srcPath.unshift('');
        }

        if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
          srcPath.push('');
        }

        var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/'; // put the host back

        if (psychotic) {
          result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : ''; //occationaly the auth can get stuck only in host
          //this especially happens in cases like
          //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

          var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

          if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
          }
        }

        mustEndAbs = mustEndAbs || result.host && srcPath.length;

        if (mustEndAbs && !isAbsolute) {
          srcPath.unshift('');
        }

        if (!srcPath.length) {
          result.pathname = null;
          result.path = null;
        } else {
          result.pathname = srcPath.join('/');
        } //to support request.http


        if (!util$1.isNull(result.pathname) || !util$1.isNull(result.search)) {
          result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
        }

        result.auth = relative.auth || result.auth;
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      };

      Url.prototype.parseHost = function () {
        var host = this.host;
        var port = portPattern.exec(host);

        if (port) {
          port = port[0];

          if (port !== ':') {
            this.port = port.substr(1);
          }

          host = host.substr(0, host.length - port.length);
        }

        if (host) this.hostname = host;
      };

      var url = {
        parse: parse$1,
        resolve: resolve,
        resolveObject: resolveObject,
        format: format$1,
        Url: Url_1
      };

      function buildQrCodeLink(query) {
        return API.apiOf(url.format({
          pathname: '/api/barcode/qrcode',
          query
        }));
      }

      function buildValue(o) {
        const v = o[o.type];

        switch (o.type) {
          case 'wifi':
            {
              // WIFI:T:WPA;S:mynetwork;P:mypass;;
              const {
                encryption,
                ssid,
                password,
                hidden
              } = v;
              return `WIFI:T:${encryption};S:${ssid !== null && ssid !== void 0 ? ssid : ''};P:${!encryption || encryption === 'nopass' ? '' : password !== null && password !== void 0 ? password : ''};${hidden ? 'H:true' : ''};`;
            }

          case 'tel':
            {
              const {
                countryCode,
                number
              } = v;
              return `tel:${countryCode}${number !== null && number !== void 0 ? number : ''}`;
            }

          default:
          case 'text':
            return v;
        }
      }

      const QrCodeBuilder = () => {
        var _valueObject$wifi;

        const [form] = Form.useForm();
        const [valueForm] = Form.useForm();
        const [options, setOptions] = useState({
          value: 'https://apis.wener.me',
          renderAs: 'svg',
          size: 256,
          bgColor: '#ffffff',
          fgColor: '#000000',
          level: 'H',
          imageSettings: {
            src: '',
            width: 48,
            height: 48
          }
        });
        useEffect(() => {
          form.setFieldsValue(options);
        }, []); // https://github.com/zxing/zxing/wiki/Barcode-Contents

        const [valueObject, setValueObject] = useState({
          type: 'text',
          text: 'https://apis.wener.me',
          wifi: {
            encryption: 'WAP',
            ssid: 'wener-wifi',
            password: 'wifi-password'
          },
          tel: {
            countryCode: '+86',
            number: '10086'
          }
        });
        useEffect(() => {
          valueForm.setFieldsValue(valueObject);
        }, []);
        useEffect(() => {
          const value = buildValue(valueObject);
          setOptions(rn(s => {
            s.value = value;
          }));
          form.setFieldsValue({
            value
          });
        }, [valueObject]);
        const fields = useMemo(() => [{
          key: 'value',
          label: '二维码内容',
          required: true,
          'widget:readOnly': true
        }, {
          key: 'size',
          label: '尺寸',
          widget: 'slider',
          widgetProps: {
            min: 64,
            max: 300
          }
        }, {
          key: 'renderAs',
          label: '渲染方式',
          widget: 'select',
          options: [{
            value: 'svg',
            label: 'SVG'
          }, {
            value: 'canvas',
            label: 'Canvas'
          }]
        }, {
          key: 'level',
          label: '容错率',
          widget: 'select',
          options: [['L', '低 - 7%'], ['M', '中 - 15%'], ['Q', '四分之一 - 25%'], ['H', '高 - 30%']]
        }, {
          key: 'includeMargin',
          label: '包含边距',
          widget: 'switch'
        }, {
          key: 'fgColor',
          label: '前景色',
          widget: 'SketchColorPicker'
        }, {
          key: 'bgColor',
          label: '背景色',
          widget: 'SketchColorPicker'
        }, {
          key: 'imageSettings.src',
          label: '图片地址'
        }, {
          key: 'imageSettings.height',
          label: '图片宽',
          widget: 'slider',
          widgetProps: {
            min: 16,
            max: 150
          }
        }, {
          key: 'imageSettings.width',
          label: '图片高',
          widget: 'slider',
          widgetProps: {
            min: 16,
            max: 150
          }
        }, {
          key: 'imageSettings.excavate',
          label: '图片位置镂空',
          widget: 'switch'
        }], []);

        const linkProvider = ({
          format
        }) => {
          const {
            value,
            imageSettings,
            renderAs,
            ...query
          } = options;
          return buildQrCodeLink({
            value,
            format,
            ...imageSettings
          });
        };

        return /*#__PURE__*/React.createElement("div", {
          className: "container"
        }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", null, "\u751F\u6210\u53C2\u6570"), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Form, {
          form: valueForm,
          onValuesChange: v => {
            setValueObject(rn(s => {
              merge$1(s, v);
            }));
          },
          labelCol: {
            span: 6
          },
          wrapperCol: {
            span: 18
          }
        }, /*#__PURE__*/React.createElement(FormFieldBuilder, {
          pure: true,
          field: {
            key: 'type',
            label: '值类型',
            required: true,
            widget: 'select',
            options: [['text', '文本'], ['wifi', 'WiFi'], ['tel', '电话号码']]
          }
        }), valueObject.type === 'text' && /*#__PURE__*/React.createElement(FormFieldBuilder, {
          pure: true,
          field: {
            key: 'text',
            name: null,
            label: '文本内容',
            required: true
          }
        }), valueObject.type === 'wifi' && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormFieldsBuilder, {
          pure: true,
          fields: [{
            key: 'wifi.ssid',
            label: 'SSID/网络名',
            required: true
          }, {
            key: 'wifi.encryption',
            label: '加密方式',
            widget: 'select',
            options: [['WPA', 'WPA/WPA2'], ['WEP', 'WEP'], ['nopass', '无密码']]
          }]
        }), ((_valueObject$wifi = valueObject['wifi']) === null || _valueObject$wifi === void 0 ? void 0 : _valueObject$wifi.encryption) !== 'nopass' && /*#__PURE__*/React.createElement(FormFieldBuilder, {
          pure: true,
          field: {
            key: 'wifi.password',
            label: '密码',
            widget: 'password'
          }
        }), /*#__PURE__*/React.createElement(FormFieldBuilder, {
          pure: true,
          field: {
            key: 'wifi.hidden',
            label: '隐藏网络',
            widget: 'switch'
          }
        })), valueObject.type === 'tel' && /*#__PURE__*/React.createElement(FormFieldBuilder, {
          pure: true,
          field: {
            key: 'tel.number',
            label: '电话号码',
            required: true,
            widget: /*#__PURE__*/React.createElement(Input, {
              pattern: "^[-0-9]*$",
              addonBefore: valueObject.tel.countryCode
            })
          }
        })), /*#__PURE__*/React.createElement("hr", null), /*#__PURE__*/React.createElement(Form, {
          form: form,
          onValuesChange: v => {
            setOptions(rn(s => {
              Object.assign(s, v);
            }));
          },
          labelCol: {
            span: 6
          },
          wrapperCol: {
            span: 18
          }
        }, /*#__PURE__*/React.createElement(FormFieldsBuilder, {
          fields: fields,
          widgets: [SketchColorPicker]
        })))), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(ResourceLinkButton, {
          linkProvider: linkProvider,
          formats: ['svg']
        }), /*#__PURE__*/React.createElement("figure", {
          style: {
            textAlign: 'center',
            marginTop: 16
          }
        }, /*#__PURE__*/React.createElement(lib, options), /*#__PURE__*/React.createElement("figcaption", null, "\u4E8C\u7EF4\u7801"))), /*#__PURE__*/React.createElement("style", {
          jsx: true
        }, `
        .container {
          display: flex;
        }
        .container > div {
          flex: 1;
        }
        @media (max-width: 767.98px) {
          .container {
            flex-flow: column;
          }
        }
      `));
      };

      const QrCodeBuilderPlayground = exports('QrCodeBuilderPlayground', () => {
        return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(QrCodeBuilder, null), /*#__PURE__*/React.createElement(QrCodeSiteNote, null));
      });

      function usePasteFileEffect(opts) {
        const {
          onFile
        } = opts;
        useEffect(() => {
          const onPaste = async e => {
            var _e$originalEvent;

            const clipboardData = e.clipboardData || window['clipboardData'] || ((_e$originalEvent = e['originalEvent']) === null || _e$originalEvent === void 0 ? void 0 : _e$originalEvent['clipboardData']);
            const res = getFile(clipboardData);

            if (res) {
              onFile(res);
            }
          };

          document.addEventListener('paste', onPaste);
          return () => document.removeEventListener('paste', onPaste);
        }, []);
      }

      const decoders = {
        'image/jpeg': buf => Promise.resolve().then(function () { return index$1; }).then(({
          decode
        }) => decode(buf)),
        'image/png': buf => Promise.resolve().then(function () { return browser$1; }).then(({
          PNG
        }) => PNG.sync.read(buf))
      };
      const ImageReceiver = ({
        onFileChange,
        onImageLoad,
        onImageDataChange: rawOnImageDataChange,
        decoderType = 'canvas'
      }) => {
        var _imageInfo$width, _imageInfo$height;

        const [file, setFile] = useState();
        const [preview, setPreview] = useState();
        const [imageInfo, setImageInfo] = useState();
        const canvasRef = useRef();
        const [loading, setLoading] = useState(false);

        const onImageDataChange = v => {
          setLoading(false);
          rawOnImageDataChange === null || rawOnImageDataChange === void 0 ? void 0 : rawOnImageDataChange(v);
        };

        useEffect(() => {
          if (!file || !onImageDataChange || decoderType !== 'js') {
            return;
          }

          const decoder = decoders[file.type];

          if (!decoder) {
            message.error(`无法解析 ${file.type} 文件`);
            return;
          }

          setLoading(true);
          const reader = new FileReader();
          reader.readAsArrayBuffer(file);

          reader.onload = async e => {
            try {
              var _reader$result;

              const reader = e.target;
              console.log(`read file length ${(_reader$result = reader.result) === null || _reader$result === void 0 ? void 0 : _reader$result['byteLength']} <=> ${file.size}`);
              onImageDataChange(await decoder(reader.result));
            } catch (e) {
              console.log(`parse file failed ${file.name} ${file.type} ${file.size}`, e);
              notification.error({
                message: '解析文件失败',
                description: `${file.name} :${e.message}`,
                duration: 8
              });
            } finally {
              setLoading(false);
            }
          };

          reader.onerror = error => {
            console.log(`failed file reading`, file, error);
            notification.error({
              message: '读取文件失败',
              description: `${file.name}`,
              duration: 8
            });
            setLoading(false);
          };
        }, [file]);
        usePasteFileEffect({
          onFile({
            file,
            filename
          }) {
            if (file.name !== filename) {
              let type = file.type;

              if (filename.endsWith('.jpg') || filename.endsWith('.jpeg')) {
                type = 'image/jpeg';
              } else if (filename.endsWith('.png')) {
                type = 'image/png';
              }

              if (type !== file.type) {
                const blob = file.slice(0, file.size);
                file = new File([blob], filename, {
                  type
                });
              }
            }

            setFile(file);
          }

        });
        useEffect(() => {
          if (!file) {
            return;
          }

          setPreview(s => {
            if (s) {
              URL.revokeObjectURL(s);
            }

            return URL.createObjectURL(file);
          });
          onFileChange === null || onFileChange === void 0 ? void 0 : onFileChange(file);
        }, [file]);
        return /*#__PURE__*/React.createElement(Upload.Dragger, {
          showUploadList: false,
          supportServerRender: true,
          accept: "image/*",
          beforeUpload: file => {
            var _file$type;

            // console.log(`beforeUpload`, file)
            // if (!/[.](png|jpg|jpeg)$/.test(file.name)) {
            if (!(file === null || file === void 0 ? void 0 : (_file$type = file.type) === null || _file$type === void 0 ? void 0 : _file$type.startsWith('image/'))) {
              message.error('只支持图片文件');
              return false;
            }

            return true;
          },
          customRequest: async opts => {
            console.log(`upload`, opts);

            if (opts.file instanceof File) {
              setFile(opts.file);
            } else {
              message.error('无效的上传文件');
            }
          }
        }, /*#__PURE__*/React.createElement("canvas", {
          style: {
            width: '100%',
            display: 'none'
          },
          ref: canvasRef,
          width: (_imageInfo$width = imageInfo === null || imageInfo === void 0 ? void 0 : imageInfo.width) !== null && _imageInfo$width !== void 0 ? _imageInfo$width : 0,
          height: (_imageInfo$height = imageInfo === null || imageInfo === void 0 ? void 0 : imageInfo.height) !== null && _imageInfo$height !== void 0 ? _imageInfo$height : 0
        }), /*#__PURE__*/React.createElement(Spin, {
          spinning: loading
        }, !preview && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("p", {
          className: "ant-upload-drag-icon"
        }, /*#__PURE__*/React.createElement(InboxOutlined, null)), /*#__PURE__*/React.createElement("p", {
          className: "ant-upload-text"
        }, "\u70B9\u51FB", /*#__PURE__*/React.createElement("b", null, "\u9009\u62E9"), "\u56FE\u7247\u3001", /*#__PURE__*/React.createElement("b", null, "\u62D6\u62FD"), "\u56FE\u7247\u5230\u8BE5\u533A\u57DF\u3001", /*#__PURE__*/React.createElement("b", null, "\u7C98\u8D34"), "\u56FE\u7247"), /*#__PURE__*/React.createElement("p", {
          className: "ant-upload-hint"
        }, "\u652F\u6301\u89E3\u6790 JPG\u3001PNG \u683C\u5F0F\u56FE\u7247\u4E2D\u7684\u4E8C\u7EF4\u7801")), preview && /*#__PURE__*/React.createElement("figure", null, /*#__PURE__*/React.createElement("img", {
          src: preview,
          alt: file.name,
          style: {
            width: '100%',
            height: '100%'
          },
          onLoad: e => {
            const img = e.currentTarget;
            const width = img.naturalWidth;
            const height = img.naturalHeight;
            setImageInfo({
              width,
              height
            });

            if (onImageDataChange && decoderType === 'canvas') {
              setLoading(true);
              setTimeout(() => {
                canvasRef.current.getContext('2d').drawImage(img, 0, 0);
                onImageDataChange(canvasRef.current.getContext('2d').getImageData(0, 0, width, height));
              }, 0);
            }

            onImageLoad === null || onImageLoad === void 0 ? void 0 : onImageLoad(img);
          }
        }), /*#__PURE__*/React.createElement("figcaption", null, /*#__PURE__*/React.createElement("b", null, file.name), /*#__PURE__*/React.createElement("br", null), "\u56FE\u7247\u5927\u5C0F ", imageInfo === null || imageInfo === void 0 ? void 0 : imageInfo.width, " x ", imageInfo === null || imageInfo === void 0 ? void 0 : imageInfo.height, /*#__PURE__*/React.createElement("br", null), "\u6587\u4EF6\u5927\u5C0F ", (file.size / 1000).toFixed(2), "K", /*#__PURE__*/React.createElement("br", null), file.type))));
      };

      const ChunkInfo = ({
        chunk
      }) => {
        const {
          type,
          text,
          bytes
        } = chunk;
        return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", null, "\u7C7B\u578B: ", type), text && /*#__PURE__*/React.createElement("div", null, "\u6587\u672C: ", text), bytes && /*#__PURE__*/React.createElement("div", null, "\u5B57\u8282: ", bytes === null || bytes === void 0 ? void 0 : bytes.length));
      };

      const QrCodeReaderPlayground = exports('QrCodeReaderPlayground', () => {
        const [qrInfo, setQrInfo] = useState();
        const [imageData, setImageData] = useState();
        const [loading, setLoading] = useState(false);
        useEffect(() => {
          if (!imageData) {
            return;
          }

          setLoading(true);
          console.log(`Parse data ${imageData.data.length} ${imageData.width}x${imageData.height}`);
          Promise.resolve().then(function () { return jsQR$1; }).then(async def => {
            var _def$default;

            const jsQR = ((_def$default = def.default) === null || _def$default === void 0 ? void 0 : _def$default['default']) || def.default || def;

            try {
              // update loading state
              await sleep(100);
              console.time('jsqr.decode');
              const code = jsQR(imageData.data, imageData.width, imageData.height, {
                inversionAttempts: 'attemptBoth'
              });
              console.timeEnd('jsqr.decode');
              setQrInfo(code);
              console.log(`Code`, code);
            } catch (e) {
              console.error(`parse failed`, e, imageData);
              notification.error({
                duration: 5,
                message: '解析失败',
                description: e.message
              });
            } finally {
              setLoading(false);
            }
          });
        }, [imageData]);
        return /*#__PURE__*/React.createElement("div", {
          style: {
            display: 'flex'
          },
          className: "container"
        }, /*#__PURE__*/React.createElement("div", {
          style: {
            flex: 1
          }
        }, /*#__PURE__*/React.createElement("div", {
          style: {
            margin: 20
          }
        }, /*#__PURE__*/React.createElement("h2", null, "\u4E8C\u7EF4\u7801\u4E2D\u7684\u4FE1\u606F"), /*#__PURE__*/React.createElement(Spin, {
          spinning: loading
        }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", null, "\u6570\u636E"), /*#__PURE__*/React.createElement("pre", null, qrInfo === null || qrInfo === void 0 ? void 0 : qrInfo.data)), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("h3", null, "\u533A\u5757"), qrInfo && qrInfo.chunks.map((v, i) => /*#__PURE__*/React.createElement("div", {
          key: i
        }, /*#__PURE__*/React.createElement(ChunkInfo, {
          chunk: v
        }), /*#__PURE__*/React.createElement("hr", null)))))))), /*#__PURE__*/React.createElement("div", {
          style: {
            flex: 1
          }
        }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(ImageReceiver, {
          decoderType: "canvas",
          onImageDataChange: setImageData
        }))), /*#__PURE__*/React.createElement("style", {
          jsx: true
        }, `
        .container {
          display: flex;
        }
        @media (max-width: 767.98px) {
          .container {
            flex-flow: column;
          }
        }
      `));
      });

      var title = "二维码";
      var description = "二维码生成、二维码照片识别";
      var externals = {
      	pngjs: "https://cdn.jsdelivr.net/npm/pngjs@5.0.0/browser.min.js"
      };
      var metadata = exports('metadata', {
      	title: title,
      	description: description,
      	externals: externals
      });

      var object_hash = createCommonjsModule(function (module, exports) {
        !function (e) {
          module.exports = e();
        }(function () {
          return function o(i, u, a) {
            function s(n, e) {
              if (!u[n]) {
                if (!i[n]) {
                  var t = "function" == typeof commonjsRequire && commonjsRequire;
                  if (!e && t) return t(n, !0);
                  if (f) return f(n, !0);
                  throw new Error("Cannot find module '" + n + "'");
                }

                var r = u[n] = {
                  exports: {}
                };
                i[n][0].call(r.exports, function (e) {
                  var t = i[n][1][e];
                  return s(t || e);
                }, r, r.exports, o, i, u, a);
              }

              return u[n].exports;
            }

            for (var f = "function" == typeof commonjsRequire && commonjsRequire, e = 0; e < a.length; e++) s(a[e]);

            return s;
          }({
            1: [function (w, b, m) {
              (function (e, t, f, n, r, o, i, u, a) {

                var s = w("crypto");

                function c(e, t) {
                  return function (e, t) {
                    var n;
                    n = "passthrough" !== t.algorithm ? s.createHash(t.algorithm) : new y();
                    void 0 === n.write && (n.write = n.update, n.end = n.update);
                    g(t, n).dispatch(e), n.update || n.end("");
                    if (n.digest) return n.digest("buffer" === t.encoding ? void 0 : t.encoding);
                    var r = n.read();
                    return "buffer" !== t.encoding ? r.toString(t.encoding) : r;
                  }(e, t = h(e, t));
                }

                (m = b.exports = c).sha1 = function (e) {
                  return c(e);
                }, m.keys = function (e) {
                  return c(e, {
                    excludeValues: !0,
                    algorithm: "sha1",
                    encoding: "hex"
                  });
                }, m.MD5 = function (e) {
                  return c(e, {
                    algorithm: "md5",
                    encoding: "hex"
                  });
                }, m.keysMD5 = function (e) {
                  return c(e, {
                    algorithm: "md5",
                    encoding: "hex",
                    excludeValues: !0
                  });
                };
                var l = s.getHashes ? s.getHashes().slice() : ["sha1", "md5"];
                l.push("passthrough");
                var d = ["buffer", "hex", "binary", "base64"];

                function h(e, t) {
                  t = t || {};
                  var n = {};
                  if (n.algorithm = t.algorithm || "sha1", n.encoding = t.encoding || "hex", n.excludeValues = !!t.excludeValues, n.algorithm = n.algorithm.toLowerCase(), n.encoding = n.encoding.toLowerCase(), n.ignoreUnknown = !0 === t.ignoreUnknown, n.respectType = !1 !== t.respectType, n.respectFunctionNames = !1 !== t.respectFunctionNames, n.respectFunctionProperties = !1 !== t.respectFunctionProperties, n.unorderedArrays = !0 === t.unorderedArrays, n.unorderedSets = !1 !== t.unorderedSets, n.unorderedObjects = !1 !== t.unorderedObjects, n.replacer = t.replacer || void 0, n.excludeKeys = t.excludeKeys || void 0, void 0 === e) throw new Error("Object argument required.");

                  for (var r = 0; r < l.length; ++r) l[r].toLowerCase() === n.algorithm.toLowerCase() && (n.algorithm = l[r]);

                  if (-1 === l.indexOf(n.algorithm)) throw new Error('Algorithm "' + n.algorithm + '"  not supported. supported values: ' + l.join(", "));
                  if (-1 === d.indexOf(n.encoding) && "passthrough" !== n.algorithm) throw new Error('Encoding "' + n.encoding + '"  not supported. supported values: ' + d.join(", "));
                  return n;
                }

                function p(e) {
                  if ("function" == typeof e) {
                    return null != /^function\s+\w*\s*\(\s*\)\s*{\s+\[native code\]\s+}$/i.exec(Function.prototype.toString.call(e));
                  }
                }

                function g(u, t, a) {
                  a = a || [];

                  function s(e) {
                    return t.update ? t.update(e, "utf8") : t.write(e, "utf8");
                  }

                  return {
                    dispatch: function (e) {
                      u.replacer && (e = u.replacer(e));
                      var t = typeof e;
                      return null === e && (t = "null"), this["_" + t](e);
                    },
                    _object: function (t) {
                      var e = Object.prototype.toString.call(t),
                          n = /\[object (.*)\]/i.exec(e);
                      n = (n = n ? n[1] : "unknown:[" + e + "]").toLowerCase();
                      var r;
                      if (0 <= (r = a.indexOf(t))) return this.dispatch("[CIRCULAR:" + r + "]");
                      if (a.push(t), void 0 !== f && f.isBuffer && f.isBuffer(t)) return s("buffer:"), s(t);

                      if ("object" === n || "function" === n || "asyncfunction" === n) {
                        var o = Object.keys(t);
                        u.unorderedObjects && (o = o.sort()), !1 === u.respectType || p(t) || o.splice(0, 0, "prototype", "__proto__", "constructor"), u.excludeKeys && (o = o.filter(function (e) {
                          return !u.excludeKeys(e);
                        })), s("object:" + o.length + ":");
                        var i = this;
                        return o.forEach(function (e) {
                          i.dispatch(e), s(":"), u.excludeValues || i.dispatch(t[e]), s(",");
                        });
                      }

                      if (!this["_" + n]) {
                        if (u.ignoreUnknown) return s("[" + n + "]");
                        throw new Error('Unknown object type "' + n + '"');
                      }

                      this["_" + n](t);
                    },
                    _array: function (e, t) {
                      t = void 0 !== t ? t : !1 !== u.unorderedArrays;
                      var n = this;
                      if (s("array:" + e.length + ":"), !t || e.length <= 1) return e.forEach(function (e) {
                        return n.dispatch(e);
                      });
                      var r = [],
                          o = e.map(function (e) {
                        var t = new y(),
                            n = a.slice();
                        return g(u, t, n).dispatch(e), r = r.concat(n.slice(a.length)), t.read().toString();
                      });
                      return a = a.concat(r), o.sort(), this._array(o, !1);
                    },
                    _date: function (e) {
                      return s("date:" + e.toJSON());
                    },
                    _symbol: function (e) {
                      return s("symbol:" + e.toString());
                    },
                    _error: function (e) {
                      return s("error:" + e.toString());
                    },
                    _boolean: function (e) {
                      return s("bool:" + e.toString());
                    },
                    _string: function (e) {
                      s("string:" + e.length + ":"), s(e.toString());
                    },
                    _function: function (e) {
                      s("fn:"), p(e) ? this.dispatch("[native]") : this.dispatch(e.toString()), !1 !== u.respectFunctionNames && this.dispatch("function-name:" + String(e.name)), u.respectFunctionProperties && this._object(e);
                    },
                    _number: function (e) {
                      return s("number:" + e.toString());
                    },
                    _xml: function (e) {
                      return s("xml:" + e.toString());
                    },
                    _null: function () {
                      return s("Null");
                    },
                    _undefined: function () {
                      return s("Undefined");
                    },
                    _regexp: function (e) {
                      return s("regex:" + e.toString());
                    },
                    _uint8array: function (e) {
                      return s("uint8array:"), this.dispatch(Array.prototype.slice.call(e));
                    },
                    _uint8clampedarray: function (e) {
                      return s("uint8clampedarray:"), this.dispatch(Array.prototype.slice.call(e));
                    },
                    _int8array: function (e) {
                      return s("uint8array:"), this.dispatch(Array.prototype.slice.call(e));
                    },
                    _uint16array: function (e) {
                      return s("uint16array:"), this.dispatch(Array.prototype.slice.call(e));
                    },
                    _int16array: function (e) {
                      return s("uint16array:"), this.dispatch(Array.prototype.slice.call(e));
                    },
                    _uint32array: function (e) {
                      return s("uint32array:"), this.dispatch(Array.prototype.slice.call(e));
                    },
                    _int32array: function (e) {
                      return s("uint32array:"), this.dispatch(Array.prototype.slice.call(e));
                    },
                    _float32array: function (e) {
                      return s("float32array:"), this.dispatch(Array.prototype.slice.call(e));
                    },
                    _float64array: function (e) {
                      return s("float64array:"), this.dispatch(Array.prototype.slice.call(e));
                    },
                    _arraybuffer: function (e) {
                      return s("arraybuffer:"), this.dispatch(new Uint8Array(e));
                    },
                    _url: function (e) {
                      return s("url:" + e.toString());
                    },
                    _map: function (e) {
                      s("map:");
                      var t = Array.from(e);
                      return this._array(t, !1 !== u.unorderedSets);
                    },
                    _set: function (e) {
                      s("set:");
                      var t = Array.from(e);
                      return this._array(t, !1 !== u.unorderedSets);
                    },
                    _blob: function () {
                      if (u.ignoreUnknown) return s("[blob]");
                      throw Error('Hashing Blob objects is currently not supported\n(see https://github.com/puleos/object-hash/issues/26)\nUse "options.replacer" or "options.ignoreUnknown"\n');
                    },
                    _domwindow: function () {
                      return s("domwindow");
                    },
                    _process: function () {
                      return s("process");
                    },
                    _timer: function () {
                      return s("timer");
                    },
                    _pipe: function () {
                      return s("pipe");
                    },
                    _tcp: function () {
                      return s("tcp");
                    },
                    _udp: function () {
                      return s("udp");
                    },
                    _tty: function () {
                      return s("tty");
                    },
                    _statwatcher: function () {
                      return s("statwatcher");
                    },
                    _securecontext: function () {
                      return s("securecontext");
                    },
                    _connection: function () {
                      return s("connection");
                    },
                    _zlib: function () {
                      return s("zlib");
                    },
                    _context: function () {
                      return s("context");
                    },
                    _nodescript: function () {
                      return s("nodescript");
                    },
                    _httpparser: function () {
                      return s("httpparser");
                    },
                    _dataview: function () {
                      return s("dataview");
                    },
                    _signal: function () {
                      return s("signal");
                    },
                    _fsevent: function () {
                      return s("fsevent");
                    },
                    _tlswrap: function () {
                      return s("tlswrap");
                    }
                  };
                }

                function y() {
                  return {
                    buf: "",
                    write: function (e) {
                      this.buf += e;
                    },
                    end: function (e) {
                      this.buf += e;
                    },
                    read: function () {
                      return this.buf;
                    }
                  };
                }

                m.writeToStream = function (e, t, n) {
                  return void 0 === n && (n = t, t = {}), g(t = h(e, t), n).dispatch(e);
                };
              }).call(this, w("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, w("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/fake_794fcf4d.js", "/");
            }, {
              buffer: 3,
              crypto: 5,
              lYpoI2: 10
            }],
            2: [function (e, t, f) {
              (function (e, t, n, r, o, i, u, a, s) {
                !function (e) {

                  var f = "undefined" != typeof Uint8Array ? Uint8Array : Array,
                      n = "+".charCodeAt(0),
                      r = "/".charCodeAt(0),
                      o = "0".charCodeAt(0),
                      i = "a".charCodeAt(0),
                      u = "A".charCodeAt(0),
                      a = "-".charCodeAt(0),
                      s = "_".charCodeAt(0);

                  function c(e) {
                    var t = e.charCodeAt(0);
                    return t === n || t === a ? 62 : t === r || t === s ? 63 : t < o ? -1 : t < o + 10 ? t - o + 26 + 26 : t < u + 26 ? t - u : t < i + 26 ? t - i + 26 : void 0;
                  }

                  e.toByteArray = function (e) {
                    var t, n, r, o, i;
                    if (0 < e.length % 4) throw new Error("Invalid string. Length must be a multiple of 4");
                    var u = e.length;
                    o = "=" === e.charAt(u - 2) ? 2 : "=" === e.charAt(u - 1) ? 1 : 0, i = new f(3 * e.length / 4 - o), n = 0 < o ? e.length - 4 : e.length;
                    var a = 0;

                    function s(e) {
                      i[a++] = e;
                    }

                    for (t = 0; t < n; t += 4, 0) s((16711680 & (r = c(e.charAt(t)) << 18 | c(e.charAt(t + 1)) << 12 | c(e.charAt(t + 2)) << 6 | c(e.charAt(t + 3)))) >> 16), s((65280 & r) >> 8), s(255 & r);

                    return 2 == o ? s(255 & (r = c(e.charAt(t)) << 2 | c(e.charAt(t + 1)) >> 4)) : 1 == o && (s((r = c(e.charAt(t)) << 10 | c(e.charAt(t + 1)) << 4 | c(e.charAt(t + 2)) >> 2) >> 8 & 255), s(255 & r)), i;
                  }, e.fromByteArray = function (e) {
                    var t,
                        n,
                        r,
                        o,
                        i = e.length % 3,
                        u = "";

                    function a(e) {
                      return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e);
                    }

                    for (t = 0, r = e.length - i; t < r; t += 3) n = (e[t] << 16) + (e[t + 1] << 8) + e[t + 2], u += a((o = n) >> 18 & 63) + a(o >> 12 & 63) + a(o >> 6 & 63) + a(63 & o);

                    switch (i) {
                      case 1:
                        u += a((n = e[e.length - 1]) >> 2), u += a(n << 4 & 63), u += "==";
                        break;

                      case 2:
                        u += a((n = (e[e.length - 2] << 8) + e[e.length - 1]) >> 10), u += a(n >> 4 & 63), u += a(n << 2 & 63), u += "=";
                    }

                    return u;
                  };
                }(void 0 === f ? this.base64js = {} : f);
              }).call(this, e("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/base64-js/lib/b64.js", "/node_modules/gulp-browserify/node_modules/base64-js/lib");
            }, {
              buffer: 3,
              lYpoI2: 10
            }],
            3: [function (O, e, H) {
              (function (e, t, h, n, r, o, i, u, a) {
                var s = O("base64-js"),
                    f = O("ieee754");

                function h(e, t, n) {
                  if (!(this instanceof h)) return new h(e, t, n);
                  var r,
                      o,
                      i,
                      u,
                      a,
                      s = typeof e;
                  if ("base64" === t && "string" == s) for (e = (r = e).trim ? r.trim() : r.replace(/^\s+|\s+$/g, ""); e.length % 4 != 0;) e += "=";
                  if ("number" == s) o = x(e);else if ("string" == s) o = h.byteLength(e, t);else {
                    if ("object" != s) throw new Error("First argument needs to be a number, array or string.");
                    o = x(e.length);
                  }
                  if (h._useTypedArrays ? i = h._augment(new Uint8Array(o)) : ((i = this).length = o, i._isBuffer = !0), h._useTypedArrays && "number" == typeof e.byteLength) i._set(e);else if (S(a = e) || h.isBuffer(a) || a && "object" == typeof a && "number" == typeof a.length) for (u = 0; u < o; u++) h.isBuffer(e) ? i[u] = e.readUInt8(u) : i[u] = e[u];else if ("string" == s) i.write(e, 0, t);else if ("number" == s && !h._useTypedArrays && !n) for (u = 0; u < o; u++) i[u] = 0;
                  return i;
                }

                function p(e, t, n, r) {
                  return h._charsWritten = T(function (e) {
                    for (var t = [], n = 0; n < e.length; n++) t.push(255 & e.charCodeAt(n));

                    return t;
                  }(t), e, n, r);
                }

                function g(e, t, n, r) {
                  return h._charsWritten = T(function (e) {
                    for (var t, n, r, o = [], i = 0; i < e.length; i++) t = e.charCodeAt(i), n = t >> 8, r = t % 256, o.push(r), o.push(n);

                    return o;
                  }(t), e, n, r);
                }

                function c(e, t, n) {
                  var r = "";
                  n = Math.min(e.length, n);

                  for (var o = t; o < n; o++) r += String.fromCharCode(e[o]);

                  return r;
                }

                function l(e, t, n, r) {
                  r || (D("boolean" == typeof n, "missing or invalid endian"), D(null != t, "missing offset"), D(t + 1 < e.length, "Trying to read beyond buffer length"));
                  var o,
                      i = e.length;
                  if (!(i <= t)) return n ? (o = e[t], t + 1 < i && (o |= e[t + 1] << 8)) : (o = e[t] << 8, t + 1 < i && (o |= e[t + 1])), o;
                }

                function d(e, t, n, r) {
                  r || (D("boolean" == typeof n, "missing or invalid endian"), D(null != t, "missing offset"), D(t + 3 < e.length, "Trying to read beyond buffer length"));
                  var o,
                      i = e.length;
                  if (!(i <= t)) return n ? (t + 2 < i && (o = e[t + 2] << 16), t + 1 < i && (o |= e[t + 1] << 8), o |= e[t], t + 3 < i && (o += e[t + 3] << 24 >>> 0)) : (t + 1 < i && (o = e[t + 1] << 16), t + 2 < i && (o |= e[t + 2] << 8), t + 3 < i && (o |= e[t + 3]), o += e[t] << 24 >>> 0), o;
                }

                function y(e, t, n, r) {
                  if (r || (D("boolean" == typeof n, "missing or invalid endian"), D(null != t, "missing offset"), D(t + 1 < e.length, "Trying to read beyond buffer length")), !(e.length <= t)) {
                    var o = l(e, t, n, !0);
                    return 32768 & o ? -1 * (65535 - o + 1) : o;
                  }
                }

                function w(e, t, n, r) {
                  if (r || (D("boolean" == typeof n, "missing or invalid endian"), D(null != t, "missing offset"), D(t + 3 < e.length, "Trying to read beyond buffer length")), !(e.length <= t)) {
                    var o = d(e, t, n, !0);
                    return 2147483648 & o ? -1 * (4294967295 - o + 1) : o;
                  }
                }

                function b(e, t, n, r) {
                  return r || (D("boolean" == typeof n, "missing or invalid endian"), D(t + 3 < e.length, "Trying to read beyond buffer length")), f.read(e, t, n, 23, 4);
                }

                function m(e, t, n, r) {
                  return r || (D("boolean" == typeof n, "missing or invalid endian"), D(t + 7 < e.length, "Trying to read beyond buffer length")), f.read(e, t, n, 52, 8);
                }

                function v(e, t, n, r, o) {
                  o || (D(null != t, "missing value"), D("boolean" == typeof r, "missing or invalid endian"), D(null != n, "missing offset"), D(n + 1 < e.length, "trying to write beyond buffer length"), N(t, 65535));
                  var i = e.length;
                  if (!(i <= n)) for (var u = 0, a = Math.min(i - n, 2); u < a; u++) e[n + u] = (t & 255 << 8 * (r ? u : 1 - u)) >>> 8 * (r ? u : 1 - u);
                }

                function _(e, t, n, r, o) {
                  o || (D(null != t, "missing value"), D("boolean" == typeof r, "missing or invalid endian"), D(null != n, "missing offset"), D(n + 3 < e.length, "trying to write beyond buffer length"), N(t, 4294967295));
                  var i = e.length;
                  if (!(i <= n)) for (var u = 0, a = Math.min(i - n, 4); u < a; u++) e[n + u] = t >>> 8 * (r ? u : 3 - u) & 255;
                }

                function E(e, t, n, r, o) {
                  o || (D(null != t, "missing value"), D("boolean" == typeof r, "missing or invalid endian"), D(null != n, "missing offset"), D(n + 1 < e.length, "Trying to write beyond buffer length"), Y(t, 32767, -32768)), e.length <= n || v(e, 0 <= t ? t : 65535 + t + 1, n, r, o);
                }

                function I(e, t, n, r, o) {
                  o || (D(null != t, "missing value"), D("boolean" == typeof r, "missing or invalid endian"), D(null != n, "missing offset"), D(n + 3 < e.length, "Trying to write beyond buffer length"), Y(t, 2147483647, -2147483648)), e.length <= n || _(e, 0 <= t ? t : 4294967295 + t + 1, n, r, o);
                }

                function A(e, t, n, r, o) {
                  o || (D(null != t, "missing value"), D("boolean" == typeof r, "missing or invalid endian"), D(null != n, "missing offset"), D(n + 3 < e.length, "Trying to write beyond buffer length"), F(t, 34028234663852886e22, -34028234663852886e22)), e.length <= n || f.write(e, t, n, r, 23, 4);
                }

                function B(e, t, n, r, o) {
                  o || (D(null != t, "missing value"), D("boolean" == typeof r, "missing or invalid endian"), D(null != n, "missing offset"), D(n + 7 < e.length, "Trying to write beyond buffer length"), F(t, 17976931348623157e292, -17976931348623157e292)), e.length <= n || f.write(e, t, n, r, 52, 8);
                }

                H.Buffer = h, H.SlowBuffer = h, H.INSPECT_MAX_BYTES = 50, h.poolSize = 8192, h._useTypedArrays = function () {
                  try {
                    var e = new ArrayBuffer(0),
                        t = new Uint8Array(e);
                    return t.foo = function () {
                      return 42;
                    }, 42 === t.foo() && "function" == typeof t.subarray;
                  } catch (e) {
                    return !1;
                  }
                }(), h.isEncoding = function (e) {
                  switch (String(e).toLowerCase()) {
                    case "hex":
                    case "utf8":
                    case "utf-8":
                    case "ascii":
                    case "binary":
                    case "base64":
                    case "raw":
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                      return !0;

                    default:
                      return !1;
                  }
                }, h.isBuffer = function (e) {
                  return !(null == e || !e._isBuffer);
                }, h.byteLength = function (e, t) {
                  var n;

                  switch (e += "", t || "utf8") {
                    case "hex":
                      n = e.length / 2;
                      break;

                    case "utf8":
                    case "utf-8":
                      n = C(e).length;
                      break;

                    case "ascii":
                    case "binary":
                    case "raw":
                      n = e.length;
                      break;

                    case "base64":
                      n = k(e).length;
                      break;

                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                      n = 2 * e.length;
                      break;

                    default:
                      throw new Error("Unknown encoding");
                  }

                  return n;
                }, h.concat = function (e, t) {
                  if (D(S(e), "Usage: Buffer.concat(list, [totalLength])\nlist should be an Array."), 0 === e.length) return new h(0);
                  if (1 === e.length) return e[0];
                  var n;
                  if ("number" != typeof t) for (n = t = 0; n < e.length; n++) t += e[n].length;
                  var r = new h(t),
                      o = 0;

                  for (n = 0; n < e.length; n++) {
                    var i = e[n];
                    i.copy(r, o), o += i.length;
                  }

                  return r;
                }, h.prototype.write = function (e, t, n, r) {
                  if (isFinite(t)) isFinite(n) || (r = n, n = void 0);else {
                    var o = r;
                    r = t, t = n, n = o;
                  }
                  t = Number(t) || 0;
                  var i,
                      u,
                      a,
                      s,
                      f,
                      c,
                      l,
                      d = this.length - t;

                  switch ((!n || d < (n = Number(n))) && (n = d), r = String(r || "utf8").toLowerCase()) {
                    case "hex":
                      i = function (e, t, n, r) {
                        n = Number(n) || 0;
                        var o = e.length - n;
                        (!r || o < (r = Number(r))) && (r = o);
                        var i = t.length;
                        D(i % 2 == 0, "Invalid hex string"), i / 2 < r && (r = i / 2);

                        for (var u = 0; u < r; u++) {
                          var a = parseInt(t.substr(2 * u, 2), 16);
                          D(!isNaN(a), "Invalid hex string"), e[n + u] = a;
                        }

                        return h._charsWritten = 2 * u, u;
                      }(this, e, t, n);

                      break;

                    case "utf8":
                    case "utf-8":
                      f = this, c = t, l = n, i = h._charsWritten = T(C(e), f, c, l);
                      break;

                    case "ascii":
                      i = p(this, e, t, n);
                      break;

                    case "binary":
                      i = p(this, e, t, n);
                      break;

                    case "base64":
                      u = this, a = t, s = n, i = h._charsWritten = T(k(e), u, a, s);
                      break;

                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                      i = g(this, e, t, n);
                      break;

                    default:
                      throw new Error("Unknown encoding");
                  }

                  return i;
                }, h.prototype.toString = function (e, t, n) {
                  var r,
                      o,
                      i,
                      u,
                      a = this;
                  if (e = String(e || "utf8").toLowerCase(), t = Number(t) || 0, (n = void 0 !== n ? Number(n) : n = a.length) === t) return "";

                  switch (e) {
                    case "hex":
                      r = function (e, t, n) {
                        var r = e.length;
                        (!t || t < 0) && (t = 0);
                        (!n || n < 0 || r < n) && (n = r);

                        for (var o = "", i = t; i < n; i++) o += j(e[i]);

                        return o;
                      }(a, t, n);

                      break;

                    case "utf8":
                    case "utf-8":
                      r = function (e, t, n) {
                        var r = "",
                            o = "";
                        n = Math.min(e.length, n);

                        for (var i = t; i < n; i++) e[i] <= 127 ? (r += M(o) + String.fromCharCode(e[i]), o = "") : o += "%" + e[i].toString(16);

                        return r + M(o);
                      }(a, t, n);

                      break;

                    case "ascii":
                      r = c(a, t, n);
                      break;

                    case "binary":
                      r = c(a, t, n);
                      break;

                    case "base64":
                      o = a, u = n, r = 0 === (i = t) && u === o.length ? s.fromByteArray(o) : s.fromByteArray(o.slice(i, u));
                      break;

                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                      r = function (e, t, n) {
                        for (var r = e.slice(t, n), o = "", i = 0; i < r.length; i += 2) o += String.fromCharCode(r[i] + 256 * r[i + 1]);

                        return o;
                      }(a, t, n);

                      break;

                    default:
                      throw new Error("Unknown encoding");
                  }

                  return r;
                }, h.prototype.toJSON = function () {
                  return {
                    type: "Buffer",
                    data: Array.prototype.slice.call(this._arr || this, 0)
                  };
                }, h.prototype.copy = function (e, t, n, r) {
                  if (n = n || 0, r || 0 === r || (r = this.length), t = t || 0, r !== n && 0 !== e.length && 0 !== this.length) {
                    D(n <= r, "sourceEnd < sourceStart"), D(0 <= t && t < e.length, "targetStart out of bounds"), D(0 <= n && n < this.length, "sourceStart out of bounds"), D(0 <= r && r <= this.length, "sourceEnd out of bounds"), r > this.length && (r = this.length), e.length - t < r - n && (r = e.length - t + n);
                    var o = r - n;
                    if (o < 100 || !h._useTypedArrays) for (var i = 0; i < o; i++) e[i + t] = this[i + n];else e._set(this.subarray(n, n + o), t);
                  }
                }, h.prototype.slice = function (e, t) {
                  var n = this.length;
                  if (e = U(e, n, 0), t = U(t, n, n), h._useTypedArrays) return h._augment(this.subarray(e, t));

                  for (var r = t - e, o = new h(r, void 0, !0), i = 0; i < r; i++) o[i] = this[i + e];

                  return o;
                }, h.prototype.get = function (e) {
                  return console.log(".get() is deprecated. Access using array indexes instead."), this.readUInt8(e);
                }, h.prototype.set = function (e, t) {
                  return console.log(".set() is deprecated. Access using array indexes instead."), this.writeUInt8(e, t);
                }, h.prototype.readUInt8 = function (e, t) {
                  if (t || (D(null != e, "missing offset"), D(e < this.length, "Trying to read beyond buffer length")), !(e >= this.length)) return this[e];
                }, h.prototype.readUInt16LE = function (e, t) {
                  return l(this, e, !0, t);
                }, h.prototype.readUInt16BE = function (e, t) {
                  return l(this, e, !1, t);
                }, h.prototype.readUInt32LE = function (e, t) {
                  return d(this, e, !0, t);
                }, h.prototype.readUInt32BE = function (e, t) {
                  return d(this, e, !1, t);
                }, h.prototype.readInt8 = function (e, t) {
                  if (t || (D(null != e, "missing offset"), D(e < this.length, "Trying to read beyond buffer length")), !(e >= this.length)) return 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e];
                }, h.prototype.readInt16LE = function (e, t) {
                  return y(this, e, !0, t);
                }, h.prototype.readInt16BE = function (e, t) {
                  return y(this, e, !1, t);
                }, h.prototype.readInt32LE = function (e, t) {
                  return w(this, e, !0, t);
                }, h.prototype.readInt32BE = function (e, t) {
                  return w(this, e, !1, t);
                }, h.prototype.readFloatLE = function (e, t) {
                  return b(this, e, !0, t);
                }, h.prototype.readFloatBE = function (e, t) {
                  return b(this, e, !1, t);
                }, h.prototype.readDoubleLE = function (e, t) {
                  return m(this, e, !0, t);
                }, h.prototype.readDoubleBE = function (e, t) {
                  return m(this, e, !1, t);
                }, h.prototype.writeUInt8 = function (e, t, n) {
                  n || (D(null != e, "missing value"), D(null != t, "missing offset"), D(t < this.length, "trying to write beyond buffer length"), N(e, 255)), t >= this.length || (this[t] = e);
                }, h.prototype.writeUInt16LE = function (e, t, n) {
                  v(this, e, t, !0, n);
                }, h.prototype.writeUInt16BE = function (e, t, n) {
                  v(this, e, t, !1, n);
                }, h.prototype.writeUInt32LE = function (e, t, n) {
                  _(this, e, t, !0, n);
                }, h.prototype.writeUInt32BE = function (e, t, n) {
                  _(this, e, t, !1, n);
                }, h.prototype.writeInt8 = function (e, t, n) {
                  n || (D(null != e, "missing value"), D(null != t, "missing offset"), D(t < this.length, "Trying to write beyond buffer length"), Y(e, 127, -128)), t >= this.length || (0 <= e ? this.writeUInt8(e, t, n) : this.writeUInt8(255 + e + 1, t, n));
                }, h.prototype.writeInt16LE = function (e, t, n) {
                  E(this, e, t, !0, n);
                }, h.prototype.writeInt16BE = function (e, t, n) {
                  E(this, e, t, !1, n);
                }, h.prototype.writeInt32LE = function (e, t, n) {
                  I(this, e, t, !0, n);
                }, h.prototype.writeInt32BE = function (e, t, n) {
                  I(this, e, t, !1, n);
                }, h.prototype.writeFloatLE = function (e, t, n) {
                  A(this, e, t, !0, n);
                }, h.prototype.writeFloatBE = function (e, t, n) {
                  A(this, e, t, !1, n);
                }, h.prototype.writeDoubleLE = function (e, t, n) {
                  B(this, e, t, !0, n);
                }, h.prototype.writeDoubleBE = function (e, t, n) {
                  B(this, e, t, !1, n);
                }, h.prototype.fill = function (e, t, n) {
                  if (e = e || 0, t = t || 0, n = n || this.length, "string" == typeof e && (e = e.charCodeAt(0)), D("number" == typeof e && !isNaN(e), "value is not a number"), D(t <= n, "end < start"), n !== t && 0 !== this.length) {
                    D(0 <= t && t < this.length, "start out of bounds"), D(0 <= n && n <= this.length, "end out of bounds");

                    for (var r = t; r < n; r++) this[r] = e;
                  }
                }, h.prototype.inspect = function () {
                  for (var e = [], t = this.length, n = 0; n < t; n++) if (e[n] = j(this[n]), n === H.INSPECT_MAX_BYTES) {
                    e[n + 1] = "...";
                    break;
                  }

                  return "<Buffer " + e.join(" ") + ">";
                }, h.prototype.toArrayBuffer = function () {
                  if ("undefined" == typeof Uint8Array) throw new Error("Buffer.toArrayBuffer not supported in this browser");
                  if (h._useTypedArrays) return new h(this).buffer;

                  for (var e = new Uint8Array(this.length), t = 0, n = e.length; t < n; t += 1) e[t] = this[t];

                  return e.buffer;
                };
                var L = h.prototype;

                function U(e, t, n) {
                  return "number" != typeof e ? n : t <= (e = ~~e) ? t : 0 <= e || 0 <= (e += t) ? e : 0;
                }

                function x(e) {
                  return (e = ~~Math.ceil(+e)) < 0 ? 0 : e;
                }

                function S(e) {
                  return (Array.isArray || function (e) {
                    return "[object Array]" === Object.prototype.toString.call(e);
                  })(e);
                }

                function j(e) {
                  return e < 16 ? "0" + e.toString(16) : e.toString(16);
                }

                function C(e) {
                  for (var t = [], n = 0; n < e.length; n++) {
                    var r = e.charCodeAt(n);
                    if (r <= 127) t.push(e.charCodeAt(n));else {
                      var o = n;
                      55296 <= r && r <= 57343 && n++;

                      for (var i = encodeURIComponent(e.slice(o, n + 1)).substr(1).split("%"), u = 0; u < i.length; u++) t.push(parseInt(i[u], 16));
                    }
                  }

                  return t;
                }

                function k(e) {
                  return s.toByteArray(e);
                }

                function T(e, t, n, r) {
                  for (var o = 0; o < r && !(o + n >= t.length || o >= e.length); o++) t[o + n] = e[o];

                  return o;
                }

                function M(e) {
                  try {
                    return decodeURIComponent(e);
                  } catch (e) {
                    return String.fromCharCode(65533);
                  }
                }

                function N(e, t) {
                  D("number" == typeof e, "cannot write a non-number as a number"), D(0 <= e, "specified a negative value for writing an unsigned value"), D(e <= t, "value is larger than maximum value for type"), D(Math.floor(e) === e, "value has a fractional component");
                }

                function Y(e, t, n) {
                  D("number" == typeof e, "cannot write a non-number as a number"), D(e <= t, "value larger than maximum allowed value"), D(n <= e, "value smaller than minimum allowed value"), D(Math.floor(e) === e, "value has a fractional component");
                }

                function F(e, t, n) {
                  D("number" == typeof e, "cannot write a non-number as a number"), D(e <= t, "value larger than maximum allowed value"), D(n <= e, "value smaller than minimum allowed value");
                }

                function D(e, t) {
                  if (!e) throw new Error(t || "Failed assertion");
                }

                h._augment = function (e) {
                  return e._isBuffer = !0, e._get = e.get, e._set = e.set, e.get = L.get, e.set = L.set, e.write = L.write, e.toString = L.toString, e.toLocaleString = L.toString, e.toJSON = L.toJSON, e.copy = L.copy, e.slice = L.slice, e.readUInt8 = L.readUInt8, e.readUInt16LE = L.readUInt16LE, e.readUInt16BE = L.readUInt16BE, e.readUInt32LE = L.readUInt32LE, e.readUInt32BE = L.readUInt32BE, e.readInt8 = L.readInt8, e.readInt16LE = L.readInt16LE, e.readInt16BE = L.readInt16BE, e.readInt32LE = L.readInt32LE, e.readInt32BE = L.readInt32BE, e.readFloatLE = L.readFloatLE, e.readFloatBE = L.readFloatBE, e.readDoubleLE = L.readDoubleLE, e.readDoubleBE = L.readDoubleBE, e.writeUInt8 = L.writeUInt8, e.writeUInt16LE = L.writeUInt16LE, e.writeUInt16BE = L.writeUInt16BE, e.writeUInt32LE = L.writeUInt32LE, e.writeUInt32BE = L.writeUInt32BE, e.writeInt8 = L.writeInt8, e.writeInt16LE = L.writeInt16LE, e.writeInt16BE = L.writeInt16BE, e.writeInt32LE = L.writeInt32LE, e.writeInt32BE = L.writeInt32BE, e.writeFloatLE = L.writeFloatLE, e.writeFloatBE = L.writeFloatBE, e.writeDoubleLE = L.writeDoubleLE, e.writeDoubleBE = L.writeDoubleBE, e.fill = L.fill, e.inspect = L.inspect, e.toArrayBuffer = L.toArrayBuffer, e;
                };
              }).call(this, O("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, O("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/buffer/index.js", "/node_modules/gulp-browserify/node_modules/buffer");
            }, {
              "base64-js": 2,
              buffer: 3,
              ieee754: 11,
              lYpoI2: 10
            }],
            4: [function (l, d, e) {
              (function (e, t, u, n, r, o, i, a, s) {
                u = l("buffer").Buffer;
                var f = 4,
                    c = new u(f);
                c.fill(0);
                d.exports = {
                  hash: function (e, t, n, r) {
                    return u.isBuffer(e) || (e = new u(e)), function (e, t, n) {
                      for (var r = new u(t), o = n ? r.writeInt32BE : r.writeInt32LE, i = 0; i < e.length; i++) o.call(r, e[i], 4 * i, !0);

                      return r;
                    }(t(function (e, t) {
                      if (e.length % f != 0) {
                        var n = e.length + (f - e.length % f);
                        e = u.concat([e, c], n);
                      }

                      for (var r = [], o = t ? e.readInt32BE : e.readInt32LE, i = 0; i < e.length; i += f) r.push(o.call(e, i));

                      return r;
                    }(e, r), 8 * e.length), n, r);
                  }
                };
              }).call(this, l("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, l("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/helpers.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
            }, {
              buffer: 3,
              lYpoI2: 10
            }],
            5: [function (w, e, b) {
              (function (e, t, a, n, r, o, i, u, s) {
                a = w("buffer").Buffer;
                var f = w("./sha"),
                    c = w("./sha256"),
                    l = w("./rng"),
                    d = {
                  sha1: f,
                  sha256: c,
                  md5: w("./md5")
                },
                    h = 64,
                    p = new a(h);

                function g(e, r) {
                  var o = d[e = e || "sha1"],
                      i = [];
                  return o || y("algorithm:", e, "is not yet supported"), {
                    update: function (e) {
                      return a.isBuffer(e) || (e = new a(e)), i.push(e), e.length, this;
                    },
                    digest: function (e) {
                      var t = a.concat(i),
                          n = r ? function (e, t, n) {
                        a.isBuffer(t) || (t = new a(t)), a.isBuffer(n) || (n = new a(n)), t.length > h ? t = e(t) : t.length < h && (t = a.concat([t, p], h));

                        for (var r = new a(h), o = new a(h), i = 0; i < h; i++) r[i] = 54 ^ t[i], o[i] = 92 ^ t[i];

                        var u = e(a.concat([r, n]));
                        return e(a.concat([o, u]));
                      }(o, r, t) : o(t);
                      return i = null, e ? n.toString(e) : n;
                    }
                  };
                }

                function y() {
                  var e = [].slice.call(arguments).join(" ");
                  throw new Error([e, "we accept pull requests", "http://github.com/dominictarr/crypto-browserify"].join("\n"));
                }

                p.fill(0), b.createHash = function (e) {
                  return g(e);
                }, b.createHmac = function (e, t) {
                  return g(e, t);
                }, b.randomBytes = function (e, t) {
                  if (!t || !t.call) return new a(l(e));

                  try {
                    t.call(this, void 0, new a(l(e)));
                  } catch (e) {
                    t(e);
                  }
                }, function (e, t) {
                  for (var n in e) t(e[n], n);
                }(["createCredentials", "createCipher", "createCipheriv", "createDecipher", "createDecipheriv", "createSign", "createVerify", "createDiffieHellman", "pbkdf2"], function (e) {
                  b[e] = function () {
                    y("sorry,", e, "is not implemented yet");
                  };
                });
              }).call(this, w("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, w("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/index.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
            }, {
              "./md5": 6,
              "./rng": 7,
              "./sha": 8,
              "./sha256": 9,
              buffer: 3,
              lYpoI2: 10
            }],
            6: [function (w, b, e) {
              (function (e, t, n, r, o, i, u, a, s) {
                var f = w("./helpers");

                function c(e, t) {
                  e[t >> 5] |= 128 << t % 32, e[14 + (t + 64 >>> 9 << 4)] = t;

                  for (var n = 1732584193, r = -271733879, o = -1732584194, i = 271733878, u = 0; u < e.length; u += 16) {
                    var a = n,
                        s = r,
                        f = o,
                        c = i;
                    n = d(n, r, o, i, e[u + 0], 7, -680876936), i = d(i, n, r, o, e[u + 1], 12, -389564586), o = d(o, i, n, r, e[u + 2], 17, 606105819), r = d(r, o, i, n, e[u + 3], 22, -1044525330), n = d(n, r, o, i, e[u + 4], 7, -176418897), i = d(i, n, r, o, e[u + 5], 12, 1200080426), o = d(o, i, n, r, e[u + 6], 17, -1473231341), r = d(r, o, i, n, e[u + 7], 22, -45705983), n = d(n, r, o, i, e[u + 8], 7, 1770035416), i = d(i, n, r, o, e[u + 9], 12, -1958414417), o = d(o, i, n, r, e[u + 10], 17, -42063), r = d(r, o, i, n, e[u + 11], 22, -1990404162), n = d(n, r, o, i, e[u + 12], 7, 1804603682), i = d(i, n, r, o, e[u + 13], 12, -40341101), o = d(o, i, n, r, e[u + 14], 17, -1502002290), n = h(n, r = d(r, o, i, n, e[u + 15], 22, 1236535329), o, i, e[u + 1], 5, -165796510), i = h(i, n, r, o, e[u + 6], 9, -1069501632), o = h(o, i, n, r, e[u + 11], 14, 643717713), r = h(r, o, i, n, e[u + 0], 20, -373897302), n = h(n, r, o, i, e[u + 5], 5, -701558691), i = h(i, n, r, o, e[u + 10], 9, 38016083), o = h(o, i, n, r, e[u + 15], 14, -660478335), r = h(r, o, i, n, e[u + 4], 20, -405537848), n = h(n, r, o, i, e[u + 9], 5, 568446438), i = h(i, n, r, o, e[u + 14], 9, -1019803690), o = h(o, i, n, r, e[u + 3], 14, -187363961), r = h(r, o, i, n, e[u + 8], 20, 1163531501), n = h(n, r, o, i, e[u + 13], 5, -1444681467), i = h(i, n, r, o, e[u + 2], 9, -51403784), o = h(o, i, n, r, e[u + 7], 14, 1735328473), n = p(n, r = h(r, o, i, n, e[u + 12], 20, -1926607734), o, i, e[u + 5], 4, -378558), i = p(i, n, r, o, e[u + 8], 11, -2022574463), o = p(o, i, n, r, e[u + 11], 16, 1839030562), r = p(r, o, i, n, e[u + 14], 23, -35309556), n = p(n, r, o, i, e[u + 1], 4, -1530992060), i = p(i, n, r, o, e[u + 4], 11, 1272893353), o = p(o, i, n, r, e[u + 7], 16, -155497632), r = p(r, o, i, n, e[u + 10], 23, -1094730640), n = p(n, r, o, i, e[u + 13], 4, 681279174), i = p(i, n, r, o, e[u + 0], 11, -358537222), o = p(o, i, n, r, e[u + 3], 16, -722521979), r = p(r, o, i, n, e[u + 6], 23, 76029189), n = p(n, r, o, i, e[u + 9], 4, -640364487), i = p(i, n, r, o, e[u + 12], 11, -421815835), o = p(o, i, n, r, e[u + 15], 16, 530742520), n = g(n, r = p(r, o, i, n, e[u + 2], 23, -995338651), o, i, e[u + 0], 6, -198630844), i = g(i, n, r, o, e[u + 7], 10, 1126891415), o = g(o, i, n, r, e[u + 14], 15, -1416354905), r = g(r, o, i, n, e[u + 5], 21, -57434055), n = g(n, r, o, i, e[u + 12], 6, 1700485571), i = g(i, n, r, o, e[u + 3], 10, -1894986606), o = g(o, i, n, r, e[u + 10], 15, -1051523), r = g(r, o, i, n, e[u + 1], 21, -2054922799), n = g(n, r, o, i, e[u + 8], 6, 1873313359), i = g(i, n, r, o, e[u + 15], 10, -30611744), o = g(o, i, n, r, e[u + 6], 15, -1560198380), r = g(r, o, i, n, e[u + 13], 21, 1309151649), n = g(n, r, o, i, e[u + 4], 6, -145523070), i = g(i, n, r, o, e[u + 11], 10, -1120210379), o = g(o, i, n, r, e[u + 2], 15, 718787259), r = g(r, o, i, n, e[u + 9], 21, -343485551), n = y(n, a), r = y(r, s), o = y(o, f), i = y(i, c);
                  }

                  return Array(n, r, o, i);
                }

                function l(e, t, n, r, o, i) {
                  return y((u = y(y(t, e), y(r, i))) << (a = o) | u >>> 32 - a, n);
                  var u, a;
                }

                function d(e, t, n, r, o, i, u) {
                  return l(t & n | ~t & r, e, t, o, i, u);
                }

                function h(e, t, n, r, o, i, u) {
                  return l(t & r | n & ~r, e, t, o, i, u);
                }

                function p(e, t, n, r, o, i, u) {
                  return l(t ^ n ^ r, e, t, o, i, u);
                }

                function g(e, t, n, r, o, i, u) {
                  return l(n ^ (t | ~r), e, t, o, i, u);
                }

                function y(e, t) {
                  var n = (65535 & e) + (65535 & t);
                  return (e >> 16) + (t >> 16) + (n >> 16) << 16 | 65535 & n;
                }

                b.exports = function (e) {
                  return f.hash(e, c, 16);
                };
              }).call(this, w("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, w("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/md5.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
            }, {
              "./helpers": 4,
              buffer: 3,
              lYpoI2: 10
            }],
            7: [function (e, l, t) {
              (function (e, t, n, r, o, i, u, a, s) {
                var f;
                f = function (e) {
                  for (var t, n = new Array(e), r = 0; r < e; r++) 0 == (3 & r) && (t = 4294967296 * Math.random()), n[r] = t >>> ((3 & r) << 3) & 255;

                  return n;
                }, l.exports =  f;
              }).call(this, e("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/rng.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
            }, {
              buffer: 3,
              lYpoI2: 10
            }],
            8: [function (l, d, e) {
              (function (e, t, n, r, o, i, u, a, s) {
                var f = l("./helpers");

                function c(e, t) {
                  e[t >> 5] |= 128 << 24 - t % 32, e[15 + (t + 64 >> 9 << 4)] = t;

                  for (var n, r = Array(80), o = 1732584193, i = -271733879, u = -1732584194, a = 271733878, s = -1009589776, f = 0; f < e.length; f += 16) {
                    for (var c = o, l = i, d = u, h = a, p = s, g = 0; g < 80; g++) {
                      r[g] = g < 16 ? e[f + g] : m(r[g - 3] ^ r[g - 8] ^ r[g - 14] ^ r[g - 16], 1);
                      var y = b(b(m(o, 5), w(g, i, u, a)), b(b(s, r[g]), (n = g) < 20 ? 1518500249 : n < 40 ? 1859775393 : n < 60 ? -1894007588 : -899497514));
                      s = a, a = u, u = m(i, 30), i = o, o = y;
                    }

                    o = b(o, c), i = b(i, l), u = b(u, d), a = b(a, h), s = b(s, p);
                  }

                  return Array(o, i, u, a, s);
                }

                function w(e, t, n, r) {
                  return e < 20 ? t & n | ~t & r : !(e < 40) && e < 60 ? t & n | t & r | n & r : t ^ n ^ r;
                }

                function b(e, t) {
                  var n = (65535 & e) + (65535 & t);
                  return (e >> 16) + (t >> 16) + (n >> 16) << 16 | 65535 & n;
                }

                function m(e, t) {
                  return e << t | e >>> 32 - t;
                }

                d.exports = function (e) {
                  return f.hash(e, c, 20, !0);
                };
              }).call(this, l("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, l("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/sha.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
            }, {
              "./helpers": 4,
              buffer: 3,
              lYpoI2: 10
            }],
            9: [function (l, d, e) {
              (function (e, t, n, r, o, i, u, a, s) {
                function B(e, t) {
                  var n = (65535 & e) + (65535 & t);
                  return (e >> 16) + (t >> 16) + (n >> 16) << 16 | 65535 & n;
                }

                function L(e, t) {
                  return e >>> t | e << 32 - t;
                }

                function U(e, t) {
                  return e >>> t;
                }

                function f(e, t) {
                  var n,
                      r,
                      o,
                      i,
                      u,
                      a,
                      s,
                      f,
                      c,
                      l,
                      d,
                      h,
                      p,
                      g,
                      y,
                      w,
                      b,
                      m,
                      v = new Array(1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298),
                      _ = new Array(1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225),
                      E = new Array(64);

                  e[t >> 5] |= 128 << 24 - t % 32, e[15 + (t + 64 >> 9 << 4)] = t;

                  for (var I = 0; I < e.length; I += 16) {
                    n = _[0], r = _[1], o = _[2], i = _[3], u = _[4], a = _[5], s = _[6], f = _[7];

                    for (var A = 0; A < 64; A++) E[A] = A < 16 ? e[A + I] : B(B(B((m = E[A - 2], L(m, 17) ^ L(m, 19) ^ U(m, 10)), E[A - 7]), (b = E[A - 15], L(b, 7) ^ L(b, 18) ^ U(b, 3))), E[A - 16]), c = B(B(B(B(f, L(w = u, 6) ^ L(w, 11) ^ L(w, 25)), (y = u) & a ^ ~y & s), v[A]), E[A]), l = B(L(g = n, 2) ^ L(g, 13) ^ L(g, 22), (d = n) & (h = r) ^ d & (p = o) ^ h & p), f = s, s = a, a = u, u = B(i, c), i = o, o = r, r = n, n = B(c, l);

                    _[0] = B(n, _[0]), _[1] = B(r, _[1]), _[2] = B(o, _[2]), _[3] = B(i, _[3]), _[4] = B(u, _[4]), _[5] = B(a, _[5]), _[6] = B(s, _[6]), _[7] = B(f, _[7]);
                  }

                  return _;
                }

                var c = l("./helpers");

                d.exports = function (e) {
                  return c.hash(e, f, 32, !0);
                };
              }).call(this, l("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, l("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/sha256.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
            }, {
              "./helpers": 4,
              buffer: 3,
              lYpoI2: 10
            }],
            10: [function (e, c, t) {
              (function (e, t, n, r, o, i, u, a, s) {
                function f() {}

                (e = c.exports = {}).nextTick = function () {
                  var e = "undefined" != typeof window && window.setImmediate,
                      t = "undefined" != typeof window && window.postMessage && window.addEventListener;
                  if (e) return function (e) {
                    return window.setImmediate(e);
                  };

                  if (t) {
                    var n = [];
                    return window.addEventListener("message", function (e) {
                      var t = e.source;
                      t !== window && null !== t || "process-tick" !== e.data || (e.stopPropagation(), 0 < n.length && n.shift()());
                    }, !0), function (e) {
                      n.push(e), window.postMessage("process-tick", "*");
                    };
                  }

                  return function (e) {
                    setTimeout(e, 0);
                  };
                }(), e.title = "browser", e.browser = !0, e.env = {}, e.argv = [], e.on = f, e.addListener = f, e.once = f, e.off = f, e.removeListener = f, e.removeAllListeners = f, e.emit = f, e.binding = function (e) {
                  throw new Error("process.binding is not supported");
                }, e.cwd = function () {
                  return "/";
                }, e.chdir = function (e) {
                  throw new Error("process.chdir is not supported");
                };
              }).call(this, e("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/process/browser.js", "/node_modules/gulp-browserify/node_modules/process");
            }, {
              buffer: 3,
              lYpoI2: 10
            }],
            11: [function (e, t, f) {
              (function (e, t, n, r, o, i, u, a, s) {
                f.read = function (e, t, n, r, o) {
                  var i,
                      u,
                      a = 8 * o - r - 1,
                      s = (1 << a) - 1,
                      f = s >> 1,
                      c = -7,
                      l = n ? o - 1 : 0,
                      d = n ? -1 : 1,
                      h = e[t + l];

                  for (l += d, i = h & (1 << -c) - 1, h >>= -c, c += a; 0 < c; i = 256 * i + e[t + l], l += d, c -= 8);

                  for (u = i & (1 << -c) - 1, i >>= -c, c += r; 0 < c; u = 256 * u + e[t + l], l += d, c -= 8);

                  if (0 === i) i = 1 - f;else {
                    if (i === s) return u ? NaN : 1 / 0 * (h ? -1 : 1);
                    u += Math.pow(2, r), i -= f;
                  }
                  return (h ? -1 : 1) * u * Math.pow(2, i - r);
                }, f.write = function (e, t, n, r, o, i) {
                  var u,
                      a,
                      s,
                      f = 8 * i - o - 1,
                      c = (1 << f) - 1,
                      l = c >> 1,
                      d = 23 === o ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
                      h = r ? 0 : i - 1,
                      p = r ? 1 : -1,
                      g = t < 0 || 0 === t && 1 / t < 0 ? 1 : 0;

                  for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (a = isNaN(t) ? 1 : 0, u = c) : (u = Math.floor(Math.log(t) / Math.LN2), t * (s = Math.pow(2, -u)) < 1 && (u--, s *= 2), 2 <= (t += 1 <= u + l ? d / s : d * Math.pow(2, 1 - l)) * s && (u++, s /= 2), c <= u + l ? (a = 0, u = c) : 1 <= u + l ? (a = (t * s - 1) * Math.pow(2, o), u += l) : (a = t * Math.pow(2, l - 1) * Math.pow(2, o), u = 0)); 8 <= o; e[n + h] = 255 & a, h += p, a /= 256, o -= 8);

                  for (u = u << o | a, f += o; 0 < f; e[n + h] = 255 & u, h += p, u /= 256, f -= 8);

                  e[n + h - p] |= 128 * g;
                };
              }).call(this, e("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/ieee754/index.js", "/node_modules/ieee754");
            }, {
              buffer: 3,
              lYpoI2: 10
            }]
          }, {}, [1])(1);
        });
      });

      var object_hash$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), object_hash, {
        'default': object_hash,
        __moduleExports: object_hash
      }));

      var encoder = createCommonjsModule(function (module) {

        function JPEGEncoder(quality) {
          var ffloor = Math.floor;
          var YTable = new Array(64);
          var UVTable = new Array(64);
          var fdtbl_Y = new Array(64);
          var fdtbl_UV = new Array(64);
          var YDC_HT;
          var UVDC_HT;
          var YAC_HT;
          var UVAC_HT;
          var bitcode = new Array(65535);
          var category = new Array(65535);
          var outputfDCTQuant = new Array(64);
          var DU = new Array(64);
          var byteout = [];
          var bytenew = 0;
          var bytepos = 7;
          var YDU = new Array(64);
          var UDU = new Array(64);
          var VDU = new Array(64);
          var clt = new Array(256);
          var RGB_YUV_TABLE = new Array(2048);
          var currentQuality;
          var ZigZag = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63];
          var std_dc_luminance_nrcodes = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];
          var std_dc_luminance_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
          var std_ac_luminance_nrcodes = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d];
          var std_ac_luminance_values = [0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa];
          var std_dc_chrominance_nrcodes = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0];
          var std_dc_chrominance_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
          var std_ac_chrominance_nrcodes = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77];
          var std_ac_chrominance_values = [0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0, 0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa];

          function initQuantTables(sf) {
            var YQT = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99];

            for (var i = 0; i < 64; i++) {
              var t = ffloor((YQT[i] * sf + 50) / 100);

              if (t < 1) {
                t = 1;
              } else if (t > 255) {
                t = 255;
              }

              YTable[ZigZag[i]] = t;
            }

            var UVQT = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99];

            for (var j = 0; j < 64; j++) {
              var u = ffloor((UVQT[j] * sf + 50) / 100);

              if (u < 1) {
                u = 1;
              } else if (u > 255) {
                u = 255;
              }

              UVTable[ZigZag[j]] = u;
            }

            var aasf = [1.0, 1.387039845, 1.306562965, 1.175875602, 1.0, 0.785694958, 0.541196100, 0.275899379];
            var k = 0;

            for (var row = 0; row < 8; row++) {
              for (var col = 0; col < 8; col++) {
                fdtbl_Y[k] = 1.0 / (YTable[ZigZag[k]] * aasf[row] * aasf[col] * 8.0);
                fdtbl_UV[k] = 1.0 / (UVTable[ZigZag[k]] * aasf[row] * aasf[col] * 8.0);
                k++;
              }
            }
          }

          function computeHuffmanTbl(nrcodes, std_table) {
            var codevalue = 0;
            var pos_in_table = 0;
            var HT = new Array();

            for (var k = 1; k <= 16; k++) {
              for (var j = 1; j <= nrcodes[k]; j++) {
                HT[std_table[pos_in_table]] = [];
                HT[std_table[pos_in_table]][0] = codevalue;
                HT[std_table[pos_in_table]][1] = k;
                pos_in_table++;
                codevalue++;
              }

              codevalue *= 2;
            }

            return HT;
          }

          function initHuffmanTbl() {
            YDC_HT = computeHuffmanTbl(std_dc_luminance_nrcodes, std_dc_luminance_values);
            UVDC_HT = computeHuffmanTbl(std_dc_chrominance_nrcodes, std_dc_chrominance_values);
            YAC_HT = computeHuffmanTbl(std_ac_luminance_nrcodes, std_ac_luminance_values);
            UVAC_HT = computeHuffmanTbl(std_ac_chrominance_nrcodes, std_ac_chrominance_values);
          }

          function initCategoryNumber() {
            var nrlower = 1;
            var nrupper = 2;

            for (var cat = 1; cat <= 15; cat++) {
              //Positive numbers
              for (var nr = nrlower; nr < nrupper; nr++) {
                category[32767 + nr] = cat;
                bitcode[32767 + nr] = [];
                bitcode[32767 + nr][1] = cat;
                bitcode[32767 + nr][0] = nr;
              } //Negative numbers


              for (var nrneg = -(nrupper - 1); nrneg <= -nrlower; nrneg++) {
                category[32767 + nrneg] = cat;
                bitcode[32767 + nrneg] = [];
                bitcode[32767 + nrneg][1] = cat;
                bitcode[32767 + nrneg][0] = nrupper - 1 + nrneg;
              }

              nrlower <<= 1;
              nrupper <<= 1;
            }
          }

          function initRGBYUVTable() {
            for (var i = 0; i < 256; i++) {
              RGB_YUV_TABLE[i] = 19595 * i;
              RGB_YUV_TABLE[i + 256 >> 0] = 38470 * i;
              RGB_YUV_TABLE[i + 512 >> 0] = 7471 * i + 0x8000;
              RGB_YUV_TABLE[i + 768 >> 0] = -11059 * i;
              RGB_YUV_TABLE[i + 1024 >> 0] = -21709 * i;
              RGB_YUV_TABLE[i + 1280 >> 0] = 32768 * i + 0x807FFF;
              RGB_YUV_TABLE[i + 1536 >> 0] = -27439 * i;
              RGB_YUV_TABLE[i + 1792 >> 0] = -5329 * i;
            }
          } // IO functions


          function writeBits(bs) {
            var value = bs[0];
            var posval = bs[1] - 1;

            while (posval >= 0) {
              if (value & 1 << posval) {
                bytenew |= 1 << bytepos;
              }

              posval--;
              bytepos--;

              if (bytepos < 0) {
                if (bytenew == 0xFF) {
                  writeByte(0xFF);
                  writeByte(0);
                } else {
                  writeByte(bytenew);
                }

                bytepos = 7;
                bytenew = 0;
              }
            }
          }

          function writeByte(value) {
            //byteout.push(clt[value]); // write char directly instead of converting later
            byteout.push(value);
          }

          function writeWord(value) {
            writeByte(value >> 8 & 0xFF);
            writeByte(value & 0xFF);
          } // DCT & quantization core


          function fDCTQuant(data, fdtbl) {
            var d0, d1, d2, d3, d4, d5, d6, d7;
            /* Pass 1: process rows. */

            var dataOff = 0;
            var i;
            var I8 = 8;
            var I64 = 64;

            for (i = 0; i < I8; ++i) {
              d0 = data[dataOff];
              d1 = data[dataOff + 1];
              d2 = data[dataOff + 2];
              d3 = data[dataOff + 3];
              d4 = data[dataOff + 4];
              d5 = data[dataOff + 5];
              d6 = data[dataOff + 6];
              d7 = data[dataOff + 7];
              var tmp0 = d0 + d7;
              var tmp7 = d0 - d7;
              var tmp1 = d1 + d6;
              var tmp6 = d1 - d6;
              var tmp2 = d2 + d5;
              var tmp5 = d2 - d5;
              var tmp3 = d3 + d4;
              var tmp4 = d3 - d4;
              /* Even part */

              var tmp10 = tmp0 + tmp3;
              /* phase 2 */

              var tmp13 = tmp0 - tmp3;
              var tmp11 = tmp1 + tmp2;
              var tmp12 = tmp1 - tmp2;
              data[dataOff] = tmp10 + tmp11;
              /* phase 3 */

              data[dataOff + 4] = tmp10 - tmp11;
              var z1 = (tmp12 + tmp13) * 0.707106781;
              /* c4 */

              data[dataOff + 2] = tmp13 + z1;
              /* phase 5 */

              data[dataOff + 6] = tmp13 - z1;
              /* Odd part */

              tmp10 = tmp4 + tmp5;
              /* phase 2 */

              tmp11 = tmp5 + tmp6;
              tmp12 = tmp6 + tmp7;
              /* The rotator is modified from fig 4-8 to avoid extra negations. */

              var z5 = (tmp10 - tmp12) * 0.382683433;
              /* c6 */

              var z2 = 0.541196100 * tmp10 + z5;
              /* c2-c6 */

              var z4 = 1.306562965 * tmp12 + z5;
              /* c2+c6 */

              var z3 = tmp11 * 0.707106781;
              /* c4 */

              var z11 = tmp7 + z3;
              /* phase 5 */

              var z13 = tmp7 - z3;
              data[dataOff + 5] = z13 + z2;
              /* phase 6 */

              data[dataOff + 3] = z13 - z2;
              data[dataOff + 1] = z11 + z4;
              data[dataOff + 7] = z11 - z4;
              dataOff += 8;
              /* advance pointer to next row */
            }
            /* Pass 2: process columns. */


            dataOff = 0;

            for (i = 0; i < I8; ++i) {
              d0 = data[dataOff];
              d1 = data[dataOff + 8];
              d2 = data[dataOff + 16];
              d3 = data[dataOff + 24];
              d4 = data[dataOff + 32];
              d5 = data[dataOff + 40];
              d6 = data[dataOff + 48];
              d7 = data[dataOff + 56];
              var tmp0p2 = d0 + d7;
              var tmp7p2 = d0 - d7;
              var tmp1p2 = d1 + d6;
              var tmp6p2 = d1 - d6;
              var tmp2p2 = d2 + d5;
              var tmp5p2 = d2 - d5;
              var tmp3p2 = d3 + d4;
              var tmp4p2 = d3 - d4;
              /* Even part */

              var tmp10p2 = tmp0p2 + tmp3p2;
              /* phase 2 */

              var tmp13p2 = tmp0p2 - tmp3p2;
              var tmp11p2 = tmp1p2 + tmp2p2;
              var tmp12p2 = tmp1p2 - tmp2p2;
              data[dataOff] = tmp10p2 + tmp11p2;
              /* phase 3 */

              data[dataOff + 32] = tmp10p2 - tmp11p2;
              var z1p2 = (tmp12p2 + tmp13p2) * 0.707106781;
              /* c4 */

              data[dataOff + 16] = tmp13p2 + z1p2;
              /* phase 5 */

              data[dataOff + 48] = tmp13p2 - z1p2;
              /* Odd part */

              tmp10p2 = tmp4p2 + tmp5p2;
              /* phase 2 */

              tmp11p2 = tmp5p2 + tmp6p2;
              tmp12p2 = tmp6p2 + tmp7p2;
              /* The rotator is modified from fig 4-8 to avoid extra negations. */

              var z5p2 = (tmp10p2 - tmp12p2) * 0.382683433;
              /* c6 */

              var z2p2 = 0.541196100 * tmp10p2 + z5p2;
              /* c2-c6 */

              var z4p2 = 1.306562965 * tmp12p2 + z5p2;
              /* c2+c6 */

              var z3p2 = tmp11p2 * 0.707106781;
              /* c4 */

              var z11p2 = tmp7p2 + z3p2;
              /* phase 5 */

              var z13p2 = tmp7p2 - z3p2;
              data[dataOff + 40] = z13p2 + z2p2;
              /* phase 6 */

              data[dataOff + 24] = z13p2 - z2p2;
              data[dataOff + 8] = z11p2 + z4p2;
              data[dataOff + 56] = z11p2 - z4p2;
              dataOff++;
              /* advance pointer to next column */
            } // Quantize/descale the coefficients


            var fDCTQuant;

            for (i = 0; i < I64; ++i) {
              // Apply the quantization and scaling factor & Round to nearest integer
              fDCTQuant = data[i] * fdtbl[i];
              outputfDCTQuant[i] = fDCTQuant > 0.0 ? fDCTQuant + 0.5 | 0 : fDCTQuant - 0.5 | 0; //outputfDCTQuant[i] = fround(fDCTQuant);
            }

            return outputfDCTQuant;
          }

          function writeAPP0() {
            writeWord(0xFFE0); // marker

            writeWord(16); // length

            writeByte(0x4A); // J

            writeByte(0x46); // F

            writeByte(0x49); // I

            writeByte(0x46); // F

            writeByte(0); // = "JFIF",'\0'

            writeByte(1); // versionhi

            writeByte(1); // versionlo

            writeByte(0); // xyunits

            writeWord(1); // xdensity

            writeWord(1); // ydensity

            writeByte(0); // thumbnwidth

            writeByte(0); // thumbnheight
          }

          function writeAPP1(exifBuffer) {
            if (!exifBuffer) return;
            writeWord(0xFFE1); // APP1 marker

            if (exifBuffer[0] === 0x45 && exifBuffer[1] === 0x78 && exifBuffer[2] === 0x69 && exifBuffer[3] === 0x66) {
              // Buffer already starts with EXIF, just use it directly
              writeWord(exifBuffer.length + 2); // length is buffer + length itself!
            } else {
              // Buffer doesn't start with EXIF, write it for them
              writeWord(exifBuffer.length + 5 + 2); // length is buffer + EXIF\0 + length itself!

              writeByte(0x45); // E

              writeByte(0x78); // X

              writeByte(0x69); // I

              writeByte(0x66); // F

              writeByte(0); // = "EXIF",'\0'
            }

            for (var i = 0; i < exifBuffer.length; i++) {
              writeByte(exifBuffer[i]);
            }
          }

          function writeSOF0(width, height) {
            writeWord(0xFFC0); // marker

            writeWord(17); // length, truecolor YUV JPG

            writeByte(8); // precision

            writeWord(height);
            writeWord(width);
            writeByte(3); // nrofcomponents

            writeByte(1); // IdY

            writeByte(0x11); // HVY

            writeByte(0); // QTY

            writeByte(2); // IdU

            writeByte(0x11); // HVU

            writeByte(1); // QTU

            writeByte(3); // IdV

            writeByte(0x11); // HVV

            writeByte(1); // QTV
          }

          function writeDQT() {
            writeWord(0xFFDB); // marker

            writeWord(132); // length

            writeByte(0);

            for (var i = 0; i < 64; i++) {
              writeByte(YTable[i]);
            }

            writeByte(1);

            for (var j = 0; j < 64; j++) {
              writeByte(UVTable[j]);
            }
          }

          function writeDHT() {
            writeWord(0xFFC4); // marker

            writeWord(0x01A2); // length

            writeByte(0); // HTYDCinfo

            for (var i = 0; i < 16; i++) {
              writeByte(std_dc_luminance_nrcodes[i + 1]);
            }

            for (var j = 0; j <= 11; j++) {
              writeByte(std_dc_luminance_values[j]);
            }

            writeByte(0x10); // HTYACinfo

            for (var k = 0; k < 16; k++) {
              writeByte(std_ac_luminance_nrcodes[k + 1]);
            }

            for (var l = 0; l <= 161; l++) {
              writeByte(std_ac_luminance_values[l]);
            }

            writeByte(1); // HTUDCinfo

            for (var m = 0; m < 16; m++) {
              writeByte(std_dc_chrominance_nrcodes[m + 1]);
            }

            for (var n = 0; n <= 11; n++) {
              writeByte(std_dc_chrominance_values[n]);
            }

            writeByte(0x11); // HTUACinfo

            for (var o = 0; o < 16; o++) {
              writeByte(std_ac_chrominance_nrcodes[o + 1]);
            }

            for (var p = 0; p <= 161; p++) {
              writeByte(std_ac_chrominance_values[p]);
            }
          }

          function writeSOS() {
            writeWord(0xFFDA); // marker

            writeWord(12); // length

            writeByte(3); // nrofcomponents

            writeByte(1); // IdY

            writeByte(0); // HTY

            writeByte(2); // IdU

            writeByte(0x11); // HTU

            writeByte(3); // IdV

            writeByte(0x11); // HTV

            writeByte(0); // Ss

            writeByte(0x3f); // Se

            writeByte(0); // Bf
          }

          function processDU(CDU, fdtbl, DC, HTDC, HTAC) {
            var EOB = HTAC[0x00];
            var M16zeroes = HTAC[0xF0];
            var pos;
            var I16 = 16;
            var I63 = 63;
            var I64 = 64;
            var DU_DCT = fDCTQuant(CDU, fdtbl); //ZigZag reorder

            for (var j = 0; j < I64; ++j) {
              DU[ZigZag[j]] = DU_DCT[j];
            }

            var Diff = DU[0] - DC;
            DC = DU[0]; //Encode DC

            if (Diff == 0) {
              writeBits(HTDC[0]); // Diff might be 0
            } else {
              pos = 32767 + Diff;
              writeBits(HTDC[category[pos]]);
              writeBits(bitcode[pos]);
            } //Encode ACs


            var end0pos = 63; // was const... which is crazy

            for (; end0pos > 0 && DU[end0pos] == 0; end0pos--) {}

            if (end0pos == 0) {
              writeBits(EOB);
              return DC;
            }

            var i = 1;
            var lng;

            while (i <= end0pos) {
              var startpos = i;

              for (; DU[i] == 0 && i <= end0pos; ++i) {}

              var nrzeroes = i - startpos;

              if (nrzeroes >= I16) {
                lng = nrzeroes >> 4;

                for (var nrmarker = 1; nrmarker <= lng; ++nrmarker) writeBits(M16zeroes);

                nrzeroes = nrzeroes & 0xF;
              }

              pos = 32767 + DU[i];
              writeBits(HTAC[(nrzeroes << 4) + category[pos]]);
              writeBits(bitcode[pos]);
              i++;
            }

            if (end0pos != I63) {
              writeBits(EOB);
            }

            return DC;
          }

          function initCharLookupTable() {
            var sfcc = String.fromCharCode;

            for (var i = 0; i < 256; i++) {
              ///// ACHTUNG // 255
              clt[i] = sfcc(i);
            }
          }

          this.encode = function (image, quality) // image data object
          {
            var time_start = new Date().getTime();
            if (quality) setQuality(quality); // Initialize bit writer

            byteout = new Array();
            bytenew = 0;
            bytepos = 7; // Add JPEG headers

            writeWord(0xFFD8); // SOI

            writeAPP0();
            writeAPP1(image.exifBuffer);
            writeDQT();
            writeSOF0(image.width, image.height);
            writeDHT();
            writeSOS(); // Encode 8x8 macroblocks

            var DCY = 0;
            var DCU = 0;
            var DCV = 0;
            bytenew = 0;
            bytepos = 7;
            this.encode.displayName = "_encode_";
            var imageData = image.data;
            var width = image.width;
            var height = image.height;
            var quadWidth = width * 4;
            var x,
                y = 0;
            var r, g, b;
            var start, p, col, row, pos;

            while (y < height) {
              x = 0;

              while (x < quadWidth) {
                start = quadWidth * y + x;
                p = start;
                col = -1;
                row = 0;

                for (pos = 0; pos < 64; pos++) {
                  row = pos >> 3; // /8

                  col = (pos & 7) * 4; // %8

                  p = start + row * quadWidth + col;

                  if (y + row >= height) {
                    // padding bottom
                    p -= quadWidth * (y + 1 + row - height);
                  }

                  if (x + col >= quadWidth) {
                    // padding right	
                    p -= x + col - quadWidth + 4;
                  }

                  r = imageData[p++];
                  g = imageData[p++];
                  b = imageData[p++];
                  /* // calculate YUV values dynamically
                  YDU[pos]=((( 0.29900)*r+( 0.58700)*g+( 0.11400)*b))-128; //-0x80
                  UDU[pos]=(((-0.16874)*r+(-0.33126)*g+( 0.50000)*b));
                  VDU[pos]=((( 0.50000)*r+(-0.41869)*g+(-0.08131)*b));
                  */
                  // use lookup table (slightly faster)

                  YDU[pos] = (RGB_YUV_TABLE[r] + RGB_YUV_TABLE[g + 256 >> 0] + RGB_YUV_TABLE[b + 512 >> 0] >> 16) - 128;
                  UDU[pos] = (RGB_YUV_TABLE[r + 768 >> 0] + RGB_YUV_TABLE[g + 1024 >> 0] + RGB_YUV_TABLE[b + 1280 >> 0] >> 16) - 128;
                  VDU[pos] = (RGB_YUV_TABLE[r + 1280 >> 0] + RGB_YUV_TABLE[g + 1536 >> 0] + RGB_YUV_TABLE[b + 1792 >> 0] >> 16) - 128;
                }

                DCY = processDU(YDU, fdtbl_Y, DCY, YDC_HT, YAC_HT);
                DCU = processDU(UDU, fdtbl_UV, DCU, UVDC_HT, UVAC_HT);
                DCV = processDU(VDU, fdtbl_UV, DCV, UVDC_HT, UVAC_HT);
                x += 32;
              }

              y += 8;
            } ////////////////////////////////////////////////////////////////
            // Do the bit alignment of the EOI marker


            if (bytepos >= 0) {
              var fillbits = [];
              fillbits[1] = bytepos + 1;
              fillbits[0] = (1 << bytepos + 1) - 1;
              writeBits(fillbits);
            }

            writeWord(0xFFD9); //EOI
            return new Buffer(byteout);
          };

          function setQuality(quality) {
            if (quality <= 0) {
              quality = 1;
            }

            if (quality > 100) {
              quality = 100;
            }

            if (currentQuality == quality) return; // don't recalc if unchanged

            var sf = 0;

            if (quality < 50) {
              sf = Math.floor(5000 / quality);
            } else {
              sf = Math.floor(200 - quality * 2);
            }

            initQuantTables(sf);
            currentQuality = quality; //console.log('Quality set to: '+quality +'%');
          }

          function init() {
            var time_start = new Date().getTime();
            if (!quality) quality = 50; // Create tables

            initCharLookupTable();
            initHuffmanTbl();
            initCategoryNumber();
            initRGBYUVTable();
            setQuality(quality);
            var duration = new Date().getTime() - time_start; //console.log('Initialization '+ duration + 'ms');
          }

          init();
        }

        {
          module.exports = encode;
        }

        function encode(imgData, qu) {
          if (typeof qu === 'undefined') qu = 50;
          var encoder = new JPEGEncoder(qu);
          var data = encoder.encode(imgData, qu);
          return {
            data: data,
            width: imgData.width,
            height: imgData.height
          };
        } // helper function to get the imageData of an existing image on the current page.
      });

      var decoder = createCommonjsModule(function (module) {
        /* -*- tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- /
        /* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */

        /*
           Copyright 2011 notmasteryet
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        */
        // - The JPEG specification can be found in the ITU CCITT Recommendation T.81
        //   (www.w3.org/Graphics/JPEG/itu-t81.pdf)
        // - The JFIF specification can be found in the JPEG File Interchange Format
        //   (www.w3.org/Graphics/JPEG/jfif3.pdf)
        // - The Adobe Application-Specific JPEG markers in the Supporting the DCT Filters
        //   in PostScript Level 2, Technical Note #5116
        //   (partners.adobe.com/public/developer/en/ps/sdk/5116.DCT_Filter.pdf)
        var JpegImage = function jpegImage() {

          var dctZigZag = new Int32Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]);
          var dctCos1 = 4017; // cos(pi/16)

          var dctSin1 = 799; // sin(pi/16)

          var dctCos3 = 3406; // cos(3*pi/16)

          var dctSin3 = 2276; // sin(3*pi/16)

          var dctCos6 = 1567; // cos(6*pi/16)

          var dctSin6 = 3784; // sin(6*pi/16)

          var dctSqrt2 = 5793; // sqrt(2)

          var dctSqrt1d2 = 2896; // sqrt(2) / 2

          function constructor() {}

          function buildHuffmanTable(codeLengths, values) {
            var k = 0,
                code = [],
                i,
                j,
                length = 16;

            while (length > 0 && !codeLengths[length - 1]) length--;

            code.push({
              children: [],
              index: 0
            });
            var p = code[0],
                q;

            for (i = 0; i < length; i++) {
              for (j = 0; j < codeLengths[i]; j++) {
                p = code.pop();
                p.children[p.index] = values[k];

                while (p.index > 0) {
                  if (code.length === 0) throw new Error('Could not recreate Huffman Table');
                  p = code.pop();
                }

                p.index++;
                code.push(p);

                while (code.length <= i) {
                  code.push(q = {
                    children: [],
                    index: 0
                  });
                  p.children[p.index] = q.children;
                  p = q;
                }

                k++;
              }

              if (i + 1 < length) {
                // p here points to last code
                code.push(q = {
                  children: [],
                  index: 0
                });
                p.children[p.index] = q.children;
                p = q;
              }
            }

            return code[0].children;
          }

          function decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive, opts) {
            var precision = frame.precision;
            var samplesPerLine = frame.samplesPerLine;
            var scanLines = frame.scanLines;
            var mcusPerLine = frame.mcusPerLine;
            var progressive = frame.progressive;
            var maxH = frame.maxH,
                maxV = frame.maxV;
            var startOffset = offset,
                bitsData = 0,
                bitsCount = 0;

            function readBit() {
              if (bitsCount > 0) {
                bitsCount--;
                return bitsData >> bitsCount & 1;
              }

              bitsData = data[offset++];

              if (bitsData == 0xFF) {
                var nextByte = data[offset++];

                if (nextByte) {
                  throw new Error("unexpected marker: " + (bitsData << 8 | nextByte).toString(16));
                } // unstuff 0

              }

              bitsCount = 7;
              return bitsData >>> 7;
            }

            function decodeHuffman(tree) {
              var node = tree,
                  bit;

              while ((bit = readBit()) !== null) {
                node = node[bit];
                if (typeof node === 'number') return node;
                if (typeof node !== 'object') throw new Error("invalid huffman sequence");
              }

              return null;
            }

            function receive(length) {
              var n = 0;

              while (length > 0) {
                var bit = readBit();
                if (bit === null) return;
                n = n << 1 | bit;
                length--;
              }

              return n;
            }

            function receiveAndExtend(length) {
              var n = receive(length);
              if (n >= 1 << length - 1) return n;
              return n + (-1 << length) + 1;
            }

            function decodeBaseline(component, zz) {
              var t = decodeHuffman(component.huffmanTableDC);
              var diff = t === 0 ? 0 : receiveAndExtend(t);
              zz[0] = component.pred += diff;
              var k = 1;

              while (k < 64) {
                var rs = decodeHuffman(component.huffmanTableAC);
                var s = rs & 15,
                    r = rs >> 4;

                if (s === 0) {
                  if (r < 15) break;
                  k += 16;
                  continue;
                }

                k += r;
                var z = dctZigZag[k];
                zz[z] = receiveAndExtend(s);
                k++;
              }
            }

            function decodeDCFirst(component, zz) {
              var t = decodeHuffman(component.huffmanTableDC);
              var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;
              zz[0] = component.pred += diff;
            }

            function decodeDCSuccessive(component, zz) {
              zz[0] |= readBit() << successive;
            }

            var eobrun = 0;

            function decodeACFirst(component, zz) {
              if (eobrun > 0) {
                eobrun--;
                return;
              }

              var k = spectralStart,
                  e = spectralEnd;

              while (k <= e) {
                var rs = decodeHuffman(component.huffmanTableAC);
                var s = rs & 15,
                    r = rs >> 4;

                if (s === 0) {
                  if (r < 15) {
                    eobrun = receive(r) + (1 << r) - 1;
                    break;
                  }

                  k += 16;
                  continue;
                }

                k += r;
                var z = dctZigZag[k];
                zz[z] = receiveAndExtend(s) * (1 << successive);
                k++;
              }
            }

            var successiveACState = 0,
                successiveACNextValue;

            function decodeACSuccessive(component, zz) {
              var k = spectralStart,
                  e = spectralEnd,
                  r = 0;

              while (k <= e) {
                var z = dctZigZag[k];
                var direction = zz[z] < 0 ? -1 : 1;

                switch (successiveACState) {
                  case 0:
                    // initial state
                    var rs = decodeHuffman(component.huffmanTableAC);
                    var s = rs & 15,
                        r = rs >> 4;

                    if (s === 0) {
                      if (r < 15) {
                        eobrun = receive(r) + (1 << r);
                        successiveACState = 4;
                      } else {
                        r = 16;
                        successiveACState = 1;
                      }
                    } else {
                      if (s !== 1) throw new Error("invalid ACn encoding");
                      successiveACNextValue = receiveAndExtend(s);
                      successiveACState = r ? 2 : 3;
                    }

                    continue;

                  case 1: // skipping r zero items

                  case 2:
                    if (zz[z]) zz[z] += (readBit() << successive) * direction;else {
                      r--;
                      if (r === 0) successiveACState = successiveACState == 2 ? 3 : 0;
                    }
                    break;

                  case 3:
                    // set value for a zero item
                    if (zz[z]) zz[z] += (readBit() << successive) * direction;else {
                      zz[z] = successiveACNextValue << successive;
                      successiveACState = 0;
                    }
                    break;

                  case 4:
                    // eob
                    if (zz[z]) zz[z] += (readBit() << successive) * direction;
                    break;
                }

                k++;
              }

              if (successiveACState === 4) {
                eobrun--;
                if (eobrun === 0) successiveACState = 0;
              }
            }

            function decodeMcu(component, decode, mcu, row, col) {
              var mcuRow = mcu / mcusPerLine | 0;
              var mcuCol = mcu % mcusPerLine;
              var blockRow = mcuRow * component.v + row;
              var blockCol = mcuCol * component.h + col; // If the block is missing and we're in tolerant mode, just skip it.

              if (component.blocks[blockRow] === undefined && opts.tolerantDecoding) return;
              decode(component, component.blocks[blockRow][blockCol]);
            }

            function decodeBlock(component, decode, mcu) {
              var blockRow = mcu / component.blocksPerLine | 0;
              var blockCol = mcu % component.blocksPerLine; // If the block is missing and we're in tolerant mode, just skip it.

              if (component.blocks[blockRow] === undefined && opts.tolerantDecoding) return;
              decode(component, component.blocks[blockRow][blockCol]);
            }

            var componentsLength = components.length;
            var component, i, j, k, n;
            var decodeFn;

            if (progressive) {
              if (spectralStart === 0) decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;else decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;
            } else {
              decodeFn = decodeBaseline;
            }

            var mcu = 0,
                marker;
            var mcuExpected;

            if (componentsLength == 1) {
              mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;
            } else {
              mcuExpected = mcusPerLine * frame.mcusPerColumn;
            }

            if (!resetInterval) resetInterval = mcuExpected;
            var h, v;

            while (mcu < mcuExpected) {
              // reset interval stuff
              for (i = 0; i < componentsLength; i++) components[i].pred = 0;

              eobrun = 0;

              if (componentsLength == 1) {
                component = components[0];

                for (n = 0; n < resetInterval; n++) {
                  decodeBlock(component, decodeFn, mcu);
                  mcu++;
                }
              } else {
                for (n = 0; n < resetInterval; n++) {
                  for (i = 0; i < componentsLength; i++) {
                    component = components[i];
                    h = component.h;
                    v = component.v;

                    for (j = 0; j < v; j++) {
                      for (k = 0; k < h; k++) {
                        decodeMcu(component, decodeFn, mcu, j, k);
                      }
                    }
                  }

                  mcu++; // If we've reached our expected MCU's, stop decoding

                  if (mcu === mcuExpected) break;
                }
              }

              if (mcu === mcuExpected) {
                // Skip trailing bytes at the end of the scan - until we reach the next marker
                do {
                  if (data[offset] === 0xFF) {
                    if (data[offset + 1] !== 0x00) {
                      break;
                    }
                  }

                  offset += 1;
                } while (offset < data.length - 2);
              } // find marker


              bitsCount = 0;
              marker = data[offset] << 8 | data[offset + 1];

              if (marker < 0xFF00) {
                throw new Error("marker was not found");
              }

              if (marker >= 0xFFD0 && marker <= 0xFFD7) {
                // RSTx
                offset += 2;
              } else break;
            }

            return offset - startOffset;
          }

          function buildComponentData(frame, component) {
            var lines = [];
            var blocksPerLine = component.blocksPerLine;
            var blocksPerColumn = component.blocksPerColumn;
            var samplesPerLine = blocksPerLine << 3; // Only 1 used per invocation of this function and garbage collected after invocation, so no need to account for its memory footprint.

            var R = new Int32Array(64),
                r = new Uint8Array(64); // A port of poppler's IDCT method which in turn is taken from:
            //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,
            //   "Practical Fast 1-D DCT Algorithms with 11 Multiplications",
            //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,
            //   988-991.

            function quantizeAndInverse(zz, dataOut, dataIn) {
              var qt = component.quantizationTable;
              var v0, v1, v2, v3, v4, v5, v6, v7, t;
              var p = dataIn;
              var i; // dequant

              for (i = 0; i < 64; i++) p[i] = zz[i] * qt[i]; // inverse DCT on rows


              for (i = 0; i < 8; ++i) {
                var row = 8 * i; // check for all-zero AC coefficients

                if (p[1 + row] == 0 && p[2 + row] == 0 && p[3 + row] == 0 && p[4 + row] == 0 && p[5 + row] == 0 && p[6 + row] == 0 && p[7 + row] == 0) {
                  t = dctSqrt2 * p[0 + row] + 512 >> 10;
                  p[0 + row] = t;
                  p[1 + row] = t;
                  p[2 + row] = t;
                  p[3 + row] = t;
                  p[4 + row] = t;
                  p[5 + row] = t;
                  p[6 + row] = t;
                  p[7 + row] = t;
                  continue;
                } // stage 4


                v0 = dctSqrt2 * p[0 + row] + 128 >> 8;
                v1 = dctSqrt2 * p[4 + row] + 128 >> 8;
                v2 = p[2 + row];
                v3 = p[6 + row];
                v4 = dctSqrt1d2 * (p[1 + row] - p[7 + row]) + 128 >> 8;
                v7 = dctSqrt1d2 * (p[1 + row] + p[7 + row]) + 128 >> 8;
                v5 = p[3 + row] << 4;
                v6 = p[5 + row] << 4; // stage 3

                t = v0 - v1 + 1 >> 1;
                v0 = v0 + v1 + 1 >> 1;
                v1 = t;
                t = v2 * dctSin6 + v3 * dctCos6 + 128 >> 8;
                v2 = v2 * dctCos6 - v3 * dctSin6 + 128 >> 8;
                v3 = t;
                t = v4 - v6 + 1 >> 1;
                v4 = v4 + v6 + 1 >> 1;
                v6 = t;
                t = v7 + v5 + 1 >> 1;
                v5 = v7 - v5 + 1 >> 1;
                v7 = t; // stage 2

                t = v0 - v3 + 1 >> 1;
                v0 = v0 + v3 + 1 >> 1;
                v3 = t;
                t = v1 - v2 + 1 >> 1;
                v1 = v1 + v2 + 1 >> 1;
                v2 = t;
                t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;
                v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;
                v7 = t;
                t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;
                v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;
                v6 = t; // stage 1

                p[0 + row] = v0 + v7;
                p[7 + row] = v0 - v7;
                p[1 + row] = v1 + v6;
                p[6 + row] = v1 - v6;
                p[2 + row] = v2 + v5;
                p[5 + row] = v2 - v5;
                p[3 + row] = v3 + v4;
                p[4 + row] = v3 - v4;
              } // inverse DCT on columns


              for (i = 0; i < 8; ++i) {
                var col = i; // check for all-zero AC coefficients

                if (p[1 * 8 + col] == 0 && p[2 * 8 + col] == 0 && p[3 * 8 + col] == 0 && p[4 * 8 + col] == 0 && p[5 * 8 + col] == 0 && p[6 * 8 + col] == 0 && p[7 * 8 + col] == 0) {
                  t = dctSqrt2 * dataIn[i + 0] + 8192 >> 14;
                  p[0 * 8 + col] = t;
                  p[1 * 8 + col] = t;
                  p[2 * 8 + col] = t;
                  p[3 * 8 + col] = t;
                  p[4 * 8 + col] = t;
                  p[5 * 8 + col] = t;
                  p[6 * 8 + col] = t;
                  p[7 * 8 + col] = t;
                  continue;
                } // stage 4


                v0 = dctSqrt2 * p[0 * 8 + col] + 2048 >> 12;
                v1 = dctSqrt2 * p[4 * 8 + col] + 2048 >> 12;
                v2 = p[2 * 8 + col];
                v3 = p[6 * 8 + col];
                v4 = dctSqrt1d2 * (p[1 * 8 + col] - p[7 * 8 + col]) + 2048 >> 12;
                v7 = dctSqrt1d2 * (p[1 * 8 + col] + p[7 * 8 + col]) + 2048 >> 12;
                v5 = p[3 * 8 + col];
                v6 = p[5 * 8 + col]; // stage 3

                t = v0 - v1 + 1 >> 1;
                v0 = v0 + v1 + 1 >> 1;
                v1 = t;
                t = v2 * dctSin6 + v3 * dctCos6 + 2048 >> 12;
                v2 = v2 * dctCos6 - v3 * dctSin6 + 2048 >> 12;
                v3 = t;
                t = v4 - v6 + 1 >> 1;
                v4 = v4 + v6 + 1 >> 1;
                v6 = t;
                t = v7 + v5 + 1 >> 1;
                v5 = v7 - v5 + 1 >> 1;
                v7 = t; // stage 2

                t = v0 - v3 + 1 >> 1;
                v0 = v0 + v3 + 1 >> 1;
                v3 = t;
                t = v1 - v2 + 1 >> 1;
                v1 = v1 + v2 + 1 >> 1;
                v2 = t;
                t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;
                v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;
                v7 = t;
                t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;
                v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;
                v6 = t; // stage 1

                p[0 * 8 + col] = v0 + v7;
                p[7 * 8 + col] = v0 - v7;
                p[1 * 8 + col] = v1 + v6;
                p[6 * 8 + col] = v1 - v6;
                p[2 * 8 + col] = v2 + v5;
                p[5 * 8 + col] = v2 - v5;
                p[3 * 8 + col] = v3 + v4;
                p[4 * 8 + col] = v3 - v4;
              } // convert to 8-bit integers


              for (i = 0; i < 64; ++i) {
                var sample = 128 + (p[i] + 8 >> 4);
                dataOut[i] = sample < 0 ? 0 : sample > 0xFF ? 0xFF : sample;
              }
            }

            requestMemoryAllocation(samplesPerLine * blocksPerColumn * 8);
            var i, j;

            for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
              var scanLine = blockRow << 3;

              for (i = 0; i < 8; i++) lines.push(new Uint8Array(samplesPerLine));

              for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {
                quantizeAndInverse(component.blocks[blockRow][blockCol], r, R);
                var offset = 0,
                    sample = blockCol << 3;

                for (j = 0; j < 8; j++) {
                  var line = lines[scanLine + j];

                  for (i = 0; i < 8; i++) line[sample + i] = r[offset++];
                }
              }
            }

            return lines;
          }

          function clampTo8bit(a) {
            return a < 0 ? 0 : a > 255 ? 255 : a;
          }

          constructor.prototype = {
            load: function load(path) {
              var xhr = new XMLHttpRequest();
              xhr.open("GET", path, true);
              xhr.responseType = "arraybuffer";

              xhr.onload = function () {
                // TODO catch parse error
                var data = new Uint8Array(xhr.response || xhr.mozResponseArrayBuffer);
                this.parse(data);
                if (this.onload) this.onload();
              }.bind(this);

              xhr.send(null);
            },
            parse: function parse(data) {
              var maxResolutionInPixels = this.opts.maxResolutionInMP * 1000 * 1000;
              var offset = 0,
                  length = data.length;

              function readUint16() {
                var value = data[offset] << 8 | data[offset + 1];
                offset += 2;
                return value;
              }

              function readDataBlock() {
                var length = readUint16();
                var array = data.subarray(offset, offset + length - 2);
                offset += array.length;
                return array;
              }

              function prepareComponents(frame) {
                var maxH = 0,
                    maxV = 0;
                var component, componentId;

                for (componentId in frame.components) {
                  if (frame.components.hasOwnProperty(componentId)) {
                    component = frame.components[componentId];
                    if (maxH < component.h) maxH = component.h;
                    if (maxV < component.v) maxV = component.v;
                  }
                }

                var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / maxH);
                var mcusPerColumn = Math.ceil(frame.scanLines / 8 / maxV);

                for (componentId in frame.components) {
                  if (frame.components.hasOwnProperty(componentId)) {
                    component = frame.components[componentId];
                    var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / maxH);
                    var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / maxV);
                    var blocksPerLineForMcu = mcusPerLine * component.h;
                    var blocksPerColumnForMcu = mcusPerColumn * component.v;
                    var blocksToAllocate = blocksPerColumnForMcu * blocksPerLineForMcu;
                    var blocks = []; // Each block is a Int32Array of length 64 (4 x 64 = 256 bytes)

                    requestMemoryAllocation(blocksToAllocate * 256);

                    for (var i = 0; i < blocksPerColumnForMcu; i++) {
                      var row = [];

                      for (var j = 0; j < blocksPerLineForMcu; j++) row.push(new Int32Array(64));

                      blocks.push(row);
                    }

                    component.blocksPerLine = blocksPerLine;
                    component.blocksPerColumn = blocksPerColumn;
                    component.blocks = blocks;
                  }
                }

                frame.maxH = maxH;
                frame.maxV = maxV;
                frame.mcusPerLine = mcusPerLine;
                frame.mcusPerColumn = mcusPerColumn;
              }

              var jfif = null;
              var adobe = null;
              var frame, resetInterval;
              var quantizationTables = [],
                  frames = [];
              var huffmanTablesAC = [],
                  huffmanTablesDC = [];
              var fileMarker = readUint16();

              if (fileMarker != 0xFFD8) {
                // SOI (Start of Image)
                throw new Error("SOI not found");
              }

              fileMarker = readUint16();

              while (fileMarker != 0xFFD9) {
                // EOI (End of image)
                var i, j;

                switch (fileMarker) {
                  case 0xFF00:
                    break;

                  case 0xFFE0: // APP0 (Application Specific)

                  case 0xFFE1: // APP1

                  case 0xFFE2: // APP2

                  case 0xFFE3: // APP3

                  case 0xFFE4: // APP4

                  case 0xFFE5: // APP5

                  case 0xFFE6: // APP6

                  case 0xFFE7: // APP7

                  case 0xFFE8: // APP8

                  case 0xFFE9: // APP9

                  case 0xFFEA: // APP10

                  case 0xFFEB: // APP11

                  case 0xFFEC: // APP12

                  case 0xFFED: // APP13

                  case 0xFFEE: // APP14

                  case 0xFFEF: // APP15

                  case 0xFFFE:
                    // COM (Comment)
                    var appData = readDataBlock();

                    if (fileMarker === 0xFFE0) {
                      if (appData[0] === 0x4A && appData[1] === 0x46 && appData[2] === 0x49 && appData[3] === 0x46 && appData[4] === 0) {
                        // 'JFIF\x00'
                        jfif = {
                          version: {
                            major: appData[5],
                            minor: appData[6]
                          },
                          densityUnits: appData[7],
                          xDensity: appData[8] << 8 | appData[9],
                          yDensity: appData[10] << 8 | appData[11],
                          thumbWidth: appData[12],
                          thumbHeight: appData[13],
                          thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])
                        };
                      }
                    } // TODO APP1 - Exif


                    if (fileMarker === 0xFFE1) {
                      if (appData[0] === 0x45 && appData[1] === 0x78 && appData[2] === 0x69 && appData[3] === 0x66 && appData[4] === 0) {
                        // 'EXIF\x00'
                        this.exifBuffer = appData.subarray(5, appData.length);
                      }
                    }

                    if (fileMarker === 0xFFEE) {
                      if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6F && appData[3] === 0x62 && appData[4] === 0x65 && appData[5] === 0) {
                        // 'Adobe\x00'
                        adobe = {
                          version: appData[6],
                          flags0: appData[7] << 8 | appData[8],
                          flags1: appData[9] << 8 | appData[10],
                          transformCode: appData[11]
                        };
                      }
                    }

                    break;

                  case 0xFFDB:
                    // DQT (Define Quantization Tables)
                    var quantizationTablesLength = readUint16();
                    var quantizationTablesEnd = quantizationTablesLength + offset - 2;

                    while (offset < quantizationTablesEnd) {
                      var quantizationTableSpec = data[offset++];
                      requestMemoryAllocation(64 * 4);
                      var tableData = new Int32Array(64);

                      if (quantizationTableSpec >> 4 === 0) {
                        // 8 bit values
                        for (j = 0; j < 64; j++) {
                          var z = dctZigZag[j];
                          tableData[z] = data[offset++];
                        }
                      } else if (quantizationTableSpec >> 4 === 1) {
                        //16 bit
                        for (j = 0; j < 64; j++) {
                          var z = dctZigZag[j];
                          tableData[z] = readUint16();
                        }
                      } else throw new Error("DQT: invalid table spec");

                      quantizationTables[quantizationTableSpec & 15] = tableData;
                    }

                    break;

                  case 0xFFC0: // SOF0 (Start of Frame, Baseline DCT)

                  case 0xFFC1: // SOF1 (Start of Frame, Extended DCT)

                  case 0xFFC2:
                    // SOF2 (Start of Frame, Progressive DCT)
                    readUint16(); // skip data length

                    frame = {};
                    frame.extended = fileMarker === 0xFFC1;
                    frame.progressive = fileMarker === 0xFFC2;
                    frame.precision = data[offset++];
                    frame.scanLines = readUint16();
                    frame.samplesPerLine = readUint16();
                    frame.components = {};
                    frame.componentsOrder = [];
                    var pixelsInFrame = frame.scanLines * frame.samplesPerLine;

                    if (pixelsInFrame > maxResolutionInPixels) {
                      var exceededAmount = Math.ceil((pixelsInFrame - maxResolutionInPixels) / 1e6);
                      throw new Error(`maxResolutionInMP limit exceeded by ${exceededAmount}MP`);
                    }

                    var componentsCount = data[offset++],
                        componentId;

                    for (i = 0; i < componentsCount; i++) {
                      componentId = data[offset];
                      var h = data[offset + 1] >> 4;
                      var v = data[offset + 1] & 15;
                      var qId = data[offset + 2];
                      frame.componentsOrder.push(componentId);
                      frame.components[componentId] = {
                        h: h,
                        v: v,
                        quantizationIdx: qId
                      };
                      offset += 3;
                    }

                    prepareComponents(frame);
                    frames.push(frame);
                    break;

                  case 0xFFC4:
                    // DHT (Define Huffman Tables)
                    var huffmanLength = readUint16();

                    for (i = 2; i < huffmanLength;) {
                      var huffmanTableSpec = data[offset++];
                      var codeLengths = new Uint8Array(16);
                      var codeLengthSum = 0;

                      for (j = 0; j < 16; j++, offset++) {
                        codeLengthSum += codeLengths[j] = data[offset];
                      }

                      requestMemoryAllocation(16 + codeLengthSum);
                      var huffmanValues = new Uint8Array(codeLengthSum);

                      for (j = 0; j < codeLengthSum; j++, offset++) huffmanValues[j] = data[offset];

                      i += 17 + codeLengthSum;
                      (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);
                    }

                    break;

                  case 0xFFDD:
                    // DRI (Define Restart Interval)
                    readUint16(); // skip data length

                    resetInterval = readUint16();
                    break;

                  case 0xFFDA:
                    // SOS (Start of Scan)
                    var scanLength = readUint16();
                    var selectorsCount = data[offset++];
                    var components = [],
                        component;

                    for (i = 0; i < selectorsCount; i++) {
                      component = frame.components[data[offset++]];
                      var tableSpec = data[offset++];
                      component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];
                      component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];
                      components.push(component);
                    }

                    var spectralStart = data[offset++];
                    var spectralEnd = data[offset++];
                    var successiveApproximation = data[offset++];
                    var processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15, this.opts);
                    offset += processed;
                    break;

                  case 0xFFFF:
                    // Fill bytes
                    if (data[offset] !== 0xFF) {
                      // Avoid skipping a valid marker.
                      offset--;
                    }

                    break;

                  default:
                    if (data[offset - 3] == 0xFF && data[offset - 2] >= 0xC0 && data[offset - 2] <= 0xFE) {
                      // could be incorrect encoding -- last 0xFF byte of the previous
                      // block was eaten by the encoder
                      offset -= 3;
                      break;
                    }

                    throw new Error("unknown JPEG marker " + fileMarker.toString(16));
                }

                fileMarker = readUint16();
              }

              if (frames.length != 1) throw new Error("only single frame JPEGs supported"); // set each frame's components quantization table

              for (var i = 0; i < frames.length; i++) {
                var cp = frames[i].components;

                for (var j in cp) {
                  cp[j].quantizationTable = quantizationTables[cp[j].quantizationIdx];
                  delete cp[j].quantizationIdx;
                }
              }

              this.width = frame.samplesPerLine;
              this.height = frame.scanLines;
              this.jfif = jfif;
              this.adobe = adobe;
              this.components = [];

              for (var i = 0; i < frame.componentsOrder.length; i++) {
                var component = frame.components[frame.componentsOrder[i]];
                this.components.push({
                  lines: buildComponentData(frame, component),
                  scaleX: component.h / frame.maxH,
                  scaleY: component.v / frame.maxV
                });
              }
            },
            getData: function getData(width, height) {
              var scaleX = this.width / width,
                  scaleY = this.height / height;
              var component1, component2, component3, component4;
              var component1Line, component2Line, component3Line, component4Line;
              var x, y;
              var offset = 0;
              var Y, Cb, Cr, K, C, M, Ye, R, G, B;
              var colorTransform;
              var dataLength = width * height * this.components.length;
              requestMemoryAllocation(dataLength);
              var data = new Uint8Array(dataLength);

              switch (this.components.length) {
                case 1:
                  component1 = this.components[0];

                  for (y = 0; y < height; y++) {
                    component1Line = component1.lines[0 | y * component1.scaleY * scaleY];

                    for (x = 0; x < width; x++) {
                      Y = component1Line[0 | x * component1.scaleX * scaleX];
                      data[offset++] = Y;
                    }
                  }

                  break;

                case 2:
                  // PDF might compress two component data in custom colorspace
                  component1 = this.components[0];
                  component2 = this.components[1];

                  for (y = 0; y < height; y++) {
                    component1Line = component1.lines[0 | y * component1.scaleY * scaleY];
                    component2Line = component2.lines[0 | y * component2.scaleY * scaleY];

                    for (x = 0; x < width; x++) {
                      Y = component1Line[0 | x * component1.scaleX * scaleX];
                      data[offset++] = Y;
                      Y = component2Line[0 | x * component2.scaleX * scaleX];
                      data[offset++] = Y;
                    }
                  }

                  break;

                case 3:
                  // The default transform for three components is true
                  colorTransform = true; // The adobe transform marker overrides any previous setting

                  if (this.adobe && this.adobe.transformCode) colorTransform = true;else if (typeof this.opts.colorTransform !== 'undefined') colorTransform = !!this.opts.colorTransform;
                  component1 = this.components[0];
                  component2 = this.components[1];
                  component3 = this.components[2];

                  for (y = 0; y < height; y++) {
                    component1Line = component1.lines[0 | y * component1.scaleY * scaleY];
                    component2Line = component2.lines[0 | y * component2.scaleY * scaleY];
                    component3Line = component3.lines[0 | y * component3.scaleY * scaleY];

                    for (x = 0; x < width; x++) {
                      if (!colorTransform) {
                        R = component1Line[0 | x * component1.scaleX * scaleX];
                        G = component2Line[0 | x * component2.scaleX * scaleX];
                        B = component3Line[0 | x * component3.scaleX * scaleX];
                      } else {
                        Y = component1Line[0 | x * component1.scaleX * scaleX];
                        Cb = component2Line[0 | x * component2.scaleX * scaleX];
                        Cr = component3Line[0 | x * component3.scaleX * scaleX];
                        R = clampTo8bit(Y + 1.402 * (Cr - 128));
                        G = clampTo8bit(Y - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));
                        B = clampTo8bit(Y + 1.772 * (Cb - 128));
                      }

                      data[offset++] = R;
                      data[offset++] = G;
                      data[offset++] = B;
                    }
                  }

                  break;

                case 4:
                  if (!this.adobe) throw new Error('Unsupported color mode (4 components)'); // The default transform for four components is false

                  colorTransform = false; // The adobe transform marker overrides any previous setting

                  if (this.adobe && this.adobe.transformCode) colorTransform = true;else if (typeof this.opts.colorTransform !== 'undefined') colorTransform = !!this.opts.colorTransform;
                  component1 = this.components[0];
                  component2 = this.components[1];
                  component3 = this.components[2];
                  component4 = this.components[3];

                  for (y = 0; y < height; y++) {
                    component1Line = component1.lines[0 | y * component1.scaleY * scaleY];
                    component2Line = component2.lines[0 | y * component2.scaleY * scaleY];
                    component3Line = component3.lines[0 | y * component3.scaleY * scaleY];
                    component4Line = component4.lines[0 | y * component4.scaleY * scaleY];

                    for (x = 0; x < width; x++) {
                      if (!colorTransform) {
                        C = component1Line[0 | x * component1.scaleX * scaleX];
                        M = component2Line[0 | x * component2.scaleX * scaleX];
                        Ye = component3Line[0 | x * component3.scaleX * scaleX];
                        K = component4Line[0 | x * component4.scaleX * scaleX];
                      } else {
                        Y = component1Line[0 | x * component1.scaleX * scaleX];
                        Cb = component2Line[0 | x * component2.scaleX * scaleX];
                        Cr = component3Line[0 | x * component3.scaleX * scaleX];
                        K = component4Line[0 | x * component4.scaleX * scaleX];
                        C = 255 - clampTo8bit(Y + 1.402 * (Cr - 128));
                        M = 255 - clampTo8bit(Y - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));
                        Ye = 255 - clampTo8bit(Y + 1.772 * (Cb - 128));
                      }

                      data[offset++] = 255 - C;
                      data[offset++] = 255 - M;
                      data[offset++] = 255 - Ye;
                      data[offset++] = 255 - K;
                    }
                  }

                  break;

                default:
                  throw new Error('Unsupported color mode');
              }

              return data;
            },
            copyToImageData: function copyToImageData(imageData, formatAsRGBA) {
              var width = imageData.width,
                  height = imageData.height;
              var imageDataArray = imageData.data;
              var data = this.getData(width, height);
              var i = 0,
                  j = 0,
                  x,
                  y;
              var Y, K, C, M, R, G, B;

              switch (this.components.length) {
                case 1:
                  for (y = 0; y < height; y++) {
                    for (x = 0; x < width; x++) {
                      Y = data[i++];
                      imageDataArray[j++] = Y;
                      imageDataArray[j++] = Y;
                      imageDataArray[j++] = Y;

                      if (formatAsRGBA) {
                        imageDataArray[j++] = 255;
                      }
                    }
                  }

                  break;

                case 3:
                  for (y = 0; y < height; y++) {
                    for (x = 0; x < width; x++) {
                      R = data[i++];
                      G = data[i++];
                      B = data[i++];
                      imageDataArray[j++] = R;
                      imageDataArray[j++] = G;
                      imageDataArray[j++] = B;

                      if (formatAsRGBA) {
                        imageDataArray[j++] = 255;
                      }
                    }
                  }

                  break;

                case 4:
                  for (y = 0; y < height; y++) {
                    for (x = 0; x < width; x++) {
                      C = data[i++];
                      M = data[i++];
                      Y = data[i++];
                      K = data[i++];
                      R = 255 - clampTo8bit(C * (1 - K / 255) + K);
                      G = 255 - clampTo8bit(M * (1 - K / 255) + K);
                      B = 255 - clampTo8bit(Y * (1 - K / 255) + K);
                      imageDataArray[j++] = R;
                      imageDataArray[j++] = G;
                      imageDataArray[j++] = B;

                      if (formatAsRGBA) {
                        imageDataArray[j++] = 255;
                      }
                    }
                  }

                  break;

                default:
                  throw new Error('Unsupported color mode');
              }
            }
          }; // We cap the amount of memory used by jpeg-js to avoid unexpected OOMs from untrusted content.

          var totalBytesAllocated = 0;
          var maxMemoryUsageBytes = 0;

          function requestMemoryAllocation(increaseAmount = 0) {
            var totalMemoryImpactBytes = totalBytesAllocated + increaseAmount;

            if (totalMemoryImpactBytes > maxMemoryUsageBytes) {
              var exceededAmount = Math.ceil((totalMemoryImpactBytes - maxMemoryUsageBytes) / 1024 / 1024);
              throw new Error(`maxMemoryUsageInMB limit exceeded by at least ${exceededAmount}MB`);
            }

            totalBytesAllocated = totalMemoryImpactBytes;
          }

          constructor.resetMaxMemoryUsage = function (maxMemoryUsageBytes_) {
            totalBytesAllocated = 0;
            maxMemoryUsageBytes = maxMemoryUsageBytes_;
          };

          constructor.getBytesAllocated = function () {
            return totalBytesAllocated;
          };

          constructor.requestMemoryAllocation = requestMemoryAllocation;
          return constructor;
        }();

        {
          module.exports = decode;
        }

        function decode(jpegData, userOpts = {}) {
          var defaultOpts = {
            // "undefined" means "Choose whether to transform colors based on the image’s color model."
            colorTransform: undefined,
            useTArray: false,
            formatAsRGBA: true,
            tolerantDecoding: true,
            maxResolutionInMP: 100,
            // Don't decode more than 100 megapixels
            maxMemoryUsageInMB: 512 // Don't decode if memory footprint is more than 512MB

          };
          var opts = { ...defaultOpts,
            ...userOpts
          };
          var arr = new Uint8Array(jpegData);
          var decoder = new JpegImage();
          decoder.opts = opts; // If this constructor ever supports async decoding this will need to be done differently.
          // Until then, treating as singleton limit is fine.

          JpegImage.resetMaxMemoryUsage(opts.maxMemoryUsageInMB * 1024 * 1024);
          decoder.parse(arr);
          var channels = opts.formatAsRGBA ? 4 : 3;
          var bytesNeeded = decoder.width * decoder.height * channels;

          try {
            JpegImage.requestMemoryAllocation(bytesNeeded);
            var image = {
              width: decoder.width,
              height: decoder.height,
              exifBuffer: decoder.exifBuffer,
              data: opts.useTArray ? new Uint8Array(bytesNeeded) : new Buffer(bytesNeeded)
            };
          } catch (err) {
            if (err instanceof RangeError) {
              throw new Error("Could not allocate enough memory for the image. " + "Required: " + bytesNeeded);
            } else {
              throw err;
            }
          }

          decoder.copyToImageData(image, opts.formatAsRGBA);
          return image;
        }
      });

      var jpegJs = {
        encode: encoder,
        decode: decoder
      };

      var index$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), jpegJs, {
        'default': jpegJs,
        __moduleExports: jpegJs
      }));

      var browser = createCommonjsModule(function (module, exports) {
        (function (f) {
          {
            module.exports = f();
          }
        })(function () {
          return function e(t, n, r) {
            function s(o, u) {
              if (!n[o]) {
                if (!t[o]) {
                  var a = typeof commonjsRequire == "function" && commonjsRequire;
                  if (!u && a) return a(o, !0);
                  if (i) return i(o, !0);
                  var f = new Error("Cannot find module '" + o + "'");
                  throw f.code = "MODULE_NOT_FOUND", f;
                }

                var l = n[o] = {
                  exports: {}
                };
                t[o][0].call(l.exports, function (e) {
                  var n = t[o][1][e];
                  return s(n ? n : e);
                }, l, l.exports, e, t, n, r);
              }

              return n[o].exports;
            }

            var i = typeof commonjsRequire == "function" && commonjsRequire;

            for (var o = 0; o < r.length; o++) s(r[o]);

            return s;
          }({
            1: [function (require, module, exports) {
              (function (Buffer) {

                let interlaceUtils = require("./interlace");

                let pixelBppMapper = [// 0 - dummy entry
                function () {}, // 1 - L
                // 0: 0, 1: 0, 2: 0, 3: 0xff
                function (pxData, data, pxPos, rawPos) {
                  if (rawPos === data.length) {
                    throw new Error("Ran out of data");
                  }

                  let pixel = data[rawPos];
                  pxData[pxPos] = pixel;
                  pxData[pxPos + 1] = pixel;
                  pxData[pxPos + 2] = pixel;
                  pxData[pxPos + 3] = 0xff;
                }, // 2 - LA
                // 0: 0, 1: 0, 2: 0, 3: 1
                function (pxData, data, pxPos, rawPos) {
                  if (rawPos + 1 >= data.length) {
                    throw new Error("Ran out of data");
                  }

                  let pixel = data[rawPos];
                  pxData[pxPos] = pixel;
                  pxData[pxPos + 1] = pixel;
                  pxData[pxPos + 2] = pixel;
                  pxData[pxPos + 3] = data[rawPos + 1];
                }, // 3 - RGB
                // 0: 0, 1: 1, 2: 2, 3: 0xff
                function (pxData, data, pxPos, rawPos) {
                  if (rawPos + 2 >= data.length) {
                    throw new Error("Ran out of data");
                  }

                  pxData[pxPos] = data[rawPos];
                  pxData[pxPos + 1] = data[rawPos + 1];
                  pxData[pxPos + 2] = data[rawPos + 2];
                  pxData[pxPos + 3] = 0xff;
                }, // 4 - RGBA
                // 0: 0, 1: 1, 2: 2, 3: 3
                function (pxData, data, pxPos, rawPos) {
                  if (rawPos + 3 >= data.length) {
                    throw new Error("Ran out of data");
                  }

                  pxData[pxPos] = data[rawPos];
                  pxData[pxPos + 1] = data[rawPos + 1];
                  pxData[pxPos + 2] = data[rawPos + 2];
                  pxData[pxPos + 3] = data[rawPos + 3];
                }];
                let pixelBppCustomMapper = [// 0 - dummy entry
                function () {}, // 1 - L
                // 0: 0, 1: 0, 2: 0, 3: 0xff
                function (pxData, pixelData, pxPos, maxBit) {
                  let pixel = pixelData[0];
                  pxData[pxPos] = pixel;
                  pxData[pxPos + 1] = pixel;
                  pxData[pxPos + 2] = pixel;
                  pxData[pxPos + 3] = maxBit;
                }, // 2 - LA
                // 0: 0, 1: 0, 2: 0, 3: 1
                function (pxData, pixelData, pxPos) {
                  let pixel = pixelData[0];
                  pxData[pxPos] = pixel;
                  pxData[pxPos + 1] = pixel;
                  pxData[pxPos + 2] = pixel;
                  pxData[pxPos + 3] = pixelData[1];
                }, // 3 - RGB
                // 0: 0, 1: 1, 2: 2, 3: 0xff
                function (pxData, pixelData, pxPos, maxBit) {
                  pxData[pxPos] = pixelData[0];
                  pxData[pxPos + 1] = pixelData[1];
                  pxData[pxPos + 2] = pixelData[2];
                  pxData[pxPos + 3] = maxBit;
                }, // 4 - RGBA
                // 0: 0, 1: 1, 2: 2, 3: 3
                function (pxData, pixelData, pxPos) {
                  pxData[pxPos] = pixelData[0];
                  pxData[pxPos + 1] = pixelData[1];
                  pxData[pxPos + 2] = pixelData[2];
                  pxData[pxPos + 3] = pixelData[3];
                }];

                function bitRetriever(data, depth) {
                  let leftOver = [];
                  let i = 0;

                  function split() {
                    if (i === data.length) {
                      throw new Error("Ran out of data");
                    }

                    let byte = data[i];
                    i++;
                    let byte8, byte7, byte6, byte5, byte4, byte3, byte2, byte1;

                    switch (depth) {
                      default:
                        throw new Error("unrecognised depth");

                      case 16:
                        byte2 = data[i];
                        i++;
                        leftOver.push((byte << 8) + byte2);
                        break;

                      case 4:
                        byte2 = byte & 0x0f;
                        byte1 = byte >> 4;
                        leftOver.push(byte1, byte2);
                        break;

                      case 2:
                        byte4 = byte & 3;
                        byte3 = byte >> 2 & 3;
                        byte2 = byte >> 4 & 3;
                        byte1 = byte >> 6 & 3;
                        leftOver.push(byte1, byte2, byte3, byte4);
                        break;

                      case 1:
                        byte8 = byte & 1;
                        byte7 = byte >> 1 & 1;
                        byte6 = byte >> 2 & 1;
                        byte5 = byte >> 3 & 1;
                        byte4 = byte >> 4 & 1;
                        byte3 = byte >> 5 & 1;
                        byte2 = byte >> 6 & 1;
                        byte1 = byte >> 7 & 1;
                        leftOver.push(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8);
                        break;
                    }
                  }

                  return {
                    get: function (count) {
                      while (leftOver.length < count) {
                        split();
                      }

                      let returner = leftOver.slice(0, count);
                      leftOver = leftOver.slice(count);
                      return returner;
                    },
                    resetAfterLine: function () {
                      leftOver.length = 0;
                    },
                    end: function () {
                      if (i !== data.length) {
                        throw new Error("extra data found");
                      }
                    }
                  };
                }

                function mapImage8Bit(image, pxData, getPxPos, bpp, data, rawPos) {
                  // eslint-disable-line max-params
                  let imageWidth = image.width;
                  let imageHeight = image.height;
                  let imagePass = image.index;

                  for (let y = 0; y < imageHeight; y++) {
                    for (let x = 0; x < imageWidth; x++) {
                      let pxPos = getPxPos(x, y, imagePass);
                      pixelBppMapper[bpp](pxData, data, pxPos, rawPos);
                      rawPos += bpp; //eslint-disable-line no-param-reassign
                    }
                  }

                  return rawPos;
                }

                function mapImageCustomBit(image, pxData, getPxPos, bpp, bits, maxBit) {
                  // eslint-disable-line max-params
                  let imageWidth = image.width;
                  let imageHeight = image.height;
                  let imagePass = image.index;

                  for (let y = 0; y < imageHeight; y++) {
                    for (let x = 0; x < imageWidth; x++) {
                      let pixelData = bits.get(bpp);
                      let pxPos = getPxPos(x, y, imagePass);
                      pixelBppCustomMapper[bpp](pxData, pixelData, pxPos, maxBit);
                    }

                    bits.resetAfterLine();
                  }
                }

                exports.dataToBitMap = function (data, bitmapInfo) {
                  let width = bitmapInfo.width;
                  let height = bitmapInfo.height;
                  let depth = bitmapInfo.depth;
                  let bpp = bitmapInfo.bpp;
                  let interlace = bitmapInfo.interlace;
                  let bits;

                  if (depth !== 8) {
                    bits = bitRetriever(data, depth);
                  }

                  let pxData;

                  if (depth <= 8) {
                    pxData = Buffer.alloc(width * height * 4);
                  } else {
                    pxData = new Uint16Array(width * height * 4);
                  }

                  let maxBit = Math.pow(2, depth) - 1;
                  let rawPos = 0;
                  let images;
                  let getPxPos;

                  if (interlace) {
                    images = interlaceUtils.getImagePasses(width, height);
                    getPxPos = interlaceUtils.getInterlaceIterator(width, height);
                  } else {
                    let nonInterlacedPxPos = 0;

                    getPxPos = function () {
                      let returner = nonInterlacedPxPos;
                      nonInterlacedPxPos += 4;
                      return returner;
                    };

                    images = [{
                      width: width,
                      height: height
                    }];
                  }

                  for (let imageIndex = 0; imageIndex < images.length; imageIndex++) {
                    if (depth === 8) {
                      rawPos = mapImage8Bit(images[imageIndex], pxData, getPxPos, bpp, data, rawPos);
                    } else {
                      mapImageCustomBit(images[imageIndex], pxData, getPxPos, bpp, bits, maxBit);
                    }
                  }

                  if (depth === 8) {
                    if (rawPos !== data.length) {
                      throw new Error("extra data found");
                    }
                  } else {
                    bits.end();
                  }

                  return pxData;
                };
              }).call(this, require("buffer").Buffer);
            }, {
              "./interlace": 11,
              "buffer": 28
            }],
            2: [function (require, module, exports) {
              (function (Buffer) {

                let constants = require("./constants");

                module.exports = function (dataIn, width, height, options) {
                  let outHasAlpha = [constants.COLORTYPE_COLOR_ALPHA, constants.COLORTYPE_ALPHA].indexOf(options.colorType) !== -1;

                  if (options.colorType === options.inputColorType) {
                    let bigEndian = function () {
                      let buffer = new ArrayBuffer(2);
                      new DataView(buffer).setInt16(0, 256, true
                      /* littleEndian */
                      ); // Int16Array uses the platform's endianness.

                      return new Int16Array(buffer)[0] !== 256;
                    }(); // If no need to convert to grayscale and alpha is present/absent in both, take a fast route


                    if (options.bitDepth === 8 || options.bitDepth === 16 && bigEndian) {
                      return dataIn;
                    }
                  } // map to a UInt16 array if data is 16bit, fix endianness below


                  let data = options.bitDepth !== 16 ? dataIn : new Uint16Array(dataIn.buffer);
                  let maxValue = 255;
                  let inBpp = constants.COLORTYPE_TO_BPP_MAP[options.inputColorType];

                  if (inBpp === 4 && !options.inputHasAlpha) {
                    inBpp = 3;
                  }

                  let outBpp = constants.COLORTYPE_TO_BPP_MAP[options.colorType];

                  if (options.bitDepth === 16) {
                    maxValue = 65535;
                    outBpp *= 2;
                  }

                  let outData = Buffer.alloc(width * height * outBpp);
                  let inIndex = 0;
                  let outIndex = 0;
                  let bgColor = options.bgColor || {};

                  if (bgColor.red === undefined) {
                    bgColor.red = maxValue;
                  }

                  if (bgColor.green === undefined) {
                    bgColor.green = maxValue;
                  }

                  if (bgColor.blue === undefined) {
                    bgColor.blue = maxValue;
                  }

                  function getRGBA() {
                    let red;
                    let green;
                    let blue;
                    let alpha = maxValue;

                    switch (options.inputColorType) {
                      case constants.COLORTYPE_COLOR_ALPHA:
                        alpha = data[inIndex + 3];
                        red = data[inIndex];
                        green = data[inIndex + 1];
                        blue = data[inIndex + 2];
                        break;

                      case constants.COLORTYPE_COLOR:
                        red = data[inIndex];
                        green = data[inIndex + 1];
                        blue = data[inIndex + 2];
                        break;

                      case constants.COLORTYPE_ALPHA:
                        alpha = data[inIndex + 1];
                        red = data[inIndex];
                        green = red;
                        blue = red;
                        break;

                      case constants.COLORTYPE_GRAYSCALE:
                        red = data[inIndex];
                        green = red;
                        blue = red;
                        break;

                      default:
                        throw new Error("input color type:" + options.inputColorType + " is not supported at present");
                    }

                    if (options.inputHasAlpha) {
                      if (!outHasAlpha) {
                        alpha /= maxValue;
                        red = Math.min(Math.max(Math.round((1 - alpha) * bgColor.red + alpha * red), 0), maxValue);
                        green = Math.min(Math.max(Math.round((1 - alpha) * bgColor.green + alpha * green), 0), maxValue);
                        blue = Math.min(Math.max(Math.round((1 - alpha) * bgColor.blue + alpha * blue), 0), maxValue);
                      }
                    }

                    return {
                      red: red,
                      green: green,
                      blue: blue,
                      alpha: alpha
                    };
                  }

                  for (let y = 0; y < height; y++) {
                    for (let x = 0; x < width; x++) {
                      let rgba = getRGBA();

                      switch (options.colorType) {
                        case constants.COLORTYPE_COLOR_ALPHA:
                        case constants.COLORTYPE_COLOR:
                          if (options.bitDepth === 8) {
                            outData[outIndex] = rgba.red;
                            outData[outIndex + 1] = rgba.green;
                            outData[outIndex + 2] = rgba.blue;

                            if (outHasAlpha) {
                              outData[outIndex + 3] = rgba.alpha;
                            }
                          } else {
                            outData.writeUInt16BE(rgba.red, outIndex);
                            outData.writeUInt16BE(rgba.green, outIndex + 2);
                            outData.writeUInt16BE(rgba.blue, outIndex + 4);

                            if (outHasAlpha) {
                              outData.writeUInt16BE(rgba.alpha, outIndex + 6);
                            }
                          }

                          break;

                        case constants.COLORTYPE_ALPHA:
                        case constants.COLORTYPE_GRAYSCALE:
                          {
                            // Convert to grayscale and alpha
                            let grayscale = (rgba.red + rgba.green + rgba.blue) / 3;

                            if (options.bitDepth === 8) {
                              outData[outIndex] = grayscale;

                              if (outHasAlpha) {
                                outData[outIndex + 1] = rgba.alpha;
                              }
                            } else {
                              outData.writeUInt16BE(grayscale, outIndex);

                              if (outHasAlpha) {
                                outData.writeUInt16BE(rgba.alpha, outIndex + 2);
                              }
                            }

                            break;
                          }

                        default:
                          throw new Error("unrecognised color Type " + options.colorType);
                      }

                      inIndex += inBpp;
                      outIndex += outBpp;
                    }
                  }

                  return outData;
                };
              }).call(this, require("buffer").Buffer);
            }, {
              "./constants": 4,
              "buffer": 28
            }],
            3: [function (require, module, exports) {
              (function (process, Buffer) {

                let util = require("util");

                let Stream = require("stream");

                let ChunkStream = module.exports = function () {
                  Stream.call(this);
                  this._buffers = [];
                  this._buffered = 0;
                  this._reads = [];
                  this._paused = false;
                  this._encoding = "utf8";
                  this.writable = true;
                };

                util.inherits(ChunkStream, Stream);

                ChunkStream.prototype.read = function (length, callback) {
                  this._reads.push({
                    length: Math.abs(length),
                    // if length < 0 then at most this length
                    allowLess: length < 0,
                    func: callback
                  });

                  process.nextTick(function () {
                    this._process(); // its paused and there is not enought data then ask for more


                    if (this._paused && this._reads && this._reads.length > 0) {
                      this._paused = false;
                      this.emit("drain");
                    }
                  }.bind(this));
                };

                ChunkStream.prototype.write = function (data, encoding) {
                  if (!this.writable) {
                    this.emit("error", new Error("Stream not writable"));
                    return false;
                  }

                  let dataBuffer;

                  if (Buffer.isBuffer(data)) {
                    dataBuffer = data;
                  } else {
                    dataBuffer = Buffer.from(data, encoding || this._encoding);
                  }

                  this._buffers.push(dataBuffer);

                  this._buffered += dataBuffer.length;

                  this._process(); // ok if there are no more read requests


                  if (this._reads && this._reads.length === 0) {
                    this._paused = true;
                  }

                  return this.writable && !this._paused;
                };

                ChunkStream.prototype.end = function (data, encoding) {
                  if (data) {
                    this.write(data, encoding);
                  }

                  this.writable = false; // already destroyed

                  if (!this._buffers) {
                    return;
                  } // enqueue or handle end


                  if (this._buffers.length === 0) {
                    this._end();
                  } else {
                    this._buffers.push(null);

                    this._process();
                  }
                };

                ChunkStream.prototype.destroySoon = ChunkStream.prototype.end;

                ChunkStream.prototype._end = function () {
                  if (this._reads.length > 0) {
                    this.emit("error", new Error("Unexpected end of input"));
                  }

                  this.destroy();
                };

                ChunkStream.prototype.destroy = function () {
                  if (!this._buffers) {
                    return;
                  }

                  this.writable = false;
                  this._reads = null;
                  this._buffers = null;
                  this.emit("close");
                };

                ChunkStream.prototype._processReadAllowingLess = function (read) {
                  // ok there is any data so that we can satisfy this request
                  this._reads.shift(); // == read
                  // first we need to peek into first buffer


                  let smallerBuf = this._buffers[0]; // ok there is more data than we need

                  if (smallerBuf.length > read.length) {
                    this._buffered -= read.length;
                    this._buffers[0] = smallerBuf.slice(read.length);
                    read.func.call(this, smallerBuf.slice(0, read.length));
                  } else {
                    // ok this is less than maximum length so use it all
                    this._buffered -= smallerBuf.length;

                    this._buffers.shift(); // == smallerBuf


                    read.func.call(this, smallerBuf);
                  }
                };

                ChunkStream.prototype._processRead = function (read) {
                  this._reads.shift(); // == read


                  let pos = 0;
                  let count = 0;
                  let data = Buffer.alloc(read.length); // create buffer for all data

                  while (pos < read.length) {
                    let buf = this._buffers[count++];
                    let len = Math.min(buf.length, read.length - pos);
                    buf.copy(data, pos, 0, len);
                    pos += len; // last buffer wasn't used all so just slice it and leave

                    if (len !== buf.length) {
                      this._buffers[--count] = buf.slice(len);
                    }
                  } // remove all used buffers


                  if (count > 0) {
                    this._buffers.splice(0, count);
                  }

                  this._buffered -= read.length;
                  read.func.call(this, data);
                };

                ChunkStream.prototype._process = function () {
                  try {
                    // as long as there is any data and read requests
                    while (this._buffered > 0 && this._reads && this._reads.length > 0) {
                      let read = this._reads[0]; // read any data (but no more than length)

                      if (read.allowLess) {
                        this._processReadAllowingLess(read);
                      } else if (this._buffered >= read.length) {
                        // ok we can meet some expectations
                        this._processRead(read);
                      } else {
                        // not enought data to satisfy first request in queue
                        // so we need to wait for more
                        break;
                      }
                    }

                    if (this._buffers && !this.writable) {
                      this._end();
                    }
                  } catch (ex) {
                    this.emit("error", ex);
                  }
                };
              }).call(this, require('_process'), require("buffer").Buffer);
            }, {
              "_process": 47,
              "buffer": 28,
              "stream": 63,
              "util": 67
            }],
            4: [function (require, module, exports) {

              module.exports = {
                PNG_SIGNATURE: [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a],
                TYPE_IHDR: 0x49484452,
                TYPE_IEND: 0x49454e44,
                TYPE_IDAT: 0x49444154,
                TYPE_PLTE: 0x504c5445,
                TYPE_tRNS: 0x74524e53,
                // eslint-disable-line camelcase
                TYPE_gAMA: 0x67414d41,
                // eslint-disable-line camelcase
                // color-type bits
                COLORTYPE_GRAYSCALE: 0,
                COLORTYPE_PALETTE: 1,
                COLORTYPE_COLOR: 2,
                COLORTYPE_ALPHA: 4,
                // e.g. grayscale and alpha
                // color-type combinations
                COLORTYPE_PALETTE_COLOR: 3,
                COLORTYPE_COLOR_ALPHA: 6,
                COLORTYPE_TO_BPP_MAP: {
                  0: 1,
                  2: 3,
                  3: 1,
                  4: 2,
                  6: 4
                },
                GAMMA_DIVISION: 100000
              };
            }, {}],
            5: [function (require, module, exports) {

              let crcTable = [];

              (function () {
                for (let i = 0; i < 256; i++) {
                  let currentCrc = i;

                  for (let j = 0; j < 8; j++) {
                    if (currentCrc & 1) {
                      currentCrc = 0xedb88320 ^ currentCrc >>> 1;
                    } else {
                      currentCrc = currentCrc >>> 1;
                    }
                  }

                  crcTable[i] = currentCrc;
                }
              })();

              let CrcCalculator = module.exports = function () {
                this._crc = -1;
              };

              CrcCalculator.prototype.write = function (data) {
                for (let i = 0; i < data.length; i++) {
                  this._crc = crcTable[(this._crc ^ data[i]) & 0xff] ^ this._crc >>> 8;
                }

                return true;
              };

              CrcCalculator.prototype.crc32 = function () {
                return this._crc ^ -1;
              };

              CrcCalculator.crc32 = function (buf) {
                let crc = -1;

                for (let i = 0; i < buf.length; i++) {
                  crc = crcTable[(crc ^ buf[i]) & 0xff] ^ crc >>> 8;
                }

                return crc ^ -1;
              };
            }, {}],
            6: [function (require, module, exports) {
              (function (Buffer) {

                let paethPredictor = require("./paeth-predictor");

                function filterNone(pxData, pxPos, byteWidth, rawData, rawPos) {
                  for (let x = 0; x < byteWidth; x++) {
                    rawData[rawPos + x] = pxData[pxPos + x];
                  }
                }

                function filterSumNone(pxData, pxPos, byteWidth) {
                  let sum = 0;
                  let length = pxPos + byteWidth;

                  for (let i = pxPos; i < length; i++) {
                    sum += Math.abs(pxData[i]);
                  }

                  return sum;
                }

                function filterSub(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {
                  for (let x = 0; x < byteWidth; x++) {
                    let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
                    let val = pxData[pxPos + x] - left;
                    rawData[rawPos + x] = val;
                  }
                }

                function filterSumSub(pxData, pxPos, byteWidth, bpp) {
                  let sum = 0;

                  for (let x = 0; x < byteWidth; x++) {
                    let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
                    let val = pxData[pxPos + x] - left;
                    sum += Math.abs(val);
                  }

                  return sum;
                }

                function filterUp(pxData, pxPos, byteWidth, rawData, rawPos) {
                  for (let x = 0; x < byteWidth; x++) {
                    let up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
                    let val = pxData[pxPos + x] - up;
                    rawData[rawPos + x] = val;
                  }
                }

                function filterSumUp(pxData, pxPos, byteWidth) {
                  let sum = 0;
                  let length = pxPos + byteWidth;

                  for (let x = pxPos; x < length; x++) {
                    let up = pxPos > 0 ? pxData[x - byteWidth] : 0;
                    let val = pxData[x] - up;
                    sum += Math.abs(val);
                  }

                  return sum;
                }

                function filterAvg(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {
                  for (let x = 0; x < byteWidth; x++) {
                    let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
                    let up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
                    let val = pxData[pxPos + x] - (left + up >> 1);
                    rawData[rawPos + x] = val;
                  }
                }

                function filterSumAvg(pxData, pxPos, byteWidth, bpp) {
                  let sum = 0;

                  for (let x = 0; x < byteWidth; x++) {
                    let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
                    let up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
                    let val = pxData[pxPos + x] - (left + up >> 1);
                    sum += Math.abs(val);
                  }

                  return sum;
                }

                function filterPaeth(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {
                  for (let x = 0; x < byteWidth; x++) {
                    let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
                    let up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
                    let upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;
                    let val = pxData[pxPos + x] - paethPredictor(left, up, upleft);
                    rawData[rawPos + x] = val;
                  }
                }

                function filterSumPaeth(pxData, pxPos, byteWidth, bpp) {
                  let sum = 0;

                  for (let x = 0; x < byteWidth; x++) {
                    let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;
                    let up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;
                    let upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;
                    let val = pxData[pxPos + x] - paethPredictor(left, up, upleft);
                    sum += Math.abs(val);
                  }

                  return sum;
                }

                let filters = {
                  0: filterNone,
                  1: filterSub,
                  2: filterUp,
                  3: filterAvg,
                  4: filterPaeth
                };
                let filterSums = {
                  0: filterSumNone,
                  1: filterSumSub,
                  2: filterSumUp,
                  3: filterSumAvg,
                  4: filterSumPaeth
                };

                module.exports = function (pxData, width, height, options, bpp) {
                  let filterTypes;

                  if (!("filterType" in options) || options.filterType === -1) {
                    filterTypes = [0, 1, 2, 3, 4];
                  } else if (typeof options.filterType === "number") {
                    filterTypes = [options.filterType];
                  } else {
                    throw new Error("unrecognised filter types");
                  }

                  if (options.bitDepth === 16) {
                    bpp *= 2;
                  }

                  let byteWidth = width * bpp;
                  let rawPos = 0;
                  let pxPos = 0;
                  let rawData = Buffer.alloc((byteWidth + 1) * height);
                  let sel = filterTypes[0];

                  for (let y = 0; y < height; y++) {
                    if (filterTypes.length > 1) {
                      // find best filter for this line (with lowest sum of values)
                      let min = Infinity;

                      for (let i = 0; i < filterTypes.length; i++) {
                        let sum = filterSums[filterTypes[i]](pxData, pxPos, byteWidth, bpp);

                        if (sum < min) {
                          sel = filterTypes[i];
                          min = sum;
                        }
                      }
                    }

                    rawData[rawPos] = sel;
                    rawPos++;
                    filters[sel](pxData, pxPos, byteWidth, rawData, rawPos, bpp);
                    rawPos += byteWidth;
                    pxPos += byteWidth;
                  }

                  return rawData;
                };
              }).call(this, require("buffer").Buffer);
            }, {
              "./paeth-predictor": 15,
              "buffer": 28
            }],
            7: [function (require, module, exports) {
              (function (Buffer) {

                let util = require("util");

                let ChunkStream = require("./chunkstream");

                let Filter = require("./filter-parse");

                let FilterAsync = module.exports = function (bitmapInfo) {
                  ChunkStream.call(this);
                  let buffers = [];
                  let that = this;
                  this._filter = new Filter(bitmapInfo, {
                    read: this.read.bind(this),
                    write: function (buffer) {
                      buffers.push(buffer);
                    },
                    complete: function () {
                      that.emit("complete", Buffer.concat(buffers));
                    }
                  });

                  this._filter.start();
                };

                util.inherits(FilterAsync, ChunkStream);
              }).call(this, require("buffer").Buffer);
            }, {
              "./chunkstream": 3,
              "./filter-parse": 9,
              "buffer": 28,
              "util": 67
            }],
            8: [function (require, module, exports) {
              (function (Buffer) {

                let SyncReader = require("./sync-reader");

                let Filter = require("./filter-parse");

                exports.process = function (inBuffer, bitmapInfo) {
                  let outBuffers = [];
                  let reader = new SyncReader(inBuffer);
                  let filter = new Filter(bitmapInfo, {
                    read: reader.read.bind(reader),
                    write: function (bufferPart) {
                      outBuffers.push(bufferPart);
                    },
                    complete: function () {}
                  });
                  filter.start();
                  reader.process();
                  return Buffer.concat(outBuffers);
                };
              }).call(this, require("buffer").Buffer);
            }, {
              "./filter-parse": 9,
              "./sync-reader": 22,
              "buffer": 28
            }],
            9: [function (require, module, exports) {
              (function (Buffer) {

                let interlaceUtils = require("./interlace");

                let paethPredictor = require("./paeth-predictor");

                function getByteWidth(width, bpp, depth) {
                  let byteWidth = width * bpp;

                  if (depth !== 8) {
                    byteWidth = Math.ceil(byteWidth / (8 / depth));
                  }

                  return byteWidth;
                }

                let Filter = module.exports = function (bitmapInfo, dependencies) {
                  let width = bitmapInfo.width;
                  let height = bitmapInfo.height;
                  let interlace = bitmapInfo.interlace;
                  let bpp = bitmapInfo.bpp;
                  let depth = bitmapInfo.depth;
                  this.read = dependencies.read;
                  this.write = dependencies.write;
                  this.complete = dependencies.complete;
                  this._imageIndex = 0;
                  this._images = [];

                  if (interlace) {
                    let passes = interlaceUtils.getImagePasses(width, height);

                    for (let i = 0; i < passes.length; i++) {
                      this._images.push({
                        byteWidth: getByteWidth(passes[i].width, bpp, depth),
                        height: passes[i].height,
                        lineIndex: 0
                      });
                    }
                  } else {
                    this._images.push({
                      byteWidth: getByteWidth(width, bpp, depth),
                      height: height,
                      lineIndex: 0
                    });
                  } // when filtering the line we look at the pixel to the left
                  // the spec also says it is done on a byte level regardless of the number of pixels
                  // so if the depth is byte compatible (8 or 16) we subtract the bpp in order to compare back
                  // a pixel rather than just a different byte part. However if we are sub byte, we ignore.


                  if (depth === 8) {
                    this._xComparison = bpp;
                  } else if (depth === 16) {
                    this._xComparison = bpp * 2;
                  } else {
                    this._xComparison = 1;
                  }
                };

                Filter.prototype.start = function () {
                  this.read(this._images[this._imageIndex].byteWidth + 1, this._reverseFilterLine.bind(this));
                };

                Filter.prototype._unFilterType1 = function (rawData, unfilteredLine, byteWidth) {
                  let xComparison = this._xComparison;
                  let xBiggerThan = xComparison - 1;

                  for (let x = 0; x < byteWidth; x++) {
                    let rawByte = rawData[1 + x];
                    let f1Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;
                    unfilteredLine[x] = rawByte + f1Left;
                  }
                };

                Filter.prototype._unFilterType2 = function (rawData, unfilteredLine, byteWidth) {
                  let lastLine = this._lastLine;

                  for (let x = 0; x < byteWidth; x++) {
                    let rawByte = rawData[1 + x];
                    let f2Up = lastLine ? lastLine[x] : 0;
                    unfilteredLine[x] = rawByte + f2Up;
                  }
                };

                Filter.prototype._unFilterType3 = function (rawData, unfilteredLine, byteWidth) {
                  let xComparison = this._xComparison;
                  let xBiggerThan = xComparison - 1;
                  let lastLine = this._lastLine;

                  for (let x = 0; x < byteWidth; x++) {
                    let rawByte = rawData[1 + x];
                    let f3Up = lastLine ? lastLine[x] : 0;
                    let f3Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;
                    let f3Add = Math.floor((f3Left + f3Up) / 2);
                    unfilteredLine[x] = rawByte + f3Add;
                  }
                };

                Filter.prototype._unFilterType4 = function (rawData, unfilteredLine, byteWidth) {
                  let xComparison = this._xComparison;
                  let xBiggerThan = xComparison - 1;
                  let lastLine = this._lastLine;

                  for (let x = 0; x < byteWidth; x++) {
                    let rawByte = rawData[1 + x];
                    let f4Up = lastLine ? lastLine[x] : 0;
                    let f4Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;
                    let f4UpLeft = x > xBiggerThan && lastLine ? lastLine[x - xComparison] : 0;
                    let f4Add = paethPredictor(f4Left, f4Up, f4UpLeft);
                    unfilteredLine[x] = rawByte + f4Add;
                  }
                };

                Filter.prototype._reverseFilterLine = function (rawData) {
                  let filter = rawData[0];
                  let unfilteredLine;
                  let currentImage = this._images[this._imageIndex];
                  let byteWidth = currentImage.byteWidth;

                  if (filter === 0) {
                    unfilteredLine = rawData.slice(1, byteWidth + 1);
                  } else {
                    unfilteredLine = Buffer.alloc(byteWidth);

                    switch (filter) {
                      case 1:
                        this._unFilterType1(rawData, unfilteredLine, byteWidth);

                        break;

                      case 2:
                        this._unFilterType2(rawData, unfilteredLine, byteWidth);

                        break;

                      case 3:
                        this._unFilterType3(rawData, unfilteredLine, byteWidth);

                        break;

                      case 4:
                        this._unFilterType4(rawData, unfilteredLine, byteWidth);

                        break;

                      default:
                        throw new Error("Unrecognised filter type - " + filter);
                    }
                  }

                  this.write(unfilteredLine);
                  currentImage.lineIndex++;

                  if (currentImage.lineIndex >= currentImage.height) {
                    this._lastLine = null;
                    this._imageIndex++;
                    currentImage = this._images[this._imageIndex];
                  } else {
                    this._lastLine = unfilteredLine;
                  }

                  if (currentImage) {
                    // read, using the byte width that may be from the new current image
                    this.read(currentImage.byteWidth + 1, this._reverseFilterLine.bind(this));
                  } else {
                    this._lastLine = null;
                    this.complete();
                  }
                };
              }).call(this, require("buffer").Buffer);
            }, {
              "./interlace": 11,
              "./paeth-predictor": 15,
              "buffer": 28
            }],
            10: [function (require, module, exports) {
              (function (Buffer) {

                function dePalette(indata, outdata, width, height, palette) {
                  let pxPos = 0; // use values from palette

                  for (let y = 0; y < height; y++) {
                    for (let x = 0; x < width; x++) {
                      let color = palette[indata[pxPos]];

                      if (!color) {
                        throw new Error("index " + indata[pxPos] + " not in palette");
                      }

                      for (let i = 0; i < 4; i++) {
                        outdata[pxPos + i] = color[i];
                      }

                      pxPos += 4;
                    }
                  }
                }

                function replaceTransparentColor(indata, outdata, width, height, transColor) {
                  let pxPos = 0;

                  for (let y = 0; y < height; y++) {
                    for (let x = 0; x < width; x++) {
                      let makeTrans = false;

                      if (transColor.length === 1) {
                        if (transColor[0] === indata[pxPos]) {
                          makeTrans = true;
                        }
                      } else if (transColor[0] === indata[pxPos] && transColor[1] === indata[pxPos + 1] && transColor[2] === indata[pxPos + 2]) {
                        makeTrans = true;
                      }

                      if (makeTrans) {
                        for (let i = 0; i < 4; i++) {
                          outdata[pxPos + i] = 0;
                        }
                      }

                      pxPos += 4;
                    }
                  }
                }

                function scaleDepth(indata, outdata, width, height, depth) {
                  let maxOutSample = 255;
                  let maxInSample = Math.pow(2, depth) - 1;
                  let pxPos = 0;

                  for (let y = 0; y < height; y++) {
                    for (let x = 0; x < width; x++) {
                      for (let i = 0; i < 4; i++) {
                        outdata[pxPos + i] = Math.floor(indata[pxPos + i] * maxOutSample / maxInSample + 0.5);
                      }

                      pxPos += 4;
                    }
                  }
                }

                module.exports = function (indata, imageData) {
                  let depth = imageData.depth;
                  let width = imageData.width;
                  let height = imageData.height;
                  let colorType = imageData.colorType;
                  let transColor = imageData.transColor;
                  let palette = imageData.palette;
                  let outdata = indata; // only different for 16 bits

                  if (colorType === 3) {
                    // paletted
                    dePalette(indata, outdata, width, height, palette);
                  } else {
                    if (transColor) {
                      replaceTransparentColor(indata, outdata, width, height, transColor);
                    } // if it needs scaling


                    if (depth !== 8) {
                      // if we need to change the buffer size
                      if (depth === 16) {
                        outdata = Buffer.alloc(width * height * 4);
                      }

                      scaleDepth(indata, outdata, width, height, depth);
                    }
                  }

                  return outdata;
                };
              }).call(this, require("buffer").Buffer);
            }, {
              "buffer": 28
            }],
            11: [function (require, module, exports) {
              //   0 1 2 3 4 5 6 7
              // 0 x 6 4 6 x 6 4 6
              // 1 7 7 7 7 7 7 7 7
              // 2 5 6 5 6 5 6 5 6
              // 3 7 7 7 7 7 7 7 7
              // 4 3 6 4 6 3 6 4 6
              // 5 7 7 7 7 7 7 7 7
              // 6 5 6 5 6 5 6 5 6
              // 7 7 7 7 7 7 7 7 7

              let imagePasses = [{
                // pass 1 - 1px
                x: [0],
                y: [0]
              }, {
                // pass 2 - 1px
                x: [4],
                y: [0]
              }, {
                // pass 3 - 2px
                x: [0, 4],
                y: [4]
              }, {
                // pass 4 - 4px
                x: [2, 6],
                y: [0, 4]
              }, {
                // pass 5 - 8px
                x: [0, 2, 4, 6],
                y: [2, 6]
              }, {
                // pass 6 - 16px
                x: [1, 3, 5, 7],
                y: [0, 2, 4, 6]
              }, {
                // pass 7 - 32px
                x: [0, 1, 2, 3, 4, 5, 6, 7],
                y: [1, 3, 5, 7]
              }];

              exports.getImagePasses = function (width, height) {
                let images = [];
                let xLeftOver = width % 8;
                let yLeftOver = height % 8;
                let xRepeats = (width - xLeftOver) / 8;
                let yRepeats = (height - yLeftOver) / 8;

                for (let i = 0; i < imagePasses.length; i++) {
                  let pass = imagePasses[i];
                  let passWidth = xRepeats * pass.x.length;
                  let passHeight = yRepeats * pass.y.length;

                  for (let j = 0; j < pass.x.length; j++) {
                    if (pass.x[j] < xLeftOver) {
                      passWidth++;
                    } else {
                      break;
                    }
                  }

                  for (let j = 0; j < pass.y.length; j++) {
                    if (pass.y[j] < yLeftOver) {
                      passHeight++;
                    } else {
                      break;
                    }
                  }

                  if (passWidth > 0 && passHeight > 0) {
                    images.push({
                      width: passWidth,
                      height: passHeight,
                      index: i
                    });
                  }
                }

                return images;
              };

              exports.getInterlaceIterator = function (width) {
                return function (x, y, pass) {
                  let outerXLeftOver = x % imagePasses[pass].x.length;
                  let outerX = (x - outerXLeftOver) / imagePasses[pass].x.length * 8 + imagePasses[pass].x[outerXLeftOver];
                  let outerYLeftOver = y % imagePasses[pass].y.length;
                  let outerY = (y - outerYLeftOver) / imagePasses[pass].y.length * 8 + imagePasses[pass].y[outerYLeftOver];
                  return outerX * 4 + outerY * width * 4;
                };
              };
            }, {}],
            12: [function (require, module, exports) {
              (function (Buffer) {

                let util = require("util");

                let Stream = require("stream");

                let constants = require("./constants");

                let Packer = require("./packer");

                let PackerAsync = module.exports = function (opt) {
                  Stream.call(this);
                  let options = opt || {};
                  this._packer = new Packer(options);
                  this._deflate = this._packer.createDeflate();
                  this.readable = true;
                };

                util.inherits(PackerAsync, Stream);

                PackerAsync.prototype.pack = function (data, width, height, gamma) {
                  // Signature
                  this.emit("data", Buffer.from(constants.PNG_SIGNATURE));
                  this.emit("data", this._packer.packIHDR(width, height));

                  if (gamma) {
                    this.emit("data", this._packer.packGAMA(gamma));
                  }

                  let filteredData = this._packer.filterData(data, width, height); // compress it


                  this._deflate.on("error", this.emit.bind(this, "error"));

                  this._deflate.on("data", function (compressedData) {
                    this.emit("data", this._packer.packIDAT(compressedData));
                  }.bind(this));

                  this._deflate.on("end", function () {
                    this.emit("data", this._packer.packIEND());
                    this.emit("end");
                  }.bind(this));

                  this._deflate.end(filteredData);
                };
              }).call(this, require("buffer").Buffer);
            }, {
              "./constants": 4,
              "./packer": 14,
              "buffer": 28,
              "stream": 63,
              "util": 67
            }],
            13: [function (require, module, exports) {
              (function (Buffer) {

                let hasSyncZlib = true;

                let zlib = require("zlib");

                if (!zlib.deflateSync) {
                  hasSyncZlib = false;
                }

                let constants = require("./constants");

                let Packer = require("./packer");

                module.exports = function (metaData, opt) {
                  if (!hasSyncZlib) {
                    throw new Error("To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0");
                  }

                  let options = opt || {};
                  let packer = new Packer(options);
                  let chunks = []; // Signature

                  chunks.push(Buffer.from(constants.PNG_SIGNATURE)); // Header

                  chunks.push(packer.packIHDR(metaData.width, metaData.height));

                  if (metaData.gamma) {
                    chunks.push(packer.packGAMA(metaData.gamma));
                  }

                  let filteredData = packer.filterData(metaData.data, metaData.width, metaData.height); // compress it

                  let compressedData = zlib.deflateSync(filteredData, packer.getDeflateOptions());
                  filteredData = null;

                  if (!compressedData || !compressedData.length) {
                    throw new Error("bad png - invalid compressed data response");
                  }

                  chunks.push(packer.packIDAT(compressedData)); // End

                  chunks.push(packer.packIEND());
                  return Buffer.concat(chunks);
                };
              }).call(this, require("buffer").Buffer);
            }, {
              "./constants": 4,
              "./packer": 14,
              "buffer": 28,
              "zlib": 27
            }],
            14: [function (require, module, exports) {
              (function (Buffer) {

                let constants = require("./constants");

                let CrcStream = require("./crc");

                let bitPacker = require("./bitpacker");

                let filter = require("./filter-pack");

                let zlib = require("zlib");

                let Packer = module.exports = function (options) {
                  this._options = options;
                  options.deflateChunkSize = options.deflateChunkSize || 32 * 1024;
                  options.deflateLevel = options.deflateLevel != null ? options.deflateLevel : 9;
                  options.deflateStrategy = options.deflateStrategy != null ? options.deflateStrategy : 3;
                  options.inputHasAlpha = options.inputHasAlpha != null ? options.inputHasAlpha : true;
                  options.deflateFactory = options.deflateFactory || zlib.createDeflate;
                  options.bitDepth = options.bitDepth || 8; // This is outputColorType

                  options.colorType = typeof options.colorType === "number" ? options.colorType : constants.COLORTYPE_COLOR_ALPHA;
                  options.inputColorType = typeof options.inputColorType === "number" ? options.inputColorType : constants.COLORTYPE_COLOR_ALPHA;

                  if ([constants.COLORTYPE_GRAYSCALE, constants.COLORTYPE_COLOR, constants.COLORTYPE_COLOR_ALPHA, constants.COLORTYPE_ALPHA].indexOf(options.colorType) === -1) {
                    throw new Error("option color type:" + options.colorType + " is not supported at present");
                  }

                  if ([constants.COLORTYPE_GRAYSCALE, constants.COLORTYPE_COLOR, constants.COLORTYPE_COLOR_ALPHA, constants.COLORTYPE_ALPHA].indexOf(options.inputColorType) === -1) {
                    throw new Error("option input color type:" + options.inputColorType + " is not supported at present");
                  }

                  if (options.bitDepth !== 8 && options.bitDepth !== 16) {
                    throw new Error("option bit depth:" + options.bitDepth + " is not supported at present");
                  }
                };

                Packer.prototype.getDeflateOptions = function () {
                  return {
                    chunkSize: this._options.deflateChunkSize,
                    level: this._options.deflateLevel,
                    strategy: this._options.deflateStrategy
                  };
                };

                Packer.prototype.createDeflate = function () {
                  return this._options.deflateFactory(this.getDeflateOptions());
                };

                Packer.prototype.filterData = function (data, width, height) {
                  // convert to correct format for filtering (e.g. right bpp and bit depth)
                  let packedData = bitPacker(data, width, height, this._options); // filter pixel data

                  let bpp = constants.COLORTYPE_TO_BPP_MAP[this._options.colorType];
                  let filteredData = filter(packedData, width, height, this._options, bpp);
                  return filteredData;
                };

                Packer.prototype._packChunk = function (type, data) {
                  let len = data ? data.length : 0;
                  let buf = Buffer.alloc(len + 12);
                  buf.writeUInt32BE(len, 0);
                  buf.writeUInt32BE(type, 4);

                  if (data) {
                    data.copy(buf, 8);
                  }

                  buf.writeInt32BE(CrcStream.crc32(buf.slice(4, buf.length - 4)), buf.length - 4);
                  return buf;
                };

                Packer.prototype.packGAMA = function (gamma) {
                  let buf = Buffer.alloc(4);
                  buf.writeUInt32BE(Math.floor(gamma * constants.GAMMA_DIVISION), 0);
                  return this._packChunk(constants.TYPE_gAMA, buf);
                };

                Packer.prototype.packIHDR = function (width, height) {
                  let buf = Buffer.alloc(13);
                  buf.writeUInt32BE(width, 0);
                  buf.writeUInt32BE(height, 4);
                  buf[8] = this._options.bitDepth; // Bit depth

                  buf[9] = this._options.colorType; // colorType

                  buf[10] = 0; // compression

                  buf[11] = 0; // filter

                  buf[12] = 0; // interlace

                  return this._packChunk(constants.TYPE_IHDR, buf);
                };

                Packer.prototype.packIDAT = function (data) {
                  return this._packChunk(constants.TYPE_IDAT, data);
                };

                Packer.prototype.packIEND = function () {
                  return this._packChunk(constants.TYPE_IEND, null);
                };
              }).call(this, require("buffer").Buffer);
            }, {
              "./bitpacker": 2,
              "./constants": 4,
              "./crc": 5,
              "./filter-pack": 6,
              "buffer": 28,
              "zlib": 27
            }],
            15: [function (require, module, exports) {

              module.exports = function paethPredictor(left, above, upLeft) {
                let paeth = left + above - upLeft;
                let pLeft = Math.abs(paeth - left);
                let pAbove = Math.abs(paeth - above);
                let pUpLeft = Math.abs(paeth - upLeft);

                if (pLeft <= pAbove && pLeft <= pUpLeft) {
                  return left;
                }

                if (pAbove <= pUpLeft) {
                  return above;
                }

                return upLeft;
              };
            }, {}],
            16: [function (require, module, exports) {

              let util = require("util");

              let zlib = require("zlib");

              let ChunkStream = require("./chunkstream");

              let FilterAsync = require("./filter-parse-async");

              let Parser = require("./parser");

              let bitmapper = require("./bitmapper");

              let formatNormaliser = require("./format-normaliser");

              let ParserAsync = module.exports = function (options) {
                ChunkStream.call(this);
                this._parser = new Parser(options, {
                  read: this.read.bind(this),
                  error: this._handleError.bind(this),
                  metadata: this._handleMetaData.bind(this),
                  gamma: this.emit.bind(this, "gamma"),
                  palette: this._handlePalette.bind(this),
                  transColor: this._handleTransColor.bind(this),
                  finished: this._finished.bind(this),
                  inflateData: this._inflateData.bind(this),
                  simpleTransparency: this._simpleTransparency.bind(this),
                  headersFinished: this._headersFinished.bind(this)
                });
                this._options = options;
                this.writable = true;

                this._parser.start();
              };

              util.inherits(ParserAsync, ChunkStream);

              ParserAsync.prototype._handleError = function (err) {
                this.emit("error", err);
                this.writable = false;
                this.destroy();

                if (this._inflate && this._inflate.destroy) {
                  this._inflate.destroy();
                }

                if (this._filter) {
                  this._filter.destroy(); // For backward compatibility with Node 7 and below.
                  // Suppress errors due to _inflate calling write() even after
                  // it's destroy()'ed.


                  this._filter.on("error", function () {});
                }

                this.errord = true;
              };

              ParserAsync.prototype._inflateData = function (data) {
                if (!this._inflate) {
                  if (this._bitmapInfo.interlace) {
                    this._inflate = zlib.createInflate();

                    this._inflate.on("error", this.emit.bind(this, "error"));

                    this._filter.on("complete", this._complete.bind(this));

                    this._inflate.pipe(this._filter);
                  } else {
                    let rowSize = (this._bitmapInfo.width * this._bitmapInfo.bpp * this._bitmapInfo.depth + 7 >> 3) + 1;
                    let imageSize = rowSize * this._bitmapInfo.height;
                    let chunkSize = Math.max(imageSize, zlib.Z_MIN_CHUNK);
                    this._inflate = zlib.createInflate({
                      chunkSize: chunkSize
                    });
                    let leftToInflate = imageSize;
                    let emitError = this.emit.bind(this, "error");

                    this._inflate.on("error", function (err) {
                      if (!leftToInflate) {
                        return;
                      }

                      emitError(err);
                    });

                    this._filter.on("complete", this._complete.bind(this));

                    let filterWrite = this._filter.write.bind(this._filter);

                    this._inflate.on("data", function (chunk) {
                      if (!leftToInflate) {
                        return;
                      }

                      if (chunk.length > leftToInflate) {
                        chunk = chunk.slice(0, leftToInflate);
                      }

                      leftToInflate -= chunk.length;
                      filterWrite(chunk);
                    });

                    this._inflate.on("end", this._filter.end.bind(this._filter));
                  }
                }

                this._inflate.write(data);
              };

              ParserAsync.prototype._handleMetaData = function (metaData) {
                this._metaData = metaData;
                this._bitmapInfo = Object.create(metaData);
                this._filter = new FilterAsync(this._bitmapInfo);
              };

              ParserAsync.prototype._handleTransColor = function (transColor) {
                this._bitmapInfo.transColor = transColor;
              };

              ParserAsync.prototype._handlePalette = function (palette) {
                this._bitmapInfo.palette = palette;
              };

              ParserAsync.prototype._simpleTransparency = function () {
                this._metaData.alpha = true;
              };

              ParserAsync.prototype._headersFinished = function () {
                // Up until this point, we don't know if we have a tRNS chunk (alpha)
                // so we can't emit metadata any earlier
                this.emit("metadata", this._metaData);
              };

              ParserAsync.prototype._finished = function () {
                if (this.errord) {
                  return;
                }

                if (!this._inflate) {
                  this.emit("error", "No Inflate block");
                } else {
                  // no more data to inflate
                  this._inflate.end();
                }
              };

              ParserAsync.prototype._complete = function (filteredData) {
                if (this.errord) {
                  return;
                }

                let normalisedBitmapData;

                try {
                  let bitmapData = bitmapper.dataToBitMap(filteredData, this._bitmapInfo);
                  normalisedBitmapData = formatNormaliser(bitmapData, this._bitmapInfo);
                  bitmapData = null;
                } catch (ex) {
                  this._handleError(ex);

                  return;
                }

                this.emit("parsed", normalisedBitmapData);
              };
            }, {
              "./bitmapper": 1,
              "./chunkstream": 3,
              "./filter-parse-async": 7,
              "./format-normaliser": 10,
              "./parser": 18,
              "util": 67,
              "zlib": 27
            }],
            17: [function (require, module, exports) {
              (function (Buffer) {

                let hasSyncZlib = true;

                let zlib = require("zlib");

                let inflateSync = require("./sync-inflate");

                if (!zlib.deflateSync) {
                  hasSyncZlib = false;
                }

                let SyncReader = require("./sync-reader");

                let FilterSync = require("./filter-parse-sync");

                let Parser = require("./parser");

                let bitmapper = require("./bitmapper");

                let formatNormaliser = require("./format-normaliser");

                module.exports = function (buffer, options) {
                  if (!hasSyncZlib) {
                    throw new Error("To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0");
                  }

                  let err;

                  function handleError(_err_) {
                    err = _err_;
                  }

                  let metaData;

                  function handleMetaData(_metaData_) {
                    metaData = _metaData_;
                  }

                  function handleTransColor(transColor) {
                    metaData.transColor = transColor;
                  }

                  function handlePalette(palette) {
                    metaData.palette = palette;
                  }

                  function handleSimpleTransparency() {
                    metaData.alpha = true;
                  }

                  let gamma;

                  function handleGamma(_gamma_) {
                    gamma = _gamma_;
                  }

                  let inflateDataList = [];

                  function handleInflateData(inflatedData) {
                    inflateDataList.push(inflatedData);
                  }

                  let reader = new SyncReader(buffer);
                  let parser = new Parser(options, {
                    read: reader.read.bind(reader),
                    error: handleError,
                    metadata: handleMetaData,
                    gamma: handleGamma,
                    palette: handlePalette,
                    transColor: handleTransColor,
                    inflateData: handleInflateData,
                    simpleTransparency: handleSimpleTransparency
                  });
                  parser.start();
                  reader.process();

                  if (err) {
                    throw err;
                  } //join together the inflate datas


                  let inflateData = Buffer.concat(inflateDataList);
                  inflateDataList.length = 0;
                  let inflatedData;

                  if (metaData.interlace) {
                    inflatedData = zlib.inflateSync(inflateData);
                  } else {
                    let rowSize = (metaData.width * metaData.bpp * metaData.depth + 7 >> 3) + 1;
                    let imageSize = rowSize * metaData.height;
                    inflatedData = inflateSync(inflateData, {
                      chunkSize: imageSize,
                      maxLength: imageSize
                    });
                  }

                  inflateData = null;

                  if (!inflatedData || !inflatedData.length) {
                    throw new Error("bad png - invalid inflate data response");
                  }

                  let unfilteredData = FilterSync.process(inflatedData, metaData);
                  inflateData = null;
                  let bitmapData = bitmapper.dataToBitMap(unfilteredData, metaData);
                  unfilteredData = null;
                  let normalisedBitmapData = formatNormaliser(bitmapData, metaData);
                  metaData.data = normalisedBitmapData;
                  metaData.gamma = gamma || 0;
                  return metaData;
                };
              }).call(this, require("buffer").Buffer);
            }, {
              "./bitmapper": 1,
              "./filter-parse-sync": 8,
              "./format-normaliser": 10,
              "./parser": 18,
              "./sync-inflate": 21,
              "./sync-reader": 22,
              "buffer": 28,
              "zlib": 27
            }],
            18: [function (require, module, exports) {
              (function (Buffer) {

                let constants = require("./constants");

                let CrcCalculator = require("./crc");

                let Parser = module.exports = function (options, dependencies) {
                  this._options = options;
                  options.checkCRC = options.checkCRC !== false;
                  this._hasIHDR = false;
                  this._hasIEND = false;
                  this._emittedHeadersFinished = false; // input flags/metadata

                  this._palette = [];
                  this._colorType = 0;
                  this._chunks = {};
                  this._chunks[constants.TYPE_IHDR] = this._handleIHDR.bind(this);
                  this._chunks[constants.TYPE_IEND] = this._handleIEND.bind(this);
                  this._chunks[constants.TYPE_IDAT] = this._handleIDAT.bind(this);
                  this._chunks[constants.TYPE_PLTE] = this._handlePLTE.bind(this);
                  this._chunks[constants.TYPE_tRNS] = this._handleTRNS.bind(this);
                  this._chunks[constants.TYPE_gAMA] = this._handleGAMA.bind(this);
                  this.read = dependencies.read;
                  this.error = dependencies.error;
                  this.metadata = dependencies.metadata;
                  this.gamma = dependencies.gamma;
                  this.transColor = dependencies.transColor;
                  this.palette = dependencies.palette;
                  this.parsed = dependencies.parsed;
                  this.inflateData = dependencies.inflateData;
                  this.finished = dependencies.finished;
                  this.simpleTransparency = dependencies.simpleTransparency;

                  this.headersFinished = dependencies.headersFinished || function () {};
                };

                Parser.prototype.start = function () {
                  this.read(constants.PNG_SIGNATURE.length, this._parseSignature.bind(this));
                };

                Parser.prototype._parseSignature = function (data) {
                  let signature = constants.PNG_SIGNATURE;

                  for (let i = 0; i < signature.length; i++) {
                    if (data[i] !== signature[i]) {
                      this.error(new Error("Invalid file signature"));
                      return;
                    }
                  }

                  this.read(8, this._parseChunkBegin.bind(this));
                };

                Parser.prototype._parseChunkBegin = function (data) {
                  // chunk content length
                  let length = data.readUInt32BE(0); // chunk type

                  let type = data.readUInt32BE(4);
                  let name = "";

                  for (let i = 4; i < 8; i++) {
                    name += String.fromCharCode(data[i]);
                  } //console.log('chunk ', name, length);
                  // chunk flags


                  let ancillary = Boolean(data[4] & 0x20); // or critical
                  //    priv = Boolean(data[5] & 0x20), // or public
                  //    safeToCopy = Boolean(data[7] & 0x20); // or unsafe

                  if (!this._hasIHDR && type !== constants.TYPE_IHDR) {
                    this.error(new Error("Expected IHDR on beggining"));
                    return;
                  }

                  this._crc = new CrcCalculator();

                  this._crc.write(Buffer.from(name));

                  if (this._chunks[type]) {
                    return this._chunks[type](length);
                  }

                  if (!ancillary) {
                    this.error(new Error("Unsupported critical chunk type " + name));
                    return;
                  }

                  this.read(length + 4, this._skipChunk.bind(this));
                };

                Parser.prototype._skipChunk = function ()
                /*data*/
                {
                  this.read(8, this._parseChunkBegin.bind(this));
                };

                Parser.prototype._handleChunkEnd = function () {
                  this.read(4, this._parseChunkEnd.bind(this));
                };

                Parser.prototype._parseChunkEnd = function (data) {
                  let fileCrc = data.readInt32BE(0);

                  let calcCrc = this._crc.crc32(); // check CRC


                  if (this._options.checkCRC && calcCrc !== fileCrc) {
                    this.error(new Error("Crc error - " + fileCrc + " - " + calcCrc));
                    return;
                  }

                  if (!this._hasIEND) {
                    this.read(8, this._parseChunkBegin.bind(this));
                  }
                };

                Parser.prototype._handleIHDR = function (length) {
                  this.read(length, this._parseIHDR.bind(this));
                };

                Parser.prototype._parseIHDR = function (data) {
                  this._crc.write(data);

                  let width = data.readUInt32BE(0);
                  let height = data.readUInt32BE(4);
                  let depth = data[8];
                  let colorType = data[9]; // bits: 1 palette, 2 color, 4 alpha

                  let compr = data[10];
                  let filter = data[11];
                  let interlace = data[12]; // console.log('    width', width, 'height', height,
                  //     'depth', depth, 'colorType', colorType,
                  //     'compr', compr, 'filter', filter, 'interlace', interlace
                  // );

                  if (depth !== 8 && depth !== 4 && depth !== 2 && depth !== 1 && depth !== 16) {
                    this.error(new Error("Unsupported bit depth " + depth));
                    return;
                  }

                  if (!(colorType in constants.COLORTYPE_TO_BPP_MAP)) {
                    this.error(new Error("Unsupported color type"));
                    return;
                  }

                  if (compr !== 0) {
                    this.error(new Error("Unsupported compression method"));
                    return;
                  }

                  if (filter !== 0) {
                    this.error(new Error("Unsupported filter method"));
                    return;
                  }

                  if (interlace !== 0 && interlace !== 1) {
                    this.error(new Error("Unsupported interlace method"));
                    return;
                  }

                  this._colorType = colorType;
                  let bpp = constants.COLORTYPE_TO_BPP_MAP[this._colorType];
                  this._hasIHDR = true;
                  this.metadata({
                    width: width,
                    height: height,
                    depth: depth,
                    interlace: Boolean(interlace),
                    palette: Boolean(colorType & constants.COLORTYPE_PALETTE),
                    color: Boolean(colorType & constants.COLORTYPE_COLOR),
                    alpha: Boolean(colorType & constants.COLORTYPE_ALPHA),
                    bpp: bpp,
                    colorType: colorType
                  });

                  this._handleChunkEnd();
                };

                Parser.prototype._handlePLTE = function (length) {
                  this.read(length, this._parsePLTE.bind(this));
                };

                Parser.prototype._parsePLTE = function (data) {
                  this._crc.write(data);

                  let entries = Math.floor(data.length / 3); // console.log('Palette:', entries);

                  for (let i = 0; i < entries; i++) {
                    this._palette.push([data[i * 3], data[i * 3 + 1], data[i * 3 + 2], 0xff]);
                  }

                  this.palette(this._palette);

                  this._handleChunkEnd();
                };

                Parser.prototype._handleTRNS = function (length) {
                  this.simpleTransparency();
                  this.read(length, this._parseTRNS.bind(this));
                };

                Parser.prototype._parseTRNS = function (data) {
                  this._crc.write(data); // palette


                  if (this._colorType === constants.COLORTYPE_PALETTE_COLOR) {
                    if (this._palette.length === 0) {
                      this.error(new Error("Transparency chunk must be after palette"));
                      return;
                    }

                    if (data.length > this._palette.length) {
                      this.error(new Error("More transparent colors than palette size"));
                      return;
                    }

                    for (let i = 0; i < data.length; i++) {
                      this._palette[i][3] = data[i];
                    }

                    this.palette(this._palette);
                  } // for colorType 0 (grayscale) and 2 (rgb)
                  // there might be one gray/color defined as transparent


                  if (this._colorType === constants.COLORTYPE_GRAYSCALE) {
                    // grey, 2 bytes
                    this.transColor([data.readUInt16BE(0)]);
                  }

                  if (this._colorType === constants.COLORTYPE_COLOR) {
                    this.transColor([data.readUInt16BE(0), data.readUInt16BE(2), data.readUInt16BE(4)]);
                  }

                  this._handleChunkEnd();
                };

                Parser.prototype._handleGAMA = function (length) {
                  this.read(length, this._parseGAMA.bind(this));
                };

                Parser.prototype._parseGAMA = function (data) {
                  this._crc.write(data);

                  this.gamma(data.readUInt32BE(0) / constants.GAMMA_DIVISION);

                  this._handleChunkEnd();
                };

                Parser.prototype._handleIDAT = function (length) {
                  if (!this._emittedHeadersFinished) {
                    this._emittedHeadersFinished = true;
                    this.headersFinished();
                  }

                  this.read(-length, this._parseIDAT.bind(this, length));
                };

                Parser.prototype._parseIDAT = function (length, data) {
                  this._crc.write(data);

                  if (this._colorType === constants.COLORTYPE_PALETTE_COLOR && this._palette.length === 0) {
                    throw new Error("Expected palette not found");
                  }

                  this.inflateData(data);
                  let leftOverLength = length - data.length;

                  if (leftOverLength > 0) {
                    this._handleIDAT(leftOverLength);
                  } else {
                    this._handleChunkEnd();
                  }
                };

                Parser.prototype._handleIEND = function (length) {
                  this.read(length, this._parseIEND.bind(this));
                };

                Parser.prototype._parseIEND = function (data) {
                  this._crc.write(data);

                  this._hasIEND = true;

                  this._handleChunkEnd();

                  if (this.finished) {
                    this.finished();
                  }
                };
              }).call(this, require("buffer").Buffer);
            }, {
              "./constants": 4,
              "./crc": 5,
              "buffer": 28
            }],
            19: [function (require, module, exports) {

              let parse = require("./parser-sync");

              let pack = require("./packer-sync");

              exports.read = function (buffer, options) {
                return parse(buffer, options || {});
              };

              exports.write = function (png, options) {
                return pack(png, options);
              };
            }, {
              "./packer-sync": 13,
              "./parser-sync": 17
            }],
            20: [function (require, module, exports) {
              (function (process, Buffer) {

                let util = require("util");

                let Stream = require("stream");

                let Parser = require("./parser-async");

                let Packer = require("./packer-async");

                let PNGSync = require("./png-sync");

                let PNG = exports.PNG = function (options) {
                  Stream.call(this);
                  options = options || {}; // eslint-disable-line no-param-reassign
                  // coerce pixel dimensions to integers (also coerces undefined -> 0):

                  this.width = options.width | 0;
                  this.height = options.height | 0;
                  this.data = this.width > 0 && this.height > 0 ? Buffer.alloc(4 * this.width * this.height) : null;

                  if (options.fill && this.data) {
                    this.data.fill(0);
                  }

                  this.gamma = 0;
                  this.readable = this.writable = true;
                  this._parser = new Parser(options);

                  this._parser.on("error", this.emit.bind(this, "error"));

                  this._parser.on("close", this._handleClose.bind(this));

                  this._parser.on("metadata", this._metadata.bind(this));

                  this._parser.on("gamma", this._gamma.bind(this));

                  this._parser.on("parsed", function (data) {
                    this.data = data;
                    this.emit("parsed", data);
                  }.bind(this));

                  this._packer = new Packer(options);

                  this._packer.on("data", this.emit.bind(this, "data"));

                  this._packer.on("end", this.emit.bind(this, "end"));

                  this._parser.on("close", this._handleClose.bind(this));

                  this._packer.on("error", this.emit.bind(this, "error"));
                };

                util.inherits(PNG, Stream);
                PNG.sync = PNGSync;

                PNG.prototype.pack = function () {
                  if (!this.data || !this.data.length) {
                    this.emit("error", "No data provided");
                    return this;
                  }

                  process.nextTick(function () {
                    this._packer.pack(this.data, this.width, this.height, this.gamma);
                  }.bind(this));
                  return this;
                };

                PNG.prototype.parse = function (data, callback) {
                  if (callback) {
                    let onParsed, onError;

                    onParsed = function (parsedData) {
                      this.removeListener("error", onError);
                      this.data = parsedData;
                      callback(null, this);
                    }.bind(this);

                    onError = function (err) {
                      this.removeListener("parsed", onParsed);
                      callback(err, null);
                    }.bind(this);

                    this.once("parsed", onParsed);
                    this.once("error", onError);
                  }

                  this.end(data);
                  return this;
                };

                PNG.prototype.write = function (data) {
                  this._parser.write(data);

                  return true;
                };

                PNG.prototype.end = function (data) {
                  this._parser.end(data);
                };

                PNG.prototype._metadata = function (metadata) {
                  this.width = metadata.width;
                  this.height = metadata.height;
                  this.emit("metadata", metadata);
                };

                PNG.prototype._gamma = function (gamma) {
                  this.gamma = gamma;
                };

                PNG.prototype._handleClose = function () {
                  if (!this._parser.writable && !this._packer.readable) {
                    this.emit("close");
                  }
                };

                PNG.bitblt = function (src, dst, srcX, srcY, width, height, deltaX, deltaY) {
                  // eslint-disable-line max-params
                  // coerce pixel dimensions to integers (also coerces undefined -> 0):

                  /* eslint-disable no-param-reassign */
                  srcX |= 0;
                  srcY |= 0;
                  width |= 0;
                  height |= 0;
                  deltaX |= 0;
                  deltaY |= 0;
                  /* eslint-enable no-param-reassign */

                  if (srcX > src.width || srcY > src.height || srcX + width > src.width || srcY + height > src.height) {
                    throw new Error("bitblt reading outside image");
                  }

                  if (deltaX > dst.width || deltaY > dst.height || deltaX + width > dst.width || deltaY + height > dst.height) {
                    throw new Error("bitblt writing outside image");
                  }

                  for (let y = 0; y < height; y++) {
                    src.data.copy(dst.data, (deltaY + y) * dst.width + deltaX << 2, (srcY + y) * src.width + srcX << 2, (srcY + y) * src.width + srcX + width << 2);
                  }
                };

                PNG.prototype.bitblt = function (dst, srcX, srcY, width, height, deltaX, deltaY) {
                  // eslint-disable-line max-params
                  PNG.bitblt(this, dst, srcX, srcY, width, height, deltaX, deltaY);
                  return this;
                };

                PNG.adjustGamma = function (src) {
                  if (src.gamma) {
                    for (let y = 0; y < src.height; y++) {
                      for (let x = 0; x < src.width; x++) {
                        let idx = src.width * y + x << 2;

                        for (let i = 0; i < 3; i++) {
                          let sample = src.data[idx + i] / 255;
                          sample = Math.pow(sample, 1 / 2.2 / src.gamma);
                          src.data[idx + i] = Math.round(sample * 255);
                        }
                      }
                    }

                    src.gamma = 0;
                  }
                };

                PNG.prototype.adjustGamma = function () {
                  PNG.adjustGamma(this);
                };
              }).call(this, require('_process'), require("buffer").Buffer);
            }, {
              "./packer-async": 12,
              "./parser-async": 16,
              "./png-sync": 19,
              "_process": 47,
              "buffer": 28,
              "stream": 63,
              "util": 67
            }],
            21: [function (require, module, exports) {
              (function (process, Buffer) {

                let assert = require("assert").ok;

                let zlib = require("zlib");

                let util = require("util");

                let kMaxLength = require("buffer").kMaxLength;

                function Inflate(opts) {
                  if (!(this instanceof Inflate)) {
                    return new Inflate(opts);
                  }

                  if (opts && opts.chunkSize < zlib.Z_MIN_CHUNK) {
                    opts.chunkSize = zlib.Z_MIN_CHUNK;
                  }

                  zlib.Inflate.call(this, opts); // Node 8 --> 9 compatibility check

                  this._offset = this._offset === undefined ? this._outOffset : this._offset;
                  this._buffer = this._buffer || this._outBuffer;

                  if (opts && opts.maxLength != null) {
                    this._maxLength = opts.maxLength;
                  }
                }

                function createInflate(opts) {
                  return new Inflate(opts);
                }

                function _close(engine, callback) {
                  if (callback) {
                    process.nextTick(callback);
                  } // Caller may invoke .close after a zlib error (which will null _handle).


                  if (!engine._handle) {
                    return;
                  }

                  engine._handle.close();

                  engine._handle = null;
                }

                Inflate.prototype._processChunk = function (chunk, flushFlag, asyncCb) {
                  if (typeof asyncCb === "function") {
                    return zlib.Inflate._processChunk.call(this, chunk, flushFlag, asyncCb);
                  }

                  let self = this;
                  let availInBefore = chunk && chunk.length;
                  let availOutBefore = this._chunkSize - this._offset;
                  let leftToInflate = this._maxLength;
                  let inOff = 0;
                  let buffers = [];
                  let nread = 0;
                  let error;
                  this.on("error", function (err) {
                    error = err;
                  });

                  function handleChunk(availInAfter, availOutAfter) {
                    if (self._hadError) {
                      return;
                    }

                    let have = availOutBefore - availOutAfter;
                    assert(have >= 0, "have should not go down");

                    if (have > 0) {
                      let out = self._buffer.slice(self._offset, self._offset + have);

                      self._offset += have;

                      if (out.length > leftToInflate) {
                        out = out.slice(0, leftToInflate);
                      }

                      buffers.push(out);
                      nread += out.length;
                      leftToInflate -= out.length;

                      if (leftToInflate === 0) {
                        return false;
                      }
                    }

                    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
                      availOutBefore = self._chunkSize;
                      self._offset = 0;
                      self._buffer = Buffer.allocUnsafe(self._chunkSize);
                    }

                    if (availOutAfter === 0) {
                      inOff += availInBefore - availInAfter;
                      availInBefore = availInAfter;
                      return true;
                    }

                    return false;
                  }

                  assert(this._handle, "zlib binding closed");
                  let res;

                  do {
                    res = this._handle.writeSync(flushFlag, chunk, // in
                    inOff, // in_off
                    availInBefore, // in_len
                    this._buffer, // out
                    this._offset, //out_off
                    availOutBefore); // out_len
                    // Node 8 --> 9 compatibility check

                    res = res || this._writeState;
                  } while (!this._hadError && handleChunk(res[0], res[1]));

                  if (this._hadError) {
                    throw error;
                  }

                  if (nread >= kMaxLength) {
                    _close(this);

                    throw new RangeError("Cannot create final Buffer. It would be larger than 0x" + kMaxLength.toString(16) + " bytes");
                  }

                  let buf = Buffer.concat(buffers, nread);

                  _close(this);

                  return buf;
                };

                util.inherits(Inflate, zlib.Inflate);

                function zlibBufferSync(engine, buffer) {
                  if (typeof buffer === "string") {
                    buffer = Buffer.from(buffer);
                  }

                  if (!(buffer instanceof Buffer)) {
                    throw new TypeError("Not a string or buffer");
                  }

                  let flushFlag = engine._finishFlushFlag;

                  if (flushFlag == null) {
                    flushFlag = zlib.Z_FINISH;
                  }

                  return engine._processChunk(buffer, flushFlag);
                }

                function inflateSync(buffer, opts) {
                  return zlibBufferSync(new Inflate(opts), buffer);
                }

                module.exports = exports = inflateSync;
                exports.Inflate = Inflate;
                exports.createInflate = createInflate;
                exports.inflateSync = inflateSync;
              }).call(this, require('_process'), require("buffer").Buffer);
            }, {
              "_process": 47,
              "assert": 23,
              "buffer": 28,
              "util": 67,
              "zlib": 27
            }],
            22: [function (require, module, exports) {

              let SyncReader = module.exports = function (buffer) {
                this._buffer = buffer;
                this._reads = [];
              };

              SyncReader.prototype.read = function (length, callback) {
                this._reads.push({
                  length: Math.abs(length),
                  // if length < 0 then at most this length
                  allowLess: length < 0,
                  func: callback
                });
              };

              SyncReader.prototype.process = function () {
                // as long as there is any data and read requests
                while (this._reads.length > 0 && this._buffer.length) {
                  let read = this._reads[0];

                  if (this._buffer.length && (this._buffer.length >= read.length || read.allowLess)) {
                    // ok there is any data so that we can satisfy this request
                    this._reads.shift(); // == read


                    let buf = this._buffer;
                    this._buffer = buf.slice(read.length);
                    read.func.call(this, buf.slice(0, read.length));
                  } else {
                    break;
                  }
                }

                if (this._reads.length > 0) {
                  return new Error("There are some read requests waitng on finished stream");
                }

                if (this._buffer.length > 0) {
                  return new Error("unrecognised content at end of stream");
                }
              };
            }, {}],
            23: [function (require, module, exports) {
              (function (global) {
                // original notice:

                /*!
                 * The buffer module from node.js, for the browser.
                 *
                 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
                 * @license  MIT
                 */

                function compare(a, b) {
                  if (a === b) {
                    return 0;
                  }

                  var x = a.length;
                  var y = b.length;

                  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                    if (a[i] !== b[i]) {
                      x = a[i];
                      y = b[i];
                      break;
                    }
                  }

                  if (x < y) {
                    return -1;
                  }

                  if (y < x) {
                    return 1;
                  }

                  return 0;
                }

                function isBuffer(b) {
                  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
                    return global.Buffer.isBuffer(b);
                  }

                  return !!(b != null && b._isBuffer);
                } // based on node assert, original notice:
                // http://wiki.commonjs.org/wiki/Unit_Testing/1.0
                //
                // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
                //
                // Originally from narwhal.js (http://narwhaljs.org)
                // Copyright (c) 2009 Thomas Robinson <280north.com>
                //
                // Permission is hereby granted, free of charge, to any person obtaining a copy
                // of this software and associated documentation files (the 'Software'), to
                // deal in the Software without restriction, including without limitation the
                // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
                // sell copies of the Software, and to permit persons to whom the Software is
                // furnished to do so, subject to the following conditions:
                //
                // The above copyright notice and this permission notice shall be included in
                // all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
                // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
                // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


                var util = require('util/');

                var hasOwn = Object.prototype.hasOwnProperty;
                var pSlice = Array.prototype.slice;

                var functionsHaveNames = function () {
                  return function foo() {}.name === 'foo';
                }();

                function pToString(obj) {
                  return Object.prototype.toString.call(obj);
                }

                function isView(arrbuf) {
                  if (isBuffer(arrbuf)) {
                    return false;
                  }

                  if (typeof global.ArrayBuffer !== 'function') {
                    return false;
                  }

                  if (typeof ArrayBuffer.isView === 'function') {
                    return ArrayBuffer.isView(arrbuf);
                  }

                  if (!arrbuf) {
                    return false;
                  }

                  if (arrbuf instanceof DataView) {
                    return true;
                  }

                  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
                    return true;
                  }

                  return false;
                } // 1. The assert module provides functions that throw
                // AssertionError's when particular conditions are not met. The
                // assert module must conform to the following interface.


                var assert = module.exports = ok; // 2. The AssertionError is defined in assert.
                // new assert.AssertionError({ message: message,
                //                             actual: actual,
                //                             expected: expected })

                var regex = /\s*function\s+([^\(\s]*)\s*/; // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js

                function getName(func) {
                  if (!util.isFunction(func)) {
                    return;
                  }

                  if (functionsHaveNames) {
                    return func.name;
                  }

                  var str = func.toString();
                  var match = str.match(regex);
                  return match && match[1];
                }

                assert.AssertionError = function AssertionError(options) {
                  this.name = 'AssertionError';
                  this.actual = options.actual;
                  this.expected = options.expected;
                  this.operator = options.operator;

                  if (options.message) {
                    this.message = options.message;
                    this.generatedMessage = false;
                  } else {
                    this.message = getMessage(this);
                    this.generatedMessage = true;
                  }

                  var stackStartFunction = options.stackStartFunction || fail;

                  if (Error.captureStackTrace) {
                    Error.captureStackTrace(this, stackStartFunction);
                  } else {
                    // non v8 browsers so we can have a stacktrace
                    var err = new Error();

                    if (err.stack) {
                      var out = err.stack; // try to strip useless frames

                      var fn_name = getName(stackStartFunction);
                      var idx = out.indexOf('\n' + fn_name);

                      if (idx >= 0) {
                        // once we have located the function frame
                        // we need to strip out everything before it (and its line)
                        var next_line = out.indexOf('\n', idx + 1);
                        out = out.substring(next_line + 1);
                      }

                      this.stack = out;
                    }
                  }
                }; // assert.AssertionError instanceof Error


                util.inherits(assert.AssertionError, Error);

                function truncate(s, n) {
                  if (typeof s === 'string') {
                    return s.length < n ? s : s.slice(0, n);
                  } else {
                    return s;
                  }
                }

                function inspect(something) {
                  if (functionsHaveNames || !util.isFunction(something)) {
                    return util.inspect(something);
                  }

                  var rawname = getName(something);
                  var name = rawname ? ': ' + rawname : '';
                  return '[Function' + name + ']';
                }

                function getMessage(self) {
                  return truncate(inspect(self.actual), 128) + ' ' + self.operator + ' ' + truncate(inspect(self.expected), 128);
                } // At present only the three keys mentioned above are used and
                // understood by the spec. Implementations or sub modules can pass
                // other keys to the AssertionError's constructor - they will be
                // ignored.
                // 3. All of the following functions must throw an AssertionError
                // when a corresponding condition is not met, with a message that
                // may be undefined if not provided.  All assertion methods provide
                // both the actual and expected values to the assertion error for
                // display purposes.


                function fail(actual, expected, message, operator, stackStartFunction) {
                  throw new assert.AssertionError({
                    message: message,
                    actual: actual,
                    expected: expected,
                    operator: operator,
                    stackStartFunction: stackStartFunction
                  });
                } // EXTENSION! allows for well behaved errors defined elsewhere.


                assert.fail = fail; // 4. Pure assertion tests whether a value is truthy, as determined
                // by !!guard.
                // assert.ok(guard, message_opt);
                // This statement is equivalent to assert.equal(true, !!guard,
                // message_opt);. To test strictly for the value true, use
                // assert.strictEqual(true, guard, message_opt);.

                function ok(value, message) {
                  if (!value) fail(value, true, message, '==', assert.ok);
                }

                assert.ok = ok; // 5. The equality assertion tests shallow, coercive equality with
                // ==.
                // assert.equal(actual, expected, message_opt);

                assert.equal = function equal(actual, expected, message) {
                  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
                }; // 6. The non-equality assertion tests for whether two objects are not equal
                // with != assert.notEqual(actual, expected, message_opt);


                assert.notEqual = function notEqual(actual, expected, message) {
                  if (actual == expected) {
                    fail(actual, expected, message, '!=', assert.notEqual);
                  }
                }; // 7. The equivalence assertion tests a deep equality relation.
                // assert.deepEqual(actual, expected, message_opt);


                assert.deepEqual = function deepEqual(actual, expected, message) {
                  if (!_deepEqual(actual, expected, false)) {
                    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
                  }
                };

                assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
                  if (!_deepEqual(actual, expected, true)) {
                    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
                  }
                };

                function _deepEqual(actual, expected, strict, memos) {
                  // 7.1. All identical values are equivalent, as determined by ===.
                  if (actual === expected) {
                    return true;
                  } else if (isBuffer(actual) && isBuffer(expected)) {
                    return compare(actual, expected) === 0; // 7.2. If the expected value is a Date object, the actual value is
                    // equivalent if it is also a Date object that refers to the same time.
                  } else if (util.isDate(actual) && util.isDate(expected)) {
                    return actual.getTime() === expected.getTime(); // 7.3 If the expected value is a RegExp object, the actual value is
                    // equivalent if it is also a RegExp object with the same source and
                    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
                  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
                    return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase; // 7.4. Other pairs that do not both pass typeof value == 'object',
                    // equivalence is determined by ==.
                  } else if ((actual === null || typeof actual !== 'object') && (expected === null || typeof expected !== 'object')) {
                    return strict ? actual === expected : actual == expected; // If both values are instances of typed arrays, wrap their underlying
                    // ArrayBuffers in a Buffer each to increase performance
                    // This optimization requires the arrays to have the same type as checked by
                    // Object.prototype.toString (aka pToString). Never perform binary
                    // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
                    // bit patterns are not identical.
                  } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {
                    return compare(new Uint8Array(actual.buffer), new Uint8Array(expected.buffer)) === 0; // 7.5 For all other Object pairs, including Array objects, equivalence is
                    // determined by having the same number of owned properties (as verified
                    // with Object.prototype.hasOwnProperty.call), the same set of keys
                    // (although not necessarily the same order), equivalent values for every
                    // corresponding key, and an identical 'prototype' property. Note: this
                    // accounts for both named and indexed properties on Arrays.
                  } else if (isBuffer(actual) !== isBuffer(expected)) {
                    return false;
                  } else {
                    memos = memos || {
                      actual: [],
                      expected: []
                    };
                    var actualIndex = memos.actual.indexOf(actual);

                    if (actualIndex !== -1) {
                      if (actualIndex === memos.expected.indexOf(expected)) {
                        return true;
                      }
                    }

                    memos.actual.push(actual);
                    memos.expected.push(expected);
                    return objEquiv(actual, expected, strict, memos);
                  }
                }

                function isArguments(object) {
                  return Object.prototype.toString.call(object) == '[object Arguments]';
                }

                function objEquiv(a, b, strict, actualVisitedObjects) {
                  if (a === null || a === undefined || b === null || b === undefined) return false; // if one is a primitive, the other must be same

                  if (util.isPrimitive(a) || util.isPrimitive(b)) return a === b;
                  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;
                  var aIsArgs = isArguments(a);
                  var bIsArgs = isArguments(b);
                  if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;

                  if (aIsArgs) {
                    a = pSlice.call(a);
                    b = pSlice.call(b);
                    return _deepEqual(a, b, strict);
                  }

                  var ka = objectKeys(a);
                  var kb = objectKeys(b);
                  var key, i; // having the same number of owned properties (keys incorporates
                  // hasOwnProperty)

                  if (ka.length !== kb.length) return false; //the same set of keys (although not necessarily the same order),

                  ka.sort();
                  kb.sort(); //~~~cheap key test

                  for (i = ka.length - 1; i >= 0; i--) {
                    if (ka[i] !== kb[i]) return false;
                  } //equivalent values for every corresponding key, and
                  //~~~possibly expensive deep test


                  for (i = ka.length - 1; i >= 0; i--) {
                    key = ka[i];
                    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects)) return false;
                  }

                  return true;
                } // 8. The non-equivalence assertion tests for any deep inequality.
                // assert.notDeepEqual(actual, expected, message_opt);


                assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
                  if (_deepEqual(actual, expected, false)) {
                    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
                  }
                };

                assert.notDeepStrictEqual = notDeepStrictEqual;

                function notDeepStrictEqual(actual, expected, message) {
                  if (_deepEqual(actual, expected, true)) {
                    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
                  }
                } // 9. The strict equality assertion tests strict equality, as determined by ===.
                // assert.strictEqual(actual, expected, message_opt);


                assert.strictEqual = function strictEqual(actual, expected, message) {
                  if (actual !== expected) {
                    fail(actual, expected, message, '===', assert.strictEqual);
                  }
                }; // 10. The strict non-equality assertion tests for strict inequality, as
                // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);


                assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
                  if (actual === expected) {
                    fail(actual, expected, message, '!==', assert.notStrictEqual);
                  }
                };

                function expectedException(actual, expected) {
                  if (!actual || !expected) {
                    return false;
                  }

                  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
                    return expected.test(actual);
                  }

                  try {
                    if (actual instanceof expected) {
                      return true;
                    }
                  } catch (e) {// Ignore.  The instanceof check doesn't work for arrow functions.
                  }

                  if (Error.isPrototypeOf(expected)) {
                    return false;
                  }

                  return expected.call({}, actual) === true;
                }

                function _tryBlock(block) {
                  var error;

                  try {
                    block();
                  } catch (e) {
                    error = e;
                  }

                  return error;
                }

                function _throws(shouldThrow, block, expected, message) {
                  var actual;

                  if (typeof block !== 'function') {
                    throw new TypeError('"block" argument must be a function');
                  }

                  if (typeof expected === 'string') {
                    message = expected;
                    expected = null;
                  }

                  actual = _tryBlock(block);
                  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');

                  if (shouldThrow && !actual) {
                    fail(actual, expected, 'Missing expected exception' + message);
                  }

                  var userProvidedMessage = typeof message === 'string';
                  var isUnwantedException = !shouldThrow && util.isError(actual);
                  var isUnexpectedException = !shouldThrow && actual && !expected;

                  if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {
                    fail(actual, expected, 'Got unwanted exception' + message);
                  }

                  if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
                    throw actual;
                  }
                } // 11. Expected to throw an error:
                // assert.throws(block, Error_opt, message_opt);


                assert.throws = function (block,
                /*optional*/
                error,
                /*optional*/
                message) {
                  _throws(true, block, error, message);
                }; // EXTENSION! This is annoying to write outside this module.


                assert.doesNotThrow = function (block,
                /*optional*/
                error,
                /*optional*/
                message) {
                  _throws(false, block, error, message);
                };

                assert.ifError = function (err) {
                  if (err) throw err;
                };

                var objectKeys = Object.keys || function (obj) {
                  var keys = [];

                  for (var key in obj) {
                    if (hasOwn.call(obj, key)) keys.push(key);
                  }

                  return keys;
                };
              }).call(this, typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            }, {
              "util/": 67
            }],
            24: [function (require, module, exports) {

              exports.byteLength = byteLength;
              exports.toByteArray = toByteArray;
              exports.fromByteArray = fromByteArray;
              var lookup = [];
              var revLookup = [];
              var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
              var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

              for (var i = 0, len = code.length; i < len; ++i) {
                lookup[i] = code[i];
                revLookup[code.charCodeAt(i)] = i;
              }

              revLookup['-'.charCodeAt(0)] = 62;
              revLookup['_'.charCodeAt(0)] = 63;

              function placeHoldersCount(b64) {
                var len = b64.length;

                if (len % 4 > 0) {
                  throw new Error('Invalid string. Length must be a multiple of 4');
                } // the number of equal signs (place holders)
                // if there are two placeholders, than the two characters before it
                // represent one byte
                // if there is only one, then the three characters before it represent 2 bytes
                // this is just a cheap hack to not do indexOf twice


                return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
              }

              function byteLength(b64) {
                // base64 is 4/3 + up to two characters of the original data
                return b64.length * 3 / 4 - placeHoldersCount(b64);
              }

              function toByteArray(b64) {
                var i, l, tmp, placeHolders, arr;
                var len = b64.length;
                placeHolders = placeHoldersCount(b64);
                arr = new Arr(len * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars

                l = placeHolders > 0 ? len - 4 : len;
                var L = 0;

                for (i = 0; i < l; i += 4) {
                  tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
                  arr[L++] = tmp >> 16 & 0xFF;
                  arr[L++] = tmp >> 8 & 0xFF;
                  arr[L++] = tmp & 0xFF;
                }

                if (placeHolders === 2) {
                  tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
                  arr[L++] = tmp & 0xFF;
                } else if (placeHolders === 1) {
                  tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
                  arr[L++] = tmp >> 8 & 0xFF;
                  arr[L++] = tmp & 0xFF;
                }

                return arr;
              }

              function tripletToBase64(num) {
                return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
              }

              function encodeChunk(uint8, start, end) {
                var tmp;
                var output = [];

                for (var i = start; i < end; i += 3) {
                  tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
                  output.push(tripletToBase64(tmp));
                }

                return output.join('');
              }

              function fromByteArray(uint8) {
                var tmp;
                var len = uint8.length;
                var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

                var output = '';
                var parts = [];
                var maxChunkLength = 16383; // must be multiple of 3
                // go through the array every three bytes, we'll deal with trailing stuff later

                for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                  parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
                } // pad the end with zeros, but make sure to not forget the extra bytes


                if (extraBytes === 1) {
                  tmp = uint8[len - 1];
                  output += lookup[tmp >> 2];
                  output += lookup[tmp << 4 & 0x3F];
                  output += '==';
                } else if (extraBytes === 2) {
                  tmp = (uint8[len - 2] << 8) + uint8[len - 1];
                  output += lookup[tmp >> 10];
                  output += lookup[tmp >> 4 & 0x3F];
                  output += lookup[tmp << 2 & 0x3F];
                  output += '=';
                }

                parts.push(output);
                return parts.join('');
              }
            }, {}],
            25: [function (require, module, exports) {}, {}],
            26: [function (require, module, exports) {
              (function (process, Buffer) {
                /* eslint camelcase: "off" */

                var assert = require('assert');

                var Zstream = require('pako/lib/zlib/zstream');

                var zlib_deflate = require('pako/lib/zlib/deflate.js');

                var zlib_inflate = require('pako/lib/zlib/inflate.js');

                var constants = require('pako/lib/zlib/constants');

                for (var key in constants) {
                  exports[key] = constants[key];
                } // zlib modes


                exports.NONE = 0;
                exports.DEFLATE = 1;
                exports.INFLATE = 2;
                exports.GZIP = 3;
                exports.GUNZIP = 4;
                exports.DEFLATERAW = 5;
                exports.INFLATERAW = 6;
                exports.UNZIP = 7;
                var GZIP_HEADER_ID1 = 0x1f;
                var GZIP_HEADER_ID2 = 0x8b;
                /**
                 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
                 */

                function Zlib(mode) {
                  if (typeof mode !== 'number' || mode < exports.DEFLATE || mode > exports.UNZIP) {
                    throw new TypeError('Bad argument');
                  }

                  this.dictionary = null;
                  this.err = 0;
                  this.flush = 0;
                  this.init_done = false;
                  this.level = 0;
                  this.memLevel = 0;
                  this.mode = mode;
                  this.strategy = 0;
                  this.windowBits = 0;
                  this.write_in_progress = false;
                  this.pending_close = false;
                  this.gzip_id_bytes_read = 0;
                }

                Zlib.prototype.close = function () {
                  if (this.write_in_progress) {
                    this.pending_close = true;
                    return;
                  }

                  this.pending_close = false;
                  assert(this.init_done, 'close before init');
                  assert(this.mode <= exports.UNZIP);

                  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
                    zlib_deflate.deflateEnd(this.strm);
                  } else if (this.mode === exports.INFLATE || this.mode === exports.GUNZIP || this.mode === exports.INFLATERAW || this.mode === exports.UNZIP) {
                    zlib_inflate.inflateEnd(this.strm);
                  }

                  this.mode = exports.NONE;
                  this.dictionary = null;
                };

                Zlib.prototype.write = function (flush, input, in_off, in_len, out, out_off, out_len) {
                  return this._write(true, flush, input, in_off, in_len, out, out_off, out_len);
                };

                Zlib.prototype.writeSync = function (flush, input, in_off, in_len, out, out_off, out_len) {
                  return this._write(false, flush, input, in_off, in_len, out, out_off, out_len);
                };

                Zlib.prototype._write = function (async, flush, input, in_off, in_len, out, out_off, out_len) {
                  assert.equal(arguments.length, 8);
                  assert(this.init_done, 'write before init');
                  assert(this.mode !== exports.NONE, 'already finalized');
                  assert.equal(false, this.write_in_progress, 'write already in progress');
                  assert.equal(false, this.pending_close, 'close is pending');
                  this.write_in_progress = true;
                  assert.equal(false, flush === undefined, 'must provide flush value');
                  this.write_in_progress = true;

                  if (flush !== exports.Z_NO_FLUSH && flush !== exports.Z_PARTIAL_FLUSH && flush !== exports.Z_SYNC_FLUSH && flush !== exports.Z_FULL_FLUSH && flush !== exports.Z_FINISH && flush !== exports.Z_BLOCK) {
                    throw new Error('Invalid flush value');
                  }

                  if (input == null) {
                    input = Buffer.alloc(0);
                    in_len = 0;
                    in_off = 0;
                  }

                  this.strm.avail_in = in_len;
                  this.strm.input = input;
                  this.strm.next_in = in_off;
                  this.strm.avail_out = out_len;
                  this.strm.output = out;
                  this.strm.next_out = out_off;
                  this.flush = flush;

                  if (!async) {
                    // sync version
                    this._process();

                    if (this._checkError()) {
                      return this._afterSync();
                    }

                    return;
                  } // async version


                  var self = this;
                  process.nextTick(function () {
                    self._process();

                    self._after();
                  });
                  return this;
                };

                Zlib.prototype._afterSync = function () {
                  var avail_out = this.strm.avail_out;
                  var avail_in = this.strm.avail_in;
                  this.write_in_progress = false;
                  return [avail_in, avail_out];
                };

                Zlib.prototype._process = function () {
                  var next_expected_header_byte = null; // If the avail_out is left at 0, then it means that it ran out
                  // of room.  If there was avail_out left over, then it means
                  // that all of the input was consumed.

                  switch (this.mode) {
                    case exports.DEFLATE:
                    case exports.GZIP:
                    case exports.DEFLATERAW:
                      this.err = zlib_deflate.deflate(this.strm, this.flush);
                      break;

                    case exports.UNZIP:
                      if (this.strm.avail_in > 0) {
                        next_expected_header_byte = this.strm.next_in;
                      }

                      switch (this.gzip_id_bytes_read) {
                        case 0:
                          if (next_expected_header_byte === null) {
                            break;
                          }

                          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID1) {
                            this.gzip_id_bytes_read = 1;
                            next_expected_header_byte++;

                            if (this.strm.avail_in === 1) {
                              // The only available byte was already read.
                              break;
                            }
                          } else {
                            this.mode = exports.INFLATE;
                            break;
                          }

                        // fallthrough

                        case 1:
                          if (next_expected_header_byte === null) {
                            break;
                          }

                          if (this.strm.input[next_expected_header_byte] === GZIP_HEADER_ID2) {
                            this.gzip_id_bytes_read = 2;
                            this.mode = exports.GUNZIP;
                          } else {
                            // There is no actual difference between INFLATE and INFLATERAW
                            // (after initialization).
                            this.mode = exports.INFLATE;
                          }

                          break;

                        default:
                          throw new Error('invalid number of gzip magic number bytes read');
                      }

                    // fallthrough

                    case exports.INFLATE:
                    case exports.GUNZIP:
                    case exports.INFLATERAW:
                      this.err = zlib_inflate.inflate(this.strm, this.flush // If data was encoded with dictionary
                      );

                      if (this.err === exports.Z_NEED_DICT && this.dictionary) {
                        // Load it
                        this.err = zlib_inflate.inflateSetDictionary(this.strm, this.dictionary);

                        if (this.err === exports.Z_OK) {
                          // And try to decode again
                          this.err = zlib_inflate.inflate(this.strm, this.flush);
                        } else if (this.err === exports.Z_DATA_ERROR) {
                          // Both inflateSetDictionary() and inflate() return Z_DATA_ERROR.
                          // Make it possible for After() to tell a bad dictionary from bad
                          // input.
                          this.err = exports.Z_NEED_DICT;
                        }
                      }

                      while (this.strm.avail_in > 0 && this.mode === exports.GUNZIP && this.err === exports.Z_STREAM_END && this.strm.next_in[0] !== 0x00) {
                        // Bytes remain in input buffer. Perhaps this is another compressed
                        // member in the same archive, or just trailing garbage.
                        // Trailing zero bytes are okay, though, since they are frequently
                        // used for padding.
                        this.reset();
                        this.err = zlib_inflate.inflate(this.strm, this.flush);
                      }

                      break;

                    default:
                      throw new Error('Unknown mode ' + this.mode);
                  }
                };

                Zlib.prototype._checkError = function () {
                  // Acceptable error states depend on the type of zlib stream.
                  switch (this.err) {
                    case exports.Z_OK:
                    case exports.Z_BUF_ERROR:
                      if (this.strm.avail_out !== 0 && this.flush === exports.Z_FINISH) {
                        this._error('unexpected end of file');

                        return false;
                      }

                      break;

                    case exports.Z_STREAM_END:
                      // normal statuses, not fatal
                      break;

                    case exports.Z_NEED_DICT:
                      if (this.dictionary == null) {
                        this._error('Missing dictionary');
                      } else {
                        this._error('Bad dictionary');
                      }

                      return false;

                    default:
                      // something else.
                      this._error('Zlib error');

                      return false;
                  }

                  return true;
                };

                Zlib.prototype._after = function () {
                  if (!this._checkError()) {
                    return;
                  }

                  var avail_out = this.strm.avail_out;
                  var avail_in = this.strm.avail_in;
                  this.write_in_progress = false; // call the write() cb

                  this.callback(avail_in, avail_out);

                  if (this.pending_close) {
                    this.close();
                  }
                };

                Zlib.prototype._error = function (message) {
                  if (this.strm.msg) {
                    message = this.strm.msg;
                  }

                  this.onerror(message, this.err // no hope of rescue.
                  );
                  this.write_in_progress = false;

                  if (this.pending_close) {
                    this.close();
                  }
                };

                Zlib.prototype.init = function (windowBits, level, memLevel, strategy, dictionary) {
                  assert(arguments.length === 4 || arguments.length === 5, 'init(windowBits, level, memLevel, strategy, [dictionary])');
                  assert(windowBits >= 8 && windowBits <= 15, 'invalid windowBits');
                  assert(level >= -1 && level <= 9, 'invalid compression level');
                  assert(memLevel >= 1 && memLevel <= 9, 'invalid memlevel');
                  assert(strategy === exports.Z_FILTERED || strategy === exports.Z_HUFFMAN_ONLY || strategy === exports.Z_RLE || strategy === exports.Z_FIXED || strategy === exports.Z_DEFAULT_STRATEGY, 'invalid strategy');

                  this._init(level, windowBits, memLevel, strategy, dictionary);

                  this._setDictionary();
                };

                Zlib.prototype.params = function () {
                  throw new Error('deflateParams Not supported');
                };

                Zlib.prototype.reset = function () {
                  this._reset();

                  this._setDictionary();
                };

                Zlib.prototype._init = function (level, windowBits, memLevel, strategy, dictionary) {
                  this.level = level;
                  this.windowBits = windowBits;
                  this.memLevel = memLevel;
                  this.strategy = strategy;
                  this.flush = exports.Z_NO_FLUSH;
                  this.err = exports.Z_OK;

                  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP) {
                    this.windowBits += 16;
                  }

                  if (this.mode === exports.UNZIP) {
                    this.windowBits += 32;
                  }

                  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW) {
                    this.windowBits = -1 * this.windowBits;
                  }

                  this.strm = new Zstream();

                  switch (this.mode) {
                    case exports.DEFLATE:
                    case exports.GZIP:
                    case exports.DEFLATERAW:
                      this.err = zlib_deflate.deflateInit2(this.strm, this.level, exports.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
                      break;

                    case exports.INFLATE:
                    case exports.GUNZIP:
                    case exports.INFLATERAW:
                    case exports.UNZIP:
                      this.err = zlib_inflate.inflateInit2(this.strm, this.windowBits);
                      break;

                    default:
                      throw new Error('Unknown mode ' + this.mode);
                  }

                  if (this.err !== exports.Z_OK) {
                    this._error('Init error');
                  }

                  this.dictionary = dictionary;
                  this.write_in_progress = false;
                  this.init_done = true;
                };

                Zlib.prototype._setDictionary = function () {
                  if (this.dictionary == null) {
                    return;
                  }

                  this.err = exports.Z_OK;

                  switch (this.mode) {
                    case exports.DEFLATE:
                    case exports.DEFLATERAW:
                      this.err = zlib_deflate.deflateSetDictionary(this.strm, this.dictionary);
                      break;
                  }

                  if (this.err !== exports.Z_OK) {
                    this._error('Failed to set dictionary');
                  }
                };

                Zlib.prototype._reset = function () {
                  this.err = exports.Z_OK;

                  switch (this.mode) {
                    case exports.DEFLATE:
                    case exports.DEFLATERAW:
                    case exports.GZIP:
                      this.err = zlib_deflate.deflateReset(this.strm);
                      break;

                    case exports.INFLATE:
                    case exports.INFLATERAW:
                    case exports.GUNZIP:
                      this.err = zlib_inflate.inflateReset(this.strm);
                      break;
                  }

                  if (this.err !== exports.Z_OK) {
                    this._error('Failed to reset stream');
                  }
                };

                exports.Zlib = Zlib;
              }).call(this, require('_process'), require("buffer").Buffer);
            }, {
              "_process": 47,
              "assert": 23,
              "buffer": 28,
              "pako/lib/zlib/constants": 37,
              "pako/lib/zlib/deflate.js": 39,
              "pako/lib/zlib/inflate.js": 41,
              "pako/lib/zlib/zstream": 45
            }],
            27: [function (require, module, exports) {
              (function (process) {

                var Buffer = require('buffer').Buffer;

                var Transform = require('stream').Transform;

                var binding = require('./binding');

                var util = require('util');

                var assert = require('assert').ok;

                var kMaxLength = require('buffer').kMaxLength;

                var kRangeErrorMessage = 'Cannot create final Buffer. It would be larger ' + 'than 0x' + kMaxLength.toString(16) + ' bytes'; // zlib doesn't provide these, so kludge them in following the same
                // const naming scheme zlib uses.

                binding.Z_MIN_WINDOWBITS = 8;
                binding.Z_MAX_WINDOWBITS = 15;
                binding.Z_DEFAULT_WINDOWBITS = 15; // fewer than 64 bytes per chunk is stupid.
                // technically it could work with as few as 8, but even 64 bytes
                // is absurdly low.  Usually a MB or more is best.

                binding.Z_MIN_CHUNK = 64;
                binding.Z_MAX_CHUNK = Infinity;
                binding.Z_DEFAULT_CHUNK = 16 * 1024;
                binding.Z_MIN_MEMLEVEL = 1;
                binding.Z_MAX_MEMLEVEL = 9;
                binding.Z_DEFAULT_MEMLEVEL = 8;
                binding.Z_MIN_LEVEL = -1;
                binding.Z_MAX_LEVEL = 9;
                binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION; // expose all the zlib constants

                var bkeys = Object.keys(binding);

                for (var bk = 0; bk < bkeys.length; bk++) {
                  var bkey = bkeys[bk];

                  if (bkey.match(/^Z/)) {
                    Object.defineProperty(exports, bkey, {
                      enumerable: true,
                      value: binding[bkey],
                      writable: false
                    });
                  }
                } // translation table for return codes.


                var codes = {
                  Z_OK: binding.Z_OK,
                  Z_STREAM_END: binding.Z_STREAM_END,
                  Z_NEED_DICT: binding.Z_NEED_DICT,
                  Z_ERRNO: binding.Z_ERRNO,
                  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
                  Z_DATA_ERROR: binding.Z_DATA_ERROR,
                  Z_MEM_ERROR: binding.Z_MEM_ERROR,
                  Z_BUF_ERROR: binding.Z_BUF_ERROR,
                  Z_VERSION_ERROR: binding.Z_VERSION_ERROR
                };
                var ckeys = Object.keys(codes);

                for (var ck = 0; ck < ckeys.length; ck++) {
                  var ckey = ckeys[ck];
                  codes[codes[ckey]] = ckey;
                }

                Object.defineProperty(exports, 'codes', {
                  enumerable: true,
                  value: Object.freeze(codes),
                  writable: false
                });
                exports.Deflate = Deflate;
                exports.Inflate = Inflate;
                exports.Gzip = Gzip;
                exports.Gunzip = Gunzip;
                exports.DeflateRaw = DeflateRaw;
                exports.InflateRaw = InflateRaw;
                exports.Unzip = Unzip;

                exports.createDeflate = function (o) {
                  return new Deflate(o);
                };

                exports.createInflate = function (o) {
                  return new Inflate(o);
                };

                exports.createDeflateRaw = function (o) {
                  return new DeflateRaw(o);
                };

                exports.createInflateRaw = function (o) {
                  return new InflateRaw(o);
                };

                exports.createGzip = function (o) {
                  return new Gzip(o);
                };

                exports.createGunzip = function (o) {
                  return new Gunzip(o);
                };

                exports.createUnzip = function (o) {
                  return new Unzip(o);
                }; // Convenience methods.
                // compress/decompress a string or buffer in one step.


                exports.deflate = function (buffer, opts, callback) {
                  if (typeof opts === 'function') {
                    callback = opts;
                    opts = {};
                  }

                  return zlibBuffer(new Deflate(opts), buffer, callback);
                };

                exports.deflateSync = function (buffer, opts) {
                  return zlibBufferSync(new Deflate(opts), buffer);
                };

                exports.gzip = function (buffer, opts, callback) {
                  if (typeof opts === 'function') {
                    callback = opts;
                    opts = {};
                  }

                  return zlibBuffer(new Gzip(opts), buffer, callback);
                };

                exports.gzipSync = function (buffer, opts) {
                  return zlibBufferSync(new Gzip(opts), buffer);
                };

                exports.deflateRaw = function (buffer, opts, callback) {
                  if (typeof opts === 'function') {
                    callback = opts;
                    opts = {};
                  }

                  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
                };

                exports.deflateRawSync = function (buffer, opts) {
                  return zlibBufferSync(new DeflateRaw(opts), buffer);
                };

                exports.unzip = function (buffer, opts, callback) {
                  if (typeof opts === 'function') {
                    callback = opts;
                    opts = {};
                  }

                  return zlibBuffer(new Unzip(opts), buffer, callback);
                };

                exports.unzipSync = function (buffer, opts) {
                  return zlibBufferSync(new Unzip(opts), buffer);
                };

                exports.inflate = function (buffer, opts, callback) {
                  if (typeof opts === 'function') {
                    callback = opts;
                    opts = {};
                  }

                  return zlibBuffer(new Inflate(opts), buffer, callback);
                };

                exports.inflateSync = function (buffer, opts) {
                  return zlibBufferSync(new Inflate(opts), buffer);
                };

                exports.gunzip = function (buffer, opts, callback) {
                  if (typeof opts === 'function') {
                    callback = opts;
                    opts = {};
                  }

                  return zlibBuffer(new Gunzip(opts), buffer, callback);
                };

                exports.gunzipSync = function (buffer, opts) {
                  return zlibBufferSync(new Gunzip(opts), buffer);
                };

                exports.inflateRaw = function (buffer, opts, callback) {
                  if (typeof opts === 'function') {
                    callback = opts;
                    opts = {};
                  }

                  return zlibBuffer(new InflateRaw(opts), buffer, callback);
                };

                exports.inflateRawSync = function (buffer, opts) {
                  return zlibBufferSync(new InflateRaw(opts), buffer);
                };

                function zlibBuffer(engine, buffer, callback) {
                  var buffers = [];
                  var nread = 0;
                  engine.on('error', onError);
                  engine.on('end', onEnd);
                  engine.end(buffer);
                  flow();

                  function flow() {
                    var chunk;

                    while (null !== (chunk = engine.read())) {
                      buffers.push(chunk);
                      nread += chunk.length;
                    }

                    engine.once('readable', flow);
                  }

                  function onError(err) {
                    engine.removeListener('end', onEnd);
                    engine.removeListener('readable', flow);
                    callback(err);
                  }

                  function onEnd() {
                    var buf;
                    var err = null;

                    if (nread >= kMaxLength) {
                      err = new RangeError(kRangeErrorMessage);
                    } else {
                      buf = Buffer.concat(buffers, nread);
                    }

                    buffers = [];
                    engine.close();
                    callback(err, buf);
                  }
                }

                function zlibBufferSync(engine, buffer) {
                  if (typeof buffer === 'string') buffer = Buffer.from(buffer);
                  if (!Buffer.isBuffer(buffer)) throw new TypeError('Not a string or buffer');
                  var flushFlag = engine._finishFlushFlag;
                  return engine._processChunk(buffer, flushFlag);
                } // generic zlib
                // minimal 2-byte header


                function Deflate(opts) {
                  if (!(this instanceof Deflate)) return new Deflate(opts);
                  Zlib.call(this, opts, binding.DEFLATE);
                }

                function Inflate(opts) {
                  if (!(this instanceof Inflate)) return new Inflate(opts);
                  Zlib.call(this, opts, binding.INFLATE);
                } // gzip - bigger header, same deflate compression


                function Gzip(opts) {
                  if (!(this instanceof Gzip)) return new Gzip(opts);
                  Zlib.call(this, opts, binding.GZIP);
                }

                function Gunzip(opts) {
                  if (!(this instanceof Gunzip)) return new Gunzip(opts);
                  Zlib.call(this, opts, binding.GUNZIP);
                } // raw - no header


                function DeflateRaw(opts) {
                  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
                  Zlib.call(this, opts, binding.DEFLATERAW);
                }

                function InflateRaw(opts) {
                  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
                  Zlib.call(this, opts, binding.INFLATERAW);
                } // auto-detect header.


                function Unzip(opts) {
                  if (!(this instanceof Unzip)) return new Unzip(opts);
                  Zlib.call(this, opts, binding.UNZIP);
                }

                function isValidFlushFlag(flag) {
                  return flag === binding.Z_NO_FLUSH || flag === binding.Z_PARTIAL_FLUSH || flag === binding.Z_SYNC_FLUSH || flag === binding.Z_FULL_FLUSH || flag === binding.Z_FINISH || flag === binding.Z_BLOCK;
                } // the Zlib class they all inherit from
                // This thing manages the queue of requests, and returns
                // true or false if there is anything in the queue when
                // you call the .write() method.


                function Zlib(opts, mode) {
                  var _this = this;

                  this._opts = opts = opts || {};
                  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;
                  Transform.call(this, opts);

                  if (opts.flush && !isValidFlushFlag(opts.flush)) {
                    throw new Error('Invalid flush flag: ' + opts.flush);
                  }

                  if (opts.finishFlush && !isValidFlushFlag(opts.finishFlush)) {
                    throw new Error('Invalid flush flag: ' + opts.finishFlush);
                  }

                  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;
                  this._finishFlushFlag = typeof opts.finishFlush !== 'undefined' ? opts.finishFlush : binding.Z_FINISH;

                  if (opts.chunkSize) {
                    if (opts.chunkSize < exports.Z_MIN_CHUNK || opts.chunkSize > exports.Z_MAX_CHUNK) {
                      throw new Error('Invalid chunk size: ' + opts.chunkSize);
                    }
                  }

                  if (opts.windowBits) {
                    if (opts.windowBits < exports.Z_MIN_WINDOWBITS || opts.windowBits > exports.Z_MAX_WINDOWBITS) {
                      throw new Error('Invalid windowBits: ' + opts.windowBits);
                    }
                  }

                  if (opts.level) {
                    if (opts.level < exports.Z_MIN_LEVEL || opts.level > exports.Z_MAX_LEVEL) {
                      throw new Error('Invalid compression level: ' + opts.level);
                    }
                  }

                  if (opts.memLevel) {
                    if (opts.memLevel < exports.Z_MIN_MEMLEVEL || opts.memLevel > exports.Z_MAX_MEMLEVEL) {
                      throw new Error('Invalid memLevel: ' + opts.memLevel);
                    }
                  }

                  if (opts.strategy) {
                    if (opts.strategy != exports.Z_FILTERED && opts.strategy != exports.Z_HUFFMAN_ONLY && opts.strategy != exports.Z_RLE && opts.strategy != exports.Z_FIXED && opts.strategy != exports.Z_DEFAULT_STRATEGY) {
                      throw new Error('Invalid strategy: ' + opts.strategy);
                    }
                  }

                  if (opts.dictionary) {
                    if (!Buffer.isBuffer(opts.dictionary)) {
                      throw new Error('Invalid dictionary: it should be a Buffer instance');
                    }
                  }

                  this._handle = new binding.Zlib(mode);
                  var self = this;
                  this._hadError = false;

                  this._handle.onerror = function (message, errno) {
                    // there is no way to cleanly recover.
                    // continuing only obscures problems.
                    _close(self);

                    self._hadError = true;
                    var error = new Error(message);
                    error.errno = errno;
                    error.code = exports.codes[errno];
                    self.emit('error', error);
                  };

                  var level = exports.Z_DEFAULT_COMPRESSION;
                  if (typeof opts.level === 'number') level = opts.level;
                  var strategy = exports.Z_DEFAULT_STRATEGY;
                  if (typeof opts.strategy === 'number') strategy = opts.strategy;

                  this._handle.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);

                  this._buffer = Buffer.allocUnsafe(this._chunkSize);
                  this._offset = 0;
                  this._level = level;
                  this._strategy = strategy;
                  this.once('end', this.close);
                  Object.defineProperty(this, '_closed', {
                    get: function () {
                      return !_this._handle;
                    },
                    configurable: true,
                    enumerable: true
                  });
                }

                util.inherits(Zlib, Transform);

                Zlib.prototype.params = function (level, strategy, callback) {
                  if (level < exports.Z_MIN_LEVEL || level > exports.Z_MAX_LEVEL) {
                    throw new RangeError('Invalid compression level: ' + level);
                  }

                  if (strategy != exports.Z_FILTERED && strategy != exports.Z_HUFFMAN_ONLY && strategy != exports.Z_RLE && strategy != exports.Z_FIXED && strategy != exports.Z_DEFAULT_STRATEGY) {
                    throw new TypeError('Invalid strategy: ' + strategy);
                  }

                  if (this._level !== level || this._strategy !== strategy) {
                    var self = this;
                    this.flush(binding.Z_SYNC_FLUSH, function () {
                      assert(self._handle, 'zlib binding closed');

                      self._handle.params(level, strategy);

                      if (!self._hadError) {
                        self._level = level;
                        self._strategy = strategy;
                        if (callback) callback();
                      }
                    });
                  } else {
                    process.nextTick(callback);
                  }
                };

                Zlib.prototype.reset = function () {
                  assert(this._handle, 'zlib binding closed');
                  return this._handle.reset();
                }; // This is the _flush function called by the transform class,
                // internally, when the last chunk has been written.


                Zlib.prototype._flush = function (callback) {
                  this._transform(Buffer.alloc(0), '', callback);
                };

                Zlib.prototype.flush = function (kind, callback) {
                  var _this2 = this;

                  var ws = this._writableState;

                  if (typeof kind === 'function' || kind === undefined && !callback) {
                    callback = kind;
                    kind = binding.Z_FULL_FLUSH;
                  }

                  if (ws.ended) {
                    if (callback) process.nextTick(callback);
                  } else if (ws.ending) {
                    if (callback) this.once('end', callback);
                  } else if (ws.needDrain) {
                    if (callback) {
                      this.once('drain', function () {
                        return _this2.flush(kind, callback);
                      });
                    }
                  } else {
                    this._flushFlag = kind;
                    this.write(Buffer.alloc(0), '', callback);
                  }
                };

                Zlib.prototype.close = function (callback) {
                  _close(this, callback);

                  process.nextTick(emitCloseNT, this);
                };

                function _close(engine, callback) {
                  if (callback) process.nextTick(callback); // Caller may invoke .close after a zlib error (which will null _handle).

                  if (!engine._handle) return;

                  engine._handle.close();

                  engine._handle = null;
                }

                function emitCloseNT(self) {
                  self.emit('close');
                }

                Zlib.prototype._transform = function (chunk, encoding, cb) {
                  var flushFlag;
                  var ws = this._writableState;
                  var ending = ws.ending || ws.ended;
                  var last = ending && (!chunk || ws.length === chunk.length);
                  if (chunk !== null && !Buffer.isBuffer(chunk)) return cb(new Error('invalid input'));
                  if (!this._handle) return cb(new Error('zlib binding closed')); // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag
                  // (or whatever flag was provided using opts.finishFlush).
                  // If it's explicitly flushing at some other time, then we use
                  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
                  // goodness.

                  if (last) flushFlag = this._finishFlushFlag;else {
                    flushFlag = this._flushFlag; // once we've flushed the last of the queue, stop flushing and
                    // go back to the normal behavior.

                    if (chunk.length >= ws.length) {
                      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
                    }
                  }

                  this._processChunk(chunk, flushFlag, cb);
                };

                Zlib.prototype._processChunk = function (chunk, flushFlag, cb) {
                  var availInBefore = chunk && chunk.length;
                  var availOutBefore = this._chunkSize - this._offset;
                  var inOff = 0;
                  var self = this;
                  var async = typeof cb === 'function';

                  if (!async) {
                    var buffers = [];
                    var nread = 0;
                    var error;
                    this.on('error', function (er) {
                      error = er;
                    });
                    assert(this._handle, 'zlib binding closed');

                    do {
                      var res = this._handle.writeSync(flushFlag, chunk, // in
                      inOff, // in_off
                      availInBefore, // in_len
                      this._buffer, // out
                      this._offset, //out_off
                      availOutBefore); // out_len

                    } while (!this._hadError && callback(res[0], res[1]));

                    if (this._hadError) {
                      throw error;
                    }

                    if (nread >= kMaxLength) {
                      _close(this);

                      throw new RangeError(kRangeErrorMessage);
                    }

                    var buf = Buffer.concat(buffers, nread);

                    _close(this);

                    return buf;
                  }

                  assert(this._handle, 'zlib binding closed');

                  var req = this._handle.write(flushFlag, chunk, // in
                  inOff, // in_off
                  availInBefore, // in_len
                  this._buffer, // out
                  this._offset, //out_off
                  availOutBefore); // out_len


                  req.buffer = chunk;
                  req.callback = callback;

                  function callback(availInAfter, availOutAfter) {
                    // When the callback is used in an async write, the callback's
                    // context is the `req` object that was created. The req object
                    // is === this._handle, and that's why it's important to null
                    // out the values after they are done being used. `this._handle`
                    // can stay in memory longer than the callback and buffer are needed.
                    if (this) {
                      this.buffer = null;
                      this.callback = null;
                    }

                    if (self._hadError) return;
                    var have = availOutBefore - availOutAfter;
                    assert(have >= 0, 'have should not go down');

                    if (have > 0) {
                      var out = self._buffer.slice(self._offset, self._offset + have);

                      self._offset += have; // serve some output to the consumer.

                      if (async) {
                        self.push(out);
                      } else {
                        buffers.push(out);
                        nread += out.length;
                      }
                    } // exhausted the output buffer, or used all the input create a new one.


                    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
                      availOutBefore = self._chunkSize;
                      self._offset = 0;
                      self._buffer = Buffer.allocUnsafe(self._chunkSize);
                    }

                    if (availOutAfter === 0) {
                      // Not actually done.  Need to reprocess.
                      // Also, update the availInBefore to the availInAfter value,
                      // so that if we have to hit it a third (fourth, etc.) time,
                      // it'll have the correct byte counts.
                      inOff += availInBefore - availInAfter;
                      availInBefore = availInAfter;
                      if (!async) return true;

                      var newReq = self._handle.write(flushFlag, chunk, inOff, availInBefore, self._buffer, self._offset, self._chunkSize);

                      newReq.callback = callback; // this same function

                      newReq.buffer = chunk;
                      return;
                    }

                    if (!async) return false; // finished with the chunk.

                    cb();
                  }
                };

                util.inherits(Deflate, Zlib);
                util.inherits(Inflate, Zlib);
                util.inherits(Gzip, Zlib);
                util.inherits(Gunzip, Zlib);
                util.inherits(DeflateRaw, Zlib);
                util.inherits(InflateRaw, Zlib);
                util.inherits(Unzip, Zlib);
              }).call(this, require('_process'));
            }, {
              "./binding": 26,
              "_process": 47,
              "assert": 23,
              "buffer": 28,
              "stream": 63,
              "util": 67
            }],
            28: [function (require, module, exports) {

              var base64 = require('base64-js');

              var ieee754 = require('ieee754');

              exports.Buffer = Buffer;
              exports.SlowBuffer = SlowBuffer;
              exports.INSPECT_MAX_BYTES = 50;
              var K_MAX_LENGTH = 0x7fffffff;
              exports.kMaxLength = K_MAX_LENGTH;
              /**
               * If `Buffer.TYPED_ARRAY_SUPPORT`:
               *   === true    Use Uint8Array implementation (fastest)
               *   === false   Print warning and recommend using `buffer` v4.x which has an Object
               *               implementation (most compatible, even IE6)
               *
               * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
               * Opera 11.6+, iOS 4.2+.
               *
               * We report that the browser does not support typed arrays if the are not subclassable
               * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
               * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
               * for __proto__ and has a buggy typed array implementation.
               */

              Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

              if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
                console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
              }

              function typedArraySupport() {
                // Can typed array instances can be augmented?
                try {
                  var arr = new Uint8Array(1);
                  arr.__proto__ = {
                    __proto__: Uint8Array.prototype,
                    foo: function () {
                      return 42;
                    }
                  };
                  return arr.foo() === 42;
                } catch (e) {
                  return false;
                }
              }

              Object.defineProperty(Buffer.prototype, 'parent', {
                enumerable: true,
                get: function () {
                  if (!Buffer.isBuffer(this)) return undefined;
                  return this.buffer;
                }
              });
              Object.defineProperty(Buffer.prototype, 'offset', {
                enumerable: true,
                get: function () {
                  if (!Buffer.isBuffer(this)) return undefined;
                  return this.byteOffset;
                }
              });

              function createBuffer(length) {
                if (length > K_MAX_LENGTH) {
                  throw new RangeError('The value "' + length + '" is invalid for option "size"');
                } // Return an augmented `Uint8Array` instance


                var buf = new Uint8Array(length);
                buf.__proto__ = Buffer.prototype;
                return buf;
              }
              /**
               * The Buffer constructor returns instances of `Uint8Array` that have their
               * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
               * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
               * and the `Uint8Array` methods. Square bracket notation works as expected -- it
               * returns a single octet.
               *
               * The `Uint8Array` prototype remains unmodified.
               */


              function Buffer(arg, encodingOrOffset, length) {
                // Common case.
                if (typeof arg === 'number') {
                  if (typeof encodingOrOffset === 'string') {
                    throw new TypeError('The "string" argument must be of type string. Received type number');
                  }

                  return allocUnsafe(arg);
                }

                return from(arg, encodingOrOffset, length);
              } // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97


              if (typeof Symbol !== 'undefined' && Symbol.species != null && Buffer[Symbol.species] === Buffer) {
                Object.defineProperty(Buffer, Symbol.species, {
                  value: null,
                  configurable: true,
                  enumerable: false,
                  writable: false
                });
              }

              Buffer.poolSize = 8192; // not used by this implementation

              function from(value, encodingOrOffset, length) {
                if (typeof value === 'string') {
                  return fromString(value, encodingOrOffset);
                }

                if (ArrayBuffer.isView(value)) {
                  return fromArrayLike(value);
                }

                if (value == null) {
                  throw TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
                }

                if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
                  return fromArrayBuffer(value, encodingOrOffset, length);
                }

                if (typeof value === 'number') {
                  throw new TypeError('The "value" argument must not be of type number. Received type number');
                }

                var valueOf = value.valueOf && value.valueOf();

                if (valueOf != null && valueOf !== value) {
                  return Buffer.from(valueOf, encodingOrOffset, length);
                }

                var b = fromObject(value);
                if (b) return b;

                if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
                  return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
                }

                throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
              }
              /**
               * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
               * if value is a number.
               * Buffer.from(str[, encoding])
               * Buffer.from(array)
               * Buffer.from(buffer)
               * Buffer.from(arrayBuffer[, byteOffset[, length]])
               **/


              Buffer.from = function (value, encodingOrOffset, length) {
                return from(value, encodingOrOffset, length);
              }; // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
              // https://github.com/feross/buffer/pull/148


              Buffer.prototype.__proto__ = Uint8Array.prototype;
              Buffer.__proto__ = Uint8Array;

              function assertSize(size) {
                if (typeof size !== 'number') {
                  throw new TypeError('"size" argument must be of type number');
                } else if (size < 0) {
                  throw new RangeError('The value "' + size + '" is invalid for option "size"');
                }
              }

              function alloc(size, fill, encoding) {
                assertSize(size);

                if (size <= 0) {
                  return createBuffer(size);
                }

                if (fill !== undefined) {
                  // Only pay attention to encoding if it's a string. This
                  // prevents accidentally sending in a number that would
                  // be interpretted as a start offset.
                  return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
                }

                return createBuffer(size);
              }
              /**
               * Creates a new filled Buffer instance.
               * alloc(size[, fill[, encoding]])
               **/


              Buffer.alloc = function (size, fill, encoding) {
                return alloc(size, fill, encoding);
              };

              function allocUnsafe(size) {
                assertSize(size);
                return createBuffer(size < 0 ? 0 : checked(size) | 0);
              }
              /**
               * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
               * */


              Buffer.allocUnsafe = function (size) {
                return allocUnsafe(size);
              };
              /**
               * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
               */


              Buffer.allocUnsafeSlow = function (size) {
                return allocUnsafe(size);
              };

              function fromString(string, encoding) {
                if (typeof encoding !== 'string' || encoding === '') {
                  encoding = 'utf8';
                }

                if (!Buffer.isEncoding(encoding)) {
                  throw new TypeError('Unknown encoding: ' + encoding);
                }

                var length = byteLength(string, encoding) | 0;
                var buf = createBuffer(length);
                var actual = buf.write(string, encoding);

                if (actual !== length) {
                  // Writing a hex string, for example, that contains invalid characters will
                  // cause everything after the first invalid character to be ignored. (e.g.
                  // 'abxxcd' will be treated as 'ab')
                  buf = buf.slice(0, actual);
                }

                return buf;
              }

              function fromArrayLike(array) {
                var length = array.length < 0 ? 0 : checked(array.length) | 0;
                var buf = createBuffer(length);

                for (var i = 0; i < length; i += 1) {
                  buf[i] = array[i] & 255;
                }

                return buf;
              }

              function fromArrayBuffer(array, byteOffset, length) {
                if (byteOffset < 0 || array.byteLength < byteOffset) {
                  throw new RangeError('"offset" is outside of buffer bounds');
                }

                if (array.byteLength < byteOffset + (length || 0)) {
                  throw new RangeError('"length" is outside of buffer bounds');
                }

                var buf;

                if (byteOffset === undefined && length === undefined) {
                  buf = new Uint8Array(array);
                } else if (length === undefined) {
                  buf = new Uint8Array(array, byteOffset);
                } else {
                  buf = new Uint8Array(array, byteOffset, length);
                } // Return an augmented `Uint8Array` instance


                buf.__proto__ = Buffer.prototype;
                return buf;
              }

              function fromObject(obj) {
                if (Buffer.isBuffer(obj)) {
                  var len = checked(obj.length) | 0;
                  var buf = createBuffer(len);

                  if (buf.length === 0) {
                    return buf;
                  }

                  obj.copy(buf, 0, 0, len);
                  return buf;
                }

                if (obj.length !== undefined) {
                  if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
                    return createBuffer(0);
                  }

                  return fromArrayLike(obj);
                }

                if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
                  return fromArrayLike(obj.data);
                }
              }

              function checked(length) {
                // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
                // length is NaN (which is otherwise coerced to zero.)
                if (length >= K_MAX_LENGTH) {
                  throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
                }

                return length | 0;
              }

              function SlowBuffer(length) {
                if (+length != length) {
                  // eslint-disable-line eqeqeq
                  length = 0;
                }

                return Buffer.alloc(+length);
              }

              Buffer.isBuffer = function isBuffer(b) {
                return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
              };

              Buffer.compare = function compare(a, b) {
                if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
                if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);

                if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                  throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
                }

                if (a === b) return 0;
                var x = a.length;
                var y = b.length;

                for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                  if (a[i] !== b[i]) {
                    x = a[i];
                    y = b[i];
                    break;
                  }
                }

                if (x < y) return -1;
                if (y < x) return 1;
                return 0;
              };

              Buffer.isEncoding = function isEncoding(encoding) {
                switch (String(encoding).toLowerCase()) {
                  case 'hex':
                  case 'utf8':
                  case 'utf-8':
                  case 'ascii':
                  case 'latin1':
                  case 'binary':
                  case 'base64':
                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return true;

                  default:
                    return false;
                }
              };

              Buffer.concat = function concat(list, length) {
                if (!Array.isArray(list)) {
                  throw new TypeError('"list" argument must be an Array of Buffers');
                }

                if (list.length === 0) {
                  return Buffer.alloc(0);
                }

                var i;

                if (length === undefined) {
                  length = 0;

                  for (i = 0; i < list.length; ++i) {
                    length += list[i].length;
                  }
                }

                var buffer = Buffer.allocUnsafe(length);
                var pos = 0;

                for (i = 0; i < list.length; ++i) {
                  var buf = list[i];

                  if (isInstance(buf, Uint8Array)) {
                    buf = Buffer.from(buf);
                  }

                  if (!Buffer.isBuffer(buf)) {
                    throw new TypeError('"list" argument must be an Array of Buffers');
                  }

                  buf.copy(buffer, pos);
                  pos += buf.length;
                }

                return buffer;
              };

              function byteLength(string, encoding) {
                if (Buffer.isBuffer(string)) {
                  return string.length;
                }

                if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
                  return string.byteLength;
                }

                if (typeof string !== 'string') {
                  throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + typeof string);
                }

                var len = string.length;
                var mustMatch = arguments.length > 2 && arguments[2] === true;
                if (!mustMatch && len === 0) return 0; // Use a for loop to avoid recursion

                var loweredCase = false;

                for (;;) {
                  switch (encoding) {
                    case 'ascii':
                    case 'latin1':
                    case 'binary':
                      return len;

                    case 'utf8':
                    case 'utf-8':
                      return utf8ToBytes(string).length;

                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                      return len * 2;

                    case 'hex':
                      return len >>> 1;

                    case 'base64':
                      return base64ToBytes(string).length;

                    default:
                      if (loweredCase) {
                        return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
                      }

                      encoding = ('' + encoding).toLowerCase();
                      loweredCase = true;
                  }
                }
              }

              Buffer.byteLength = byteLength;

              function slowToString(encoding, start, end) {
                var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
                // property of a typed array.
                // This behaves neither like String nor Uint8Array in that we set start/end
                // to their upper/lower bounds if the value passed is out of range.
                // undefined is handled specially as per ECMA-262 6th Edition,
                // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

                if (start === undefined || start < 0) {
                  start = 0;
                } // Return early if start > this.length. Done here to prevent potential uint32
                // coercion fail below.


                if (start > this.length) {
                  return '';
                }

                if (end === undefined || end > this.length) {
                  end = this.length;
                }

                if (end <= 0) {
                  return '';
                } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


                end >>>= 0;
                start >>>= 0;

                if (end <= start) {
                  return '';
                }

                if (!encoding) encoding = 'utf8';

                while (true) {
                  switch (encoding) {
                    case 'hex':
                      return hexSlice(this, start, end);

                    case 'utf8':
                    case 'utf-8':
                      return utf8Slice(this, start, end);

                    case 'ascii':
                      return asciiSlice(this, start, end);

                    case 'latin1':
                    case 'binary':
                      return latin1Slice(this, start, end);

                    case 'base64':
                      return base64Slice(this, start, end);

                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                      return utf16leSlice(this, start, end);

                    default:
                      if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                      encoding = (encoding + '').toLowerCase();
                      loweredCase = true;
                  }
                }
              } // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
              // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
              // reliably in a browserify context because there could be multiple different
              // copies of the 'buffer' package in use. This method works even for Buffer
              // instances that were created from another copy of the `buffer` package.
              // See: https://github.com/feross/buffer/issues/154


              Buffer.prototype._isBuffer = true;

              function swap(b, n, m) {
                var i = b[n];
                b[n] = b[m];
                b[m] = i;
              }

              Buffer.prototype.swap16 = function swap16() {
                var len = this.length;

                if (len % 2 !== 0) {
                  throw new RangeError('Buffer size must be a multiple of 16-bits');
                }

                for (var i = 0; i < len; i += 2) {
                  swap(this, i, i + 1);
                }

                return this;
              };

              Buffer.prototype.swap32 = function swap32() {
                var len = this.length;

                if (len % 4 !== 0) {
                  throw new RangeError('Buffer size must be a multiple of 32-bits');
                }

                for (var i = 0; i < len; i += 4) {
                  swap(this, i, i + 3);
                  swap(this, i + 1, i + 2);
                }

                return this;
              };

              Buffer.prototype.swap64 = function swap64() {
                var len = this.length;

                if (len % 8 !== 0) {
                  throw new RangeError('Buffer size must be a multiple of 64-bits');
                }

                for (var i = 0; i < len; i += 8) {
                  swap(this, i, i + 7);
                  swap(this, i + 1, i + 6);
                  swap(this, i + 2, i + 5);
                  swap(this, i + 3, i + 4);
                }

                return this;
              };

              Buffer.prototype.toString = function toString() {
                var length = this.length;
                if (length === 0) return '';
                if (arguments.length === 0) return utf8Slice(this, 0, length);
                return slowToString.apply(this, arguments);
              };

              Buffer.prototype.toLocaleString = Buffer.prototype.toString;

              Buffer.prototype.equals = function equals(b) {
                if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
                if (this === b) return true;
                return Buffer.compare(this, b) === 0;
              };

              Buffer.prototype.inspect = function inspect() {
                var str = '';
                var max = exports.INSPECT_MAX_BYTES;
                str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
                if (this.length > max) str += ' ... ';
                return '<Buffer ' + str + '>';
              };

              Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
                if (isInstance(target, Uint8Array)) {
                  target = Buffer.from(target, target.offset, target.byteLength);
                }

                if (!Buffer.isBuffer(target)) {
                  throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + typeof target);
                }

                if (start === undefined) {
                  start = 0;
                }

                if (end === undefined) {
                  end = target ? target.length : 0;
                }

                if (thisStart === undefined) {
                  thisStart = 0;
                }

                if (thisEnd === undefined) {
                  thisEnd = this.length;
                }

                if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                  throw new RangeError('out of range index');
                }

                if (thisStart >= thisEnd && start >= end) {
                  return 0;
                }

                if (thisStart >= thisEnd) {
                  return -1;
                }

                if (start >= end) {
                  return 1;
                }

                start >>>= 0;
                end >>>= 0;
                thisStart >>>= 0;
                thisEnd >>>= 0;
                if (this === target) return 0;
                var x = thisEnd - thisStart;
                var y = end - start;
                var len = Math.min(x, y);
                var thisCopy = this.slice(thisStart, thisEnd);
                var targetCopy = target.slice(start, end);

                for (var i = 0; i < len; ++i) {
                  if (thisCopy[i] !== targetCopy[i]) {
                    x = thisCopy[i];
                    y = targetCopy[i];
                    break;
                  }
                }

                if (x < y) return -1;
                if (y < x) return 1;
                return 0;
              }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
              // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
              //
              // Arguments:
              // - buffer - a Buffer to search
              // - val - a string, Buffer, or number
              // - byteOffset - an index into `buffer`; will be clamped to an int32
              // - encoding - an optional encoding, relevant is val is a string
              // - dir - true for indexOf, false for lastIndexOf


              function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
                // Empty buffer means no match
                if (buffer.length === 0) return -1; // Normalize byteOffset

                if (typeof byteOffset === 'string') {
                  encoding = byteOffset;
                  byteOffset = 0;
                } else if (byteOffset > 0x7fffffff) {
                  byteOffset = 0x7fffffff;
                } else if (byteOffset < -0x80000000) {
                  byteOffset = -0x80000000;
                }

                byteOffset = +byteOffset; // Coerce to Number.

                if (numberIsNaN(byteOffset)) {
                  // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                  byteOffset = dir ? 0 : buffer.length - 1;
                } // Normalize byteOffset: negative offsets start from the end of the buffer


                if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

                if (byteOffset >= buffer.length) {
                  if (dir) return -1;else byteOffset = buffer.length - 1;
                } else if (byteOffset < 0) {
                  if (dir) byteOffset = 0;else return -1;
                } // Normalize val


                if (typeof val === 'string') {
                  val = Buffer.from(val, encoding);
                } // Finally, search either indexOf (if dir is true) or lastIndexOf


                if (Buffer.isBuffer(val)) {
                  // Special case: looking for empty string/buffer always fails
                  if (val.length === 0) {
                    return -1;
                  }

                  return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
                } else if (typeof val === 'number') {
                  val = val & 0xFF; // Search for a byte value [0-255]

                  if (typeof Uint8Array.prototype.indexOf === 'function') {
                    if (dir) {
                      return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                    } else {
                      return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                    }
                  }

                  return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
                }

                throw new TypeError('val must be string, number or Buffer');
              }

              function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
                var indexSize = 1;
                var arrLength = arr.length;
                var valLength = val.length;

                if (encoding !== undefined) {
                  encoding = String(encoding).toLowerCase();

                  if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
                    if (arr.length < 2 || val.length < 2) {
                      return -1;
                    }

                    indexSize = 2;
                    arrLength /= 2;
                    valLength /= 2;
                    byteOffset /= 2;
                  }
                }

                function read(buf, i) {
                  if (indexSize === 1) {
                    return buf[i];
                  } else {
                    return buf.readUInt16BE(i * indexSize);
                  }
                }

                var i;

                if (dir) {
                  var foundIndex = -1;

                  for (i = byteOffset; i < arrLength; i++) {
                    if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                      if (foundIndex === -1) foundIndex = i;
                      if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
                    } else {
                      if (foundIndex !== -1) i -= i - foundIndex;
                      foundIndex = -1;
                    }
                  }
                } else {
                  if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

                  for (i = byteOffset; i >= 0; i--) {
                    var found = true;

                    for (var j = 0; j < valLength; j++) {
                      if (read(arr, i + j) !== read(val, j)) {
                        found = false;
                        break;
                      }
                    }

                    if (found) return i;
                  }
                }

                return -1;
              }

              Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
                return this.indexOf(val, byteOffset, encoding) !== -1;
              };

              Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
              };

              Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
              };

              function hexWrite(buf, string, offset, length) {
                offset = Number(offset) || 0;
                var remaining = buf.length - offset;

                if (!length) {
                  length = remaining;
                } else {
                  length = Number(length);

                  if (length > remaining) {
                    length = remaining;
                  }
                }

                var strLen = string.length;

                if (length > strLen / 2) {
                  length = strLen / 2;
                }

                for (var i = 0; i < length; ++i) {
                  var parsed = parseInt(string.substr(i * 2, 2), 16);
                  if (numberIsNaN(parsed)) return i;
                  buf[offset + i] = parsed;
                }

                return i;
              }

              function utf8Write(buf, string, offset, length) {
                return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
              }

              function asciiWrite(buf, string, offset, length) {
                return blitBuffer(asciiToBytes(string), buf, offset, length);
              }

              function latin1Write(buf, string, offset, length) {
                return asciiWrite(buf, string, offset, length);
              }

              function base64Write(buf, string, offset, length) {
                return blitBuffer(base64ToBytes(string), buf, offset, length);
              }

              function ucs2Write(buf, string, offset, length) {
                return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
              }

              Buffer.prototype.write = function write(string, offset, length, encoding) {
                // Buffer#write(string)
                if (offset === undefined) {
                  encoding = 'utf8';
                  length = this.length;
                  offset = 0; // Buffer#write(string, encoding)
                } else if (length === undefined && typeof offset === 'string') {
                  encoding = offset;
                  length = this.length;
                  offset = 0; // Buffer#write(string, offset[, length][, encoding])
                } else if (isFinite(offset)) {
                  offset = offset >>> 0;

                  if (isFinite(length)) {
                    length = length >>> 0;
                    if (encoding === undefined) encoding = 'utf8';
                  } else {
                    encoding = length;
                    length = undefined;
                  }
                } else {
                  throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
                }

                var remaining = this.length - offset;
                if (length === undefined || length > remaining) length = remaining;

                if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
                  throw new RangeError('Attempt to write outside buffer bounds');
                }

                if (!encoding) encoding = 'utf8';
                var loweredCase = false;

                for (;;) {
                  switch (encoding) {
                    case 'hex':
                      return hexWrite(this, string, offset, length);

                    case 'utf8':
                    case 'utf-8':
                      return utf8Write(this, string, offset, length);

                    case 'ascii':
                      return asciiWrite(this, string, offset, length);

                    case 'latin1':
                    case 'binary':
                      return latin1Write(this, string, offset, length);

                    case 'base64':
                      // Warning: maxLength not taken into account in base64Write
                      return base64Write(this, string, offset, length);

                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                      return ucs2Write(this, string, offset, length);

                    default:
                      if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                      encoding = ('' + encoding).toLowerCase();
                      loweredCase = true;
                  }
                }
              };

              Buffer.prototype.toJSON = function toJSON() {
                return {
                  type: 'Buffer',
                  data: Array.prototype.slice.call(this._arr || this, 0)
                };
              };

              function base64Slice(buf, start, end) {
                if (start === 0 && end === buf.length) {
                  return base64.fromByteArray(buf);
                } else {
                  return base64.fromByteArray(buf.slice(start, end));
                }
              }

              function utf8Slice(buf, start, end) {
                end = Math.min(buf.length, end);
                var res = [];
                var i = start;

                while (i < end) {
                  var firstByte = buf[i];
                  var codePoint = null;
                  var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

                  if (i + bytesPerSequence <= end) {
                    var secondByte, thirdByte, fourthByte, tempCodePoint;

                    switch (bytesPerSequence) {
                      case 1:
                        if (firstByte < 0x80) {
                          codePoint = firstByte;
                        }

                        break;

                      case 2:
                        secondByte = buf[i + 1];

                        if ((secondByte & 0xC0) === 0x80) {
                          tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

                          if (tempCodePoint > 0x7F) {
                            codePoint = tempCodePoint;
                          }
                        }

                        break;

                      case 3:
                        secondByte = buf[i + 1];
                        thirdByte = buf[i + 2];

                        if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                          tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

                          if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                            codePoint = tempCodePoint;
                          }
                        }

                        break;

                      case 4:
                        secondByte = buf[i + 1];
                        thirdByte = buf[i + 2];
                        fourthByte = buf[i + 3];

                        if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                          tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

                          if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                            codePoint = tempCodePoint;
                          }
                        }

                    }
                  }

                  if (codePoint === null) {
                    // we did not generate a valid codePoint so insert a
                    // replacement char (U+FFFD) and advance only 1 byte
                    codePoint = 0xFFFD;
                    bytesPerSequence = 1;
                  } else if (codePoint > 0xFFFF) {
                    // encode to utf16 (surrogate pair dance)
                    codePoint -= 0x10000;
                    res.push(codePoint >>> 10 & 0x3FF | 0xD800);
                    codePoint = 0xDC00 | codePoint & 0x3FF;
                  }

                  res.push(codePoint);
                  i += bytesPerSequence;
                }

                return decodeCodePointsArray(res);
              } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
              // the lowest limit is Chrome, with 0x10000 args.
              // We go 1 magnitude less, for safety


              var MAX_ARGUMENTS_LENGTH = 0x1000;

              function decodeCodePointsArray(codePoints) {
                var len = codePoints.length;

                if (len <= MAX_ARGUMENTS_LENGTH) {
                  return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
                } // Decode in chunks to avoid "call stack size exceeded".


                var res = '';
                var i = 0;

                while (i < len) {
                  res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
                }

                return res;
              }

              function asciiSlice(buf, start, end) {
                var ret = '';
                end = Math.min(buf.length, end);

                for (var i = start; i < end; ++i) {
                  ret += String.fromCharCode(buf[i] & 0x7F);
                }

                return ret;
              }

              function latin1Slice(buf, start, end) {
                var ret = '';
                end = Math.min(buf.length, end);

                for (var i = start; i < end; ++i) {
                  ret += String.fromCharCode(buf[i]);
                }

                return ret;
              }

              function hexSlice(buf, start, end) {
                var len = buf.length;
                if (!start || start < 0) start = 0;
                if (!end || end < 0 || end > len) end = len;
                var out = '';

                for (var i = start; i < end; ++i) {
                  out += toHex(buf[i]);
                }

                return out;
              }

              function utf16leSlice(buf, start, end) {
                var bytes = buf.slice(start, end);
                var res = '';

                for (var i = 0; i < bytes.length; i += 2) {
                  res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
                }

                return res;
              }

              Buffer.prototype.slice = function slice(start, end) {
                var len = this.length;
                start = ~~start;
                end = end === undefined ? len : ~~end;

                if (start < 0) {
                  start += len;
                  if (start < 0) start = 0;
                } else if (start > len) {
                  start = len;
                }

                if (end < 0) {
                  end += len;
                  if (end < 0) end = 0;
                } else if (end > len) {
                  end = len;
                }

                if (end < start) end = start;
                var newBuf = this.subarray(start, end); // Return an augmented `Uint8Array` instance

                newBuf.__proto__ = Buffer.prototype;
                return newBuf;
              };
              /*
               * Need to make sure that buffer isn't trying to write out of bounds.
               */


              function checkOffset(offset, ext, length) {
                if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
                if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
              }

              Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
                offset = offset >>> 0;
                byteLength = byteLength >>> 0;
                if (!noAssert) checkOffset(offset, byteLength, this.length);
                var val = this[offset];
                var mul = 1;
                var i = 0;

                while (++i < byteLength && (mul *= 0x100)) {
                  val += this[offset + i] * mul;
                }

                return val;
              };

              Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
                offset = offset >>> 0;
                byteLength = byteLength >>> 0;

                if (!noAssert) {
                  checkOffset(offset, byteLength, this.length);
                }

                var val = this[offset + --byteLength];
                var mul = 1;

                while (byteLength > 0 && (mul *= 0x100)) {
                  val += this[offset + --byteLength] * mul;
                }

                return val;
              };

              Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 1, this.length);
                return this[offset];
              };

              Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 2, this.length);
                return this[offset] | this[offset + 1] << 8;
              };

              Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 2, this.length);
                return this[offset] << 8 | this[offset + 1];
              };

              Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 4, this.length);
                return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
              };

              Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 4, this.length);
                return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
              };

              Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
                offset = offset >>> 0;
                byteLength = byteLength >>> 0;
                if (!noAssert) checkOffset(offset, byteLength, this.length);
                var val = this[offset];
                var mul = 1;
                var i = 0;

                while (++i < byteLength && (mul *= 0x100)) {
                  val += this[offset + i] * mul;
                }

                mul *= 0x80;
                if (val >= mul) val -= Math.pow(2, 8 * byteLength);
                return val;
              };

              Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
                offset = offset >>> 0;
                byteLength = byteLength >>> 0;
                if (!noAssert) checkOffset(offset, byteLength, this.length);
                var i = byteLength;
                var mul = 1;
                var val = this[offset + --i];

                while (i > 0 && (mul *= 0x100)) {
                  val += this[offset + --i] * mul;
                }

                mul *= 0x80;
                if (val >= mul) val -= Math.pow(2, 8 * byteLength);
                return val;
              };

              Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 1, this.length);
                if (!(this[offset] & 0x80)) return this[offset];
                return (0xff - this[offset] + 1) * -1;
              };

              Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 2, this.length);
                var val = this[offset] | this[offset + 1] << 8;
                return val & 0x8000 ? val | 0xFFFF0000 : val;
              };

              Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 2, this.length);
                var val = this[offset + 1] | this[offset] << 8;
                return val & 0x8000 ? val | 0xFFFF0000 : val;
              };

              Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 4, this.length);
                return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
              };

              Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 4, this.length);
                return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
              };

              Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 4, this.length);
                return ieee754.read(this, offset, true, 23, 4);
              };

              Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 4, this.length);
                return ieee754.read(this, offset, false, 23, 4);
              };

              Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 8, this.length);
                return ieee754.read(this, offset, true, 52, 8);
              };

              Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert) checkOffset(offset, 8, this.length);
                return ieee754.read(this, offset, false, 52, 8);
              };

              function checkInt(buf, value, offset, ext, max, min) {
                if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
                if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
                if (offset + ext > buf.length) throw new RangeError('Index out of range');
              }

              Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
                value = +value;
                offset = offset >>> 0;
                byteLength = byteLength >>> 0;

                if (!noAssert) {
                  var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                  checkInt(this, value, offset, byteLength, maxBytes, 0);
                }

                var mul = 1;
                var i = 0;
                this[offset] = value & 0xFF;

                while (++i < byteLength && (mul *= 0x100)) {
                  this[offset + i] = value / mul & 0xFF;
                }

                return offset + byteLength;
              };

              Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
                value = +value;
                offset = offset >>> 0;
                byteLength = byteLength >>> 0;

                if (!noAssert) {
                  var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                  checkInt(this, value, offset, byteLength, maxBytes, 0);
                }

                var i = byteLength - 1;
                var mul = 1;
                this[offset + i] = value & 0xFF;

                while (--i >= 0 && (mul *= 0x100)) {
                  this[offset + i] = value / mul & 0xFF;
                }

                return offset + byteLength;
              };

              Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
                this[offset] = value & 0xff;
                return offset + 1;
              };

              Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
                this[offset] = value & 0xff;
                this[offset + 1] = value >>> 8;
                return offset + 2;
              };

              Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
                this[offset] = value >>> 8;
                this[offset + 1] = value & 0xff;
                return offset + 2;
              };

              Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
                this[offset + 3] = value >>> 24;
                this[offset + 2] = value >>> 16;
                this[offset + 1] = value >>> 8;
                this[offset] = value & 0xff;
                return offset + 4;
              };

              Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
                this[offset] = value >>> 24;
                this[offset + 1] = value >>> 16;
                this[offset + 2] = value >>> 8;
                this[offset + 3] = value & 0xff;
                return offset + 4;
              };

              Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
                value = +value;
                offset = offset >>> 0;

                if (!noAssert) {
                  var limit = Math.pow(2, 8 * byteLength - 1);
                  checkInt(this, value, offset, byteLength, limit - 1, -limit);
                }

                var i = 0;
                var mul = 1;
                var sub = 0;
                this[offset] = value & 0xFF;

                while (++i < byteLength && (mul *= 0x100)) {
                  if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                    sub = 1;
                  }

                  this[offset + i] = (value / mul >> 0) - sub & 0xFF;
                }

                return offset + byteLength;
              };

              Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
                value = +value;
                offset = offset >>> 0;

                if (!noAssert) {
                  var limit = Math.pow(2, 8 * byteLength - 1);
                  checkInt(this, value, offset, byteLength, limit - 1, -limit);
                }

                var i = byteLength - 1;
                var mul = 1;
                var sub = 0;
                this[offset + i] = value & 0xFF;

                while (--i >= 0 && (mul *= 0x100)) {
                  if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                    sub = 1;
                  }

                  this[offset + i] = (value / mul >> 0) - sub & 0xFF;
                }

                return offset + byteLength;
              };

              Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
                if (value < 0) value = 0xff + value + 1;
                this[offset] = value & 0xff;
                return offset + 1;
              };

              Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
                this[offset] = value & 0xff;
                this[offset + 1] = value >>> 8;
                return offset + 2;
              };

              Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
                this[offset] = value >>> 8;
                this[offset + 1] = value & 0xff;
                return offset + 2;
              };

              Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
                this[offset] = value & 0xff;
                this[offset + 1] = value >>> 8;
                this[offset + 2] = value >>> 16;
                this[offset + 3] = value >>> 24;
                return offset + 4;
              };

              Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
                if (value < 0) value = 0xffffffff + value + 1;
                this[offset] = value >>> 24;
                this[offset + 1] = value >>> 16;
                this[offset + 2] = value >>> 8;
                this[offset + 3] = value & 0xff;
                return offset + 4;
              };

              function checkIEEE754(buf, value, offset, ext, max, min) {
                if (offset + ext > buf.length) throw new RangeError('Index out of range');
                if (offset < 0) throw new RangeError('Index out of range');
              }

              function writeFloat(buf, value, offset, littleEndian, noAssert) {
                value = +value;
                offset = offset >>> 0;

                if (!noAssert) {
                  checkIEEE754(buf, value, offset, 4);
                }

                ieee754.write(buf, value, offset, littleEndian, 23, 4);
                return offset + 4;
              }

              Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
                return writeFloat(this, value, offset, true, noAssert);
              };

              Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
                return writeFloat(this, value, offset, false, noAssert);
              };

              function writeDouble(buf, value, offset, littleEndian, noAssert) {
                value = +value;
                offset = offset >>> 0;

                if (!noAssert) {
                  checkIEEE754(buf, value, offset, 8);
                }

                ieee754.write(buf, value, offset, littleEndian, 52, 8);
                return offset + 8;
              }

              Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
                return writeDouble(this, value, offset, true, noAssert);
              };

              Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
                return writeDouble(this, value, offset, false, noAssert);
              }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


              Buffer.prototype.copy = function copy(target, targetStart, start, end) {
                if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
                if (!start) start = 0;
                if (!end && end !== 0) end = this.length;
                if (targetStart >= target.length) targetStart = target.length;
                if (!targetStart) targetStart = 0;
                if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

                if (end === start) return 0;
                if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

                if (targetStart < 0) {
                  throw new RangeError('targetStart out of bounds');
                }

                if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
                if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

                if (end > this.length) end = this.length;

                if (target.length - targetStart < end - start) {
                  end = target.length - targetStart + start;
                }

                var len = end - start;

                if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
                  // Use built-in when available, missing from IE11
                  this.copyWithin(targetStart, start, end);
                } else if (this === target && start < targetStart && targetStart < end) {
                  // descending copy from end
                  for (var i = len - 1; i >= 0; --i) {
                    target[i + targetStart] = this[i + start];
                  }
                } else {
                  Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
                }

                return len;
              }; // Usage:
              //    buffer.fill(number[, offset[, end]])
              //    buffer.fill(buffer[, offset[, end]])
              //    buffer.fill(string[, offset[, end]][, encoding])


              Buffer.prototype.fill = function fill(val, start, end, encoding) {
                // Handle string cases:
                if (typeof val === 'string') {
                  if (typeof start === 'string') {
                    encoding = start;
                    start = 0;
                    end = this.length;
                  } else if (typeof end === 'string') {
                    encoding = end;
                    end = this.length;
                  }

                  if (encoding !== undefined && typeof encoding !== 'string') {
                    throw new TypeError('encoding must be a string');
                  }

                  if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                    throw new TypeError('Unknown encoding: ' + encoding);
                  }

                  if (val.length === 1) {
                    var code = val.charCodeAt(0);

                    if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
                      // Fast path: If `val` fits into a single byte, use that numeric value.
                      val = code;
                    }
                  }
                } else if (typeof val === 'number') {
                  val = val & 255;
                } // Invalid ranges are not set to a default, so can range check early.


                if (start < 0 || this.length < start || this.length < end) {
                  throw new RangeError('Out of range index');
                }

                if (end <= start) {
                  return this;
                }

                start = start >>> 0;
                end = end === undefined ? this.length : end >>> 0;
                if (!val) val = 0;
                var i;

                if (typeof val === 'number') {
                  for (i = start; i < end; ++i) {
                    this[i] = val;
                  }
                } else {
                  var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
                  var len = bytes.length;

                  if (len === 0) {
                    throw new TypeError('The value "' + val + '" is invalid for argument "value"');
                  }

                  for (i = 0; i < end - start; ++i) {
                    this[i + start] = bytes[i % len];
                  }
                }

                return this;
              }; // HELPER FUNCTIONS
              // ================


              var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

              function base64clean(str) {
                // Node takes equal signs as end of the Base64 encoding
                str = str.split('=')[0]; // Node strips out invalid characters like \n and \t from the string, base64-js does not

                str = str.trim().replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

                if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

                while (str.length % 4 !== 0) {
                  str = str + '=';
                }

                return str;
              }

              function toHex(n) {
                if (n < 16) return '0' + n.toString(16);
                return n.toString(16);
              }

              function utf8ToBytes(string, units) {
                units = units || Infinity;
                var codePoint;
                var length = string.length;
                var leadSurrogate = null;
                var bytes = [];

                for (var i = 0; i < length; ++i) {
                  codePoint = string.charCodeAt(i); // is surrogate component

                  if (codePoint > 0xD7FF && codePoint < 0xE000) {
                    // last char was a lead
                    if (!leadSurrogate) {
                      // no lead yet
                      if (codePoint > 0xDBFF) {
                        // unexpected trail
                        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                        continue;
                      } else if (i + 1 === length) {
                        // unpaired lead
                        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                        continue;
                      } // valid lead


                      leadSurrogate = codePoint;
                      continue;
                    } // 2 leads in a row


                    if (codePoint < 0xDC00) {
                      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                      leadSurrogate = codePoint;
                      continue;
                    } // valid surrogate pair


                    codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
                  } else if (leadSurrogate) {
                    // valid bmp char, but last char was a lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                  }

                  leadSurrogate = null; // encode utf8

                  if (codePoint < 0x80) {
                    if ((units -= 1) < 0) break;
                    bytes.push(codePoint);
                  } else if (codePoint < 0x800) {
                    if ((units -= 2) < 0) break;
                    bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
                  } else if (codePoint < 0x10000) {
                    if ((units -= 3) < 0) break;
                    bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
                  } else if (codePoint < 0x110000) {
                    if ((units -= 4) < 0) break;
                    bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
                  } else {
                    throw new Error('Invalid code point');
                  }
                }

                return bytes;
              }

              function asciiToBytes(str) {
                var byteArray = [];

                for (var i = 0; i < str.length; ++i) {
                  // Node's code seems to be doing this and not & 0x7F..
                  byteArray.push(str.charCodeAt(i) & 0xFF);
                }

                return byteArray;
              }

              function utf16leToBytes(str, units) {
                var c, hi, lo;
                var byteArray = [];

                for (var i = 0; i < str.length; ++i) {
                  if ((units -= 2) < 0) break;
                  c = str.charCodeAt(i);
                  hi = c >> 8;
                  lo = c % 256;
                  byteArray.push(lo);
                  byteArray.push(hi);
                }

                return byteArray;
              }

              function base64ToBytes(str) {
                return base64.toByteArray(base64clean(str));
              }

              function blitBuffer(src, dst, offset, length) {
                for (var i = 0; i < length; ++i) {
                  if (i + offset >= dst.length || i >= src.length) break;
                  dst[i + offset] = src[i];
                }

                return i;
              } // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
              // the `instanceof` check but they should be treated as of that type.
              // See: https://github.com/feross/buffer/issues/166


              function isInstance(obj, type) {
                return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
              }

              function numberIsNaN(obj) {
                // For IE11 support
                return obj !== obj; // eslint-disable-line no-self-compare
              }
            }, {
              "base64-js": 24,
              "ieee754": 31
            }],
            29: [function (require, module, exports) {
              (function (Buffer) {
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.
                // NOTE: These type checking functions intentionally don't use `instanceof`
                // because it is fragile and can be easily faked with `Object.create()`.
                function isArray(arg) {
                  if (Array.isArray) {
                    return Array.isArray(arg);
                  }

                  return objectToString(arg) === '[object Array]';
                }

                exports.isArray = isArray;

                function isBoolean(arg) {
                  return typeof arg === 'boolean';
                }

                exports.isBoolean = isBoolean;

                function isNull(arg) {
                  return arg === null;
                }

                exports.isNull = isNull;

                function isNullOrUndefined(arg) {
                  return arg == null;
                }

                exports.isNullOrUndefined = isNullOrUndefined;

                function isNumber(arg) {
                  return typeof arg === 'number';
                }

                exports.isNumber = isNumber;

                function isString(arg) {
                  return typeof arg === 'string';
                }

                exports.isString = isString;

                function isSymbol(arg) {
                  return typeof arg === 'symbol';
                }

                exports.isSymbol = isSymbol;

                function isUndefined(arg) {
                  return arg === void 0;
                }

                exports.isUndefined = isUndefined;

                function isRegExp(re) {
                  return objectToString(re) === '[object RegExp]';
                }

                exports.isRegExp = isRegExp;

                function isObject(arg) {
                  return typeof arg === 'object' && arg !== null;
                }

                exports.isObject = isObject;

                function isDate(d) {
                  return objectToString(d) === '[object Date]';
                }

                exports.isDate = isDate;

                function isError(e) {
                  return objectToString(e) === '[object Error]' || e instanceof Error;
                }

                exports.isError = isError;

                function isFunction(arg) {
                  return typeof arg === 'function';
                }

                exports.isFunction = isFunction;

                function isPrimitive(arg) {
                  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
                  typeof arg === 'undefined';
                }

                exports.isPrimitive = isPrimitive;
                exports.isBuffer = Buffer.isBuffer;

                function objectToString(o) {
                  return Object.prototype.toString.call(o);
                }
              }).call(this, {
                "isBuffer": require("../../is-buffer/index.js")
              });
            }, {
              "../../is-buffer/index.js": 33
            }],
            30: [function (require, module, exports) {
              // Copyright Joyent, Inc. and other Node contributors.
              //
              // Permission is hereby granted, free of charge, to any person obtaining a
              // copy of this software and associated documentation files (the
              // "Software"), to deal in the Software without restriction, including
              // without limitation the rights to use, copy, modify, merge, publish,
              // distribute, sublicense, and/or sell copies of the Software, and to permit
              // persons to whom the Software is furnished to do so, subject to the
              // following conditions:
              //
              // The above copyright notice and this permission notice shall be included
              // in all copies or substantial portions of the Software.
              //
              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
              // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
              // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
              // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
              // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
              // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
              // USE OR OTHER DEALINGS IN THE SOFTWARE.
              var objectCreate = Object.create || objectCreatePolyfill;
              var objectKeys = Object.keys || objectKeysPolyfill;
              var bind = Function.prototype.bind || functionBindPolyfill;

              function EventEmitter() {
                if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
                  this._events = objectCreate(null);
                  this._eventsCount = 0;
                }

                this._maxListeners = this._maxListeners || undefined;
              }

              module.exports = EventEmitter; // Backwards-compat with node 0.10.x

              EventEmitter.EventEmitter = EventEmitter;
              EventEmitter.prototype._events = undefined;
              EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
              // added to it. This is a useful default which helps finding memory leaks.

              var defaultMaxListeners = 10;
              var hasDefineProperty;

              try {
                var o = {};
                if (Object.defineProperty) Object.defineProperty(o, 'x', {
                  value: 0
                });
                hasDefineProperty = o.x === 0;
              } catch (err) {
                hasDefineProperty = false;
              }

              if (hasDefineProperty) {
                Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
                  enumerable: true,
                  get: function () {
                    return defaultMaxListeners;
                  },
                  set: function (arg) {
                    // check whether the input is a positive number (whose value is zero or
                    // greater and not a NaN).
                    if (typeof arg !== 'number' || arg < 0 || arg !== arg) throw new TypeError('"defaultMaxListeners" must be a positive number');
                    defaultMaxListeners = arg;
                  }
                });
              } else {
                EventEmitter.defaultMaxListeners = defaultMaxListeners;
              } // Obviously not all Emitters should be limited to 10. This function allows
              // that to be increased. Set to zero for unlimited.


              EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
                if (typeof n !== 'number' || n < 0 || isNaN(n)) throw new TypeError('"n" argument must be a positive number');
                this._maxListeners = n;
                return this;
              };

              function $getMaxListeners(that) {
                if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
                return that._maxListeners;
              }

              EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
                return $getMaxListeners(this);
              }; // These standalone emit* functions are used to optimize calling of event
              // handlers for fast cases because emit() itself often has a variable number of
              // arguments and can be deoptimized because of that. These functions always have
              // the same number of arguments and thus do not get deoptimized, so the code
              // inside them can execute faster.


              function emitNone(handler, isFn, self) {
                if (isFn) handler.call(self);else {
                  var len = handler.length;
                  var listeners = arrayClone(handler, len);

                  for (var i = 0; i < len; ++i) listeners[i].call(self);
                }
              }

              function emitOne(handler, isFn, self, arg1) {
                if (isFn) handler.call(self, arg1);else {
                  var len = handler.length;
                  var listeners = arrayClone(handler, len);

                  for (var i = 0; i < len; ++i) listeners[i].call(self, arg1);
                }
              }

              function emitTwo(handler, isFn, self, arg1, arg2) {
                if (isFn) handler.call(self, arg1, arg2);else {
                  var len = handler.length;
                  var listeners = arrayClone(handler, len);

                  for (var i = 0; i < len; ++i) listeners[i].call(self, arg1, arg2);
                }
              }

              function emitThree(handler, isFn, self, arg1, arg2, arg3) {
                if (isFn) handler.call(self, arg1, arg2, arg3);else {
                  var len = handler.length;
                  var listeners = arrayClone(handler, len);

                  for (var i = 0; i < len; ++i) listeners[i].call(self, arg1, arg2, arg3);
                }
              }

              function emitMany(handler, isFn, self, args) {
                if (isFn) handler.apply(self, args);else {
                  var len = handler.length;
                  var listeners = arrayClone(handler, len);

                  for (var i = 0; i < len; ++i) listeners[i].apply(self, args);
                }
              }

              EventEmitter.prototype.emit = function emit(type) {
                var er, handler, len, args, i, events;
                var doError = type === 'error';
                events = this._events;
                if (events) doError = doError && events.error == null;else if (!doError) return false; // If there is no 'error' event listener then throw.

                if (doError) {
                  if (arguments.length > 1) er = arguments[1];

                  if (er instanceof Error) {
                    throw er; // Unhandled 'error' event
                  } else {
                    // At least give some kind of context to the user
                    var err = new Error('Unhandled "error" event. (' + er + ')');
                    err.context = er;
                    throw err;
                  }
                }

                handler = events[type];
                if (!handler) return false;
                var isFn = typeof handler === 'function';
                len = arguments.length;

                switch (len) {
                  // fast cases
                  case 1:
                    emitNone(handler, isFn, this);
                    break;

                  case 2:
                    emitOne(handler, isFn, this, arguments[1]);
                    break;

                  case 3:
                    emitTwo(handler, isFn, this, arguments[1], arguments[2]);
                    break;

                  case 4:
                    emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
                    break;
                  // slower

                  default:
                    args = new Array(len - 1);

                    for (i = 1; i < len; i++) args[i - 1] = arguments[i];

                    emitMany(handler, isFn, this, args);
                }

                return true;
              };

              function _addListener(target, type, listener, prepend) {
                var m;
                var events;
                var existing;
                if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
                events = target._events;

                if (!events) {
                  events = target._events = objectCreate(null);
                  target._eventsCount = 0;
                } else {
                  // To avoid recursion in the case that type === "newListener"! Before
                  // adding it to the listeners, first emit "newListener".
                  if (events.newListener) {
                    target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
                    // this._events to be assigned to a new object

                    events = target._events;
                  }

                  existing = events[type];
                }

                if (!existing) {
                  // Optimize the case of one listener. Don't need the extra array object.
                  existing = events[type] = listener;
                  ++target._eventsCount;
                } else {
                  if (typeof existing === 'function') {
                    // Adding the second element, need to change to array.
                    existing = events[type] = prepend ? [listener, existing] : [existing, listener];
                  } else {
                    // If we've already got an array, just append.
                    if (prepend) {
                      existing.unshift(listener);
                    } else {
                      existing.push(listener);
                    }
                  } // Check for listener leak


                  if (!existing.warned) {
                    m = $getMaxListeners(target);

                    if (m && m > 0 && existing.length > m) {
                      existing.warned = true;
                      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' "' + String(type) + '" listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit.');
                      w.name = 'MaxListenersExceededWarning';
                      w.emitter = target;
                      w.type = type;
                      w.count = existing.length;

                      if (typeof console === 'object' && console.warn) {
                        console.warn('%s: %s', w.name, w.message);
                      }
                    }
                  }
                }

                return target;
              }

              EventEmitter.prototype.addListener = function addListener(type, listener) {
                return _addListener(this, type, listener, false);
              };

              EventEmitter.prototype.on = EventEmitter.prototype.addListener;

              EventEmitter.prototype.prependListener = function prependListener(type, listener) {
                return _addListener(this, type, listener, true);
              };

              function onceWrapper() {
                if (!this.fired) {
                  this.target.removeListener(this.type, this.wrapFn);
                  this.fired = true;

                  switch (arguments.length) {
                    case 0:
                      return this.listener.call(this.target);

                    case 1:
                      return this.listener.call(this.target, arguments[0]);

                    case 2:
                      return this.listener.call(this.target, arguments[0], arguments[1]);

                    case 3:
                      return this.listener.call(this.target, arguments[0], arguments[1], arguments[2]);

                    default:
                      var args = new Array(arguments.length);

                      for (var i = 0; i < args.length; ++i) args[i] = arguments[i];

                      this.listener.apply(this.target, args);
                  }
                }
              }

              function _onceWrap(target, type, listener) {
                var state = {
                  fired: false,
                  wrapFn: undefined,
                  target: target,
                  type: type,
                  listener: listener
                };
                var wrapped = bind.call(onceWrapper, state);
                wrapped.listener = listener;
                state.wrapFn = wrapped;
                return wrapped;
              }

              EventEmitter.prototype.once = function once(type, listener) {
                if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
                this.on(type, _onceWrap(this, type, listener));
                return this;
              };

              EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
                if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
                this.prependListener(type, _onceWrap(this, type, listener));
                return this;
              }; // Emits a 'removeListener' event if and only if the listener was removed.


              EventEmitter.prototype.removeListener = function removeListener(type, listener) {
                var list, events, position, i, originalListener;
                if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
                events = this._events;
                if (!events) return this;
                list = events[type];
                if (!list) return this;

                if (list === listener || list.listener === listener) {
                  if (--this._eventsCount === 0) this._events = objectCreate(null);else {
                    delete events[type];
                    if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
                  }
                } else if (typeof list !== 'function') {
                  position = -1;

                  for (i = list.length - 1; i >= 0; i--) {
                    if (list[i] === listener || list[i].listener === listener) {
                      originalListener = list[i].listener;
                      position = i;
                      break;
                    }
                  }

                  if (position < 0) return this;
                  if (position === 0) list.shift();else spliceOne(list, position);
                  if (list.length === 1) events[type] = list[0];
                  if (events.removeListener) this.emit('removeListener', type, originalListener || listener);
                }

                return this;
              };

              EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
                var listeners, events, i;
                events = this._events;
                if (!events) return this; // not listening for removeListener, no need to emit

                if (!events.removeListener) {
                  if (arguments.length === 0) {
                    this._events = objectCreate(null);
                    this._eventsCount = 0;
                  } else if (events[type]) {
                    if (--this._eventsCount === 0) this._events = objectCreate(null);else delete events[type];
                  }

                  return this;
                } // emit removeListener for all listeners on all events


                if (arguments.length === 0) {
                  var keys = objectKeys(events);
                  var key;

                  for (i = 0; i < keys.length; ++i) {
                    key = keys[i];
                    if (key === 'removeListener') continue;
                    this.removeAllListeners(key);
                  }

                  this.removeAllListeners('removeListener');
                  this._events = objectCreate(null);
                  this._eventsCount = 0;
                  return this;
                }

                listeners = events[type];

                if (typeof listeners === 'function') {
                  this.removeListener(type, listeners);
                } else if (listeners) {
                  // LIFO order
                  for (i = listeners.length - 1; i >= 0; i--) {
                    this.removeListener(type, listeners[i]);
                  }
                }

                return this;
              };

              function _listeners(target, type, unwrap) {
                var events = target._events;
                if (!events) return [];
                var evlistener = events[type];
                if (!evlistener) return [];
                if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
                return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
              }

              EventEmitter.prototype.listeners = function listeners(type) {
                return _listeners(this, type, true);
              };

              EventEmitter.prototype.rawListeners = function rawListeners(type) {
                return _listeners(this, type, false);
              };

              EventEmitter.listenerCount = function (emitter, type) {
                if (typeof emitter.listenerCount === 'function') {
                  return emitter.listenerCount(type);
                } else {
                  return listenerCount.call(emitter, type);
                }
              };

              EventEmitter.prototype.listenerCount = listenerCount;

              function listenerCount(type) {
                var events = this._events;

                if (events) {
                  var evlistener = events[type];

                  if (typeof evlistener === 'function') {
                    return 1;
                  } else if (evlistener) {
                    return evlistener.length;
                  }
                }

                return 0;
              }

              EventEmitter.prototype.eventNames = function eventNames() {
                return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
              }; // About 1.5x faster than the two-arg version of Array#splice().


              function spliceOne(list, index) {
                for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) list[i] = list[k];

                list.pop();
              }

              function arrayClone(arr, n) {
                var copy = new Array(n);

                for (var i = 0; i < n; ++i) copy[i] = arr[i];

                return copy;
              }

              function unwrapListeners(arr) {
                var ret = new Array(arr.length);

                for (var i = 0; i < ret.length; ++i) {
                  ret[i] = arr[i].listener || arr[i];
                }

                return ret;
              }

              function objectCreatePolyfill(proto) {
                var F = function () {};

                F.prototype = proto;
                return new F();
              }

              function objectKeysPolyfill(obj) {

                for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) ;

                return k;
              }

              function functionBindPolyfill(context) {
                var fn = this;
                return function () {
                  return fn.apply(context, arguments);
                };
              }
            }, {}],
            31: [function (require, module, exports) {
              exports.read = function (buffer, offset, isLE, mLen, nBytes) {
                var e, m;
                var eLen = nBytes * 8 - mLen - 1;
                var eMax = (1 << eLen) - 1;
                var eBias = eMax >> 1;
                var nBits = -7;
                var i = isLE ? nBytes - 1 : 0;
                var d = isLE ? -1 : 1;
                var s = buffer[offset + i];
                i += d;
                e = s & (1 << -nBits) - 1;
                s >>= -nBits;
                nBits += eLen;

                for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

                m = e & (1 << -nBits) - 1;
                e >>= -nBits;
                nBits += mLen;

                for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

                if (e === 0) {
                  e = 1 - eBias;
                } else if (e === eMax) {
                  return m ? NaN : (s ? -1 : 1) * Infinity;
                } else {
                  m = m + Math.pow(2, mLen);
                  e = e - eBias;
                }

                return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
              };

              exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
                var e, m, c;
                var eLen = nBytes * 8 - mLen - 1;
                var eMax = (1 << eLen) - 1;
                var eBias = eMax >> 1;
                var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
                var i = isLE ? 0 : nBytes - 1;
                var d = isLE ? 1 : -1;
                var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
                value = Math.abs(value);

                if (isNaN(value) || value === Infinity) {
                  m = isNaN(value) ? 1 : 0;
                  e = eMax;
                } else {
                  e = Math.floor(Math.log(value) / Math.LN2);

                  if (value * (c = Math.pow(2, -e)) < 1) {
                    e--;
                    c *= 2;
                  }

                  if (e + eBias >= 1) {
                    value += rt / c;
                  } else {
                    value += rt * Math.pow(2, 1 - eBias);
                  }

                  if (value * c >= 2) {
                    e++;
                    c /= 2;
                  }

                  if (e + eBias >= eMax) {
                    m = 0;
                    e = eMax;
                  } else if (e + eBias >= 1) {
                    m = (value * c - 1) * Math.pow(2, mLen);
                    e = e + eBias;
                  } else {
                    m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                    e = 0;
                  }
                }

                for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

                e = e << mLen | m;
                eLen += mLen;

                for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

                buffer[offset + i - d] |= s * 128;
              };
            }, {}],
            32: [function (require, module, exports) {
              if (typeof Object.create === 'function') {
                // implementation from standard node.js 'util' module
                module.exports = function inherits(ctor, superCtor) {
                  ctor.super_ = superCtor;
                  ctor.prototype = Object.create(superCtor.prototype, {
                    constructor: {
                      value: ctor,
                      enumerable: false,
                      writable: true,
                      configurable: true
                    }
                  });
                };
              } else {
                // old school shim for old browsers
                module.exports = function inherits(ctor, superCtor) {
                  ctor.super_ = superCtor;

                  var TempCtor = function () {};

                  TempCtor.prototype = superCtor.prototype;
                  ctor.prototype = new TempCtor();
                  ctor.prototype.constructor = ctor;
                };
              }
            }, {}],
            33: [function (require, module, exports) {
              /*!
               * Determine if an object is a Buffer
               *
               * @author   Feross Aboukhadijeh <https://feross.org>
               * @license  MIT
               */
              // The _isBuffer check is for Safari 5-7 support, because it's missing
              // Object.prototype.constructor. Remove this eventually
              module.exports = function (obj) {
                return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
              };

              function isBuffer(obj) {
                return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
              } // For Node v0.10 support. Remove this eventually.


              function isSlowBuffer(obj) {
                return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
              }
            }, {}],
            34: [function (require, module, exports) {
              var toString = {}.toString;

              module.exports = Array.isArray || function (arr) {
                return toString.call(arr) == '[object Array]';
              };
            }, {}],
            35: [function (require, module, exports) {

              var TYPED_OK = typeof Uint8Array !== 'undefined' && typeof Uint16Array !== 'undefined' && typeof Int32Array !== 'undefined';

              function _has(obj, key) {
                return Object.prototype.hasOwnProperty.call(obj, key);
              }

              exports.assign = function (obj
              /*from1, from2, from3, ...*/
              ) {
                var sources = Array.prototype.slice.call(arguments, 1);

                while (sources.length) {
                  var source = sources.shift();

                  if (!source) {
                    continue;
                  }

                  if (typeof source !== 'object') {
                    throw new TypeError(source + 'must be non-object');
                  }

                  for (var p in source) {
                    if (_has(source, p)) {
                      obj[p] = source[p];
                    }
                  }
                }

                return obj;
              }; // reduce buffer size, avoiding mem copy


              exports.shrinkBuf = function (buf, size) {
                if (buf.length === size) {
                  return buf;
                }

                if (buf.subarray) {
                  return buf.subarray(0, size);
                }

                buf.length = size;
                return buf;
              };

              var fnTyped = {
                arraySet: function (dest, src, src_offs, len, dest_offs) {
                  if (src.subarray && dest.subarray) {
                    dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
                    return;
                  } // Fallback to ordinary array


                  for (var i = 0; i < len; i++) {
                    dest[dest_offs + i] = src[src_offs + i];
                  }
                },
                // Join array of chunks to single array.
                flattenChunks: function (chunks) {
                  var i, l, len, pos, chunk, result; // calculate data length

                  len = 0;

                  for (i = 0, l = chunks.length; i < l; i++) {
                    len += chunks[i].length;
                  } // join chunks


                  result = new Uint8Array(len);
                  pos = 0;

                  for (i = 0, l = chunks.length; i < l; i++) {
                    chunk = chunks[i];
                    result.set(chunk, pos);
                    pos += chunk.length;
                  }

                  return result;
                }
              };
              var fnUntyped = {
                arraySet: function (dest, src, src_offs, len, dest_offs) {
                  for (var i = 0; i < len; i++) {
                    dest[dest_offs + i] = src[src_offs + i];
                  }
                },
                // Join array of chunks to single array.
                flattenChunks: function (chunks) {
                  return [].concat.apply([], chunks);
                }
              }; // Enable/Disable typed arrays use, for testing
              //

              exports.setTyped = function (on) {
                if (on) {
                  exports.Buf8 = Uint8Array;
                  exports.Buf16 = Uint16Array;
                  exports.Buf32 = Int32Array;
                  exports.assign(exports, fnTyped);
                } else {
                  exports.Buf8 = Array;
                  exports.Buf16 = Array;
                  exports.Buf32 = Array;
                  exports.assign(exports, fnUntyped);
                }
              };

              exports.setTyped(TYPED_OK);
            }, {}],
            36: [function (require, module, exports) {
              // It isn't worth it to make additional optimizations as in original.
              // Small size is preferable.
              // (C) 1995-2013 Jean-loup Gailly and Mark Adler
              // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
              //
              // This software is provided 'as-is', without any express or implied
              // warranty. In no event will the authors be held liable for any damages
              // arising from the use of this software.
              //
              // Permission is granted to anyone to use this software for any purpose,
              // including commercial applications, and to alter it and redistribute it
              // freely, subject to the following restrictions:
              //
              // 1. The origin of this software must not be misrepresented; you must not
              //   claim that you wrote the original software. If you use this software
              //   in a product, an acknowledgment in the product documentation would be
              //   appreciated but is not required.
              // 2. Altered source versions must be plainly marked as such, and must not be
              //   misrepresented as being the original software.
              // 3. This notice may not be removed or altered from any source distribution.

              function adler32(adler, buf, len, pos) {
                var s1 = adler & 0xffff | 0,
                    s2 = adler >>> 16 & 0xffff | 0,
                    n = 0;

                while (len !== 0) {
                  // Set limit ~ twice less than 5552, to keep
                  // s2 in 31-bits, because we force signed ints.
                  // in other case %= will fail.
                  n = len > 2000 ? 2000 : len;
                  len -= n;

                  do {
                    s1 = s1 + buf[pos++] | 0;
                    s2 = s2 + s1 | 0;
                  } while (--n);

                  s1 %= 65521;
                  s2 %= 65521;
                }

                return s1 | s2 << 16 | 0;
              }

              module.exports = adler32;
            }, {}],
            37: [function (require, module, exports) {
              // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
              //
              // This software is provided 'as-is', without any express or implied
              // warranty. In no event will the authors be held liable for any damages
              // arising from the use of this software.
              //
              // Permission is granted to anyone to use this software for any purpose,
              // including commercial applications, and to alter it and redistribute it
              // freely, subject to the following restrictions:
              //
              // 1. The origin of this software must not be misrepresented; you must not
              //   claim that you wrote the original software. If you use this software
              //   in a product, an acknowledgment in the product documentation would be
              //   appreciated but is not required.
              // 2. Altered source versions must be plainly marked as such, and must not be
              //   misrepresented as being the original software.
              // 3. This notice may not be removed or altered from any source distribution.

              module.exports = {
                /* Allowed flush values; see deflate() and inflate() below for details */
                Z_NO_FLUSH: 0,
                Z_PARTIAL_FLUSH: 1,
                Z_SYNC_FLUSH: 2,
                Z_FULL_FLUSH: 3,
                Z_FINISH: 4,
                Z_BLOCK: 5,
                Z_TREES: 6,

                /* Return codes for the compression/decompression functions. Negative values
                * are errors, positive values are used for special but normal events.
                */
                Z_OK: 0,
                Z_STREAM_END: 1,
                Z_NEED_DICT: 2,
                Z_ERRNO: -1,
                Z_STREAM_ERROR: -2,
                Z_DATA_ERROR: -3,
                //Z_MEM_ERROR:     -4,
                Z_BUF_ERROR: -5,
                //Z_VERSION_ERROR: -6,

                /* compression levels */
                Z_NO_COMPRESSION: 0,
                Z_BEST_SPEED: 1,
                Z_BEST_COMPRESSION: 9,
                Z_DEFAULT_COMPRESSION: -1,
                Z_FILTERED: 1,
                Z_HUFFMAN_ONLY: 2,
                Z_RLE: 3,
                Z_FIXED: 4,
                Z_DEFAULT_STRATEGY: 0,

                /* Possible values of the data_type field (though see inflate()) */
                Z_BINARY: 0,
                Z_TEXT: 1,
                //Z_ASCII:                1, // = Z_TEXT (deprecated)
                Z_UNKNOWN: 2,

                /* The deflate compression method */
                Z_DEFLATED: 8 //Z_NULL:                 null // Use -1 or null inline, depending on var type

              };
            }, {}],
            38: [function (require, module, exports) {
              // So write code to minimize size - no pregenerated tables
              // and array tools dependencies.
              // (C) 1995-2013 Jean-loup Gailly and Mark Adler
              // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
              //
              // This software is provided 'as-is', without any express or implied
              // warranty. In no event will the authors be held liable for any damages
              // arising from the use of this software.
              //
              // Permission is granted to anyone to use this software for any purpose,
              // including commercial applications, and to alter it and redistribute it
              // freely, subject to the following restrictions:
              //
              // 1. The origin of this software must not be misrepresented; you must not
              //   claim that you wrote the original software. If you use this software
              //   in a product, an acknowledgment in the product documentation would be
              //   appreciated but is not required.
              // 2. Altered source versions must be plainly marked as such, and must not be
              //   misrepresented as being the original software.
              // 3. This notice may not be removed or altered from any source distribution.
              // Use ordinary array, since untyped makes no boost here

              function makeTable() {
                var c,
                    table = [];

                for (var n = 0; n < 256; n++) {
                  c = n;

                  for (var k = 0; k < 8; k++) {
                    c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;
                  }

                  table[n] = c;
                }

                return table;
              } // Create table on load. Just 255 signed longs. Not a problem.


              var crcTable = makeTable();

              function crc32(crc, buf, len, pos) {
                var t = crcTable,
                    end = pos + len;
                crc ^= -1;

                for (var i = pos; i < end; i++) {
                  crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];
                }

                return crc ^ -1; // >>> 0;
              }

              module.exports = crc32;
            }, {}],
            39: [function (require, module, exports) {
              // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
              //
              // This software is provided 'as-is', without any express or implied
              // warranty. In no event will the authors be held liable for any damages
              // arising from the use of this software.
              //
              // Permission is granted to anyone to use this software for any purpose,
              // including commercial applications, and to alter it and redistribute it
              // freely, subject to the following restrictions:
              //
              // 1. The origin of this software must not be misrepresented; you must not
              //   claim that you wrote the original software. If you use this software
              //   in a product, an acknowledgment in the product documentation would be
              //   appreciated but is not required.
              // 2. Altered source versions must be plainly marked as such, and must not be
              //   misrepresented as being the original software.
              // 3. This notice may not be removed or altered from any source distribution.

              var utils = require('../utils/common');

              var trees = require('./trees');

              var adler32 = require('./adler32');

              var crc32 = require('./crc32');

              var msg = require('./messages');
              /* Public constants ==========================================================*/

              /* ===========================================================================*/

              /* Allowed flush values; see deflate() and inflate() below for details */


              var Z_NO_FLUSH = 0;
              var Z_PARTIAL_FLUSH = 1; //var Z_SYNC_FLUSH    = 2;

              var Z_FULL_FLUSH = 3;
              var Z_FINISH = 4;
              var Z_BLOCK = 5; //var Z_TREES         = 6;

              /* Return codes for the compression/decompression functions. Negative values
               * are errors, positive values are used for special but normal events.
               */

              var Z_OK = 0;
              var Z_STREAM_END = 1; //var Z_NEED_DICT     = 2;
              //var Z_ERRNO         = -1;

              var Z_STREAM_ERROR = -2;
              var Z_DATA_ERROR = -3; //var Z_MEM_ERROR     = -4;

              var Z_BUF_ERROR = -5; //var Z_VERSION_ERROR = -6;

              /* compression levels */
              //var Z_NO_COMPRESSION      = 0;
              //var Z_BEST_SPEED          = 1;
              //var Z_BEST_COMPRESSION    = 9;

              var Z_DEFAULT_COMPRESSION = -1;
              var Z_FILTERED = 1;
              var Z_HUFFMAN_ONLY = 2;
              var Z_RLE = 3;
              var Z_FIXED = 4;
              var Z_DEFAULT_STRATEGY = 0;
              /* Possible values of the data_type field (though see inflate()) */
              //var Z_BINARY              = 0;
              //var Z_TEXT                = 1;
              //var Z_ASCII               = 1; // = Z_TEXT

              var Z_UNKNOWN = 2;
              /* The deflate compression method */

              var Z_DEFLATED = 8;
              /*============================================================================*/

              var MAX_MEM_LEVEL = 9;
              /* Maximum value for memLevel in deflateInit2 */

              var MAX_WBITS = 15;
              /* 32K LZ77 window */

              var DEF_MEM_LEVEL = 8;
              var LENGTH_CODES = 29;
              /* number of length codes, not counting the special END_BLOCK code */

              var LITERALS = 256;
              /* number of literal bytes 0..255 */

              var L_CODES = LITERALS + 1 + LENGTH_CODES;
              /* number of Literal or Length codes, including the END_BLOCK code */

              var D_CODES = 30;
              /* number of distance codes */

              var BL_CODES = 19;
              /* number of codes used to transfer the bit lengths */

              var HEAP_SIZE = 2 * L_CODES + 1;
              /* maximum heap size */

              var MAX_BITS = 15;
              /* All codes must not exceed MAX_BITS bits */

              var MIN_MATCH = 3;
              var MAX_MATCH = 258;
              var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
              var PRESET_DICT = 0x20;
              var INIT_STATE = 42;
              var EXTRA_STATE = 69;
              var NAME_STATE = 73;
              var COMMENT_STATE = 91;
              var HCRC_STATE = 103;
              var BUSY_STATE = 113;
              var FINISH_STATE = 666;
              var BS_NEED_MORE = 1;
              /* block not completed, need more input or more output */

              var BS_BLOCK_DONE = 2;
              /* block flush performed */

              var BS_FINISH_STARTED = 3;
              /* finish started, need only more output at next deflate */

              var BS_FINISH_DONE = 4;
              /* finish done, accept no more input or output */

              var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

              function err(strm, errorCode) {
                strm.msg = msg[errorCode];
                return errorCode;
              }

              function rank(f) {
                return (f << 1) - (f > 4 ? 9 : 0);
              }

              function zero(buf) {
                var len = buf.length;

                while (--len >= 0) {
                  buf[len] = 0;
                }
              }
              /* =========================================================================
               * Flush as much pending output as possible. All deflate() output goes
               * through this function so some applications may wish to modify it
               * to avoid allocating a large strm->output buffer and copying into it.
               * (See also read_buf()).
               */


              function flush_pending(strm) {
                var s = strm.state; //_tr_flush_bits(s);

                var len = s.pending;

                if (len > strm.avail_out) {
                  len = strm.avail_out;
                }

                if (len === 0) {
                  return;
                }

                utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
                strm.next_out += len;
                s.pending_out += len;
                strm.total_out += len;
                strm.avail_out -= len;
                s.pending -= len;

                if (s.pending === 0) {
                  s.pending_out = 0;
                }
              }

              function flush_block_only(s, last) {
                trees._tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);

                s.block_start = s.strstart;
                flush_pending(s.strm);
              }

              function put_byte(s, b) {
                s.pending_buf[s.pending++] = b;
              }
              /* =========================================================================
               * Put a short in the pending buffer. The 16-bit value is put in MSB order.
               * IN assertion: the stream state is correct and there is enough room in
               * pending_buf.
               */


              function putShortMSB(s, b) {
                //  put_byte(s, (Byte)(b >> 8));
                //  put_byte(s, (Byte)(b & 0xff));
                s.pending_buf[s.pending++] = b >>> 8 & 0xff;
                s.pending_buf[s.pending++] = b & 0xff;
              }
              /* ===========================================================================
               * Read a new buffer from the current input stream, update the adler32
               * and total number of bytes read.  All deflate() input goes through
               * this function so some applications may wish to modify it to avoid
               * allocating a large strm->input buffer and copying from it.
               * (See also flush_pending()).
               */


              function read_buf(strm, buf, start, size) {
                var len = strm.avail_in;

                if (len > size) {
                  len = size;
                }

                if (len === 0) {
                  return 0;
                }

                strm.avail_in -= len; // zmemcpy(buf, strm->next_in, len);

                utils.arraySet(buf, strm.input, strm.next_in, len, start);

                if (strm.state.wrap === 1) {
                  strm.adler = adler32(strm.adler, buf, len, start);
                } else if (strm.state.wrap === 2) {
                  strm.adler = crc32(strm.adler, buf, len, start);
                }

                strm.next_in += len;
                strm.total_in += len;
                return len;
              }
              /* ===========================================================================
               * Set match_start to the longest match starting at the given string and
               * return its length. Matches shorter or equal to prev_length are discarded,
               * in which case the result is equal to prev_length and match_start is
               * garbage.
               * IN assertions: cur_match is the head of the hash chain for the current
               *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
               * OUT assertion: the match length is not greater than s->lookahead.
               */


              function longest_match(s, cur_match) {
                var chain_length = s.max_chain_length;
                /* max hash chain length */

                var scan = s.strstart;
                /* current string */

                var match;
                /* matched string */

                var len;
                /* length of current match */

                var best_len = s.prev_length;
                /* best match length so far */

                var nice_match = s.nice_match;
                /* stop if match long enough */

                var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0
                /*NIL*/
                ;
                var _win = s.window; // shortcut

                var wmask = s.w_mask;
                var prev = s.prev;
                /* Stop when cur_match becomes <= limit. To simplify the code,
                 * we prevent matches with the string of window index 0.
                 */

                var strend = s.strstart + MAX_MATCH;
                var scan_end1 = _win[scan + best_len - 1];
                var scan_end = _win[scan + best_len];
                /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
                 * It is easy to get rid of this optimization if necessary.
                 */
                // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

                /* Do not waste too much time if we already have a good match: */

                if (s.prev_length >= s.good_match) {
                  chain_length >>= 2;
                }
                /* Do not look for matches beyond the end of the input. This is necessary
                 * to make deflate deterministic.
                 */


                if (nice_match > s.lookahead) {
                  nice_match = s.lookahead;
                } // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");


                do {
                  // Assert(cur_match < s->strstart, "no future");
                  match = cur_match;
                  /* Skip to next match if the match length cannot increase
                   * or if the match length is less than 2.  Note that the checks below
                   * for insufficient lookahead only occur occasionally for performance
                   * reasons.  Therefore uninitialized memory will be accessed, and
                   * conditional jumps will be made that depend on those values.
                   * However the length of the match is limited to the lookahead, so
                   * the output of deflate is not affected by the uninitialized values.
                   */

                  if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
                    continue;
                  }
                  /* The check at best_len-1 can be removed because it will be made
                   * again later. (This heuristic is not always a win.)
                   * It is not necessary to compare scan[2] and match[2] since they
                   * are always equal when the other bytes match, given that
                   * the hash keys are equal and that HASH_BITS >= 8.
                   */


                  scan += 2;
                  match++; // Assert(*scan == *match, "match[2]?");

                  /* We check for insufficient lookahead only every 8th comparison;
                   * the 256th check will be made at strstart+258.
                   */

                  do {
                    /*jshint noempty:false*/
                  } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend); // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");


                  len = MAX_MATCH - (strend - scan);
                  scan = strend - MAX_MATCH;

                  if (len > best_len) {
                    s.match_start = cur_match;
                    best_len = len;

                    if (len >= nice_match) {
                      break;
                    }

                    scan_end1 = _win[scan + best_len - 1];
                    scan_end = _win[scan + best_len];
                  }
                } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

                if (best_len <= s.lookahead) {
                  return best_len;
                }

                return s.lookahead;
              }
              /* ===========================================================================
               * Fill the window when the lookahead becomes insufficient.
               * Updates strstart and lookahead.
               *
               * IN assertion: lookahead < MIN_LOOKAHEAD
               * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
               *    At least one byte has been read, or avail_in == 0; reads are
               *    performed for at least two bytes (required for the zip translate_eol
               *    option -- not supported here).
               */


              function fill_window(s) {
                var _w_size = s.w_size;
                var p, n, m, more, str; //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

                do {
                  more = s.window_size - s.lookahead - s.strstart; // JS ints have 32 bit, block below not needed

                  /* Deal with !@#$% 64K limit: */
                  //if (sizeof(int) <= 2) {
                  //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
                  //        more = wsize;
                  //
                  //  } else if (more == (unsigned)(-1)) {
                  //        /* Very unlikely, but possible on 16 bit machine if
                  //         * strstart == 0 && lookahead == 1 (input done a byte at time)
                  //         */
                  //        more--;
                  //    }
                  //}

                  /* If the window is almost full and there is insufficient lookahead,
                   * move the upper half to the lower one to make room in the upper half.
                   */

                  if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
                    utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
                    s.match_start -= _w_size;
                    s.strstart -= _w_size;
                    /* we now have strstart >= MAX_DIST */

                    s.block_start -= _w_size;
                    /* Slide the hash table (could be avoided with 32 bit values
                     at the expense of memory usage). We slide even when level == 0
                     to keep the hash table consistent if we switch back to level > 0
                     later. (Using level 0 permanently is not an optimal usage of
                     zlib, so we don't care about this pathological case.)
                     */

                    n = s.hash_size;
                    p = n;

                    do {
                      m = s.head[--p];
                      s.head[p] = m >= _w_size ? m - _w_size : 0;
                    } while (--n);

                    n = _w_size;
                    p = n;

                    do {
                      m = s.prev[--p];
                      s.prev[p] = m >= _w_size ? m - _w_size : 0;
                      /* If n is not on any hash chain, prev[n] is garbage but
                       * its value will never be used.
                       */
                    } while (--n);

                    more += _w_size;
                  }

                  if (s.strm.avail_in === 0) {
                    break;
                  }
                  /* If there was no sliding:
                   *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
                   *    more == window_size - lookahead - strstart
                   * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
                   * => more >= window_size - 2*WSIZE + 2
                   * In the BIG_MEM or MMAP case (not yet supported),
                   *   window_size == input_size + MIN_LOOKAHEAD  &&
                   *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
                   * Otherwise, window_size == 2*WSIZE so more >= 2.
                   * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
                   */
                  //Assert(more >= 2, "more < 2");


                  n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
                  s.lookahead += n;
                  /* Initialize the hash value now that we have some input: */

                  if (s.lookahead + s.insert >= MIN_MATCH) {
                    str = s.strstart - s.insert;
                    s.ins_h = s.window[str];
                    /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */

                    s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask; //#if MIN_MATCH != 3
                    //        Call update_hash() MIN_MATCH-3 more times
                    //#endif

                    while (s.insert) {
                      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
                      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
                      s.prev[str & s.w_mask] = s.head[s.ins_h];
                      s.head[s.ins_h] = str;
                      str++;
                      s.insert--;

                      if (s.lookahead + s.insert < MIN_MATCH) {
                        break;
                      }
                    }
                  }
                  /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
                   * but this is not important since only literal bytes will be emitted.
                   */

                } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
                /* If the WIN_INIT bytes after the end of the current data have never been
                 * written, then zero those bytes in order to avoid memory check reports of
                 * the use of uninitialized (or uninitialised as Julian writes) bytes by
                 * the longest match routines.  Update the high water mark for the next
                 * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
                 * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
                 */
                //  if (s.high_water < s.window_size) {
                //    var curr = s.strstart + s.lookahead;
                //    var init = 0;
                //
                //    if (s.high_water < curr) {
                //      /* Previous high water mark below current data -- zero WIN_INIT
                //       * bytes or up to end of window, whichever is less.
                //       */
                //      init = s.window_size - curr;
                //      if (init > WIN_INIT)
                //        init = WIN_INIT;
                //      zmemzero(s->window + curr, (unsigned)init);
                //      s->high_water = curr + init;
                //    }
                //    else if (s->high_water < (ulg)curr + WIN_INIT) {
                //      /* High water mark at or above current data, but below current data
                //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
                //       * to end of window, whichever is less.
                //       */
                //      init = (ulg)curr + WIN_INIT - s->high_water;
                //      if (init > s->window_size - s->high_water)
                //        init = s->window_size - s->high_water;
                //      zmemzero(s->window + s->high_water, (unsigned)init);
                //      s->high_water += init;
                //    }
                //  }
                //
                //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
                //    "not enough room for search");

              }
              /* ===========================================================================
               * Copy without compression as much as possible from the input stream, return
               * the current block state.
               * This function does not insert new strings in the dictionary since
               * uncompressible data is probably not useful. This function is used
               * only for the level=0 compression option.
               * NOTE: this function should be optimized to avoid extra copying from
               * window to pending_buf.
               */


              function deflate_stored(s, flush) {
                /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
                 * to pending_buf_size, and each stored block has a 5 byte header:
                 */
                var max_block_size = 0xffff;

                if (max_block_size > s.pending_buf_size - 5) {
                  max_block_size = s.pending_buf_size - 5;
                }
                /* Copy as much as possible from input to output: */


                for (;;) {
                  /* Fill the window as much as possible: */
                  if (s.lookahead <= 1) {
                    //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
                    //  s->block_start >= (long)s->w_size, "slide too late");
                    //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
                    //        s.block_start >= s.w_size)) {
                    //        throw  new Error("slide too late");
                    //      }
                    fill_window(s);

                    if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
                      return BS_NEED_MORE;
                    }

                    if (s.lookahead === 0) {
                      break;
                    }
                    /* flush the current block */

                  } //Assert(s->block_start >= 0L, "block gone");
                  //    if (s.block_start < 0) throw new Error("block gone");


                  s.strstart += s.lookahead;
                  s.lookahead = 0;
                  /* Emit a stored block if pending_buf will be full: */

                  var max_start = s.block_start + max_block_size;

                  if (s.strstart === 0 || s.strstart >= max_start) {
                    /* strstart == 0 is possible when wraparound on 16-bit machine */
                    s.lookahead = s.strstart - max_start;
                    s.strstart = max_start;
                    /*** FLUSH_BLOCK(s, 0); ***/

                    flush_block_only(s, false);

                    if (s.strm.avail_out === 0) {
                      return BS_NEED_MORE;
                    }
                    /***/

                  }
                  /* Flush if we may have to slide, otherwise block_start may become
                   * negative and the data will be gone:
                   */


                  if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {
                    /*** FLUSH_BLOCK(s, 0); ***/
                    flush_block_only(s, false);

                    if (s.strm.avail_out === 0) {
                      return BS_NEED_MORE;
                    }
                    /***/

                  }
                }

                s.insert = 0;

                if (flush === Z_FINISH) {
                  /*** FLUSH_BLOCK(s, 1); ***/
                  flush_block_only(s, true);

                  if (s.strm.avail_out === 0) {
                    return BS_FINISH_STARTED;
                  }
                  /***/


                  return BS_FINISH_DONE;
                }

                if (s.strstart > s.block_start) {
                  /*** FLUSH_BLOCK(s, 0); ***/
                  flush_block_only(s, false);

                  if (s.strm.avail_out === 0) {
                    return BS_NEED_MORE;
                  }
                  /***/

                }

                return BS_NEED_MORE;
              }
              /* ===========================================================================
               * Compress as much as possible from the input stream, return the current
               * block state.
               * This function does not perform lazy evaluation of matches and inserts
               * new strings in the dictionary only for unmatched strings or for short
               * matches. It is used only for the fast compression options.
               */


              function deflate_fast(s, flush) {
                var hash_head;
                /* head of the hash chain */

                var bflush;
                /* set if current block must be flushed */

                for (;;) {
                  /* Make sure that we always have enough lookahead, except
                   * at the end of the input file. We need MAX_MATCH bytes
                   * for the next match, plus MIN_MATCH bytes to insert the
                   * string following the next match.
                   */
                  if (s.lookahead < MIN_LOOKAHEAD) {
                    fill_window(s);

                    if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
                      return BS_NEED_MORE;
                    }

                    if (s.lookahead === 0) {
                      break;
                      /* flush the current block */
                    }
                  }
                  /* Insert the string window[strstart .. strstart+2] in the
                   * dictionary, and set hash_head to the head of the hash chain:
                   */


                  hash_head = 0
                  /*NIL*/
                  ;

                  if (s.lookahead >= MIN_MATCH) {
                    /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                    s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                    hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                    s.head[s.ins_h] = s.strstart;
                    /***/
                  }
                  /* Find the longest match, discarding those <= prev_length.
                   * At this point we have always match_length < MIN_MATCH
                   */


                  if (hash_head !== 0
                  /*NIL*/
                  && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
                    /* To simplify the code, we prevent matches with the string
                     * of window index 0 (in particular we have to avoid a match
                     * of the string with itself at the start of the input file).
                     */
                    s.match_length = longest_match(s, hash_head);
                    /* longest_match() sets match_start */
                  }

                  if (s.match_length >= MIN_MATCH) {
                    // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

                    /*** _tr_tally_dist(s, s.strstart - s.match_start,
                                   s.match_length - MIN_MATCH, bflush); ***/
                    bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
                    s.lookahead -= s.match_length;
                    /* Insert new strings in the hash table only if the match length
                     * is not too large. This saves time but degrades compression.
                     */

                    if (s.match_length <= s.max_lazy_match
                    /*max_insert_length*/
                    && s.lookahead >= MIN_MATCH) {
                      s.match_length--;
                      /* string at strstart already in table */

                      do {
                        s.strstart++;
                        /*** INSERT_STRING(s, s.strstart, hash_head); ***/

                        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                        s.head[s.ins_h] = s.strstart;
                        /***/

                        /* strstart never exceeds WSIZE-MAX_MATCH, so there are
                         * always MIN_MATCH bytes ahead.
                         */
                      } while (--s.match_length !== 0);

                      s.strstart++;
                    } else {
                      s.strstart += s.match_length;
                      s.match_length = 0;
                      s.ins_h = s.window[s.strstart];
                      /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */

                      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask; //#if MIN_MATCH != 3
                      //                Call UPDATE_HASH() MIN_MATCH-3 more times
                      //#endif

                      /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
                       * matter since it will be recomputed at next deflate call.
                       */
                    }
                  } else {
                    /* No match, output a literal byte */
                    //Tracevv((stderr,"%c", s.window[s.strstart]));

                    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
                    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
                    s.lookahead--;
                    s.strstart++;
                  }

                  if (bflush) {
                    /*** FLUSH_BLOCK(s, 0); ***/
                    flush_block_only(s, false);

                    if (s.strm.avail_out === 0) {
                      return BS_NEED_MORE;
                    }
                    /***/

                  }
                }

                s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;

                if (flush === Z_FINISH) {
                  /*** FLUSH_BLOCK(s, 1); ***/
                  flush_block_only(s, true);

                  if (s.strm.avail_out === 0) {
                    return BS_FINISH_STARTED;
                  }
                  /***/


                  return BS_FINISH_DONE;
                }

                if (s.last_lit) {
                  /*** FLUSH_BLOCK(s, 0); ***/
                  flush_block_only(s, false);

                  if (s.strm.avail_out === 0) {
                    return BS_NEED_MORE;
                  }
                  /***/

                }

                return BS_BLOCK_DONE;
              }
              /* ===========================================================================
               * Same as above, but achieves better compression. We use a lazy
               * evaluation for matches: a match is finally adopted only if there is
               * no better match at the next window position.
               */


              function deflate_slow(s, flush) {
                var hash_head;
                /* head of hash chain */

                var bflush;
                /* set if current block must be flushed */

                var max_insert;
                /* Process the input block. */

                for (;;) {
                  /* Make sure that we always have enough lookahead, except
                   * at the end of the input file. We need MAX_MATCH bytes
                   * for the next match, plus MIN_MATCH bytes to insert the
                   * string following the next match.
                   */
                  if (s.lookahead < MIN_LOOKAHEAD) {
                    fill_window(s);

                    if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
                      return BS_NEED_MORE;
                    }

                    if (s.lookahead === 0) {
                      break;
                    }
                    /* flush the current block */

                  }
                  /* Insert the string window[strstart .. strstart+2] in the
                   * dictionary, and set hash_head to the head of the hash chain:
                   */


                  hash_head = 0
                  /*NIL*/
                  ;

                  if (s.lookahead >= MIN_MATCH) {
                    /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                    s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                    hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                    s.head[s.ins_h] = s.strstart;
                    /***/
                  }
                  /* Find the longest match, discarding those <= prev_length.
                   */


                  s.prev_length = s.match_length;
                  s.prev_match = s.match_start;
                  s.match_length = MIN_MATCH - 1;

                  if (hash_head !== 0
                  /*NIL*/
                  && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD
                  /*MAX_DIST(s)*/
                  ) {
                      /* To simplify the code, we prevent matches with the string
                       * of window index 0 (in particular we have to avoid a match
                       * of the string with itself at the start of the input file).
                       */
                      s.match_length = longest_match(s, hash_head);
                      /* longest_match() sets match_start */

                      if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096
                      /*TOO_FAR*/
                      )) {
                        /* If prev_match is also MIN_MATCH, match_start is garbage
                         * but we will ignore the current match anyway.
                         */
                        s.match_length = MIN_MATCH - 1;
                      }
                    }
                  /* If there was a match at the previous step and the current
                   * match is not better, output the previous match:
                   */


                  if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
                    max_insert = s.strstart + s.lookahead - MIN_MATCH;
                    /* Do not insert strings in hash table beyond this. */
                    //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

                    /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                                   s.prev_length - MIN_MATCH, bflush);***/

                    bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
                    /* Insert in hash table all strings up to the end of the match.
                     * strstart-1 and strstart are already inserted. If there is not
                     * enough lookahead, the last two strings are not inserted in
                     * the hash table.
                     */

                    s.lookahead -= s.prev_length - 1;
                    s.prev_length -= 2;

                    do {
                      if (++s.strstart <= max_insert) {
                        /*** INSERT_STRING(s, s.strstart, hash_head); ***/
                        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                        hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                        s.head[s.ins_h] = s.strstart;
                        /***/
                      }
                    } while (--s.prev_length !== 0);

                    s.match_available = 0;
                    s.match_length = MIN_MATCH - 1;
                    s.strstart++;

                    if (bflush) {
                      /*** FLUSH_BLOCK(s, 0); ***/
                      flush_block_only(s, false);

                      if (s.strm.avail_out === 0) {
                        return BS_NEED_MORE;
                      }
                      /***/

                    }
                  } else if (s.match_available) {
                    /* If there was no match at the previous position, output a
                     * single literal. If there was a match but the current match
                     * is longer, truncate the previous match to a single literal.
                     */
                    //Tracevv((stderr,"%c", s->window[s->strstart-1]));

                    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
                    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

                    if (bflush) {
                      /*** FLUSH_BLOCK_ONLY(s, 0) ***/
                      flush_block_only(s, false);
                      /***/
                    }

                    s.strstart++;
                    s.lookahead--;

                    if (s.strm.avail_out === 0) {
                      return BS_NEED_MORE;
                    }
                  } else {
                    /* There is no previous match to compare with, wait for
                     * the next step to decide.
                     */
                    s.match_available = 1;
                    s.strstart++;
                    s.lookahead--;
                  }
                } //Assert (flush != Z_NO_FLUSH, "no flush?");


                if (s.match_available) {
                  //Tracevv((stderr,"%c", s->window[s->strstart-1]));

                  /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
                  bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
                  s.match_available = 0;
                }

                s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;

                if (flush === Z_FINISH) {
                  /*** FLUSH_BLOCK(s, 1); ***/
                  flush_block_only(s, true);

                  if (s.strm.avail_out === 0) {
                    return BS_FINISH_STARTED;
                  }
                  /***/


                  return BS_FINISH_DONE;
                }

                if (s.last_lit) {
                  /*** FLUSH_BLOCK(s, 0); ***/
                  flush_block_only(s, false);

                  if (s.strm.avail_out === 0) {
                    return BS_NEED_MORE;
                  }
                  /***/

                }

                return BS_BLOCK_DONE;
              }
              /* ===========================================================================
               * For Z_RLE, simply look for runs of bytes, generate matches only of distance
               * one.  Do not maintain a hash table.  (It will be regenerated if this run of
               * deflate switches away from Z_RLE.)
               */


              function deflate_rle(s, flush) {
                var bflush;
                /* set if current block must be flushed */

                var prev;
                /* byte at distance one to match */

                var scan, strend;
                /* scan goes up to strend for length of run */

                var _win = s.window;

                for (;;) {
                  /* Make sure that we always have enough lookahead, except
                   * at the end of the input file. We need MAX_MATCH bytes
                   * for the longest run, plus one for the unrolled loop.
                   */
                  if (s.lookahead <= MAX_MATCH) {
                    fill_window(s);

                    if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
                      return BS_NEED_MORE;
                    }

                    if (s.lookahead === 0) {
                      break;
                    }
                    /* flush the current block */

                  }
                  /* See how many times the previous byte repeats */


                  s.match_length = 0;

                  if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
                    scan = s.strstart - 1;
                    prev = _win[scan];

                    if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
                      strend = s.strstart + MAX_MATCH;

                      do {
                        /*jshint noempty:false*/
                      } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);

                      s.match_length = MAX_MATCH - (strend - scan);

                      if (s.match_length > s.lookahead) {
                        s.match_length = s.lookahead;
                      }
                    } //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");

                  }
                  /* Emit match if have run of MIN_MATCH or longer, else emit literal */


                  if (s.match_length >= MIN_MATCH) {
                    //check_match(s, s.strstart, s.strstart - 1, s.match_length);

                    /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
                    bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);
                    s.lookahead -= s.match_length;
                    s.strstart += s.match_length;
                    s.match_length = 0;
                  } else {
                    /* No match, output a literal byte */
                    //Tracevv((stderr,"%c", s->window[s->strstart]));

                    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
                    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
                    s.lookahead--;
                    s.strstart++;
                  }

                  if (bflush) {
                    /*** FLUSH_BLOCK(s, 0); ***/
                    flush_block_only(s, false);

                    if (s.strm.avail_out === 0) {
                      return BS_NEED_MORE;
                    }
                    /***/

                  }
                }

                s.insert = 0;

                if (flush === Z_FINISH) {
                  /*** FLUSH_BLOCK(s, 1); ***/
                  flush_block_only(s, true);

                  if (s.strm.avail_out === 0) {
                    return BS_FINISH_STARTED;
                  }
                  /***/


                  return BS_FINISH_DONE;
                }

                if (s.last_lit) {
                  /*** FLUSH_BLOCK(s, 0); ***/
                  flush_block_only(s, false);

                  if (s.strm.avail_out === 0) {
                    return BS_NEED_MORE;
                  }
                  /***/

                }

                return BS_BLOCK_DONE;
              }
              /* ===========================================================================
               * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
               * (It will be regenerated if this run of deflate switches away from Huffman.)
               */


              function deflate_huff(s, flush) {
                var bflush;
                /* set if current block must be flushed */

                for (;;) {
                  /* Make sure that we have a literal to write. */
                  if (s.lookahead === 0) {
                    fill_window(s);

                    if (s.lookahead === 0) {
                      if (flush === Z_NO_FLUSH) {
                        return BS_NEED_MORE;
                      }

                      break;
                      /* flush the current block */
                    }
                  }
                  /* Output a literal byte */


                  s.match_length = 0; //Tracevv((stderr,"%c", s->window[s->strstart]));

                  /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/

                  bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
                  s.lookahead--;
                  s.strstart++;

                  if (bflush) {
                    /*** FLUSH_BLOCK(s, 0); ***/
                    flush_block_only(s, false);

                    if (s.strm.avail_out === 0) {
                      return BS_NEED_MORE;
                    }
                    /***/

                  }
                }

                s.insert = 0;

                if (flush === Z_FINISH) {
                  /*** FLUSH_BLOCK(s, 1); ***/
                  flush_block_only(s, true);

                  if (s.strm.avail_out === 0) {
                    return BS_FINISH_STARTED;
                  }
                  /***/


                  return BS_FINISH_DONE;
                }

                if (s.last_lit) {
                  /*** FLUSH_BLOCK(s, 0); ***/
                  flush_block_only(s, false);

                  if (s.strm.avail_out === 0) {
                    return BS_NEED_MORE;
                  }
                  /***/

                }

                return BS_BLOCK_DONE;
              }
              /* Values for max_lazy_match, good_match and max_chain_length, depending on
               * the desired pack level (0..9). The values given below have been tuned to
               * exclude worst case performance for pathological files. Better values may be
               * found for specific files.
               */


              function Config(good_length, max_lazy, nice_length, max_chain, func) {
                this.good_length = good_length;
                this.max_lazy = max_lazy;
                this.nice_length = nice_length;
                this.max_chain = max_chain;
                this.func = func;
              }

              var configuration_table;
              configuration_table = [
              /*      good lazy nice chain */
              new Config(0, 0, 0, 0, deflate_stored),
              /* 0 store only */
              new Config(4, 4, 8, 4, deflate_fast),
              /* 1 max speed, no lazy matches */
              new Config(4, 5, 16, 8, deflate_fast),
              /* 2 */
              new Config(4, 6, 32, 32, deflate_fast),
              /* 3 */
              new Config(4, 4, 16, 16, deflate_slow),
              /* 4 lazy matches */
              new Config(8, 16, 32, 32, deflate_slow),
              /* 5 */
              new Config(8, 16, 128, 128, deflate_slow),
              /* 6 */
              new Config(8, 32, 128, 256, deflate_slow),
              /* 7 */
              new Config(32, 128, 258, 1024, deflate_slow),
              /* 8 */
              new Config(32, 258, 258, 4096, deflate_slow)
              /* 9 max compression */
              ];
              /* ===========================================================================
               * Initialize the "longest match" routines for a new zlib stream
               */

              function lm_init(s) {
                s.window_size = 2 * s.w_size;
                /*** CLEAR_HASH(s); ***/

                zero(s.head); // Fill with NIL (= 0);

                /* Set the default configuration parameters:
                 */

                s.max_lazy_match = configuration_table[s.level].max_lazy;
                s.good_match = configuration_table[s.level].good_length;
                s.nice_match = configuration_table[s.level].nice_length;
                s.max_chain_length = configuration_table[s.level].max_chain;
                s.strstart = 0;
                s.block_start = 0;
                s.lookahead = 0;
                s.insert = 0;
                s.match_length = s.prev_length = MIN_MATCH - 1;
                s.match_available = 0;
                s.ins_h = 0;
              }

              function DeflateState() {
                this.strm = null;
                /* pointer back to this zlib stream */

                this.status = 0;
                /* as the name implies */

                this.pending_buf = null;
                /* output still pending */

                this.pending_buf_size = 0;
                /* size of pending_buf */

                this.pending_out = 0;
                /* next pending byte to output to the stream */

                this.pending = 0;
                /* nb of bytes in the pending buffer */

                this.wrap = 0;
                /* bit 0 true for zlib, bit 1 true for gzip */

                this.gzhead = null;
                /* gzip header information to write */

                this.gzindex = 0;
                /* where in extra, name, or comment */

                this.method = Z_DEFLATED;
                /* can only be DEFLATED */

                this.last_flush = -1;
                /* value of flush param for previous deflate call */

                this.w_size = 0;
                /* LZ77 window size (32K by default) */

                this.w_bits = 0;
                /* log2(w_size)  (8..16) */

                this.w_mask = 0;
                /* w_size - 1 */

                this.window = null;
                /* Sliding window. Input bytes are read into the second half of the window,
                 * and move to the first half later to keep a dictionary of at least wSize
                 * bytes. With this organization, matches are limited to a distance of
                 * wSize-MAX_MATCH bytes, but this ensures that IO is always
                 * performed with a length multiple of the block size.
                 */

                this.window_size = 0;
                /* Actual size of window: 2*wSize, except when the user input buffer
                 * is directly used as sliding window.
                 */

                this.prev = null;
                /* Link to older string with same hash index. To limit the size of this
                 * array to 64K, this link is maintained only for the last 32K strings.
                 * An index in this array is thus a window index modulo 32K.
                 */

                this.head = null;
                /* Heads of the hash chains or NIL. */

                this.ins_h = 0;
                /* hash index of string to be inserted */

                this.hash_size = 0;
                /* number of elements in hash table */

                this.hash_bits = 0;
                /* log2(hash_size) */

                this.hash_mask = 0;
                /* hash_size-1 */

                this.hash_shift = 0;
                /* Number of bits by which ins_h must be shifted at each input
                 * step. It must be such that after MIN_MATCH steps, the oldest
                 * byte no longer takes part in the hash key, that is:
                 *   hash_shift * MIN_MATCH >= hash_bits
                 */

                this.block_start = 0;
                /* Window position at the beginning of the current output block. Gets
                 * negative when the window is moved backwards.
                 */

                this.match_length = 0;
                /* length of best match */

                this.prev_match = 0;
                /* previous match */

                this.match_available = 0;
                /* set if previous match exists */

                this.strstart = 0;
                /* start of string to insert */

                this.match_start = 0;
                /* start of matching string */

                this.lookahead = 0;
                /* number of valid bytes ahead in window */

                this.prev_length = 0;
                /* Length of the best match at previous step. Matches not greater than this
                 * are discarded. This is used in the lazy match evaluation.
                 */

                this.max_chain_length = 0;
                /* To speed up deflation, hash chains are never searched beyond this
                 * length.  A higher limit improves compression ratio but degrades the
                 * speed.
                 */

                this.max_lazy_match = 0;
                /* Attempt to find a better match only when the current match is strictly
                 * smaller than this value. This mechanism is used only for compression
                 * levels >= 4.
                 */
                // That's alias to max_lazy_match, don't use directly
                //this.max_insert_length = 0;

                /* Insert new strings in the hash table only if the match length is not
                 * greater than this length. This saves time but degrades compression.
                 * max_insert_length is used only for compression levels <= 3.
                 */

                this.level = 0;
                /* compression level (1..9) */

                this.strategy = 0;
                /* favor or force Huffman coding*/

                this.good_match = 0;
                /* Use a faster search when the previous match is longer than this */

                this.nice_match = 0;
                /* Stop searching when current match exceeds this */

                /* used by trees.c: */

                /* Didn't use ct_data typedef below to suppress compiler warning */
                // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
                // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
                // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */
                // Use flat array of DOUBLE size, with interleaved fata,
                // because JS does not support effective

                this.dyn_ltree = new utils.Buf16(HEAP_SIZE * 2);
                this.dyn_dtree = new utils.Buf16((2 * D_CODES + 1) * 2);
                this.bl_tree = new utils.Buf16((2 * BL_CODES + 1) * 2);
                zero(this.dyn_ltree);
                zero(this.dyn_dtree);
                zero(this.bl_tree);
                this.l_desc = null;
                /* desc. for literal tree */

                this.d_desc = null;
                /* desc. for distance tree */

                this.bl_desc = null;
                /* desc. for bit length tree */
                //ush bl_count[MAX_BITS+1];

                this.bl_count = new utils.Buf16(MAX_BITS + 1);
                /* number of codes at each bit length for an optimal tree */
                //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */

                this.heap = new utils.Buf16(2 * L_CODES + 1);
                /* heap used to build the Huffman trees */

                zero(this.heap);
                this.heap_len = 0;
                /* number of elements in the heap */

                this.heap_max = 0;
                /* element of largest frequency */

                /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
                 * The same heap array is used to build all trees.
                 */

                this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];

                zero(this.depth);
                /* Depth of each subtree used as tie breaker for trees of equal frequency
                 */

                this.l_buf = 0;
                /* buffer index for literals or lengths */

                this.lit_bufsize = 0;
                /* Size of match buffer for literals/lengths.  There are 4 reasons for
                 * limiting lit_bufsize to 64K:
                 *   - frequencies can be kept in 16 bit counters
                 *   - if compression is not successful for the first block, all input
                 *     data is still in the window so we can still emit a stored block even
                 *     when input comes from standard input.  (This can also be done for
                 *     all blocks if lit_bufsize is not greater than 32K.)
                 *   - if compression is not successful for a file smaller than 64K, we can
                 *     even emit a stored file instead of a stored block (saving 5 bytes).
                 *     This is applicable only for zip (not gzip or zlib).
                 *   - creating new Huffman trees less frequently may not provide fast
                 *     adaptation to changes in the input data statistics. (Take for
                 *     example a binary file with poorly compressible code followed by
                 *     a highly compressible string table.) Smaller buffer sizes give
                 *     fast adaptation but have of course the overhead of transmitting
                 *     trees more frequently.
                 *   - I can't count above 4
                 */

                this.last_lit = 0;
                /* running index in l_buf */

                this.d_buf = 0;
                /* Buffer index for distances. To simplify the code, d_buf and l_buf have
                 * the same number of elements. To use different lengths, an extra flag
                 * array would be necessary.
                 */

                this.opt_len = 0;
                /* bit length of current block with optimal trees */

                this.static_len = 0;
                /* bit length of current block with static trees */

                this.matches = 0;
                /* number of string matches in current block */

                this.insert = 0;
                /* bytes at end of window left to insert */

                this.bi_buf = 0;
                /* Output buffer. bits are inserted starting at the bottom (least
                 * significant bits).
                 */

                this.bi_valid = 0;
                /* Number of valid bits in bi_buf.  All bits above the last valid bit
                 * are always zero.
                 */
                // Used for window memory init. We safely ignore it for JS. That makes
                // sense only for pointers and memory check tools.
                //this.high_water = 0;

                /* High water mark offset in window for initialized bytes -- bytes above
                 * this are set to zero in order to avoid memory check warnings when
                 * longest match routines access bytes past the input.  This is then
                 * updated to the new high water mark.
                 */
              }

              function deflateResetKeep(strm) {
                var s;

                if (!strm || !strm.state) {
                  return err(strm, Z_STREAM_ERROR);
                }

                strm.total_in = strm.total_out = 0;
                strm.data_type = Z_UNKNOWN;
                s = strm.state;
                s.pending = 0;
                s.pending_out = 0;

                if (s.wrap < 0) {
                  s.wrap = -s.wrap;
                  /* was made negative by deflate(..., Z_FINISH); */
                }

                s.status = s.wrap ? INIT_STATE : BUSY_STATE;
                strm.adler = s.wrap === 2 ? 0 // crc32(0, Z_NULL, 0)
                : 1; // adler32(0, Z_NULL, 0)

                s.last_flush = Z_NO_FLUSH;

                trees._tr_init(s);

                return Z_OK;
              }

              function deflateReset(strm) {
                var ret = deflateResetKeep(strm);

                if (ret === Z_OK) {
                  lm_init(strm.state);
                }

                return ret;
              }

              function deflateSetHeader(strm, head) {
                if (!strm || !strm.state) {
                  return Z_STREAM_ERROR;
                }

                if (strm.state.wrap !== 2) {
                  return Z_STREAM_ERROR;
                }

                strm.state.gzhead = head;
                return Z_OK;
              }

              function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
                if (!strm) {
                  // === Z_NULL
                  return Z_STREAM_ERROR;
                }

                var wrap = 1;

                if (level === Z_DEFAULT_COMPRESSION) {
                  level = 6;
                }

                if (windowBits < 0) {
                  /* suppress zlib wrapper */
                  wrap = 0;
                  windowBits = -windowBits;
                } else if (windowBits > 15) {
                  wrap = 2;
                  /* write gzip wrapper instead */

                  windowBits -= 16;
                }

                if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {
                  return err(strm, Z_STREAM_ERROR);
                }

                if (windowBits === 8) {
                  windowBits = 9;
                }
                /* until 256-byte window bug fixed */


                var s = new DeflateState();
                strm.state = s;
                s.strm = strm;
                s.wrap = wrap;
                s.gzhead = null;
                s.w_bits = windowBits;
                s.w_size = 1 << s.w_bits;
                s.w_mask = s.w_size - 1;
                s.hash_bits = memLevel + 7;
                s.hash_size = 1 << s.hash_bits;
                s.hash_mask = s.hash_size - 1;
                s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
                s.window = new utils.Buf8(s.w_size * 2);
                s.head = new utils.Buf16(s.hash_size);
                s.prev = new utils.Buf16(s.w_size); // Don't need mem init magic for JS.
                //s.high_water = 0;  /* nothing written to s->window yet */

                s.lit_bufsize = 1 << memLevel + 6;
                /* 16K elements by default */

                s.pending_buf_size = s.lit_bufsize * 4; //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
                //s->pending_buf = (uchf *) overlay;

                s.pending_buf = new utils.Buf8(s.pending_buf_size); // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
                //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);

                s.d_buf = 1 * s.lit_bufsize; //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;

                s.l_buf = (1 + 2) * s.lit_bufsize;
                s.level = level;
                s.strategy = strategy;
                s.method = method;
                return deflateReset(strm);
              }

              function deflateInit(strm, level) {
                return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
              }

              function deflate(strm, flush) {
                var old_flush, s;
                var beg, val; // for gzip header write only

                if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {
                  return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
                }

                s = strm.state;

                if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH) {
                  return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);
                }

                s.strm = strm;
                /* just in case */

                old_flush = s.last_flush;
                s.last_flush = flush;
                /* Write the header */

                if (s.status === INIT_STATE) {
                  if (s.wrap === 2) {
                    // GZIP header
                    strm.adler = 0; //crc32(0L, Z_NULL, 0);

                    put_byte(s, 31);
                    put_byte(s, 139);
                    put_byte(s, 8);

                    if (!s.gzhead) {
                      // s->gzhead == Z_NULL
                      put_byte(s, 0);
                      put_byte(s, 0);
                      put_byte(s, 0);
                      put_byte(s, 0);
                      put_byte(s, 0);
                      put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
                      put_byte(s, OS_CODE);
                      s.status = BUSY_STATE;
                    } else {
                      put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));
                      put_byte(s, s.gzhead.time & 0xff);
                      put_byte(s, s.gzhead.time >> 8 & 0xff);
                      put_byte(s, s.gzhead.time >> 16 & 0xff);
                      put_byte(s, s.gzhead.time >> 24 & 0xff);
                      put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
                      put_byte(s, s.gzhead.os & 0xff);

                      if (s.gzhead.extra && s.gzhead.extra.length) {
                        put_byte(s, s.gzhead.extra.length & 0xff);
                        put_byte(s, s.gzhead.extra.length >> 8 & 0xff);
                      }

                      if (s.gzhead.hcrc) {
                        strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
                      }

                      s.gzindex = 0;
                      s.status = EXTRA_STATE;
                    }
                  } else // DEFLATE header
                    {
                      var header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;
                      var level_flags = -1;

                      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
                        level_flags = 0;
                      } else if (s.level < 6) {
                        level_flags = 1;
                      } else if (s.level === 6) {
                        level_flags = 2;
                      } else {
                        level_flags = 3;
                      }

                      header |= level_flags << 6;

                      if (s.strstart !== 0) {
                        header |= PRESET_DICT;
                      }

                      header += 31 - header % 31;
                      s.status = BUSY_STATE;
                      putShortMSB(s, header);
                      /* Save the adler32 of the preset dictionary: */

                      if (s.strstart !== 0) {
                        putShortMSB(s, strm.adler >>> 16);
                        putShortMSB(s, strm.adler & 0xffff);
                      }

                      strm.adler = 1; // adler32(0L, Z_NULL, 0);
                    }
                } //#ifdef GZIP


                if (s.status === EXTRA_STATE) {
                  if (s.gzhead.extra
                  /* != Z_NULL*/
                  ) {
                      beg = s.pending;
                      /* start of bytes to update crc */

                      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
                        if (s.pending === s.pending_buf_size) {
                          if (s.gzhead.hcrc && s.pending > beg) {
                            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                          }

                          flush_pending(strm);
                          beg = s.pending;

                          if (s.pending === s.pending_buf_size) {
                            break;
                          }
                        }

                        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
                        s.gzindex++;
                      }

                      if (s.gzhead.hcrc && s.pending > beg) {
                        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                      }

                      if (s.gzindex === s.gzhead.extra.length) {
                        s.gzindex = 0;
                        s.status = NAME_STATE;
                      }
                    } else {
                    s.status = NAME_STATE;
                  }
                }

                if (s.status === NAME_STATE) {
                  if (s.gzhead.name
                  /* != Z_NULL*/
                  ) {
                      beg = s.pending;
                      /* start of bytes to update crc */
                      //int val;

                      do {
                        if (s.pending === s.pending_buf_size) {
                          if (s.gzhead.hcrc && s.pending > beg) {
                            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                          }

                          flush_pending(strm);
                          beg = s.pending;

                          if (s.pending === s.pending_buf_size) {
                            val = 1;
                            break;
                          }
                        } // JS specific: little magic to add zero terminator to end of string


                        if (s.gzindex < s.gzhead.name.length) {
                          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
                        } else {
                          val = 0;
                        }

                        put_byte(s, val);
                      } while (val !== 0);

                      if (s.gzhead.hcrc && s.pending > beg) {
                        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                      }

                      if (val === 0) {
                        s.gzindex = 0;
                        s.status = COMMENT_STATE;
                      }
                    } else {
                    s.status = COMMENT_STATE;
                  }
                }

                if (s.status === COMMENT_STATE) {
                  if (s.gzhead.comment
                  /* != Z_NULL*/
                  ) {
                      beg = s.pending;
                      /* start of bytes to update crc */
                      //int val;

                      do {
                        if (s.pending === s.pending_buf_size) {
                          if (s.gzhead.hcrc && s.pending > beg) {
                            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                          }

                          flush_pending(strm);
                          beg = s.pending;

                          if (s.pending === s.pending_buf_size) {
                            val = 1;
                            break;
                          }
                        } // JS specific: little magic to add zero terminator to end of string


                        if (s.gzindex < s.gzhead.comment.length) {
                          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
                        } else {
                          val = 0;
                        }

                        put_byte(s, val);
                      } while (val !== 0);

                      if (s.gzhead.hcrc && s.pending > beg) {
                        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
                      }

                      if (val === 0) {
                        s.status = HCRC_STATE;
                      }
                    } else {
                    s.status = HCRC_STATE;
                  }
                }

                if (s.status === HCRC_STATE) {
                  if (s.gzhead.hcrc) {
                    if (s.pending + 2 > s.pending_buf_size) {
                      flush_pending(strm);
                    }

                    if (s.pending + 2 <= s.pending_buf_size) {
                      put_byte(s, strm.adler & 0xff);
                      put_byte(s, strm.adler >> 8 & 0xff);
                      strm.adler = 0; //crc32(0L, Z_NULL, 0);

                      s.status = BUSY_STATE;
                    }
                  } else {
                    s.status = BUSY_STATE;
                  }
                } //#endif

                /* Flush as much pending output as possible */


                if (s.pending !== 0) {
                  flush_pending(strm);

                  if (strm.avail_out === 0) {
                    /* Since avail_out is 0, deflate will be called again with
                     * more output space, but possibly with both pending and
                     * avail_in equal to zero. There won't be anything to do,
                     * but this is not an error situation so make sure we
                     * return OK instead of BUF_ERROR at next call of deflate:
                     */
                    s.last_flush = -1;
                    return Z_OK;
                  }
                  /* Make sure there is something to do and avoid duplicate consecutive
                   * flushes. For repeated and useless calls with Z_FINISH, we keep
                   * returning Z_STREAM_END instead of Z_BUF_ERROR.
                   */

                } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {
                  return err(strm, Z_BUF_ERROR);
                }
                /* User must not provide more input after the first FINISH: */


                if (s.status === FINISH_STATE && strm.avail_in !== 0) {
                  return err(strm, Z_BUF_ERROR);
                }
                /* Start a new block or continue the current one.
                 */


                if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
                  var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);

                  if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
                    s.status = FINISH_STATE;
                  }

                  if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
                    if (strm.avail_out === 0) {
                      s.last_flush = -1;
                      /* avoid BUF_ERROR next call, see above */
                    }

                    return Z_OK;
                    /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
                     * of deflate should use the same flush parameter to make sure
                     * that the flush is complete. So we don't have to output an
                     * empty block here, this will be done at next call. This also
                     * ensures that for a very small output buffer, we emit at most
                     * one empty block.
                     */
                  }

                  if (bstate === BS_BLOCK_DONE) {
                    if (flush === Z_PARTIAL_FLUSH) {
                      trees._tr_align(s);
                    } else if (flush !== Z_BLOCK) {
                      /* FULL_FLUSH or SYNC_FLUSH */
                      trees._tr_stored_block(s, 0, 0, false);
                      /* For a full flush, this empty block will be recognized
                       * as a special marker by inflate_sync().
                       */


                      if (flush === Z_FULL_FLUSH) {
                        /*** CLEAR_HASH(s); ***/

                        /* forget history */
                        zero(s.head); // Fill with NIL (= 0);

                        if (s.lookahead === 0) {
                          s.strstart = 0;
                          s.block_start = 0;
                          s.insert = 0;
                        }
                      }
                    }

                    flush_pending(strm);

                    if (strm.avail_out === 0) {
                      s.last_flush = -1;
                      /* avoid BUF_ERROR at next call, see above */

                      return Z_OK;
                    }
                  }
                } //Assert(strm->avail_out > 0, "bug2");
                //if (strm.avail_out <= 0) { throw new Error("bug2");}


                if (flush !== Z_FINISH) {
                  return Z_OK;
                }

                if (s.wrap <= 0) {
                  return Z_STREAM_END;
                }
                /* Write the trailer */


                if (s.wrap === 2) {
                  put_byte(s, strm.adler & 0xff);
                  put_byte(s, strm.adler >> 8 & 0xff);
                  put_byte(s, strm.adler >> 16 & 0xff);
                  put_byte(s, strm.adler >> 24 & 0xff);
                  put_byte(s, strm.total_in & 0xff);
                  put_byte(s, strm.total_in >> 8 & 0xff);
                  put_byte(s, strm.total_in >> 16 & 0xff);
                  put_byte(s, strm.total_in >> 24 & 0xff);
                } else {
                  putShortMSB(s, strm.adler >>> 16);
                  putShortMSB(s, strm.adler & 0xffff);
                }

                flush_pending(strm);
                /* If avail_out is zero, the application will call deflate again
                 * to flush the rest.
                 */

                if (s.wrap > 0) {
                  s.wrap = -s.wrap;
                }
                /* write the trailer only once! */


                return s.pending !== 0 ? Z_OK : Z_STREAM_END;
              }

              function deflateEnd(strm) {
                var status;

                if (!strm
                /*== Z_NULL*/
                || !strm.state
                /*== Z_NULL*/
                ) {
                    return Z_STREAM_ERROR;
                  }

                status = strm.state.status;

                if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {
                  return err(strm, Z_STREAM_ERROR);
                }

                strm.state = null;
                return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
              }
              /* =========================================================================
               * Initializes the compression dictionary from the given byte
               * sequence without producing any compressed output.
               */


              function deflateSetDictionary(strm, dictionary) {
                var dictLength = dictionary.length;
                var s;
                var str, n;
                var wrap;
                var avail;
                var next;
                var input;
                var tmpDict;

                if (!strm
                /*== Z_NULL*/
                || !strm.state
                /*== Z_NULL*/
                ) {
                    return Z_STREAM_ERROR;
                  }

                s = strm.state;
                wrap = s.wrap;

                if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) {
                  return Z_STREAM_ERROR;
                }
                /* when using zlib wrappers, compute Adler-32 for provided dictionary */


                if (wrap === 1) {
                  /* adler32(strm->adler, dictionary, dictLength); */
                  strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
                }

                s.wrap = 0;
                /* avoid computing Adler-32 in read_buf */

                /* if dictionary would fill window, just replace the history */

                if (dictLength >= s.w_size) {
                  if (wrap === 0) {
                    /* already empty otherwise */

                    /*** CLEAR_HASH(s); ***/
                    zero(s.head); // Fill with NIL (= 0);

                    s.strstart = 0;
                    s.block_start = 0;
                    s.insert = 0;
                  }
                  /* use the tail */
                  // dictionary = dictionary.slice(dictLength - s.w_size);


                  tmpDict = new utils.Buf8(s.w_size);
                  utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
                  dictionary = tmpDict;
                  dictLength = s.w_size;
                }
                /* insert dictionary into window and hash */


                avail = strm.avail_in;
                next = strm.next_in;
                input = strm.input;
                strm.avail_in = dictLength;
                strm.next_in = 0;
                strm.input = dictionary;
                fill_window(s);

                while (s.lookahead >= MIN_MATCH) {
                  str = s.strstart;
                  n = s.lookahead - (MIN_MATCH - 1);

                  do {
                    /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
                    s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
                    s.prev[str & s.w_mask] = s.head[s.ins_h];
                    s.head[s.ins_h] = str;
                    str++;
                  } while (--n);

                  s.strstart = str;
                  s.lookahead = MIN_MATCH - 1;
                  fill_window(s);
                }

                s.strstart += s.lookahead;
                s.block_start = s.strstart;
                s.insert = s.lookahead;
                s.lookahead = 0;
                s.match_length = s.prev_length = MIN_MATCH - 1;
                s.match_available = 0;
                strm.next_in = next;
                strm.input = input;
                strm.avail_in = avail;
                s.wrap = wrap;
                return Z_OK;
              }

              exports.deflateInit = deflateInit;
              exports.deflateInit2 = deflateInit2;
              exports.deflateReset = deflateReset;
              exports.deflateResetKeep = deflateResetKeep;
              exports.deflateSetHeader = deflateSetHeader;
              exports.deflate = deflate;
              exports.deflateEnd = deflateEnd;
              exports.deflateSetDictionary = deflateSetDictionary;
              exports.deflateInfo = 'pako deflate (from Nodeca project)';
              /* Not implemented
              exports.deflateBound = deflateBound;
              exports.deflateCopy = deflateCopy;
              exports.deflateParams = deflateParams;
              exports.deflatePending = deflatePending;
              exports.deflatePrime = deflatePrime;
              exports.deflateTune = deflateTune;
              */
            }, {
              "../utils/common": 35,
              "./adler32": 36,
              "./crc32": 38,
              "./messages": 43,
              "./trees": 44
            }],
            40: [function (require, module, exports) {
              // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
              //
              // This software is provided 'as-is', without any express or implied
              // warranty. In no event will the authors be held liable for any damages
              // arising from the use of this software.
              //
              // Permission is granted to anyone to use this software for any purpose,
              // including commercial applications, and to alter it and redistribute it
              // freely, subject to the following restrictions:
              //
              // 1. The origin of this software must not be misrepresented; you must not
              //   claim that you wrote the original software. If you use this software
              //   in a product, an acknowledgment in the product documentation would be
              //   appreciated but is not required.
              // 2. Altered source versions must be plainly marked as such, and must not be
              //   misrepresented as being the original software.
              // 3. This notice may not be removed or altered from any source distribution.
              // See state defs from inflate.js

              var BAD = 30;
              /* got a data error -- remain here until reset */

              var TYPE = 12;
              /* i: waiting for type bits, including last-flag bit */

              /*
                 Decode literal, length, and distance codes and write out the resulting
                 literal and match bytes until either not enough input or output is
                 available, an end-of-block is encountered, or a data error is encountered.
                 When large enough input and output buffers are supplied to inflate(), for
                 example, a 16K input buffer and a 64K output buffer, more than 95% of the
                 inflate execution time is spent in this routine.
              
                 Entry assumptions:
              
                      state.mode === LEN
                      strm.avail_in >= 6
                      strm.avail_out >= 258
                      start >= strm.avail_out
                      state.bits < 8
              
                 On return, state.mode is one of:
              
                      LEN -- ran out of enough output space or enough available input
                      TYPE -- reached end of block code, inflate() to interpret next block
                      BAD -- error in block data
              
                 Notes:
              
                  - The maximum input bits used by a length/distance pair is 15 bits for the
                    length code, 5 bits for the length extra, 15 bits for the distance code,
                    and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
                    Therefore if strm.avail_in >= 6, then there is enough input to avoid
                    checking for available input while decoding.
              
                  - The maximum bytes that a single length/distance pair can output is 258
                    bytes, which is the maximum length that can be coded.  inflate_fast()
                    requires strm.avail_out >= 258 for each loop to avoid checking for
                    output space.
               */

              module.exports = function inflate_fast(strm, start) {
                var state;

                var _in;
                /* local strm.input */


                var last;
                /* have enough input while in < last */

                var _out;
                /* local strm.output */


                var beg;
                /* inflate()'s initial strm.output */

                var end;
                /* while out < end, enough space available */
                //#ifdef INFLATE_STRICT

                var dmax;
                /* maximum distance from zlib header */
                //#endif

                var wsize;
                /* window size or zero if not using window */

                var whave;
                /* valid bytes in the window */

                var wnext;
                /* window write index */
                // Use `s_window` instead `window`, avoid conflict with instrumentation tools

                var s_window;
                /* allocated sliding window, if wsize != 0 */

                var hold;
                /* local strm.hold */

                var bits;
                /* local strm.bits */

                var lcode;
                /* local strm.lencode */

                var dcode;
                /* local strm.distcode */

                var lmask;
                /* mask for first level of length codes */

                var dmask;
                /* mask for first level of distance codes */

                var here;
                /* retrieved table entry */

                var op;
                /* code bits, operation, extra bits, or */

                /*  window position, window bytes to copy */

                var len;
                /* match length, unused bytes */

                var dist;
                /* match distance */

                var from;
                /* where to copy match from */

                var from_source;
                var input, output; // JS specific, because we have no pointers

                /* copy state to local variables */

                state = strm.state; //here = state.here;

                _in = strm.next_in;
                input = strm.input;
                last = _in + (strm.avail_in - 5);
                _out = strm.next_out;
                output = strm.output;
                beg = _out - (start - strm.avail_out);
                end = _out + (strm.avail_out - 257); //#ifdef INFLATE_STRICT

                dmax = state.dmax; //#endif

                wsize = state.wsize;
                whave = state.whave;
                wnext = state.wnext;
                s_window = state.window;
                hold = state.hold;
                bits = state.bits;
                lcode = state.lencode;
                dcode = state.distcode;
                lmask = (1 << state.lenbits) - 1;
                dmask = (1 << state.distbits) - 1;
                /* decode literals and length/distances until end-of-block or not enough
                   input data or output space */

                top: do {
                  if (bits < 15) {
                    hold += input[_in++] << bits;
                    bits += 8;
                    hold += input[_in++] << bits;
                    bits += 8;
                  }

                  here = lcode[hold & lmask];

                  dolen: for (;;) {
                    // Goto emulation
                    op = here >>> 24
                    /*here.bits*/
                    ;
                    hold >>>= op;
                    bits -= op;
                    op = here >>> 16 & 0xff
                    /*here.op*/
                    ;

                    if (op === 0) {
                      /* literal */
                      //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
                      //        "inflate:         literal '%c'\n" :
                      //        "inflate:         literal 0x%02x\n", here.val));
                      output[_out++] = here & 0xffff
                      /*here.val*/
                      ;
                    } else if (op & 16) {
                      /* length base */
                      len = here & 0xffff
                      /*here.val*/
                      ;
                      op &= 15;
                      /* number of extra bits */

                      if (op) {
                        if (bits < op) {
                          hold += input[_in++] << bits;
                          bits += 8;
                        }

                        len += hold & (1 << op) - 1;
                        hold >>>= op;
                        bits -= op;
                      } //Tracevv((stderr, "inflate:         length %u\n", len));


                      if (bits < 15) {
                        hold += input[_in++] << bits;
                        bits += 8;
                        hold += input[_in++] << bits;
                        bits += 8;
                      }

                      here = dcode[hold & dmask];

                      dodist: for (;;) {
                        // goto emulation
                        op = here >>> 24
                        /*here.bits*/
                        ;
                        hold >>>= op;
                        bits -= op;
                        op = here >>> 16 & 0xff
                        /*here.op*/
                        ;

                        if (op & 16) {
                          /* distance base */
                          dist = here & 0xffff
                          /*here.val*/
                          ;
                          op &= 15;
                          /* number of extra bits */

                          if (bits < op) {
                            hold += input[_in++] << bits;
                            bits += 8;

                            if (bits < op) {
                              hold += input[_in++] << bits;
                              bits += 8;
                            }
                          }

                          dist += hold & (1 << op) - 1; //#ifdef INFLATE_STRICT

                          if (dist > dmax) {
                            strm.msg = 'invalid distance too far back';
                            state.mode = BAD;
                            break top;
                          } //#endif


                          hold >>>= op;
                          bits -= op; //Tracevv((stderr, "inflate:         distance %u\n", dist));

                          op = _out - beg;
                          /* max distance in output */

                          if (dist > op) {
                            /* see if copy from window */
                            op = dist - op;
                            /* distance back in window */

                            if (op > whave) {
                              if (state.sane) {
                                strm.msg = 'invalid distance too far back';
                                state.mode = BAD;
                                break top;
                              } // (!) This block is disabled in zlib defaults,
                              // don't enable it for binary compatibility
                              //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                              //                if (len <= op - whave) {
                              //                  do {
                              //                    output[_out++] = 0;
                              //                  } while (--len);
                              //                  continue top;
                              //                }
                              //                len -= op - whave;
                              //                do {
                              //                  output[_out++] = 0;
                              //                } while (--op > whave);
                              //                if (op === 0) {
                              //                  from = _out - dist;
                              //                  do {
                              //                    output[_out++] = output[from++];
                              //                  } while (--len);
                              //                  continue top;
                              //                }
                              //#endif

                            }

                            from = 0; // window index

                            from_source = s_window;

                            if (wnext === 0) {
                              /* very common case */
                              from += wsize - op;

                              if (op < len) {
                                /* some from window */
                                len -= op;

                                do {
                                  output[_out++] = s_window[from++];
                                } while (--op);

                                from = _out - dist;
                                /* rest from output */

                                from_source = output;
                              }
                            } else if (wnext < op) {
                              /* wrap around window */
                              from += wsize + wnext - op;
                              op -= wnext;

                              if (op < len) {
                                /* some from end of window */
                                len -= op;

                                do {
                                  output[_out++] = s_window[from++];
                                } while (--op);

                                from = 0;

                                if (wnext < len) {
                                  /* some from start of window */
                                  op = wnext;
                                  len -= op;

                                  do {
                                    output[_out++] = s_window[from++];
                                  } while (--op);

                                  from = _out - dist;
                                  /* rest from output */

                                  from_source = output;
                                }
                              }
                            } else {
                              /* contiguous in window */
                              from += wnext - op;

                              if (op < len) {
                                /* some from window */
                                len -= op;

                                do {
                                  output[_out++] = s_window[from++];
                                } while (--op);

                                from = _out - dist;
                                /* rest from output */

                                from_source = output;
                              }
                            }

                            while (len > 2) {
                              output[_out++] = from_source[from++];
                              output[_out++] = from_source[from++];
                              output[_out++] = from_source[from++];
                              len -= 3;
                            }

                            if (len) {
                              output[_out++] = from_source[from++];

                              if (len > 1) {
                                output[_out++] = from_source[from++];
                              }
                            }
                          } else {
                            from = _out - dist;
                            /* copy direct from output */

                            do {
                              /* minimum length is three */
                              output[_out++] = output[from++];
                              output[_out++] = output[from++];
                              output[_out++] = output[from++];
                              len -= 3;
                            } while (len > 2);

                            if (len) {
                              output[_out++] = output[from++];

                              if (len > 1) {
                                output[_out++] = output[from++];
                              }
                            }
                          }
                        } else if ((op & 64) === 0) {
                          /* 2nd level distance code */
                          here = dcode[(here & 0xffff) + (
                          /*here.val*/
                          hold & (1 << op) - 1)];
                          continue dodist;
                        } else {
                          strm.msg = 'invalid distance code';
                          state.mode = BAD;
                          break top;
                        }

                        break; // need to emulate goto via "continue"
                      }
                    } else if ((op & 64) === 0) {
                      /* 2nd level length code */
                      here = lcode[(here & 0xffff) + (
                      /*here.val*/
                      hold & (1 << op) - 1)];
                      continue dolen;
                    } else if (op & 32) {
                      /* end-of-block */
                      //Tracevv((stderr, "inflate:         end of block\n"));
                      state.mode = TYPE;
                      break top;
                    } else {
                      strm.msg = 'invalid literal/length code';
                      state.mode = BAD;
                      break top;
                    }

                    break; // need to emulate goto via "continue"
                  }
                } while (_in < last && _out < end);
                /* return unused bytes (on entry, bits < 8, so in won't go too far back) */


                len = bits >> 3;
                _in -= len;
                bits -= len << 3;
                hold &= (1 << bits) - 1;
                /* update state and return */

                strm.next_in = _in;
                strm.next_out = _out;
                strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
                strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
                state.hold = hold;
                state.bits = bits;
                return;
              };
            }, {}],
            41: [function (require, module, exports) {
              // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
              //
              // This software is provided 'as-is', without any express or implied
              // warranty. In no event will the authors be held liable for any damages
              // arising from the use of this software.
              //
              // Permission is granted to anyone to use this software for any purpose,
              // including commercial applications, and to alter it and redistribute it
              // freely, subject to the following restrictions:
              //
              // 1. The origin of this software must not be misrepresented; you must not
              //   claim that you wrote the original software. If you use this software
              //   in a product, an acknowledgment in the product documentation would be
              //   appreciated but is not required.
              // 2. Altered source versions must be plainly marked as such, and must not be
              //   misrepresented as being the original software.
              // 3. This notice may not be removed or altered from any source distribution.

              var utils = require('../utils/common');

              var adler32 = require('./adler32');

              var crc32 = require('./crc32');

              var inflate_fast = require('./inffast');

              var inflate_table = require('./inftrees');

              var CODES = 0;
              var LENS = 1;
              var DISTS = 2;
              /* Public constants ==========================================================*/

              /* ===========================================================================*/

              /* Allowed flush values; see deflate() and inflate() below for details */
              //var Z_NO_FLUSH      = 0;
              //var Z_PARTIAL_FLUSH = 1;
              //var Z_SYNC_FLUSH    = 2;
              //var Z_FULL_FLUSH    = 3;

              var Z_FINISH = 4;
              var Z_BLOCK = 5;
              var Z_TREES = 6;
              /* Return codes for the compression/decompression functions. Negative values
               * are errors, positive values are used for special but normal events.
               */

              var Z_OK = 0;
              var Z_STREAM_END = 1;
              var Z_NEED_DICT = 2; //var Z_ERRNO         = -1;

              var Z_STREAM_ERROR = -2;
              var Z_DATA_ERROR = -3;
              var Z_MEM_ERROR = -4;
              var Z_BUF_ERROR = -5; //var Z_VERSION_ERROR = -6;

              /* The deflate compression method */

              var Z_DEFLATED = 8;
              /* STATES ====================================================================*/

              /* ===========================================================================*/

              var HEAD = 1;
              /* i: waiting for magic header */

              var FLAGS = 2;
              /* i: waiting for method and flags (gzip) */

              var TIME = 3;
              /* i: waiting for modification time (gzip) */

              var OS = 4;
              /* i: waiting for extra flags and operating system (gzip) */

              var EXLEN = 5;
              /* i: waiting for extra length (gzip) */

              var EXTRA = 6;
              /* i: waiting for extra bytes (gzip) */

              var NAME = 7;
              /* i: waiting for end of file name (gzip) */

              var COMMENT = 8;
              /* i: waiting for end of comment (gzip) */

              var HCRC = 9;
              /* i: waiting for header crc (gzip) */

              var DICTID = 10;
              /* i: waiting for dictionary check value */

              var DICT = 11;
              /* waiting for inflateSetDictionary() call */

              var TYPE = 12;
              /* i: waiting for type bits, including last-flag bit */

              var TYPEDO = 13;
              /* i: same, but skip check to exit inflate on new block */

              var STORED = 14;
              /* i: waiting for stored size (length and complement) */

              var COPY_ = 15;
              /* i/o: same as COPY below, but only first time in */

              var COPY = 16;
              /* i/o: waiting for input or output to copy stored block */

              var TABLE = 17;
              /* i: waiting for dynamic block table lengths */

              var LENLENS = 18;
              /* i: waiting for code length code lengths */

              var CODELENS = 19;
              /* i: waiting for length/lit and distance code lengths */

              var LEN_ = 20;
              /* i: same as LEN below, but only first time in */

              var LEN = 21;
              /* i: waiting for length/lit/eob code */

              var LENEXT = 22;
              /* i: waiting for length extra bits */

              var DIST = 23;
              /* i: waiting for distance code */

              var DISTEXT = 24;
              /* i: waiting for distance extra bits */

              var MATCH = 25;
              /* o: waiting for output space to copy string */

              var LIT = 26;
              /* o: waiting for output space to write literal */

              var CHECK = 27;
              /* i: waiting for 32-bit check value */

              var LENGTH = 28;
              /* i: waiting for 32-bit length (gzip) */

              var DONE = 29;
              /* finished check, done -- remain here until reset */

              var BAD = 30;
              /* got a data error -- remain here until reset */

              var MEM = 31;
              /* got an inflate() memory error -- remain here until reset */

              var SYNC = 32;
              /* looking for synchronization bytes to restart inflate() */

              /* ===========================================================================*/

              var ENOUGH_LENS = 852;
              var ENOUGH_DISTS = 592; //var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

              var MAX_WBITS = 15;
              /* 32K LZ77 window */

              var DEF_WBITS = MAX_WBITS;

              function zswap32(q) {
                return (q >>> 24 & 0xff) + (q >>> 8 & 0xff00) + ((q & 0xff00) << 8) + ((q & 0xff) << 24);
              }

              function InflateState() {
                this.mode = 0;
                /* current inflate mode */

                this.last = false;
                /* true if processing last block */

                this.wrap = 0;
                /* bit 0 true for zlib, bit 1 true for gzip */

                this.havedict = false;
                /* true if dictionary provided */

                this.flags = 0;
                /* gzip header method and flags (0 if zlib) */

                this.dmax = 0;
                /* zlib header max distance (INFLATE_STRICT) */

                this.check = 0;
                /* protected copy of check value */

                this.total = 0;
                /* protected copy of output count */
                // TODO: may be {}

                this.head = null;
                /* where to save gzip header information */

                /* sliding window */

                this.wbits = 0;
                /* log base 2 of requested window size */

                this.wsize = 0;
                /* window size or zero if not using window */

                this.whave = 0;
                /* valid bytes in the window */

                this.wnext = 0;
                /* window write index */

                this.window = null;
                /* allocated sliding window, if needed */

                /* bit accumulator */

                this.hold = 0;
                /* input bit accumulator */

                this.bits = 0;
                /* number of bits in "in" */

                /* for string and stored block copying */

                this.length = 0;
                /* literal or length of data to copy */

                this.offset = 0;
                /* distance back to copy string from */

                /* for table and code decoding */

                this.extra = 0;
                /* extra bits needed */

                /* fixed and dynamic code tables */

                this.lencode = null;
                /* starting table for length/literal codes */

                this.distcode = null;
                /* starting table for distance codes */

                this.lenbits = 0;
                /* index bits for lencode */

                this.distbits = 0;
                /* index bits for distcode */

                /* dynamic table building */

                this.ncode = 0;
                /* number of code length code lengths */

                this.nlen = 0;
                /* number of length code lengths */

                this.ndist = 0;
                /* number of distance code lengths */

                this.have = 0;
                /* number of code lengths in lens[] */

                this.next = null;
                /* next available space in codes[] */

                this.lens = new utils.Buf16(320);
                /* temporary storage for code lengths */

                this.work = new utils.Buf16(288);
                /* work area for code table building */

                /*
                 because we don't have pointers in js, we use lencode and distcode directly
                 as buffers so we don't need codes
                */
                //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */

                this.lendyn = null;
                /* dynamic table for length/literal codes (JS specific) */

                this.distdyn = null;
                /* dynamic table for distance codes (JS specific) */

                this.sane = 0;
                /* if false, allow invalid distance too far */

                this.back = 0;
                /* bits back of last unprocessed length/lit */

                this.was = 0;
                /* initial length of match */
              }

              function inflateResetKeep(strm) {
                var state;

                if (!strm || !strm.state) {
                  return Z_STREAM_ERROR;
                }

                state = strm.state;
                strm.total_in = strm.total_out = state.total = 0;
                strm.msg = '';
                /*Z_NULL*/

                if (state.wrap) {
                  /* to support ill-conceived Java test suite */
                  strm.adler = state.wrap & 1;
                }

                state.mode = HEAD;
                state.last = 0;
                state.havedict = 0;
                state.dmax = 32768;
                state.head = null
                /*Z_NULL*/
                ;
                state.hold = 0;
                state.bits = 0; //state.lencode = state.distcode = state.next = state.codes;

                state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
                state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);
                state.sane = 1;
                state.back = -1; //Tracev((stderr, "inflate: reset\n"));

                return Z_OK;
              }

              function inflateReset(strm) {
                var state;

                if (!strm || !strm.state) {
                  return Z_STREAM_ERROR;
                }

                state = strm.state;
                state.wsize = 0;
                state.whave = 0;
                state.wnext = 0;
                return inflateResetKeep(strm);
              }

              function inflateReset2(strm, windowBits) {
                var wrap;
                var state;
                /* get the state */

                if (!strm || !strm.state) {
                  return Z_STREAM_ERROR;
                }

                state = strm.state;
                /* extract wrap request from windowBits parameter */

                if (windowBits < 0) {
                  wrap = 0;
                  windowBits = -windowBits;
                } else {
                  wrap = (windowBits >> 4) + 1;

                  if (windowBits < 48) {
                    windowBits &= 15;
                  }
                }
                /* set number of window bits, free window if different */


                if (windowBits && (windowBits < 8 || windowBits > 15)) {
                  return Z_STREAM_ERROR;
                }

                if (state.window !== null && state.wbits !== windowBits) {
                  state.window = null;
                }
                /* update state and reset the rest of it */


                state.wrap = wrap;
                state.wbits = windowBits;
                return inflateReset(strm);
              }

              function inflateInit2(strm, windowBits) {
                var ret;
                var state;

                if (!strm) {
                  return Z_STREAM_ERROR;
                } //strm.msg = Z_NULL;                 /* in case we return an error */


                state = new InflateState(); //if (state === Z_NULL) return Z_MEM_ERROR;
                //Tracev((stderr, "inflate: allocated\n"));

                strm.state = state;
                state.window = null
                /*Z_NULL*/
                ;
                ret = inflateReset2(strm, windowBits);

                if (ret !== Z_OK) {
                  strm.state = null
                  /*Z_NULL*/
                  ;
                }

                return ret;
              }

              function inflateInit(strm) {
                return inflateInit2(strm, DEF_WBITS);
              }
              /*
               Return state with length and distance decoding tables and index sizes set to
               fixed code decoding.  Normally this returns fixed tables from inffixed.h.
               If BUILDFIXED is defined, then instead this routine builds the tables the
               first time it's called, and returns those tables the first time and
               thereafter.  This reduces the size of the code by about 2K bytes, in
               exchange for a little execution time.  However, BUILDFIXED should not be
               used for threaded applications, since the rewriting of the tables and virgin
               may not be thread-safe.
               */


              var virgin = true;
              var lenfix, distfix; // We have no pointers in JS, so keep tables separate

              function fixedtables(state) {
                /* build fixed huffman tables if first call (may not be thread safe) */
                if (virgin) {
                  var sym;
                  lenfix = new utils.Buf32(512);
                  distfix = new utils.Buf32(32);
                  /* literal/length table */

                  sym = 0;

                  while (sym < 144) {
                    state.lens[sym++] = 8;
                  }

                  while (sym < 256) {
                    state.lens[sym++] = 9;
                  }

                  while (sym < 280) {
                    state.lens[sym++] = 7;
                  }

                  while (sym < 288) {
                    state.lens[sym++] = 8;
                  }

                  inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, {
                    bits: 9
                  });
                  /* distance table */

                  sym = 0;

                  while (sym < 32) {
                    state.lens[sym++] = 5;
                  }

                  inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, {
                    bits: 5
                  });
                  /* do this just once */

                  virgin = false;
                }

                state.lencode = lenfix;
                state.lenbits = 9;
                state.distcode = distfix;
                state.distbits = 5;
              }
              /*
               Update the window with the last wsize (normally 32K) bytes written before
               returning.  If window does not exist yet, create it.  This is only called
               when a window is already in use, or when output has been written during this
               inflate call, but the end of the deflate stream has not been reached yet.
               It is also called to create a window for dictionary data when a dictionary
               is loaded.
              
               Providing output buffers larger than 32K to inflate() should provide a speed
               advantage, since only the last 32K of output is copied to the sliding window
               upon return from inflate(), and since all distances after the first 32K of
               output will fall in the output data, making match copies simpler and faster.
               The advantage may be dependent on the size of the processor's data caches.
               */


              function updatewindow(strm, src, end, copy) {
                var dist;
                var state = strm.state;
                /* if it hasn't been done already, allocate space for the window */

                if (state.window === null) {
                  state.wsize = 1 << state.wbits;
                  state.wnext = 0;
                  state.whave = 0;
                  state.window = new utils.Buf8(state.wsize);
                }
                /* copy state->wsize or less output bytes into the circular window */


                if (copy >= state.wsize) {
                  utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
                  state.wnext = 0;
                  state.whave = state.wsize;
                } else {
                  dist = state.wsize - state.wnext;

                  if (dist > copy) {
                    dist = copy;
                  } //zmemcpy(state->window + state->wnext, end - copy, dist);


                  utils.arraySet(state.window, src, end - copy, dist, state.wnext);
                  copy -= dist;

                  if (copy) {
                    //zmemcpy(state->window, end - copy, copy);
                    utils.arraySet(state.window, src, end - copy, copy, 0);
                    state.wnext = copy;
                    state.whave = state.wsize;
                  } else {
                    state.wnext += dist;

                    if (state.wnext === state.wsize) {
                      state.wnext = 0;
                    }

                    if (state.whave < state.wsize) {
                      state.whave += dist;
                    }
                  }
                }

                return 0;
              }

              function inflate(strm, flush) {
                var state;
                var input, output; // input/output buffers

                var next;
                /* next input INDEX */

                var put;
                /* next output INDEX */

                var have, left;
                /* available input and output */

                var hold;
                /* bit buffer */

                var bits;
                /* bits in bit buffer */

                var _in, _out;
                /* save starting available input and output */


                var copy;
                /* number of stored or match bytes to copy */

                var from;
                /* where to copy match bytes from */

                var from_source;
                var here = 0;
                /* current decoding table entry */

                var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
                //var last;                   /* parent table entry */

                var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)

                var len;
                /* length to copy for repeats, bits to drop */

                var ret;
                /* return code */

                var hbuf = new utils.Buf8(4);
                /* buffer for gzip header crc calculation */

                var opts;
                var n; // temporary var for NEED_BITS

                var order =
                /* permutation of code lengths */
                [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];

                if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
                  return Z_STREAM_ERROR;
                }

                state = strm.state;

                if (state.mode === TYPE) {
                  state.mode = TYPEDO;
                }
                /* skip check */
                //--- LOAD() ---


                put = strm.next_out;
                output = strm.output;
                left = strm.avail_out;
                next = strm.next_in;
                input = strm.input;
                have = strm.avail_in;
                hold = state.hold;
                bits = state.bits; //---

                _in = have;
                _out = left;
                ret = Z_OK;

                inf_leave: // goto emulation
                for (;;) {
                  switch (state.mode) {
                    case HEAD:
                      if (state.wrap === 0) {
                        state.mode = TYPEDO;
                        break;
                      } //=== NEEDBITS(16);


                      while (bits < 16) {
                        if (have === 0) {
                          break inf_leave;
                        }

                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      } //===//


                      if (state.wrap & 2 && hold === 0x8b1f) {
                        /* gzip header */
                        state.check = 0
                        /*crc32(0L, Z_NULL, 0)*/
                        ; //=== CRC2(state.check, hold);

                        hbuf[0] = hold & 0xff;
                        hbuf[1] = hold >>> 8 & 0xff;
                        state.check = crc32(state.check, hbuf, 2, 0); //===//
                        //=== INITBITS();

                        hold = 0;
                        bits = 0; //===//

                        state.mode = FLAGS;
                        break;
                      }

                      state.flags = 0;
                      /* expect zlib header */

                      if (state.head) {
                        state.head.done = false;
                      }

                      if (!(state.wrap & 1) ||
                      /* check if zlib header allowed */
                      (((hold & 0xff) <<
                      /*BITS(8)*/
                      8) + (hold >> 8)) % 31) {
                        strm.msg = 'incorrect header check';
                        state.mode = BAD;
                        break;
                      }

                      if ((hold & 0x0f) !==
                      /*BITS(4)*/
                      Z_DEFLATED) {
                        strm.msg = 'unknown compression method';
                        state.mode = BAD;
                        break;
                      } //--- DROPBITS(4) ---//


                      hold >>>= 4;
                      bits -= 4; //---//

                      len = (hold & 0x0f) +
                      /*BITS(4)*/
                      8;

                      if (state.wbits === 0) {
                        state.wbits = len;
                      } else if (len > state.wbits) {
                        strm.msg = 'invalid window size';
                        state.mode = BAD;
                        break;
                      }

                      state.dmax = 1 << len; //Tracev((stderr, "inflate:   zlib header ok\n"));

                      strm.adler = state.check = 1
                      /*adler32(0L, Z_NULL, 0)*/
                      ;
                      state.mode = hold & 0x200 ? DICTID : TYPE; //=== INITBITS();

                      hold = 0;
                      bits = 0; //===//

                      break;

                    case FLAGS:
                      //=== NEEDBITS(16); */
                      while (bits < 16) {
                        if (have === 0) {
                          break inf_leave;
                        }

                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      } //===//


                      state.flags = hold;

                      if ((state.flags & 0xff) !== Z_DEFLATED) {
                        strm.msg = 'unknown compression method';
                        state.mode = BAD;
                        break;
                      }

                      if (state.flags & 0xe000) {
                        strm.msg = 'unknown header flags set';
                        state.mode = BAD;
                        break;
                      }

                      if (state.head) {
                        state.head.text = hold >> 8 & 1;
                      }

                      if (state.flags & 0x0200) {
                        //=== CRC2(state.check, hold);
                        hbuf[0] = hold & 0xff;
                        hbuf[1] = hold >>> 8 & 0xff;
                        state.check = crc32(state.check, hbuf, 2, 0); //===//
                      } //=== INITBITS();


                      hold = 0;
                      bits = 0; //===//

                      state.mode = TIME;

                    /* falls through */

                    case TIME:
                      //=== NEEDBITS(32); */
                      while (bits < 32) {
                        if (have === 0) {
                          break inf_leave;
                        }

                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      } //===//


                      if (state.head) {
                        state.head.time = hold;
                      }

                      if (state.flags & 0x0200) {
                        //=== CRC4(state.check, hold)
                        hbuf[0] = hold & 0xff;
                        hbuf[1] = hold >>> 8 & 0xff;
                        hbuf[2] = hold >>> 16 & 0xff;
                        hbuf[3] = hold >>> 24 & 0xff;
                        state.check = crc32(state.check, hbuf, 4, 0); //===
                      } //=== INITBITS();


                      hold = 0;
                      bits = 0; //===//

                      state.mode = OS;

                    /* falls through */

                    case OS:
                      //=== NEEDBITS(16); */
                      while (bits < 16) {
                        if (have === 0) {
                          break inf_leave;
                        }

                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      } //===//


                      if (state.head) {
                        state.head.xflags = hold & 0xff;
                        state.head.os = hold >> 8;
                      }

                      if (state.flags & 0x0200) {
                        //=== CRC2(state.check, hold);
                        hbuf[0] = hold & 0xff;
                        hbuf[1] = hold >>> 8 & 0xff;
                        state.check = crc32(state.check, hbuf, 2, 0); //===//
                      } //=== INITBITS();


                      hold = 0;
                      bits = 0; //===//

                      state.mode = EXLEN;

                    /* falls through */

                    case EXLEN:
                      if (state.flags & 0x0400) {
                        //=== NEEDBITS(16); */
                        while (bits < 16) {
                          if (have === 0) {
                            break inf_leave;
                          }

                          have--;
                          hold += input[next++] << bits;
                          bits += 8;
                        } //===//


                        state.length = hold;

                        if (state.head) {
                          state.head.extra_len = hold;
                        }

                        if (state.flags & 0x0200) {
                          //=== CRC2(state.check, hold);
                          hbuf[0] = hold & 0xff;
                          hbuf[1] = hold >>> 8 & 0xff;
                          state.check = crc32(state.check, hbuf, 2, 0); //===//
                        } //=== INITBITS();


                        hold = 0;
                        bits = 0; //===//
                      } else if (state.head) {
                        state.head.extra = null
                        /*Z_NULL*/
                        ;
                      }

                      state.mode = EXTRA;

                    /* falls through */

                    case EXTRA:
                      if (state.flags & 0x0400) {
                        copy = state.length;

                        if (copy > have) {
                          copy = have;
                        }

                        if (copy) {
                          if (state.head) {
                            len = state.head.extra_len - state.length;

                            if (!state.head.extra) {
                              // Use untyped array for more convenient processing later
                              state.head.extra = new Array(state.head.extra_len);
                            }

                            utils.arraySet(state.head.extra, input, next, // extra field is limited to 65536 bytes
                            // - no need for additional size check
                            copy,
                            /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                            len); //zmemcpy(state.head.extra + len, next,
                            //        len + copy > state.head.extra_max ?
                            //        state.head.extra_max - len : copy);
                          }

                          if (state.flags & 0x0200) {
                            state.check = crc32(state.check, input, copy, next);
                          }

                          have -= copy;
                          next += copy;
                          state.length -= copy;
                        }

                        if (state.length) {
                          break inf_leave;
                        }
                      }

                      state.length = 0;
                      state.mode = NAME;

                    /* falls through */

                    case NAME:
                      if (state.flags & 0x0800) {
                        if (have === 0) {
                          break inf_leave;
                        }

                        copy = 0;

                        do {
                          // TODO: 2 or 1 bytes?
                          len = input[next + copy++];
                          /* use constant limit because in js we should not preallocate memory */

                          if (state.head && len && state.length < 65536
                          /*state.head.name_max*/
                          ) {
                            state.head.name += String.fromCharCode(len);
                          }
                        } while (len && copy < have);

                        if (state.flags & 0x0200) {
                          state.check = crc32(state.check, input, copy, next);
                        }

                        have -= copy;
                        next += copy;

                        if (len) {
                          break inf_leave;
                        }
                      } else if (state.head) {
                        state.head.name = null;
                      }

                      state.length = 0;
                      state.mode = COMMENT;

                    /* falls through */

                    case COMMENT:
                      if (state.flags & 0x1000) {
                        if (have === 0) {
                          break inf_leave;
                        }

                        copy = 0;

                        do {
                          len = input[next + copy++];
                          /* use constant limit because in js we should not preallocate memory */

                          if (state.head && len && state.length < 65536
                          /*state.head.comm_max*/
                          ) {
                            state.head.comment += String.fromCharCode(len);
                          }
                        } while (len && copy < have);

                        if (state.flags & 0x0200) {
                          state.check = crc32(state.check, input, copy, next);
                        }

                        have -= copy;
                        next += copy;

                        if (len) {
                          break inf_leave;
                        }
                      } else if (state.head) {
                        state.head.comment = null;
                      }

                      state.mode = HCRC;

                    /* falls through */

                    case HCRC:
                      if (state.flags & 0x0200) {
                        //=== NEEDBITS(16); */
                        while (bits < 16) {
                          if (have === 0) {
                            break inf_leave;
                          }

                          have--;
                          hold += input[next++] << bits;
                          bits += 8;
                        } //===//


                        if (hold !== (state.check & 0xffff)) {
                          strm.msg = 'header crc mismatch';
                          state.mode = BAD;
                          break;
                        } //=== INITBITS();


                        hold = 0;
                        bits = 0; //===//
                      }

                      if (state.head) {
                        state.head.hcrc = state.flags >> 9 & 1;
                        state.head.done = true;
                      }

                      strm.adler = state.check = 0;
                      state.mode = TYPE;
                      break;

                    case DICTID:
                      //=== NEEDBITS(32); */
                      while (bits < 32) {
                        if (have === 0) {
                          break inf_leave;
                        }

                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      } //===//


                      strm.adler = state.check = zswap32(hold); //=== INITBITS();

                      hold = 0;
                      bits = 0; //===//

                      state.mode = DICT;

                    /* falls through */

                    case DICT:
                      if (state.havedict === 0) {
                        //--- RESTORE() ---
                        strm.next_out = put;
                        strm.avail_out = left;
                        strm.next_in = next;
                        strm.avail_in = have;
                        state.hold = hold;
                        state.bits = bits; //---

                        return Z_NEED_DICT;
                      }

                      strm.adler = state.check = 1
                      /*adler32(0L, Z_NULL, 0)*/
                      ;
                      state.mode = TYPE;

                    /* falls through */

                    case TYPE:
                      if (flush === Z_BLOCK || flush === Z_TREES) {
                        break inf_leave;
                      }

                    /* falls through */

                    case TYPEDO:
                      if (state.last) {
                        //--- BYTEBITS() ---//
                        hold >>>= bits & 7;
                        bits -= bits & 7; //---//

                        state.mode = CHECK;
                        break;
                      } //=== NEEDBITS(3); */


                      while (bits < 3) {
                        if (have === 0) {
                          break inf_leave;
                        }

                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      } //===//


                      state.last = hold & 0x01
                      /*BITS(1)*/
                      ; //--- DROPBITS(1) ---//

                      hold >>>= 1;
                      bits -= 1; //---//

                      switch (hold & 0x03) {
                        /*BITS(2)*/
                        case 0:
                          /* stored block */
                          //Tracev((stderr, "inflate:     stored block%s\n",
                          //        state.last ? " (last)" : ""));
                          state.mode = STORED;
                          break;

                        case 1:
                          /* fixed block */
                          fixedtables(state); //Tracev((stderr, "inflate:     fixed codes block%s\n",
                          //        state.last ? " (last)" : ""));

                          state.mode = LEN_;
                          /* decode codes */

                          if (flush === Z_TREES) {
                            //--- DROPBITS(2) ---//
                            hold >>>= 2;
                            bits -= 2; //---//

                            break inf_leave;
                          }

                          break;

                        case 2:
                          /* dynamic block */
                          //Tracev((stderr, "inflate:     dynamic codes block%s\n",
                          //        state.last ? " (last)" : ""));
                          state.mode = TABLE;
                          break;

                        case 3:
                          strm.msg = 'invalid block type';
                          state.mode = BAD;
                      } //--- DROPBITS(2) ---//


                      hold >>>= 2;
                      bits -= 2; //---//

                      break;

                    case STORED:
                      //--- BYTEBITS() ---// /* go to byte boundary */
                      hold >>>= bits & 7;
                      bits -= bits & 7; //---//
                      //=== NEEDBITS(32); */

                      while (bits < 32) {
                        if (have === 0) {
                          break inf_leave;
                        }

                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      } //===//


                      if ((hold & 0xffff) !== (hold >>> 16 ^ 0xffff)) {
                        strm.msg = 'invalid stored block lengths';
                        state.mode = BAD;
                        break;
                      }

                      state.length = hold & 0xffff; //Tracev((stderr, "inflate:       stored length %u\n",
                      //        state.length));
                      //=== INITBITS();

                      hold = 0;
                      bits = 0; //===//

                      state.mode = COPY_;

                      if (flush === Z_TREES) {
                        break inf_leave;
                      }

                    /* falls through */

                    case COPY_:
                      state.mode = COPY;

                    /* falls through */

                    case COPY:
                      copy = state.length;

                      if (copy) {
                        if (copy > have) {
                          copy = have;
                        }

                        if (copy > left) {
                          copy = left;
                        }

                        if (copy === 0) {
                          break inf_leave;
                        } //--- zmemcpy(put, next, copy); ---


                        utils.arraySet(output, input, next, copy, put); //---//

                        have -= copy;
                        next += copy;
                        left -= copy;
                        put += copy;
                        state.length -= copy;
                        break;
                      } //Tracev((stderr, "inflate:       stored end\n"));


                      state.mode = TYPE;
                      break;

                    case TABLE:
                      //=== NEEDBITS(14); */
                      while (bits < 14) {
                        if (have === 0) {
                          break inf_leave;
                        }

                        have--;
                        hold += input[next++] << bits;
                        bits += 8;
                      } //===//


                      state.nlen = (hold & 0x1f) +
                      /*BITS(5)*/
                      257; //--- DROPBITS(5) ---//

                      hold >>>= 5;
                      bits -= 5; //---//

                      state.ndist = (hold & 0x1f) +
                      /*BITS(5)*/
                      1; //--- DROPBITS(5) ---//

                      hold >>>= 5;
                      bits -= 5; //---//

                      state.ncode = (hold & 0x0f) +
                      /*BITS(4)*/
                      4; //--- DROPBITS(4) ---//

                      hold >>>= 4;
                      bits -= 4; //---//
                      //#ifndef PKZIP_BUG_WORKAROUND

                      if (state.nlen > 286 || state.ndist > 30) {
                        strm.msg = 'too many length or distance symbols';
                        state.mode = BAD;
                        break;
                      } //#endif
                      //Tracev((stderr, "inflate:       table sizes ok\n"));


                      state.have = 0;
                      state.mode = LENLENS;

                    /* falls through */

                    case LENLENS:
                      while (state.have < state.ncode) {
                        //=== NEEDBITS(3);
                        while (bits < 3) {
                          if (have === 0) {
                            break inf_leave;
                          }

                          have--;
                          hold += input[next++] << bits;
                          bits += 8;
                        } //===//


                        state.lens[order[state.have++]] = hold & 0x07; //BITS(3);
                        //--- DROPBITS(3) ---//

                        hold >>>= 3;
                        bits -= 3; //---//
                      }

                      while (state.have < 19) {
                        state.lens[order[state.have++]] = 0;
                      } // We have separate tables & no pointers. 2 commented lines below not needed.
                      //state.next = state.codes;
                      //state.lencode = state.next;
                      // Switch to use dynamic table


                      state.lencode = state.lendyn;
                      state.lenbits = 7;
                      opts = {
                        bits: state.lenbits
                      };
                      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
                      state.lenbits = opts.bits;

                      if (ret) {
                        strm.msg = 'invalid code lengths set';
                        state.mode = BAD;
                        break;
                      } //Tracev((stderr, "inflate:       code lengths ok\n"));


                      state.have = 0;
                      state.mode = CODELENS;

                    /* falls through */

                    case CODELENS:
                      while (state.have < state.nlen + state.ndist) {
                        for (;;) {
                          here = state.lencode[hold & (1 << state.lenbits) - 1];
                          /*BITS(state.lenbits)*/

                          here_bits = here >>> 24;
                          here_op = here >>> 16 & 0xff;
                          here_val = here & 0xffff;

                          if (here_bits <= bits) {
                            break;
                          } //--- PULLBYTE() ---//


                          if (have === 0) {
                            break inf_leave;
                          }

                          have--;
                          hold += input[next++] << bits;
                          bits += 8; //---//
                        }

                        if (here_val < 16) {
                          //--- DROPBITS(here.bits) ---//
                          hold >>>= here_bits;
                          bits -= here_bits; //---//

                          state.lens[state.have++] = here_val;
                        } else {
                          if (here_val === 16) {
                            //=== NEEDBITS(here.bits + 2);
                            n = here_bits + 2;

                            while (bits < n) {
                              if (have === 0) {
                                break inf_leave;
                              }

                              have--;
                              hold += input[next++] << bits;
                              bits += 8;
                            } //===//
                            //--- DROPBITS(here.bits) ---//


                            hold >>>= here_bits;
                            bits -= here_bits; //---//

                            if (state.have === 0) {
                              strm.msg = 'invalid bit length repeat';
                              state.mode = BAD;
                              break;
                            }

                            len = state.lens[state.have - 1];
                            copy = 3 + (hold & 0x03); //BITS(2);
                            //--- DROPBITS(2) ---//

                            hold >>>= 2;
                            bits -= 2; //---//
                          } else if (here_val === 17) {
                            //=== NEEDBITS(here.bits + 3);
                            n = here_bits + 3;

                            while (bits < n) {
                              if (have === 0) {
                                break inf_leave;
                              }

                              have--;
                              hold += input[next++] << bits;
                              bits += 8;
                            } //===//
                            //--- DROPBITS(here.bits) ---//


                            hold >>>= here_bits;
                            bits -= here_bits; //---//

                            len = 0;
                            copy = 3 + (hold & 0x07); //BITS(3);
                            //--- DROPBITS(3) ---//

                            hold >>>= 3;
                            bits -= 3; //---//
                          } else {
                            //=== NEEDBITS(here.bits + 7);
                            n = here_bits + 7;

                            while (bits < n) {
                              if (have === 0) {
                                break inf_leave;
                              }

                              have--;
                              hold += input[next++] << bits;
                              bits += 8;
                            } //===//
                            //--- DROPBITS(here.bits) ---//


                            hold >>>= here_bits;
                            bits -= here_bits; //---//

                            len = 0;
                            copy = 11 + (hold & 0x7f); //BITS(7);
                            //--- DROPBITS(7) ---//

                            hold >>>= 7;
                            bits -= 7; //---//
                          }

                          if (state.have + copy > state.nlen + state.ndist) {
                            strm.msg = 'invalid bit length repeat';
                            state.mode = BAD;
                            break;
                          }

                          while (copy--) {
                            state.lens[state.have++] = len;
                          }
                        }
                      }
                      /* handle error breaks in while */


                      if (state.mode === BAD) {
                        break;
                      }
                      /* check for end-of-block code (better have one) */


                      if (state.lens[256] === 0) {
                        strm.msg = 'invalid code -- missing end-of-block';
                        state.mode = BAD;
                        break;
                      }
                      /* build code tables -- note: do not change the lenbits or distbits
                         values here (9 and 6) without reading the comments in inftrees.h
                         concerning the ENOUGH constants, which depend on those values */


                      state.lenbits = 9;
                      opts = {
                        bits: state.lenbits
                      };
                      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts); // We have separate tables & no pointers. 2 commented lines below not needed.
                      // state.next_index = opts.table_index;

                      state.lenbits = opts.bits; // state.lencode = state.next;

                      if (ret) {
                        strm.msg = 'invalid literal/lengths set';
                        state.mode = BAD;
                        break;
                      }

                      state.distbits = 6; //state.distcode.copy(state.codes);
                      // Switch to use dynamic table

                      state.distcode = state.distdyn;
                      opts = {
                        bits: state.distbits
                      };
                      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts); // We have separate tables & no pointers. 2 commented lines below not needed.
                      // state.next_index = opts.table_index;

                      state.distbits = opts.bits; // state.distcode = state.next;

                      if (ret) {
                        strm.msg = 'invalid distances set';
                        state.mode = BAD;
                        break;
                      } //Tracev((stderr, 'inflate:       codes ok\n'));


                      state.mode = LEN_;

                      if (flush === Z_TREES) {
                        break inf_leave;
                      }

                    /* falls through */

                    case LEN_:
                      state.mode = LEN;

                    /* falls through */

                    case LEN:
                      if (have >= 6 && left >= 258) {
                        //--- RESTORE() ---
                        strm.next_out = put;
                        strm.avail_out = left;
                        strm.next_in = next;
                        strm.avail_in = have;
                        state.hold = hold;
                        state.bits = bits; //---

                        inflate_fast(strm, _out); //--- LOAD() ---

                        put = strm.next_out;
                        output = strm.output;
                        left = strm.avail_out;
                        next = strm.next_in;
                        input = strm.input;
                        have = strm.avail_in;
                        hold = state.hold;
                        bits = state.bits; //---

                        if (state.mode === TYPE) {
                          state.back = -1;
                        }

                        break;
                      }

                      state.back = 0;

                      for (;;) {
                        here = state.lencode[hold & (1 << state.lenbits) - 1];
                        /*BITS(state.lenbits)*/

                        here_bits = here >>> 24;
                        here_op = here >>> 16 & 0xff;
                        here_val = here & 0xffff;

                        if (here_bits <= bits) {
                          break;
                        } //--- PULLBYTE() ---//


                        if (have === 0) {
                          break inf_leave;
                        }

                        have--;
                        hold += input[next++] << bits;
                        bits += 8; //---//
                      }

                      if (here_op && (here_op & 0xf0) === 0) {
                        last_bits = here_bits;
                        last_op = here_op;
                        last_val = here_val;

                        for (;;) {
                          here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >>
                          /*BITS(last.bits + last.op)*/
                          last_bits)];
                          here_bits = here >>> 24;
                          here_op = here >>> 16 & 0xff;
                          here_val = here & 0xffff;

                          if (last_bits + here_bits <= bits) {
                            break;
                          } //--- PULLBYTE() ---//


                          if (have === 0) {
                            break inf_leave;
                          }

                          have--;
                          hold += input[next++] << bits;
                          bits += 8; //---//
                        } //--- DROPBITS(last.bits) ---//


                        hold >>>= last_bits;
                        bits -= last_bits; //---//

                        state.back += last_bits;
                      } //--- DROPBITS(here.bits) ---//


                      hold >>>= here_bits;
                      bits -= here_bits; //---//

                      state.back += here_bits;
                      state.length = here_val;

                      if (here_op === 0) {
                        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
                        //        "inflate:         literal '%c'\n" :
                        //        "inflate:         literal 0x%02x\n", here.val));
                        state.mode = LIT;
                        break;
                      }

                      if (here_op & 32) {
                        //Tracevv((stderr, "inflate:         end of block\n"));
                        state.back = -1;
                        state.mode = TYPE;
                        break;
                      }

                      if (here_op & 64) {
                        strm.msg = 'invalid literal/length code';
                        state.mode = BAD;
                        break;
                      }

                      state.extra = here_op & 15;
                      state.mode = LENEXT;

                    /* falls through */

                    case LENEXT:
                      if (state.extra) {
                        //=== NEEDBITS(state.extra);
                        n = state.extra;

                        while (bits < n) {
                          if (have === 0) {
                            break inf_leave;
                          }

                          have--;
                          hold += input[next++] << bits;
                          bits += 8;
                        } //===//


                        state.length += hold & (1 << state.extra) - 1
                        /*BITS(state.extra)*/
                        ; //--- DROPBITS(state.extra) ---//

                        hold >>>= state.extra;
                        bits -= state.extra; //---//

                        state.back += state.extra;
                      } //Tracevv((stderr, "inflate:         length %u\n", state.length));


                      state.was = state.length;
                      state.mode = DIST;

                    /* falls through */

                    case DIST:
                      for (;;) {
                        here = state.distcode[hold & (1 << state.distbits) - 1];
                        /*BITS(state.distbits)*/

                        here_bits = here >>> 24;
                        here_op = here >>> 16 & 0xff;
                        here_val = here & 0xffff;

                        if (here_bits <= bits) {
                          break;
                        } //--- PULLBYTE() ---//


                        if (have === 0) {
                          break inf_leave;
                        }

                        have--;
                        hold += input[next++] << bits;
                        bits += 8; //---//
                      }

                      if ((here_op & 0xf0) === 0) {
                        last_bits = here_bits;
                        last_op = here_op;
                        last_val = here_val;

                        for (;;) {
                          here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >>
                          /*BITS(last.bits + last.op)*/
                          last_bits)];
                          here_bits = here >>> 24;
                          here_op = here >>> 16 & 0xff;
                          here_val = here & 0xffff;

                          if (last_bits + here_bits <= bits) {
                            break;
                          } //--- PULLBYTE() ---//


                          if (have === 0) {
                            break inf_leave;
                          }

                          have--;
                          hold += input[next++] << bits;
                          bits += 8; //---//
                        } //--- DROPBITS(last.bits) ---//


                        hold >>>= last_bits;
                        bits -= last_bits; //---//

                        state.back += last_bits;
                      } //--- DROPBITS(here.bits) ---//


                      hold >>>= here_bits;
                      bits -= here_bits; //---//

                      state.back += here_bits;

                      if (here_op & 64) {
                        strm.msg = 'invalid distance code';
                        state.mode = BAD;
                        break;
                      }

                      state.offset = here_val;
                      state.extra = here_op & 15;
                      state.mode = DISTEXT;

                    /* falls through */

                    case DISTEXT:
                      if (state.extra) {
                        //=== NEEDBITS(state.extra);
                        n = state.extra;

                        while (bits < n) {
                          if (have === 0) {
                            break inf_leave;
                          }

                          have--;
                          hold += input[next++] << bits;
                          bits += 8;
                        } //===//


                        state.offset += hold & (1 << state.extra) - 1
                        /*BITS(state.extra)*/
                        ; //--- DROPBITS(state.extra) ---//

                        hold >>>= state.extra;
                        bits -= state.extra; //---//

                        state.back += state.extra;
                      } //#ifdef INFLATE_STRICT


                      if (state.offset > state.dmax) {
                        strm.msg = 'invalid distance too far back';
                        state.mode = BAD;
                        break;
                      } //#endif
                      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));


                      state.mode = MATCH;

                    /* falls through */

                    case MATCH:
                      if (left === 0) {
                        break inf_leave;
                      }

                      copy = _out - left;

                      if (state.offset > copy) {
                        /* copy from window */
                        copy = state.offset - copy;

                        if (copy > state.whave) {
                          if (state.sane) {
                            strm.msg = 'invalid distance too far back';
                            state.mode = BAD;
                            break;
                          } // (!) This block is disabled in zlib defaults,
                          // don't enable it for binary compatibility
                          //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                          //          Trace((stderr, "inflate.c too far\n"));
                          //          copy -= state.whave;
                          //          if (copy > state.length) { copy = state.length; }
                          //          if (copy > left) { copy = left; }
                          //          left -= copy;
                          //          state.length -= copy;
                          //          do {
                          //            output[put++] = 0;
                          //          } while (--copy);
                          //          if (state.length === 0) { state.mode = LEN; }
                          //          break;
                          //#endif

                        }

                        if (copy > state.wnext) {
                          copy -= state.wnext;
                          from = state.wsize - copy;
                        } else {
                          from = state.wnext - copy;
                        }

                        if (copy > state.length) {
                          copy = state.length;
                        }

                        from_source = state.window;
                      } else {
                        /* copy from output */
                        from_source = output;
                        from = put - state.offset;
                        copy = state.length;
                      }

                      if (copy > left) {
                        copy = left;
                      }

                      left -= copy;
                      state.length -= copy;

                      do {
                        output[put++] = from_source[from++];
                      } while (--copy);

                      if (state.length === 0) {
                        state.mode = LEN;
                      }

                      break;

                    case LIT:
                      if (left === 0) {
                        break inf_leave;
                      }

                      output[put++] = state.length;
                      left--;
                      state.mode = LEN;
                      break;

                    case CHECK:
                      if (state.wrap) {
                        //=== NEEDBITS(32);
                        while (bits < 32) {
                          if (have === 0) {
                            break inf_leave;
                          }

                          have--; // Use '|' instead of '+' to make sure that result is signed

                          hold |= input[next++] << bits;
                          bits += 8;
                        } //===//


                        _out -= left;
                        strm.total_out += _out;
                        state.total += _out;

                        if (_out) {
                          strm.adler = state.check =
                          /*UPDATE(state.check, put - _out, _out);*/
                          state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);
                        }

                        _out = left; // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too

                        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
                          strm.msg = 'incorrect data check';
                          state.mode = BAD;
                          break;
                        } //=== INITBITS();


                        hold = 0;
                        bits = 0; //===//
                        //Tracev((stderr, "inflate:   check matches trailer\n"));
                      }

                      state.mode = LENGTH;

                    /* falls through */

                    case LENGTH:
                      if (state.wrap && state.flags) {
                        //=== NEEDBITS(32);
                        while (bits < 32) {
                          if (have === 0) {
                            break inf_leave;
                          }

                          have--;
                          hold += input[next++] << bits;
                          bits += 8;
                        } //===//


                        if (hold !== (state.total & 0xffffffff)) {
                          strm.msg = 'incorrect length check';
                          state.mode = BAD;
                          break;
                        } //=== INITBITS();


                        hold = 0;
                        bits = 0; //===//
                        //Tracev((stderr, "inflate:   length matches trailer\n"));
                      }

                      state.mode = DONE;

                    /* falls through */

                    case DONE:
                      ret = Z_STREAM_END;
                      break inf_leave;

                    case BAD:
                      ret = Z_DATA_ERROR;
                      break inf_leave;

                    case MEM:
                      return Z_MEM_ERROR;

                    case SYNC:
                    /* falls through */

                    default:
                      return Z_STREAM_ERROR;
                  }
                } // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

                /*
                   Return from inflate(), updating the total counts and the check value.
                   If there was no progress during the inflate() call, return a buffer
                   error.  Call updatewindow() to create and/or update the window state.
                   Note: a memory error from inflate() is non-recoverable.
                 */
                //--- RESTORE() ---


                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits; //---

                if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) {
                  if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
                }

                _in -= strm.avail_in;
                _out -= strm.avail_out;
                strm.total_in += _in;
                strm.total_out += _out;
                state.total += _out;

                if (state.wrap && _out) {
                  strm.adler = state.check =
                  /*UPDATE(state.check, strm.next_out - _out, _out);*/
                  state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);
                }

                strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);

                if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {
                  ret = Z_BUF_ERROR;
                }

                return ret;
              }

              function inflateEnd(strm) {
                if (!strm || !strm.state
                /*|| strm->zfree == (free_func)0*/
                ) {
                    return Z_STREAM_ERROR;
                  }

                var state = strm.state;

                if (state.window) {
                  state.window = null;
                }

                strm.state = null;
                return Z_OK;
              }

              function inflateGetHeader(strm, head) {
                var state;
                /* check state */

                if (!strm || !strm.state) {
                  return Z_STREAM_ERROR;
                }

                state = strm.state;

                if ((state.wrap & 2) === 0) {
                  return Z_STREAM_ERROR;
                }
                /* save header structure */


                state.head = head;
                head.done = false;
                return Z_OK;
              }

              function inflateSetDictionary(strm, dictionary) {
                var dictLength = dictionary.length;
                var state;
                var dictid;
                var ret;
                /* check state */

                if (!strm
                /* == Z_NULL */
                || !strm.state
                /* == Z_NULL */
                ) {
                    return Z_STREAM_ERROR;
                  }

                state = strm.state;

                if (state.wrap !== 0 && state.mode !== DICT) {
                  return Z_STREAM_ERROR;
                }
                /* check for correct dictionary identifier */


                if (state.mode === DICT) {
                  dictid = 1;
                  /* adler32(0, null, 0)*/

                  /* dictid = adler32(dictid, dictionary, dictLength); */

                  dictid = adler32(dictid, dictionary, dictLength, 0);

                  if (dictid !== state.check) {
                    return Z_DATA_ERROR;
                  }
                }
                /* copy dictionary to window using updatewindow(), which will amend the
                 existing dictionary if appropriate */


                ret = updatewindow(strm, dictionary, dictLength, dictLength);

                if (ret) {
                  state.mode = MEM;
                  return Z_MEM_ERROR;
                }

                state.havedict = 1; // Tracev((stderr, "inflate:   dictionary set\n"));

                return Z_OK;
              }

              exports.inflateReset = inflateReset;
              exports.inflateReset2 = inflateReset2;
              exports.inflateResetKeep = inflateResetKeep;
              exports.inflateInit = inflateInit;
              exports.inflateInit2 = inflateInit2;
              exports.inflate = inflate;
              exports.inflateEnd = inflateEnd;
              exports.inflateGetHeader = inflateGetHeader;
              exports.inflateSetDictionary = inflateSetDictionary;
              exports.inflateInfo = 'pako inflate (from Nodeca project)';
              /* Not implemented
              exports.inflateCopy = inflateCopy;
              exports.inflateGetDictionary = inflateGetDictionary;
              exports.inflateMark = inflateMark;
              exports.inflatePrime = inflatePrime;
              exports.inflateSync = inflateSync;
              exports.inflateSyncPoint = inflateSyncPoint;
              exports.inflateUndermine = inflateUndermine;
              */
            }, {
              "../utils/common": 35,
              "./adler32": 36,
              "./crc32": 38,
              "./inffast": 40,
              "./inftrees": 42
            }],
            42: [function (require, module, exports) {
              // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
              //
              // This software is provided 'as-is', without any express or implied
              // warranty. In no event will the authors be held liable for any damages
              // arising from the use of this software.
              //
              // Permission is granted to anyone to use this software for any purpose,
              // including commercial applications, and to alter it and redistribute it
              // freely, subject to the following restrictions:
              //
              // 1. The origin of this software must not be misrepresented; you must not
              //   claim that you wrote the original software. If you use this software
              //   in a product, an acknowledgment in the product documentation would be
              //   appreciated but is not required.
              // 2. Altered source versions must be plainly marked as such, and must not be
              //   misrepresented as being the original software.
              // 3. This notice may not be removed or altered from any source distribution.

              var utils = require('../utils/common');

              var MAXBITS = 15;
              var ENOUGH_LENS = 852;
              var ENOUGH_DISTS = 592; //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

              var CODES = 0;
              var LENS = 1;
              var DISTS = 2;
              var lbase = [
              /* Length codes 257..285 base */
              3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];
              var lext = [
              /* Length codes 257..285 extra */
              16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78];
              var dbase = [
              /* Distance codes 0..29 base */
              1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0];
              var dext = [
              /* Distance codes 0..29 extra */
              16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];

              module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
                var bits = opts.bits; //here = opts.here; /* table entry for duplication */

                var len = 0;
                /* a code's length in bits */

                var sym = 0;
                /* index of code symbols */

                var min = 0,
                    max = 0;
                /* minimum and maximum code lengths */

                var root = 0;
                /* number of index bits for root table */

                var curr = 0;
                /* number of index bits for current table */

                var drop = 0;
                /* code bits to drop for sub-table */

                var left = 0;
                /* number of prefix codes available */

                var used = 0;
                /* code entries in table used */

                var huff = 0;
                /* Huffman code */

                var incr;
                /* for incrementing code, index */

                var fill;
                /* index for replicating entries */

                var low;
                /* low bits for current root entry */

                var mask;
                /* mask for low root bits */

                var next;
                /* next available space in table */

                var base = null;
                /* base value table to use */

                var base_index = 0; //  var shoextra;    /* extra bits table to use */

                var end;
                /* use base and extra for symbol > end */

                var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */

                var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */

                var extra = null;
                var extra_index = 0;
                var here_bits, here_op, here_val;
                /*
                 Process a set of code lengths to create a canonical Huffman code.  The
                 code lengths are lens[0..codes-1].  Each length corresponds to the
                 symbols 0..codes-1.  The Huffman code is generated by first sorting the
                 symbols by length from short to long, and retaining the symbol order
                 for codes with equal lengths.  Then the code starts with all zero bits
                 for the first code of the shortest length, and the codes are integer
                 increments for the same length, and zeros are appended as the length
                 increases.  For the deflate format, these bits are stored backwards
                 from their more natural integer increment ordering, and so when the
                 decoding tables are built in the large loop below, the integer codes
                 are incremented backwards.
                  This routine assumes, but does not check, that all of the entries in
                 lens[] are in the range 0..MAXBITS.  The caller must assure this.
                 1..MAXBITS is interpreted as that code length.  zero means that that
                 symbol does not occur in this code.
                  The codes are sorted by computing a count of codes for each length,
                 creating from that a table of starting indices for each length in the
                 sorted table, and then entering the symbols in order in the sorted
                 table.  The sorted table is work[], with that space being provided by
                 the caller.
                  The length counts are used for other purposes as well, i.e. finding
                 the minimum and maximum length codes, determining if there are any
                 codes at all, checking for a valid set of lengths, and looking ahead
                 at length counts to determine sub-table sizes when building the
                 decoding tables.
                 */

                /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */

                for (len = 0; len <= MAXBITS; len++) {
                  count[len] = 0;
                }

                for (sym = 0; sym < codes; sym++) {
                  count[lens[lens_index + sym]]++;
                }
                /* bound code lengths, force root to be within code lengths */


                root = bits;

                for (max = MAXBITS; max >= 1; max--) {
                  if (count[max] !== 0) {
                    break;
                  }
                }

                if (root > max) {
                  root = max;
                }

                if (max === 0) {
                  /* no symbols to code at all */
                  //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
                  //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
                  //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
                  table[table_index++] = 1 << 24 | 64 << 16 | 0; //table.op[opts.table_index] = 64;
                  //table.bits[opts.table_index] = 1;
                  //table.val[opts.table_index++] = 0;

                  table[table_index++] = 1 << 24 | 64 << 16 | 0;
                  opts.bits = 1;
                  return 0;
                  /* no symbols, but wait for decoding to report error */
                }

                for (min = 1; min < max; min++) {
                  if (count[min] !== 0) {
                    break;
                  }
                }

                if (root < min) {
                  root = min;
                }
                /* check for an over-subscribed or incomplete set of lengths */


                left = 1;

                for (len = 1; len <= MAXBITS; len++) {
                  left <<= 1;
                  left -= count[len];

                  if (left < 0) {
                    return -1;
                  }
                  /* over-subscribed */

                }

                if (left > 0 && (type === CODES || max !== 1)) {
                  return -1;
                  /* incomplete set */
                }
                /* generate offsets into symbol table for each length for sorting */


                offs[1] = 0;

                for (len = 1; len < MAXBITS; len++) {
                  offs[len + 1] = offs[len] + count[len];
                }
                /* sort symbols by length, by symbol order within each length */


                for (sym = 0; sym < codes; sym++) {
                  if (lens[lens_index + sym] !== 0) {
                    work[offs[lens[lens_index + sym]]++] = sym;
                  }
                }
                /*
                 Create and fill in decoding tables.  In this loop, the table being
                 filled is at next and has curr index bits.  The code being used is huff
                 with length len.  That code is converted to an index by dropping drop
                 bits off of the bottom.  For codes where len is less than drop + curr,
                 those top drop + curr - len bits are incremented through all values to
                 fill the table with replicated entries.
                  root is the number of index bits for the root table.  When len exceeds
                 root, sub-tables are created pointed to by the root entry with an index
                 of the low root bits of huff.  This is saved in low to check for when a
                 new sub-table should be started.  drop is zero when the root table is
                 being filled, and drop is root when sub-tables are being filled.
                  When a new sub-table is needed, it is necessary to look ahead in the
                 code lengths to determine what size sub-table is needed.  The length
                 counts are used for this, and so count[] is decremented as codes are
                 entered in the tables.
                  used keeps track of how many table entries have been allocated from the
                 provided *table space.  It is checked for LENS and DIST tables against
                 the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
                 the initial root table size constants.  See the comments in inftrees.h
                 for more information.
                  sym increments through all symbols, and the loop terminates when
                 all codes of length max, i.e. all codes, have been processed.  This
                 routine permits incomplete codes, so another loop after this one fills
                 in the rest of the decoding tables with invalid code markers.
                 */

                /* set up for code type */
                // poor man optimization - use if-else instead of switch,
                // to avoid deopts in old v8


                if (type === CODES) {
                  base = extra = work;
                  /* dummy value--not used */

                  end = 19;
                } else if (type === LENS) {
                  base = lbase;
                  base_index -= 257;
                  extra = lext;
                  extra_index -= 257;
                  end = 256;
                } else {
                  /* DISTS */
                  base = dbase;
                  extra = dext;
                  end = -1;
                }
                /* initialize opts for loop */


                huff = 0;
                /* starting code */

                sym = 0;
                /* starting code symbol */

                len = min;
                /* starting code length */

                next = table_index;
                /* current table to fill in */

                curr = root;
                /* current table index bits */

                drop = 0;
                /* current bits to drop from code for index */

                low = -1;
                /* trigger new sub-table when len > root */

                used = 1 << root;
                /* use root table entries */

                mask = used - 1;
                /* mask for comparing low */

                /* check available table space */

                if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
                  return 1;
                }
                /* process all codes and make table entries */


                for (;;) {
                  /* create table entry */
                  here_bits = len - drop;

                  if (work[sym] < end) {
                    here_op = 0;
                    here_val = work[sym];
                  } else if (work[sym] > end) {
                    here_op = extra[extra_index + work[sym]];
                    here_val = base[base_index + work[sym]];
                  } else {
                    here_op = 32 + 64;
                    /* end of block */

                    here_val = 0;
                  }
                  /* replicate for those indices with low len bits equal to huff */


                  incr = 1 << len - drop;
                  fill = 1 << curr;
                  min = fill;
                  /* save offset to next table */

                  do {
                    fill -= incr;
                    table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
                  } while (fill !== 0);
                  /* backwards increment the len-bit code huff */


                  incr = 1 << len - 1;

                  while (huff & incr) {
                    incr >>= 1;
                  }

                  if (incr !== 0) {
                    huff &= incr - 1;
                    huff += incr;
                  } else {
                    huff = 0;
                  }
                  /* go to next symbol, update count, len */


                  sym++;

                  if (--count[len] === 0) {
                    if (len === max) {
                      break;
                    }

                    len = lens[lens_index + work[sym]];
                  }
                  /* create new sub-table if needed */


                  if (len > root && (huff & mask) !== low) {
                    /* if first time, transition to sub-tables */
                    if (drop === 0) {
                      drop = root;
                    }
                    /* increment past last table */


                    next += min;
                    /* here min is 1 << curr */

                    /* determine length of next table */

                    curr = len - drop;
                    left = 1 << curr;

                    while (curr + drop < max) {
                      left -= count[curr + drop];

                      if (left <= 0) {
                        break;
                      }

                      curr++;
                      left <<= 1;
                    }
                    /* check for enough space */


                    used += 1 << curr;

                    if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
                      return 1;
                    }
                    /* point entry in root table to sub-table */


                    low = huff & mask;
                    /*table.op[low] = curr;
                    table.bits[low] = root;
                    table.val[low] = next - opts.table_index;*/

                    table[low] = root << 24 | curr << 16 | next - table_index | 0;
                  }
                }
                /* fill in remaining table entry if code is incomplete (guaranteed to have
                 at most one remaining entry, since if the code is incomplete, the
                 maximum code length that was allowed to get this far is one bit) */


                if (huff !== 0) {
                  //table.op[next + huff] = 64;            /* invalid code marker */
                  //table.bits[next + huff] = len - drop;
                  //table.val[next + huff] = 0;
                  table[next + huff] = len - drop << 24 | 64 << 16 | 0;
                }
                /* set return parameters */
                //opts.table_index += used;


                opts.bits = root;
                return 0;
              };
            }, {
              "../utils/common": 35
            }],
            43: [function (require, module, exports) {
              // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
              //
              // This software is provided 'as-is', without any express or implied
              // warranty. In no event will the authors be held liable for any damages
              // arising from the use of this software.
              //
              // Permission is granted to anyone to use this software for any purpose,
              // including commercial applications, and to alter it and redistribute it
              // freely, subject to the following restrictions:
              //
              // 1. The origin of this software must not be misrepresented; you must not
              //   claim that you wrote the original software. If you use this software
              //   in a product, an acknowledgment in the product documentation would be
              //   appreciated but is not required.
              // 2. Altered source versions must be plainly marked as such, and must not be
              //   misrepresented as being the original software.
              // 3. This notice may not be removed or altered from any source distribution.

              module.exports = {
                2: 'need dictionary',

                /* Z_NEED_DICT       2  */
                1: 'stream end',

                /* Z_STREAM_END      1  */
                0: '',

                /* Z_OK              0  */
                '-1': 'file error',

                /* Z_ERRNO         (-1) */
                '-2': 'stream error',

                /* Z_STREAM_ERROR  (-2) */
                '-3': 'data error',

                /* Z_DATA_ERROR    (-3) */
                '-4': 'insufficient memory',

                /* Z_MEM_ERROR     (-4) */
                '-5': 'buffer error',

                /* Z_BUF_ERROR     (-5) */
                '-6': 'incompatible version'
                /* Z_VERSION_ERROR (-6) */

              };
            }, {}],
            44: [function (require, module, exports) {
              // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
              //
              // This software is provided 'as-is', without any express or implied
              // warranty. In no event will the authors be held liable for any damages
              // arising from the use of this software.
              //
              // Permission is granted to anyone to use this software for any purpose,
              // including commercial applications, and to alter it and redistribute it
              // freely, subject to the following restrictions:
              //
              // 1. The origin of this software must not be misrepresented; you must not
              //   claim that you wrote the original software. If you use this software
              //   in a product, an acknowledgment in the product documentation would be
              //   appreciated but is not required.
              // 2. Altered source versions must be plainly marked as such, and must not be
              //   misrepresented as being the original software.
              // 3. This notice may not be removed or altered from any source distribution.

              var utils = require('../utils/common');
              /* Public constants ==========================================================*/

              /* ===========================================================================*/
              //var Z_FILTERED          = 1;
              //var Z_HUFFMAN_ONLY      = 2;
              //var Z_RLE               = 3;


              var Z_FIXED = 4; //var Z_DEFAULT_STRATEGY  = 0;

              /* Possible values of the data_type field (though see inflate()) */

              var Z_BINARY = 0;
              var Z_TEXT = 1; //var Z_ASCII             = 1; // = Z_TEXT

              var Z_UNKNOWN = 2;
              /*============================================================================*/

              function zero(buf) {
                var len = buf.length;

                while (--len >= 0) {
                  buf[len] = 0;
                }
              } // From zutil.h


              var STORED_BLOCK = 0;
              var STATIC_TREES = 1;
              var DYN_TREES = 2;
              /* The three kinds of block type */

              var MIN_MATCH = 3;
              var MAX_MATCH = 258;
              /* The minimum and maximum match lengths */
              // From deflate.h

              /* ===========================================================================
               * Internal compression state.
               */

              var LENGTH_CODES = 29;
              /* number of length codes, not counting the special END_BLOCK code */

              var LITERALS = 256;
              /* number of literal bytes 0..255 */

              var L_CODES = LITERALS + 1 + LENGTH_CODES;
              /* number of Literal or Length codes, including the END_BLOCK code */

              var D_CODES = 30;
              /* number of distance codes */

              var BL_CODES = 19;
              /* number of codes used to transfer the bit lengths */

              var HEAP_SIZE = 2 * L_CODES + 1;
              /* maximum heap size */

              var MAX_BITS = 15;
              /* All codes must not exceed MAX_BITS bits */

              var Buf_size = 16;
              /* size of bit buffer in bi_buf */

              /* ===========================================================================
               * Constants
               */

              var MAX_BL_BITS = 7;
              /* Bit length codes must not exceed MAX_BL_BITS bits */

              var END_BLOCK = 256;
              /* end of block literal code */

              var REP_3_6 = 16;
              /* repeat previous bit length 3-6 times (2 bits of repeat count) */

              var REPZ_3_10 = 17;
              /* repeat a zero length 3-10 times  (3 bits of repeat count) */

              var REPZ_11_138 = 18;
              /* repeat a zero length 11-138 times  (7 bits of repeat count) */

              /* eslint-disable comma-spacing,array-bracket-spacing */

              var extra_lbits =
              /* extra bits for each length code */
              [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];
              var extra_dbits =
              /* extra bits for each distance code */
              [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
              var extra_blbits =
              /* extra bits for each bit length code */
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];
              var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
              /* eslint-enable comma-spacing,array-bracket-spacing */

              /* The lengths of the bit length codes are sent in order of decreasing
               * probability, to avoid transmitting the lengths for unused bit length codes.
               */

              /* ===========================================================================
               * Local data. These are initialized only once.
               */
              // We pre-fill arrays with 0 to avoid uninitialized gaps

              var DIST_CODE_LEN = 512;
              /* see definition of array dist_code below */
              // !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1

              var static_ltree = new Array((L_CODES + 2) * 2);
              zero(static_ltree);
              /* The static literal tree. Since the bit lengths are imposed, there is no
               * need for the L_CODES extra codes used during heap construction. However
               * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
               * below).
               */

              var static_dtree = new Array(D_CODES * 2);
              zero(static_dtree);
              /* The static distance tree. (Actually a trivial tree since all codes use
               * 5 bits.)
               */

              var _dist_code = new Array(DIST_CODE_LEN);

              zero(_dist_code);
              /* Distance codes. The first 256 values correspond to the distances
               * 3 .. 258, the last 256 values correspond to the top 8 bits of
               * the 15 bit distances.
               */

              var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);

              zero(_length_code);
              /* length code for each normalized match length (0 == MIN_MATCH) */

              var base_length = new Array(LENGTH_CODES);
              zero(base_length);
              /* First normalized length for each code (0 = MIN_MATCH) */

              var base_dist = new Array(D_CODES);
              zero(base_dist);
              /* First normalized distance for each code (0 = distance of 1) */

              function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
                this.static_tree = static_tree;
                /* static tree or NULL */

                this.extra_bits = extra_bits;
                /* extra bits for each code or NULL */

                this.extra_base = extra_base;
                /* base index for extra_bits */

                this.elems = elems;
                /* max number of elements in the tree */

                this.max_length = max_length;
                /* max bit length for the codes */
                // show if `static_tree` has data or dummy - needed for monomorphic objects

                this.has_stree = static_tree && static_tree.length;
              }

              var static_l_desc;
              var static_d_desc;
              var static_bl_desc;

              function TreeDesc(dyn_tree, stat_desc) {
                this.dyn_tree = dyn_tree;
                /* the dynamic tree */

                this.max_code = 0;
                /* largest code with non zero frequency */

                this.stat_desc = stat_desc;
                /* the corresponding static tree */
              }

              function d_code(dist) {
                return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
              }
              /* ===========================================================================
               * Output a short LSB first on the stream.
               * IN assertion: there is enough room in pendingBuf.
               */


              function put_short(s, w) {
                //    put_byte(s, (uch)((w) & 0xff));
                //    put_byte(s, (uch)((ush)(w) >> 8));
                s.pending_buf[s.pending++] = w & 0xff;
                s.pending_buf[s.pending++] = w >>> 8 & 0xff;
              }
              /* ===========================================================================
               * Send a value on a given number of bits.
               * IN assertion: length <= 16 and value fits in length bits.
               */


              function send_bits(s, value, length) {
                if (s.bi_valid > Buf_size - length) {
                  s.bi_buf |= value << s.bi_valid & 0xffff;
                  put_short(s, s.bi_buf);
                  s.bi_buf = value >> Buf_size - s.bi_valid;
                  s.bi_valid += length - Buf_size;
                } else {
                  s.bi_buf |= value << s.bi_valid & 0xffff;
                  s.bi_valid += length;
                }
              }

              function send_code(s, c, tree) {
                send_bits(s, tree[c * 2]
                /*.Code*/
                , tree[c * 2 + 1]
                /*.Len*/
                );
              }
              /* ===========================================================================
               * Reverse the first len bits of a code, using straightforward code (a faster
               * method would use a table)
               * IN assertion: 1 <= len <= 15
               */


              function bi_reverse(code, len) {
                var res = 0;

                do {
                  res |= code & 1;
                  code >>>= 1;
                  res <<= 1;
                } while (--len > 0);

                return res >>> 1;
              }
              /* ===========================================================================
               * Flush the bit buffer, keeping at most 7 bits in it.
               */


              function bi_flush(s) {
                if (s.bi_valid === 16) {
                  put_short(s, s.bi_buf);
                  s.bi_buf = 0;
                  s.bi_valid = 0;
                } else if (s.bi_valid >= 8) {
                  s.pending_buf[s.pending++] = s.bi_buf & 0xff;
                  s.bi_buf >>= 8;
                  s.bi_valid -= 8;
                }
              }
              /* ===========================================================================
               * Compute the optimal bit lengths for a tree and update the total bit length
               * for the current block.
               * IN assertion: the fields freq and dad are set, heap[heap_max] and
               *    above are the tree nodes sorted by increasing frequency.
               * OUT assertions: the field len is set to the optimal bit length, the
               *     array bl_count contains the frequencies for each bit length.
               *     The length opt_len is updated; static_len is also updated if stree is
               *     not null.
               */


              function gen_bitlen(s, desc) //    deflate_state *s;
              //    tree_desc *desc;    /* the tree descriptor */
              {
                var tree = desc.dyn_tree;
                var max_code = desc.max_code;
                var stree = desc.stat_desc.static_tree;
                var has_stree = desc.stat_desc.has_stree;
                var extra = desc.stat_desc.extra_bits;
                var base = desc.stat_desc.extra_base;
                var max_length = desc.stat_desc.max_length;
                var h;
                /* heap index */

                var n, m;
                /* iterate over the tree elements */

                var bits;
                /* bit length */

                var xbits;
                /* extra bits */

                var f;
                /* frequency */

                var overflow = 0;
                /* number of elements with bit length too large */

                for (bits = 0; bits <= MAX_BITS; bits++) {
                  s.bl_count[bits] = 0;
                }
                /* In a first pass, compute the optimal bit lengths (which may
                 * overflow in the case of the bit length tree).
                 */


                tree[s.heap[s.heap_max] * 2 + 1]
                /*.Len*/
                = 0;
                /* root of the heap */

                for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
                  n = s.heap[h];
                  bits = tree[tree[n * 2 + 1]
                  /*.Dad*/
                  * 2 + 1]
                  /*.Len*/
                  + 1;

                  if (bits > max_length) {
                    bits = max_length;
                    overflow++;
                  }

                  tree[n * 2 + 1]
                  /*.Len*/
                  = bits;
                  /* We overwrite tree[n].Dad which is no longer needed */

                  if (n > max_code) {
                    continue;
                  }
                  /* not a leaf node */


                  s.bl_count[bits]++;
                  xbits = 0;

                  if (n >= base) {
                    xbits = extra[n - base];
                  }

                  f = tree[n * 2]
                  /*.Freq*/
                  ;
                  s.opt_len += f * (bits + xbits);

                  if (has_stree) {
                    s.static_len += f * (stree[n * 2 + 1]
                    /*.Len*/
                    + xbits);
                  }
                }

                if (overflow === 0) {
                  return;
                } // Trace((stderr,"\nbit length overflow\n"));

                /* This happens for example on obj2 and pic of the Calgary corpus */

                /* Find the first bit length which could increase: */


                do {
                  bits = max_length - 1;

                  while (s.bl_count[bits] === 0) {
                    bits--;
                  }

                  s.bl_count[bits]--;
                  /* move one leaf down the tree */

                  s.bl_count[bits + 1] += 2;
                  /* move one overflow item as its brother */

                  s.bl_count[max_length]--;
                  /* The brother of the overflow item also moves one step up,
                   * but this does not affect bl_count[max_length]
                   */

                  overflow -= 2;
                } while (overflow > 0);
                /* Now recompute all bit lengths, scanning in increasing frequency.
                 * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
                 * lengths instead of fixing only the wrong ones. This idea is taken
                 * from 'ar' written by Haruhiko Okumura.)
                 */


                for (bits = max_length; bits !== 0; bits--) {
                  n = s.bl_count[bits];

                  while (n !== 0) {
                    m = s.heap[--h];

                    if (m > max_code) {
                      continue;
                    }

                    if (tree[m * 2 + 1]
                    /*.Len*/
                    !== bits) {
                      // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
                      s.opt_len += (bits - tree[m * 2 + 1]
                      /*.Len*/
                      ) * tree[m * 2]
                      /*.Freq*/
                      ;
                      tree[m * 2 + 1]
                      /*.Len*/
                      = bits;
                    }

                    n--;
                  }
                }
              }
              /* ===========================================================================
               * Generate the codes for a given tree and bit counts (which need not be
               * optimal).
               * IN assertion: the array bl_count contains the bit length statistics for
               * the given tree and the field len is set for all tree elements.
               * OUT assertion: the field code is set for all tree elements of non
               *     zero code length.
               */


              function gen_codes(tree, max_code, bl_count) //    ct_data *tree;             /* the tree to decorate */
              //    int max_code;              /* largest code with non zero frequency */
              //    ushf *bl_count;            /* number of codes at each bit length */
              {
                var next_code = new Array(MAX_BITS + 1);
                /* next code value for each bit length */

                var code = 0;
                /* running code value */

                var bits;
                /* bit index */

                var n;
                /* code index */

                /* The distribution counts are first used to generate the code values
                 * without bit reversal.
                 */

                for (bits = 1; bits <= MAX_BITS; bits++) {
                  next_code[bits] = code = code + bl_count[bits - 1] << 1;
                }
                /* Check that the bit counts in bl_count are consistent. The last code
                 * must be all ones.
                 */
                //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
                //        "inconsistent bit counts");
                //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));


                for (n = 0; n <= max_code; n++) {
                  var len = tree[n * 2 + 1]
                  /*.Len*/
                  ;

                  if (len === 0) {
                    continue;
                  }
                  /* Now reverse the bits */


                  tree[n * 2]
                  /*.Code*/
                  = bi_reverse(next_code[len]++, len); //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
                  //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
                }
              }
              /* ===========================================================================
               * Initialize the various 'constant' tables.
               */


              function tr_static_init() {
                var n;
                /* iterates over tree elements */

                var bits;
                /* bit counter */

                var length;
                /* length value */

                var code;
                /* code value */

                var dist;
                /* distance index */

                var bl_count = new Array(MAX_BITS + 1);
                /* number of codes at each bit length for an optimal tree */
                // do check in _tr_init()
                //if (static_init_done) return;

                /* For some embedded targets, global variables are not initialized: */

                /*#ifdef NO_INIT_GLOBAL_POINTERS
                  static_l_desc.static_tree = static_ltree;
                  static_l_desc.extra_bits = extra_lbits;
                  static_d_desc.static_tree = static_dtree;
                  static_d_desc.extra_bits = extra_dbits;
                  static_bl_desc.extra_bits = extra_blbits;
                #endif*/

                /* Initialize the mapping length (0..255) -> length code (0..28) */

                length = 0;

                for (code = 0; code < LENGTH_CODES - 1; code++) {
                  base_length[code] = length;

                  for (n = 0; n < 1 << extra_lbits[code]; n++) {
                    _length_code[length++] = code;
                  }
                } //Assert (length == 256, "tr_static_init: length != 256");

                /* Note that the length 255 (match length 258) can be represented
                 * in two different ways: code 284 + 5 bits or code 285, so we
                 * overwrite length_code[255] to use the best encoding:
                 */


                _length_code[length - 1] = code;
                /* Initialize the mapping dist (0..32K) -> dist code (0..29) */

                dist = 0;

                for (code = 0; code < 16; code++) {
                  base_dist[code] = dist;

                  for (n = 0; n < 1 << extra_dbits[code]; n++) {
                    _dist_code[dist++] = code;
                  }
                } //Assert (dist == 256, "tr_static_init: dist != 256");


                dist >>= 7;
                /* from now on, all distances are divided by 128 */

                for (; code < D_CODES; code++) {
                  base_dist[code] = dist << 7;

                  for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
                    _dist_code[256 + dist++] = code;
                  }
                } //Assert (dist == 256, "tr_static_init: 256+dist != 512");

                /* Construct the codes of the static literal tree */


                for (bits = 0; bits <= MAX_BITS; bits++) {
                  bl_count[bits] = 0;
                }

                n = 0;

                while (n <= 143) {
                  static_ltree[n * 2 + 1]
                  /*.Len*/
                  = 8;
                  n++;
                  bl_count[8]++;
                }

                while (n <= 255) {
                  static_ltree[n * 2 + 1]
                  /*.Len*/
                  = 9;
                  n++;
                  bl_count[9]++;
                }

                while (n <= 279) {
                  static_ltree[n * 2 + 1]
                  /*.Len*/
                  = 7;
                  n++;
                  bl_count[7]++;
                }

                while (n <= 287) {
                  static_ltree[n * 2 + 1]
                  /*.Len*/
                  = 8;
                  n++;
                  bl_count[8]++;
                }
                /* Codes 286 and 287 do not exist, but we must include them in the
                 * tree construction to get a canonical Huffman tree (longest code
                 * all ones)
                 */


                gen_codes(static_ltree, L_CODES + 1, bl_count);
                /* The static distance tree is trivial: */

                for (n = 0; n < D_CODES; n++) {
                  static_dtree[n * 2 + 1]
                  /*.Len*/
                  = 5;
                  static_dtree[n * 2]
                  /*.Code*/
                  = bi_reverse(n, 5);
                } // Now data ready and we can init static trees


                static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
                static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
                static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS); //static_init_done = true;
              }
              /* ===========================================================================
               * Initialize a new block.
               */


              function init_block(s) {
                var n;
                /* iterates over tree elements */

                /* Initialize the trees. */

                for (n = 0; n < L_CODES; n++) {
                  s.dyn_ltree[n * 2]
                  /*.Freq*/
                  = 0;
                }

                for (n = 0; n < D_CODES; n++) {
                  s.dyn_dtree[n * 2]
                  /*.Freq*/
                  = 0;
                }

                for (n = 0; n < BL_CODES; n++) {
                  s.bl_tree[n * 2]
                  /*.Freq*/
                  = 0;
                }

                s.dyn_ltree[END_BLOCK * 2]
                /*.Freq*/
                = 1;
                s.opt_len = s.static_len = 0;
                s.last_lit = s.matches = 0;
              }
              /* ===========================================================================
               * Flush the bit buffer and align the output on a byte boundary
               */


              function bi_windup(s) {
                if (s.bi_valid > 8) {
                  put_short(s, s.bi_buf);
                } else if (s.bi_valid > 0) {
                  //put_byte(s, (Byte)s->bi_buf);
                  s.pending_buf[s.pending++] = s.bi_buf;
                }

                s.bi_buf = 0;
                s.bi_valid = 0;
              }
              /* ===========================================================================
               * Copy a stored block, storing first the length and its
               * one's complement if requested.
               */


              function copy_block(s, buf, len, header) //DeflateState *s;
              //charf    *buf;    /* the input data */
              //unsigned len;     /* its length */
              //int      header;  /* true if block header must be written */
              {
                bi_windup(s);
                /* align on byte boundary */

                if (header) {
                  put_short(s, len);
                  put_short(s, ~len);
                } //  while (len--) {
                //    put_byte(s, *buf++);
                //  }


                utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
                s.pending += len;
              }
              /* ===========================================================================
               * Compares to subtrees, using the tree depth as tie breaker when
               * the subtrees have equal frequency. This minimizes the worst case length.
               */


              function smaller(tree, n, m, depth) {
                var _n2 = n * 2;

                var _m2 = m * 2;

                return tree[_n2]
                /*.Freq*/
                < tree[_m2]
                /*.Freq*/
                || tree[_n2]
                /*.Freq*/
                === tree[_m2]
                /*.Freq*/
                && depth[n] <= depth[m];
              }
              /* ===========================================================================
               * Restore the heap property by moving down the tree starting at node k,
               * exchanging a node with the smallest of its two sons if necessary, stopping
               * when the heap property is re-established (each father smaller than its
               * two sons).
               */


              function pqdownheap(s, tree, k) //    deflate_state *s;
              //    ct_data *tree;  /* the tree to restore */
              //    int k;               /* node to move down */
              {
                var v = s.heap[k];
                var j = k << 1;
                /* left son of k */

                while (j <= s.heap_len) {
                  /* Set j to the smallest of the two sons: */
                  if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
                    j++;
                  }
                  /* Exit if v is smaller than both sons */


                  if (smaller(tree, v, s.heap[j], s.depth)) {
                    break;
                  }
                  /* Exchange v with the smallest son */


                  s.heap[k] = s.heap[j];
                  k = j;
                  /* And continue down the tree, setting j to the left son of k */

                  j <<= 1;
                }

                s.heap[k] = v;
              } // inlined manually
              // var SMALLEST = 1;

              /* ===========================================================================
               * Send the block data compressed using the given Huffman trees
               */


              function compress_block(s, ltree, dtree) //    deflate_state *s;
              //    const ct_data *ltree; /* literal tree */
              //    const ct_data *dtree; /* distance tree */
              {
                var dist;
                /* distance of matched string */

                var lc;
                /* match length or unmatched char (if dist == 0) */

                var lx = 0;
                /* running index in l_buf */

                var code;
                /* the code to send */

                var extra;
                /* number of extra bits to send */

                if (s.last_lit !== 0) {
                  do {
                    dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];
                    lc = s.pending_buf[s.l_buf + lx];
                    lx++;

                    if (dist === 0) {
                      send_code(s, lc, ltree);
                      /* send a literal byte */
                      //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
                    } else {
                      /* Here, lc is the match length - MIN_MATCH */
                      code = _length_code[lc];
                      send_code(s, code + LITERALS + 1, ltree);
                      /* send the length code */

                      extra = extra_lbits[code];

                      if (extra !== 0) {
                        lc -= base_length[code];
                        send_bits(s, lc, extra);
                        /* send the extra length bits */
                      }

                      dist--;
                      /* dist is now the match distance - 1 */

                      code = d_code(dist); //Assert (code < D_CODES, "bad d_code");

                      send_code(s, code, dtree);
                      /* send the distance code */

                      extra = extra_dbits[code];

                      if (extra !== 0) {
                        dist -= base_dist[code];
                        send_bits(s, dist, extra);
                        /* send the extra distance bits */
                      }
                    }
                    /* literal or match pair ? */

                    /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
                    //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
                    //       "pendingBuf overflow");

                  } while (lx < s.last_lit);
                }

                send_code(s, END_BLOCK, ltree);
              }
              /* ===========================================================================
               * Construct one Huffman tree and assigns the code bit strings and lengths.
               * Update the total bit length for the current block.
               * IN assertion: the field freq is set for all tree elements.
               * OUT assertions: the fields len and code are set to the optimal bit length
               *     and corresponding code. The length opt_len is updated; static_len is
               *     also updated if stree is not null. The field max_code is set.
               */


              function build_tree(s, desc) //    deflate_state *s;
              //    tree_desc *desc; /* the tree descriptor */
              {
                var tree = desc.dyn_tree;
                var stree = desc.stat_desc.static_tree;
                var has_stree = desc.stat_desc.has_stree;
                var elems = desc.stat_desc.elems;
                var n, m;
                /* iterate over heap elements */

                var max_code = -1;
                /* largest code with non zero frequency */

                var node;
                /* new node being created */

                /* Construct the initial heap, with least frequent element in
                 * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
                 * heap[0] is not used.
                 */

                s.heap_len = 0;
                s.heap_max = HEAP_SIZE;

                for (n = 0; n < elems; n++) {
                  if (tree[n * 2]
                  /*.Freq*/
                  !== 0) {
                    s.heap[++s.heap_len] = max_code = n;
                    s.depth[n] = 0;
                  } else {
                    tree[n * 2 + 1]
                    /*.Len*/
                    = 0;
                  }
                }
                /* The pkzip format requires that at least one distance code exists,
                 * and that at least one bit should be sent even if there is only one
                 * possible code. So to avoid special checks later on we force at least
                 * two codes of non zero frequency.
                 */


                while (s.heap_len < 2) {
                  node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
                  tree[node * 2]
                  /*.Freq*/
                  = 1;
                  s.depth[node] = 0;
                  s.opt_len--;

                  if (has_stree) {
                    s.static_len -= stree[node * 2 + 1]
                    /*.Len*/
                    ;
                  }
                  /* node is 0 or 1 so it does not have extra bits */

                }

                desc.max_code = max_code;
                /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
                 * establish sub-heaps of increasing lengths:
                 */

                for (n = s.heap_len >> 1
                /*int /2*/
                ; n >= 1; n--) {
                  pqdownheap(s, tree, n);
                }
                /* Construct the Huffman tree by repeatedly combining the least two
                 * frequent nodes.
                 */


                node = elems;
                /* next internal node of the tree */

                do {
                  //pqremove(s, tree, n);  /* n = node of least frequency */

                  /*** pqremove ***/
                  n = s.heap[1
                  /*SMALLEST*/
                  ];
                  s.heap[1
                  /*SMALLEST*/
                  ] = s.heap[s.heap_len--];
                  pqdownheap(s, tree, 1
                  /*SMALLEST*/
                  );
                  /***/

                  m = s.heap[1
                  /*SMALLEST*/
                  ];
                  /* m = node of next least frequency */

                  s.heap[--s.heap_max] = n;
                  /* keep the nodes sorted by frequency */

                  s.heap[--s.heap_max] = m;
                  /* Create a new node father of n and m */

                  tree[node * 2]
                  /*.Freq*/
                  = tree[n * 2]
                  /*.Freq*/
                  + tree[m * 2]
                  /*.Freq*/
                  ;
                  s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
                  tree[n * 2 + 1]
                  /*.Dad*/
                  = tree[m * 2 + 1]
                  /*.Dad*/
                  = node;
                  /* and insert the new node in the heap */

                  s.heap[1
                  /*SMALLEST*/
                  ] = node++;
                  pqdownheap(s, tree, 1
                  /*SMALLEST*/
                  );
                } while (s.heap_len >= 2);

                s.heap[--s.heap_max] = s.heap[1
                /*SMALLEST*/
                ];
                /* At this point, the fields freq and dad are set. We can now
                 * generate the bit lengths.
                 */

                gen_bitlen(s, desc);
                /* The field len is now set, we can generate the bit codes */

                gen_codes(tree, max_code, s.bl_count);
              }
              /* ===========================================================================
               * Scan a literal or distance tree to determine the frequencies of the codes
               * in the bit length tree.
               */


              function scan_tree(s, tree, max_code) //    deflate_state *s;
              //    ct_data *tree;   /* the tree to be scanned */
              //    int max_code;    /* and its largest code of non zero frequency */
              {
                var n;
                /* iterates over all tree elements */

                var prevlen = -1;
                /* last emitted length */

                var curlen;
                /* length of current code */

                var nextlen = tree[0 * 2 + 1]
                /*.Len*/
                ;
                /* length of next code */

                var count = 0;
                /* repeat count of the current code */

                var max_count = 7;
                /* max repeat count */

                var min_count = 4;
                /* min repeat count */

                if (nextlen === 0) {
                  max_count = 138;
                  min_count = 3;
                }

                tree[(max_code + 1) * 2 + 1]
                /*.Len*/
                = 0xffff;
                /* guard */

                for (n = 0; n <= max_code; n++) {
                  curlen = nextlen;
                  nextlen = tree[(n + 1) * 2 + 1]
                  /*.Len*/
                  ;

                  if (++count < max_count && curlen === nextlen) {
                    continue;
                  } else if (count < min_count) {
                    s.bl_tree[curlen * 2]
                    /*.Freq*/
                    += count;
                  } else if (curlen !== 0) {
                    if (curlen !== prevlen) {
                      s.bl_tree[curlen * 2] /*.Freq*/++;
                    }

                    s.bl_tree[REP_3_6 * 2] /*.Freq*/++;
                  } else if (count <= 10) {
                    s.bl_tree[REPZ_3_10 * 2] /*.Freq*/++;
                  } else {
                    s.bl_tree[REPZ_11_138 * 2] /*.Freq*/++;
                  }

                  count = 0;
                  prevlen = curlen;

                  if (nextlen === 0) {
                    max_count = 138;
                    min_count = 3;
                  } else if (curlen === nextlen) {
                    max_count = 6;
                    min_count = 3;
                  } else {
                    max_count = 7;
                    min_count = 4;
                  }
                }
              }
              /* ===========================================================================
               * Send a literal or distance tree in compressed form, using the codes in
               * bl_tree.
               */


              function send_tree(s, tree, max_code) //    deflate_state *s;
              //    ct_data *tree; /* the tree to be scanned */
              //    int max_code;       /* and its largest code of non zero frequency */
              {
                var n;
                /* iterates over all tree elements */

                var prevlen = -1;
                /* last emitted length */

                var curlen;
                /* length of current code */

                var nextlen = tree[0 * 2 + 1]
                /*.Len*/
                ;
                /* length of next code */

                var count = 0;
                /* repeat count of the current code */

                var max_count = 7;
                /* max repeat count */

                var min_count = 4;
                /* min repeat count */

                /* tree[max_code+1].Len = -1; */

                /* guard already set */

                if (nextlen === 0) {
                  max_count = 138;
                  min_count = 3;
                }

                for (n = 0; n <= max_code; n++) {
                  curlen = nextlen;
                  nextlen = tree[(n + 1) * 2 + 1]
                  /*.Len*/
                  ;

                  if (++count < max_count && curlen === nextlen) {
                    continue;
                  } else if (count < min_count) {
                    do {
                      send_code(s, curlen, s.bl_tree);
                    } while (--count !== 0);
                  } else if (curlen !== 0) {
                    if (curlen !== prevlen) {
                      send_code(s, curlen, s.bl_tree);
                      count--;
                    } //Assert(count >= 3 && count <= 6, " 3_6?");


                    send_code(s, REP_3_6, s.bl_tree);
                    send_bits(s, count - 3, 2);
                  } else if (count <= 10) {
                    send_code(s, REPZ_3_10, s.bl_tree);
                    send_bits(s, count - 3, 3);
                  } else {
                    send_code(s, REPZ_11_138, s.bl_tree);
                    send_bits(s, count - 11, 7);
                  }

                  count = 0;
                  prevlen = curlen;

                  if (nextlen === 0) {
                    max_count = 138;
                    min_count = 3;
                  } else if (curlen === nextlen) {
                    max_count = 6;
                    min_count = 3;
                  } else {
                    max_count = 7;
                    min_count = 4;
                  }
                }
              }
              /* ===========================================================================
               * Construct the Huffman tree for the bit lengths and return the index in
               * bl_order of the last bit length code to send.
               */


              function build_bl_tree(s) {
                var max_blindex;
                /* index of last bit length code of non zero freq */

                /* Determine the bit length frequencies for literal and distance trees */

                scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
                scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
                /* Build the bit length tree: */

                build_tree(s, s.bl_desc);
                /* opt_len now includes the length of the tree representations, except
                 * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
                 */

                /* Determine the number of bit length codes to send. The pkzip format
                 * requires that at least 4 bit length codes be sent. (appnote.txt says
                 * 3 but the actual value used is 4.)
                 */

                for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
                  if (s.bl_tree[bl_order[max_blindex] * 2 + 1]
                  /*.Len*/
                  !== 0) {
                    break;
                  }
                }
                /* Update opt_len to include the bit length tree and counts */


                s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4; //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
                //        s->opt_len, s->static_len));

                return max_blindex;
              }
              /* ===========================================================================
               * Send the header for a block using dynamic Huffman trees: the counts, the
               * lengths of the bit length codes, the literal tree and the distance tree.
               * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
               */


              function send_all_trees(s, lcodes, dcodes, blcodes) //    deflate_state *s;
              //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
              {
                var rank;
                /* index in bl_order */
                //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
                //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
                //        "too many codes");
                //Tracev((stderr, "\nbl counts: "));

                send_bits(s, lcodes - 257, 5);
                /* not +255 as stated in appnote.txt */

                send_bits(s, dcodes - 1, 5);
                send_bits(s, blcodes - 4, 4);
                /* not -3 as stated in appnote.txt */

                for (rank = 0; rank < blcodes; rank++) {
                  //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
                  send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]
                  /*.Len*/
                  , 3);
                } //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));


                send_tree(s, s.dyn_ltree, lcodes - 1);
                /* literal tree */
                //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

                send_tree(s, s.dyn_dtree, dcodes - 1);
                /* distance tree */
                //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
              }
              /* ===========================================================================
               * Check if the data type is TEXT or BINARY, using the following algorithm:
               * - TEXT if the two conditions below are satisfied:
               *    a) There are no non-portable control characters belonging to the
               *       "black list" (0..6, 14..25, 28..31).
               *    b) There is at least one printable character belonging to the
               *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
               * - BINARY otherwise.
               * - The following partially-portable control characters form a
               *   "gray list" that is ignored in this detection algorithm:
               *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
               * IN assertion: the fields Freq of dyn_ltree are set.
               */


              function detect_data_type(s) {
                /* black_mask is the bit mask of black-listed bytes
                 * set bits 0..6, 14..25, and 28..31
                 * 0xf3ffc07f = binary 11110011111111111100000001111111
                 */
                var black_mask = 0xf3ffc07f;
                var n;
                /* Check for non-textual ("black-listed") bytes. */

                for (n = 0; n <= 31; n++, black_mask >>>= 1) {
                  if (black_mask & 1 && s.dyn_ltree[n * 2]
                  /*.Freq*/
                  !== 0) {
                    return Z_BINARY;
                  }
                }
                /* Check for textual ("white-listed") bytes. */


                if (s.dyn_ltree[9 * 2]
                /*.Freq*/
                !== 0 || s.dyn_ltree[10 * 2]
                /*.Freq*/
                !== 0 || s.dyn_ltree[13 * 2]
                /*.Freq*/
                !== 0) {
                  return Z_TEXT;
                }

                for (n = 32; n < LITERALS; n++) {
                  if (s.dyn_ltree[n * 2]
                  /*.Freq*/
                  !== 0) {
                    return Z_TEXT;
                  }
                }
                /* There are no "black-listed" or "white-listed" bytes:
                 * this stream either is empty or has tolerated ("gray-listed") bytes only.
                 */


                return Z_BINARY;
              }

              var static_init_done = false;
              /* ===========================================================================
               * Initialize the tree data structures for a new zlib stream.
               */

              function _tr_init(s) {
                if (!static_init_done) {
                  tr_static_init();
                  static_init_done = true;
                }

                s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
                s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
                s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
                s.bi_buf = 0;
                s.bi_valid = 0;
                /* Initialize the first block of the first file: */

                init_block(s);
              }
              /* ===========================================================================
               * Send a stored block
               */


              function _tr_stored_block(s, buf, stored_len, last) //DeflateState *s;
              //charf *buf;       /* input block */
              //ulg stored_len;   /* length of input block */
              //int last;         /* one if this is the last block for a file */
              {
                send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
                /* send block type */

                copy_block(s, buf, stored_len, true);
                /* with header */
              }
              /* ===========================================================================
               * Send one empty static block to give enough lookahead for inflate.
               * This takes 10 bits, of which 7 may remain in the bit buffer.
               */


              function _tr_align(s) {
                send_bits(s, STATIC_TREES << 1, 3);
                send_code(s, END_BLOCK, static_ltree);
                bi_flush(s);
              }
              /* ===========================================================================
               * Determine the best encoding for the current block: dynamic trees, static
               * trees or store, and output the encoded block to the zip file.
               */


              function _tr_flush_block(s, buf, stored_len, last) //DeflateState *s;
              //charf *buf;       /* input block, or NULL if too old */
              //ulg stored_len;   /* length of input block */
              //int last;         /* one if this is the last block for a file */
              {
                var opt_lenb, static_lenb;
                /* opt_len and static_len in bytes */

                var max_blindex = 0;
                /* index of last bit length code of non zero freq */

                /* Build the Huffman trees unless a stored block is forced */

                if (s.level > 0) {
                  /* Check if the file is binary or text */
                  if (s.strm.data_type === Z_UNKNOWN) {
                    s.strm.data_type = detect_data_type(s);
                  }
                  /* Construct the literal and distance trees */


                  build_tree(s, s.l_desc); // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
                  //        s->static_len));

                  build_tree(s, s.d_desc); // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
                  //        s->static_len));

                  /* At this point, opt_len and static_len are the total bit lengths of
                   * the compressed block data, excluding the tree representations.
                   */

                  /* Build the bit length tree for the above two trees, and get the index
                   * in bl_order of the last bit length code to send.
                   */

                  max_blindex = build_bl_tree(s);
                  /* Determine the best encoding. Compute the block lengths in bytes. */

                  opt_lenb = s.opt_len + 3 + 7 >>> 3;
                  static_lenb = s.static_len + 3 + 7 >>> 3; // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
                  //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
                  //        s->last_lit));

                  if (static_lenb <= opt_lenb) {
                    opt_lenb = static_lenb;
                  }
                } else {
                  // Assert(buf != (char*)0, "lost buf");
                  opt_lenb = static_lenb = stored_len + 5;
                  /* force a stored block */
                }

                if (stored_len + 4 <= opt_lenb && buf !== -1) {
                  /* 4: two words for the lengths */

                  /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
                   * Otherwise we can't have processed more than WSIZE input bytes since
                   * the last block flush, because compression would have been
                   * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
                   * transform a block into a stored block.
                   */
                  _tr_stored_block(s, buf, stored_len, last);
                } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
                  send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
                  compress_block(s, static_ltree, static_dtree);
                } else {
                  send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
                  send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
                  compress_block(s, s.dyn_ltree, s.dyn_dtree);
                } // Assert (s->compressed_len == s->bits_sent, "bad compressed size");

                /* The above check is made mod 2^32, for files larger than 512 MB
                 * and uLong implemented on 32 bits.
                 */


                init_block(s);

                if (last) {
                  bi_windup(s);
                } // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
                //       s->compressed_len-7*last));

              }
              /* ===========================================================================
               * Save the match info and tally the frequency counts. Return true if
               * the current block must be flushed.
               */


              function _tr_tally(s, dist, lc) //    deflate_state *s;
              //    unsigned dist;  /* distance of matched string */
              //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
              {
                //var out_length, in_length, dcode;
                s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 0xff;
                s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;
                s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
                s.last_lit++;

                if (dist === 0) {
                  /* lc is the unmatched char */
                  s.dyn_ltree[lc * 2] /*.Freq*/++;
                } else {
                  s.matches++;
                  /* Here, lc is the match length - MIN_MATCH */

                  dist--;
                  /* dist = match distance - 1 */
                  //Assert((ush)dist < (ush)MAX_DIST(s) &&
                  //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
                  //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

                  s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2] /*.Freq*/++;
                  s.dyn_dtree[d_code(dist) * 2] /*.Freq*/++;
                } // (!) This block is disabled in zlib defaults,
                // don't enable it for binary compatibility
                //#ifdef TRUNCATE_BLOCK
                //  /* Try to guess if it is profitable to stop the current block here */
                //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
                //    /* Compute an upper bound for the compressed length */
                //    out_length = s.last_lit*8;
                //    in_length = s.strstart - s.block_start;
                //
                //    for (dcode = 0; dcode < D_CODES; dcode++) {
                //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
                //    }
                //    out_length >>>= 3;
                //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
                //    //       s->last_lit, in_length, out_length,
                //    //       100L - out_length*100L/in_length));
                //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
                //      return true;
                //    }
                //  }
                //#endif


                return s.last_lit === s.lit_bufsize - 1;
                /* We avoid equality with lit_bufsize because of wraparound at 64K
                 * on 16 bit machines and because stored blocks are restricted to
                 * 64K-1 bytes.
                 */
              }

              exports._tr_init = _tr_init;
              exports._tr_stored_block = _tr_stored_block;
              exports._tr_flush_block = _tr_flush_block;
              exports._tr_tally = _tr_tally;
              exports._tr_align = _tr_align;
            }, {
              "../utils/common": 35
            }],
            45: [function (require, module, exports) {
              // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
              //
              // This software is provided 'as-is', without any express or implied
              // warranty. In no event will the authors be held liable for any damages
              // arising from the use of this software.
              //
              // Permission is granted to anyone to use this software for any purpose,
              // including commercial applications, and to alter it and redistribute it
              // freely, subject to the following restrictions:
              //
              // 1. The origin of this software must not be misrepresented; you must not
              //   claim that you wrote the original software. If you use this software
              //   in a product, an acknowledgment in the product documentation would be
              //   appreciated but is not required.
              // 2. Altered source versions must be plainly marked as such, and must not be
              //   misrepresented as being the original software.
              // 3. This notice may not be removed or altered from any source distribution.

              function ZStream() {
                /* next input byte */
                this.input = null; // JS specific, because we have no pointers

                this.next_in = 0;
                /* number of bytes available at input */

                this.avail_in = 0;
                /* total number of input bytes read so far */

                this.total_in = 0;
                /* next output byte should be put there */

                this.output = null; // JS specific, because we have no pointers

                this.next_out = 0;
                /* remaining free space at output */

                this.avail_out = 0;
                /* total number of bytes output so far */

                this.total_out = 0;
                /* last error message, NULL if no error */

                this.msg = ''
                /*Z_NULL*/
                ;
                /* not visible by applications */

                this.state = null;
                /* best guess about the data type: binary or text */

                this.data_type = 2
                /*Z_UNKNOWN*/
                ;
                /* adler32 value of the uncompressed data */

                this.adler = 0;
              }

              module.exports = ZStream;
            }, {}],
            46: [function (require, module, exports) {
              (function (process) {

                if (!process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
                  module.exports = nextTick;
                } else {
                  module.exports = process.nextTick;
                }

                function nextTick(fn, arg1, arg2, arg3) {
                  if (typeof fn !== 'function') {
                    throw new TypeError('"callback" argument must be a function');
                  }

                  var len = arguments.length;
                  var args, i;

                  switch (len) {
                    case 0:
                    case 1:
                      return process.nextTick(fn);

                    case 2:
                      return process.nextTick(function afterTickOne() {
                        fn.call(null, arg1);
                      });

                    case 3:
                      return process.nextTick(function afterTickTwo() {
                        fn.call(null, arg1, arg2);
                      });

                    case 4:
                      return process.nextTick(function afterTickThree() {
                        fn.call(null, arg1, arg2, arg3);
                      });

                    default:
                      args = new Array(len - 1);
                      i = 0;

                      while (i < args.length) {
                        args[i++] = arguments[i];
                      }

                      return process.nextTick(function afterTick() {
                        fn.apply(null, args);
                      });
                  }
                }
              }).call(this, require('_process'));
            }, {
              "_process": 47
            }],
            47: [function (require, module, exports) {
              // shim for using process in browser
              var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
              // don't break things.  But we need to wrap it in a try catch in case it is
              // wrapped in strict mode code which doesn't define any globals.  It's inside a
              // function because try/catches deoptimize in certain engines.

              var cachedSetTimeout;
              var cachedClearTimeout;

              function defaultSetTimout() {
                throw new Error('setTimeout has not been defined');
              }

              function defaultClearTimeout() {
                throw new Error('clearTimeout has not been defined');
              }

              (function () {
                try {
                  if (typeof setTimeout === 'function') {
                    cachedSetTimeout = setTimeout;
                  } else {
                    cachedSetTimeout = defaultSetTimout;
                  }
                } catch (e) {
                  cachedSetTimeout = defaultSetTimout;
                }

                try {
                  if (typeof clearTimeout === 'function') {
                    cachedClearTimeout = clearTimeout;
                  } else {
                    cachedClearTimeout = defaultClearTimeout;
                  }
                } catch (e) {
                  cachedClearTimeout = defaultClearTimeout;
                }
              })();

              function runTimeout(fun) {
                if (cachedSetTimeout === setTimeout) {
                  //normal enviroments in sane situations
                  return setTimeout(fun, 0);
                } // if setTimeout wasn't available but was latter defined


                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                  cachedSetTimeout = setTimeout;
                  return setTimeout(fun, 0);
                }

                try {
                  // when when somebody has screwed with setTimeout but no I.E. maddness
                  return cachedSetTimeout(fun, 0);
                } catch (e) {
                  try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                    return cachedSetTimeout.call(null, fun, 0);
                  } catch (e) {
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                    return cachedSetTimeout.call(this, fun, 0);
                  }
                }
              }

              function runClearTimeout(marker) {
                if (cachedClearTimeout === clearTimeout) {
                  //normal enviroments in sane situations
                  return clearTimeout(marker);
                } // if clearTimeout wasn't available but was latter defined


                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                  cachedClearTimeout = clearTimeout;
                  return clearTimeout(marker);
                }

                try {
                  // when when somebody has screwed with setTimeout but no I.E. maddness
                  return cachedClearTimeout(marker);
                } catch (e) {
                  try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                    return cachedClearTimeout.call(null, marker);
                  } catch (e) {
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                    // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                    return cachedClearTimeout.call(this, marker);
                  }
                }
              }

              var queue = [];
              var draining = false;
              var currentQueue;
              var queueIndex = -1;

              function cleanUpNextTick() {
                if (!draining || !currentQueue) {
                  return;
                }

                draining = false;

                if (currentQueue.length) {
                  queue = currentQueue.concat(queue);
                } else {
                  queueIndex = -1;
                }

                if (queue.length) {
                  drainQueue();
                }
              }

              function drainQueue() {
                if (draining) {
                  return;
                }

                var timeout = runTimeout(cleanUpNextTick);
                draining = true;
                var len = queue.length;

                while (len) {
                  currentQueue = queue;
                  queue = [];

                  while (++queueIndex < len) {
                    if (currentQueue) {
                      currentQueue[queueIndex].run();
                    }
                  }

                  queueIndex = -1;
                  len = queue.length;
                }

                currentQueue = null;
                draining = false;
                runClearTimeout(timeout);
              }

              process.nextTick = function (fun) {
                var args = new Array(arguments.length - 1);

                if (arguments.length > 1) {
                  for (var i = 1; i < arguments.length; i++) {
                    args[i - 1] = arguments[i];
                  }
                }

                queue.push(new Item(fun, args));

                if (queue.length === 1 && !draining) {
                  runTimeout(drainQueue);
                }
              }; // v8 likes predictible objects


              function Item(fun, array) {
                this.fun = fun;
                this.array = array;
              }

              Item.prototype.run = function () {
                this.fun.apply(null, this.array);
              };

              process.title = 'browser';
              process.browser = true;
              process.env = {};
              process.argv = [];
              process.version = ''; // empty string to avoid regexp issues

              process.versions = {};

              function noop() {}

              process.on = noop;
              process.addListener = noop;
              process.once = noop;
              process.off = noop;
              process.removeListener = noop;
              process.removeAllListeners = noop;
              process.emit = noop;
              process.prependListener = noop;
              process.prependOnceListener = noop;

              process.listeners = function (name) {
                return [];
              };

              process.binding = function (name) {
                throw new Error('process.binding is not supported');
              };

              process.cwd = function () {
                return '/';
              };

              process.chdir = function (dir) {
                throw new Error('process.chdir is not supported');
              };

              process.umask = function () {
                return 0;
              };
            }, {}],
            48: [function (require, module, exports) {
              module.exports = require('./lib/_stream_duplex.js');
            }, {
              "./lib/_stream_duplex.js": 49
            }],
            49: [function (require, module, exports) {
              /*<replacement>*/

              var processNextTick = require('process-nextick-args');
              /*</replacement>*/

              /*<replacement>*/


              var objectKeys = Object.keys || function (obj) {
                var keys = [];

                for (var key in obj) {
                  keys.push(key);
                }

                return keys;
              };
              /*</replacement>*/


              module.exports = Duplex;
              /*<replacement>*/

              var util = require('core-util-is');

              util.inherits = require('inherits');
              /*</replacement>*/

              var Readable = require('./_stream_readable');

              var Writable = require('./_stream_writable');

              util.inherits(Duplex, Readable);
              var keys = objectKeys(Writable.prototype);

              for (var v = 0; v < keys.length; v++) {
                var method = keys[v];
                if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
              }

              function Duplex(options) {
                if (!(this instanceof Duplex)) return new Duplex(options);
                Readable.call(this, options);
                Writable.call(this, options);
                if (options && options.readable === false) this.readable = false;
                if (options && options.writable === false) this.writable = false;
                this.allowHalfOpen = true;
                if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
                this.once('end', onend);
              } // the no-half-open enforcer


              function onend() {
                // if we allow half-open state, or if the writable side ended,
                // then we're ok.
                if (this.allowHalfOpen || this._writableState.ended) return; // no more data can be written.
                // But allow more writes to happen in this tick.

                processNextTick(onEndNT, this);
              }

              function onEndNT(self) {
                self.end();
              }

              Object.defineProperty(Duplex.prototype, 'destroyed', {
                get: function () {
                  if (this._readableState === undefined || this._writableState === undefined) {
                    return false;
                  }

                  return this._readableState.destroyed && this._writableState.destroyed;
                },
                set: function (value) {
                  // we ignore the value if the stream
                  // has not been initialized yet
                  if (this._readableState === undefined || this._writableState === undefined) {
                    return;
                  } // backward compatibility, the user is explicitly
                  // managing destroyed


                  this._readableState.destroyed = value;
                  this._writableState.destroyed = value;
                }
              });

              Duplex.prototype._destroy = function (err, cb) {
                this.push(null);
                this.end();
                processNextTick(cb, err);
              };
            }, {
              "./_stream_readable": 51,
              "./_stream_writable": 53,
              "core-util-is": 29,
              "inherits": 32,
              "process-nextick-args": 46
            }],
            50: [function (require, module, exports) {

              module.exports = PassThrough;

              var Transform = require('./_stream_transform');
              /*<replacement>*/


              var util = require('core-util-is');

              util.inherits = require('inherits');
              /*</replacement>*/

              util.inherits(PassThrough, Transform);

              function PassThrough(options) {
                if (!(this instanceof PassThrough)) return new PassThrough(options);
                Transform.call(this, options);
              }

              PassThrough.prototype._transform = function (chunk, encoding, cb) {
                cb(null, chunk);
              };
            }, {
              "./_stream_transform": 52,
              "core-util-is": 29,
              "inherits": 32
            }],
            51: [function (require, module, exports) {
              (function (process, global) {
                /*<replacement>*/

                var processNextTick = require('process-nextick-args');
                /*</replacement>*/


                module.exports = Readable;
                /*<replacement>*/

                var isArray = require('isarray');
                /*</replacement>*/

                /*<replacement>*/


                var Duplex;
                /*</replacement>*/

                Readable.ReadableState = ReadableState;
                /*<replacement>*/

                var EE = require('events').EventEmitter;

                var EElistenerCount = function (emitter, type) {
                  return emitter.listeners(type).length;
                };
                /*</replacement>*/

                /*<replacement>*/


                var Stream = require('./internal/streams/stream');
                /*</replacement>*/
                // TODO(bmeurer): Change this back to const once hole checks are
                // properly optimized away early in Ignition+TurboFan.

                /*<replacement>*/


                var Buffer = require('safe-buffer').Buffer;

                var OurUint8Array = global.Uint8Array || function () {};

                function _uint8ArrayToBuffer(chunk) {
                  return Buffer.from(chunk);
                }

                function _isUint8Array(obj) {
                  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
                }
                /*</replacement>*/

                /*<replacement>*/


                var util = require('core-util-is');

                util.inherits = require('inherits');
                /*</replacement>*/

                /*<replacement>*/

                var debugUtil = require('util');

                var debug = void 0;

                if (debugUtil && debugUtil.debuglog) {
                  debug = debugUtil.debuglog('stream');
                } else {
                  debug = function () {};
                }
                /*</replacement>*/


                var BufferList = require('./internal/streams/BufferList');

                var destroyImpl = require('./internal/streams/destroy');

                var StringDecoder;
                util.inherits(Readable, Stream);
                var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

                function prependListener(emitter, event, fn) {
                  // Sadly this is not cacheable as some libraries bundle their own
                  // event emitter implementation with them.
                  if (typeof emitter.prependListener === 'function') {
                    return emitter.prependListener(event, fn);
                  } else {
                    // This is a hack to make sure that our error handler is attached before any
                    // userland ones.  NEVER DO THIS. This is here only because this code needs
                    // to continue to work with older versions of Node.js that do not include
                    // the prependListener() method. The goal is to eventually remove this hack.
                    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
                  }
                }

                function ReadableState(options, stream) {
                  Duplex = Duplex || require('./_stream_duplex');
                  options = options || {}; // object stream flag. Used to make read(n) ignore n and to
                  // make all the buffer merging and length checks go away

                  this.objectMode = !!options.objectMode;
                  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
                  // Note: 0 is a valid value, means "don't call _read preemptively ever"

                  var hwm = options.highWaterMark;
                  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
                  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.

                  this.highWaterMark = Math.floor(this.highWaterMark); // A linked list is used to store data chunks instead of an array because the
                  // linked list can remove elements from the beginning faster than
                  // array.shift()

                  this.buffer = new BufferList();
                  this.length = 0;
                  this.pipes = null;
                  this.pipesCount = 0;
                  this.flowing = null;
                  this.ended = false;
                  this.endEmitted = false;
                  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
                  // immediately, or on a later tick.  We set this to true at first, because
                  // any actions that shouldn't happen until "later" should generally also
                  // not happen before the first read call.

                  this.sync = true; // whenever we return null, then we set a flag to say
                  // that we're awaiting a 'readable' event emission.

                  this.needReadable = false;
                  this.emittedReadable = false;
                  this.readableListening = false;
                  this.resumeScheduled = false; // has it been destroyed

                  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
                  // encoding is 'binary' so we have to make this configurable.
                  // Everything else in the universe uses 'utf8', though.

                  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

                  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

                  this.readingMore = false;
                  this.decoder = null;
                  this.encoding = null;

                  if (options.encoding) {
                    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
                    this.decoder = new StringDecoder(options.encoding);
                    this.encoding = options.encoding;
                  }
                }

                function Readable(options) {
                  Duplex = Duplex || require('./_stream_duplex');
                  if (!(this instanceof Readable)) return new Readable(options);
                  this._readableState = new ReadableState(options, this); // legacy

                  this.readable = true;

                  if (options) {
                    if (typeof options.read === 'function') this._read = options.read;
                    if (typeof options.destroy === 'function') this._destroy = options.destroy;
                  }

                  Stream.call(this);
                }

                Object.defineProperty(Readable.prototype, 'destroyed', {
                  get: function () {
                    if (this._readableState === undefined) {
                      return false;
                    }

                    return this._readableState.destroyed;
                  },
                  set: function (value) {
                    // we ignore the value if the stream
                    // has not been initialized yet
                    if (!this._readableState) {
                      return;
                    } // backward compatibility, the user is explicitly
                    // managing destroyed


                    this._readableState.destroyed = value;
                  }
                });
                Readable.prototype.destroy = destroyImpl.destroy;
                Readable.prototype._undestroy = destroyImpl.undestroy;

                Readable.prototype._destroy = function (err, cb) {
                  this.push(null);
                  cb(err);
                }; // Manually shove something into the read() buffer.
                // This returns true if the highWaterMark has not been hit yet,
                // similar to how Writable.write() returns true if you should
                // write() some more.


                Readable.prototype.push = function (chunk, encoding) {
                  var state = this._readableState;
                  var skipChunkCheck;

                  if (!state.objectMode) {
                    if (typeof chunk === 'string') {
                      encoding = encoding || state.defaultEncoding;

                      if (encoding !== state.encoding) {
                        chunk = Buffer.from(chunk, encoding);
                        encoding = '';
                      }

                      skipChunkCheck = true;
                    }
                  } else {
                    skipChunkCheck = true;
                  }

                  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
                }; // Unshift should *always* be something directly out of read()


                Readable.prototype.unshift = function (chunk) {
                  return readableAddChunk(this, chunk, null, true, false);
                };

                function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
                  var state = stream._readableState;

                  if (chunk === null) {
                    state.reading = false;
                    onEofChunk(stream, state);
                  } else {
                    var er;
                    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

                    if (er) {
                      stream.emit('error', er);
                    } else if (state.objectMode || chunk && chunk.length > 0) {
                      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                        chunk = _uint8ArrayToBuffer(chunk);
                      }

                      if (addToFront) {
                        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
                      } else if (state.ended) {
                        stream.emit('error', new Error('stream.push() after EOF'));
                      } else {
                        state.reading = false;

                        if (state.decoder && !encoding) {
                          chunk = state.decoder.write(chunk);
                          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
                        } else {
                          addChunk(stream, state, chunk, false);
                        }
                      }
                    } else if (!addToFront) {
                      state.reading = false;
                    }
                  }

                  return needMoreData(state);
                }

                function addChunk(stream, state, chunk, addToFront) {
                  if (state.flowing && state.length === 0 && !state.sync) {
                    stream.emit('data', chunk);
                    stream.read(0);
                  } else {
                    // update the buffer info.
                    state.length += state.objectMode ? 1 : chunk.length;
                    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
                    if (state.needReadable) emitReadable(stream);
                  }

                  maybeReadMore(stream, state);
                }

                function chunkInvalid(state, chunk) {
                  var er;

                  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                    er = new TypeError('Invalid non-string/buffer chunk');
                  }

                  return er;
                } // if it's past the high water mark, we can push in some more.
                // Also, if we have no data yet, we can stand some
                // more bytes.  This is to work around cases where hwm=0,
                // such as the repl.  Also, if the push() triggered a
                // readable event, and the user called read(largeNumber) such that
                // needReadable was set, then we ought to push more, so that another
                // 'readable' event will be triggered.


                function needMoreData(state) {
                  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
                }

                Readable.prototype.isPaused = function () {
                  return this._readableState.flowing === false;
                }; // backwards compatibility.


                Readable.prototype.setEncoding = function (enc) {
                  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
                  this._readableState.decoder = new StringDecoder(enc);
                  this._readableState.encoding = enc;
                  return this;
                }; // Don't raise the hwm > 8MB


                var MAX_HWM = 0x800000;

                function computeNewHighWaterMark(n) {
                  if (n >= MAX_HWM) {
                    n = MAX_HWM;
                  } else {
                    // Get the next highest power of 2 to prevent increasing hwm excessively in
                    // tiny amounts
                    n--;
                    n |= n >>> 1;
                    n |= n >>> 2;
                    n |= n >>> 4;
                    n |= n >>> 8;
                    n |= n >>> 16;
                    n++;
                  }

                  return n;
                } // This function is designed to be inlinable, so please take care when making
                // changes to the function body.


                function howMuchToRead(n, state) {
                  if (n <= 0 || state.length === 0 && state.ended) return 0;
                  if (state.objectMode) return 1;

                  if (n !== n) {
                    // Only flow one buffer at a time
                    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
                  } // If we're asking for more than the current hwm, then raise the hwm.


                  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
                  if (n <= state.length) return n; // Don't have enough

                  if (!state.ended) {
                    state.needReadable = true;
                    return 0;
                  }

                  return state.length;
                } // you can override either this method, or the async _read(n) below.


                Readable.prototype.read = function (n) {
                  debug('read', n);
                  n = parseInt(n, 10);
                  var state = this._readableState;
                  var nOrig = n;
                  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
                  // already have a bunch of data in the buffer, then just trigger
                  // the 'readable' event and move on.

                  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                    debug('read: emitReadable', state.length, state.ended);
                    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
                    return null;
                  }

                  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

                  if (n === 0 && state.ended) {
                    if (state.length === 0) endReadable(this);
                    return null;
                  } // All the actual chunk generation logic needs to be
                  // *below* the call to _read.  The reason is that in certain
                  // synthetic stream cases, such as passthrough streams, _read
                  // may be a completely synchronous operation which may change
                  // the state of the read buffer, providing enough data when
                  // before there was *not* enough.
                  //
                  // So, the steps are:
                  // 1. Figure out what the state of things will be after we do
                  // a read from the buffer.
                  //
                  // 2. If that resulting state will trigger a _read, then call _read.
                  // Note that this may be asynchronous, or synchronous.  Yes, it is
                  // deeply ugly to write APIs this way, but that still doesn't mean
                  // that the Readable class should behave improperly, as streams are
                  // designed to be sync/async agnostic.
                  // Take note if the _read call is sync or async (ie, if the read call
                  // has returned yet), so that we know whether or not it's safe to emit
                  // 'readable' etc.
                  //
                  // 3. Actually pull the requested chunks out of the buffer and return.
                  // if we need a readable event, then we need to do some reading.


                  var doRead = state.needReadable;
                  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

                  if (state.length === 0 || state.length - n < state.highWaterMark) {
                    doRead = true;
                    debug('length less than watermark', doRead);
                  } // however, if we've ended, then there's no point, and if we're already
                  // reading, then it's unnecessary.


                  if (state.ended || state.reading) {
                    doRead = false;
                    debug('reading or ended', doRead);
                  } else if (doRead) {
                    debug('do read');
                    state.reading = true;
                    state.sync = true; // if the length is currently zero, then we *need* a readable event.

                    if (state.length === 0) state.needReadable = true; // call internal read method

                    this._read(state.highWaterMark);

                    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
                    // and we need to re-evaluate how much data we can return to the user.

                    if (!state.reading) n = howMuchToRead(nOrig, state);
                  }

                  var ret;
                  if (n > 0) ret = fromList(n, state);else ret = null;

                  if (ret === null) {
                    state.needReadable = true;
                    n = 0;
                  } else {
                    state.length -= n;
                  }

                  if (state.length === 0) {
                    // If we have nothing in the buffer, then we want to know
                    // as soon as we *do* get something into the buffer.
                    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

                    if (nOrig !== n && state.ended) endReadable(this);
                  }

                  if (ret !== null) this.emit('data', ret);
                  return ret;
                };

                function onEofChunk(stream, state) {
                  if (state.ended) return;

                  if (state.decoder) {
                    var chunk = state.decoder.end();

                    if (chunk && chunk.length) {
                      state.buffer.push(chunk);
                      state.length += state.objectMode ? 1 : chunk.length;
                    }
                  }

                  state.ended = true; // emit 'readable' now to make sure it gets picked up.

                  emitReadable(stream);
                } // Don't emit readable right away in sync mode, because this can trigger
                // another read() call => stack overflow.  This way, it might trigger
                // a nextTick recursion warning, but that's not so bad.


                function emitReadable(stream) {
                  var state = stream._readableState;
                  state.needReadable = false;

                  if (!state.emittedReadable) {
                    debug('emitReadable', state.flowing);
                    state.emittedReadable = true;
                    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
                  }
                }

                function emitReadable_(stream) {
                  debug('emit readable');
                  stream.emit('readable');
                  flow(stream);
                } // at this point, the user has presumably seen the 'readable' event,
                // and called read() to consume some data.  that may have triggered
                // in turn another _read(n) call, in which case reading = true if
                // it's in progress.
                // However, if we're not ended, or reading, and the length < hwm,
                // then go ahead and try to read some more preemptively.


                function maybeReadMore(stream, state) {
                  if (!state.readingMore) {
                    state.readingMore = true;
                    processNextTick(maybeReadMore_, stream, state);
                  }
                }

                function maybeReadMore_(stream, state) {
                  var len = state.length;

                  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                    debug('maybeReadMore read 0');
                    stream.read(0);
                    if (len === state.length) // didn't get any data, stop spinning.
                      break;else len = state.length;
                  }

                  state.readingMore = false;
                } // abstract method.  to be overridden in specific implementation classes.
                // call cb(er, data) where data is <= n in length.
                // for virtual (non-string, non-buffer) streams, "length" is somewhat
                // arbitrary, and perhaps not very meaningful.


                Readable.prototype._read = function (n) {
                  this.emit('error', new Error('_read() is not implemented'));
                };

                Readable.prototype.pipe = function (dest, pipeOpts) {
                  var src = this;
                  var state = this._readableState;

                  switch (state.pipesCount) {
                    case 0:
                      state.pipes = dest;
                      break;

                    case 1:
                      state.pipes = [state.pipes, dest];
                      break;

                    default:
                      state.pipes.push(dest);
                      break;
                  }

                  state.pipesCount += 1;
                  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
                  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
                  var endFn = doEnd ? onend : unpipe;
                  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);
                  dest.on('unpipe', onunpipe);

                  function onunpipe(readable, unpipeInfo) {
                    debug('onunpipe');

                    if (readable === src) {
                      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                        unpipeInfo.hasUnpiped = true;
                        cleanup();
                      }
                    }
                  }

                  function onend() {
                    debug('onend');
                    dest.end();
                  } // when the dest drains, it reduces the awaitDrain counter
                  // on the source.  This would be more elegant with a .once()
                  // handler in flow(), but adding and removing repeatedly is
                  // too slow.


                  var ondrain = pipeOnDrain(src);
                  dest.on('drain', ondrain);
                  var cleanedUp = false;

                  function cleanup() {
                    debug('cleanup'); // cleanup event handlers once the pipe is broken

                    dest.removeListener('close', onclose);
                    dest.removeListener('finish', onfinish);
                    dest.removeListener('drain', ondrain);
                    dest.removeListener('error', onerror);
                    dest.removeListener('unpipe', onunpipe);
                    src.removeListener('end', onend);
                    src.removeListener('end', unpipe);
                    src.removeListener('data', ondata);
                    cleanedUp = true; // if the reader is waiting for a drain event from this
                    // specific writer, then it would cause it to never start
                    // flowing again.
                    // So, if this is awaiting a drain, then we just call it now.
                    // If we don't know, then assume that we are waiting for one.

                    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
                  } // If the user pushes more data while we're writing to dest then we'll end up
                  // in ondata again. However, we only want to increase awaitDrain once because
                  // dest will only emit one 'drain' event for the multiple writes.
                  // => Introduce a guard on increasing awaitDrain.


                  var increasedAwaitDrain = false;
                  src.on('data', ondata);

                  function ondata(chunk) {
                    debug('ondata');
                    increasedAwaitDrain = false;
                    var ret = dest.write(chunk);

                    if (false === ret && !increasedAwaitDrain) {
                      // If the user unpiped during `dest.write()`, it is possible
                      // to get stuck in a permanently paused state if that write
                      // also returned false.
                      // => Check whether `dest` is still a piping destination.
                      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                        debug('false write response, pause', src._readableState.awaitDrain);
                        src._readableState.awaitDrain++;
                        increasedAwaitDrain = true;
                      }

                      src.pause();
                    }
                  } // if the dest has an error, then stop piping into it.
                  // however, don't suppress the throwing behavior for this.


                  function onerror(er) {
                    debug('onerror', er);
                    unpipe();
                    dest.removeListener('error', onerror);
                    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
                  } // Make sure our error handler is attached before userland ones.


                  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

                  function onclose() {
                    dest.removeListener('finish', onfinish);
                    unpipe();
                  }

                  dest.once('close', onclose);

                  function onfinish() {
                    debug('onfinish');
                    dest.removeListener('close', onclose);
                    unpipe();
                  }

                  dest.once('finish', onfinish);

                  function unpipe() {
                    debug('unpipe');
                    src.unpipe(dest);
                  } // tell the dest that it's being piped to


                  dest.emit('pipe', src); // start the flow if it hasn't been started already.

                  if (!state.flowing) {
                    debug('pipe resume');
                    src.resume();
                  }

                  return dest;
                };

                function pipeOnDrain(src) {
                  return function () {
                    var state = src._readableState;
                    debug('pipeOnDrain', state.awaitDrain);
                    if (state.awaitDrain) state.awaitDrain--;

                    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
                      state.flowing = true;
                      flow(src);
                    }
                  };
                }

                Readable.prototype.unpipe = function (dest) {
                  var state = this._readableState;
                  var unpipeInfo = {
                    hasUnpiped: false
                  }; // if we're not piping anywhere, then do nothing.

                  if (state.pipesCount === 0) return this; // just one destination.  most common case.

                  if (state.pipesCount === 1) {
                    // passed in one, but it's not the right one.
                    if (dest && dest !== state.pipes) return this;
                    if (!dest) dest = state.pipes; // got a match.

                    state.pipes = null;
                    state.pipesCount = 0;
                    state.flowing = false;
                    if (dest) dest.emit('unpipe', this, unpipeInfo);
                    return this;
                  } // slow case. multiple pipe destinations.


                  if (!dest) {
                    // remove all.
                    var dests = state.pipes;
                    var len = state.pipesCount;
                    state.pipes = null;
                    state.pipesCount = 0;
                    state.flowing = false;

                    for (var i = 0; i < len; i++) {
                      dests[i].emit('unpipe', this, unpipeInfo);
                    }

                    return this;
                  } // try to find the right one.


                  var index = indexOf(state.pipes, dest);
                  if (index === -1) return this;
                  state.pipes.splice(index, 1);
                  state.pipesCount -= 1;
                  if (state.pipesCount === 1) state.pipes = state.pipes[0];
                  dest.emit('unpipe', this, unpipeInfo);
                  return this;
                }; // set up data events if they are asked for
                // Ensure readable listeners eventually get something


                Readable.prototype.on = function (ev, fn) {
                  var res = Stream.prototype.on.call(this, ev, fn);

                  if (ev === 'data') {
                    // Start flowing on next tick if stream isn't explicitly paused
                    if (this._readableState.flowing !== false) this.resume();
                  } else if (ev === 'readable') {
                    var state = this._readableState;

                    if (!state.endEmitted && !state.readableListening) {
                      state.readableListening = state.needReadable = true;
                      state.emittedReadable = false;

                      if (!state.reading) {
                        processNextTick(nReadingNextTick, this);
                      } else if (state.length) {
                        emitReadable(this);
                      }
                    }
                  }

                  return res;
                };

                Readable.prototype.addListener = Readable.prototype.on;

                function nReadingNextTick(self) {
                  debug('readable nexttick read 0');
                  self.read(0);
                } // pause() and resume() are remnants of the legacy readable stream API
                // If the user uses them, then switch into old mode.


                Readable.prototype.resume = function () {
                  var state = this._readableState;

                  if (!state.flowing) {
                    debug('resume');
                    state.flowing = true;
                    resume(this, state);
                  }

                  return this;
                };

                function resume(stream, state) {
                  if (!state.resumeScheduled) {
                    state.resumeScheduled = true;
                    processNextTick(resume_, stream, state);
                  }
                }

                function resume_(stream, state) {
                  if (!state.reading) {
                    debug('resume read 0');
                    stream.read(0);
                  }

                  state.resumeScheduled = false;
                  state.awaitDrain = 0;
                  stream.emit('resume');
                  flow(stream);
                  if (state.flowing && !state.reading) stream.read(0);
                }

                Readable.prototype.pause = function () {
                  debug('call pause flowing=%j', this._readableState.flowing);

                  if (false !== this._readableState.flowing) {
                    debug('pause');
                    this._readableState.flowing = false;
                    this.emit('pause');
                  }

                  return this;
                };

                function flow(stream) {
                  var state = stream._readableState;
                  debug('flow', state.flowing);

                  while (state.flowing && stream.read() !== null) {}
                } // wrap an old-style stream as the async data source.
                // This is *not* part of the readable stream interface.
                // It is an ugly unfortunate mess of history.


                Readable.prototype.wrap = function (stream) {
                  var state = this._readableState;
                  var paused = false;
                  var self = this;
                  stream.on('end', function () {
                    debug('wrapped end');

                    if (state.decoder && !state.ended) {
                      var chunk = state.decoder.end();
                      if (chunk && chunk.length) self.push(chunk);
                    }

                    self.push(null);
                  });
                  stream.on('data', function (chunk) {
                    debug('wrapped data');
                    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

                    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
                    var ret = self.push(chunk);

                    if (!ret) {
                      paused = true;
                      stream.pause();
                    }
                  }); // proxy all the other methods.
                  // important when wrapping filters and duplexes.

                  for (var i in stream) {
                    if (this[i] === undefined && typeof stream[i] === 'function') {
                      this[i] = function (method) {
                        return function () {
                          return stream[method].apply(stream, arguments);
                        };
                      }(i);
                    }
                  } // proxy certain important events.


                  for (var n = 0; n < kProxyEvents.length; n++) {
                    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
                  } // when we try to consume some more bytes, simply unpause the
                  // underlying stream.


                  self._read = function (n) {
                    debug('wrapped _read', n);

                    if (paused) {
                      paused = false;
                      stream.resume();
                    }
                  };

                  return self;
                }; // exposed for testing purposes only.


                Readable._fromList = fromList; // Pluck off n bytes from an array of buffers.
                // Length is the combined lengths of all the buffers in the list.
                // This function is designed to be inlinable, so please take care when making
                // changes to the function body.

                function fromList(n, state) {
                  // nothing buffered
                  if (state.length === 0) return null;
                  var ret;
                  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
                    // read it all, truncate the list
                    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
                    state.buffer.clear();
                  } else {
                    // read part of list
                    ret = fromListPartial(n, state.buffer, state.decoder);
                  }
                  return ret;
                } // Extracts only enough buffered data to satisfy the amount requested.
                // This function is designed to be inlinable, so please take care when making
                // changes to the function body.


                function fromListPartial(n, list, hasStrings) {
                  var ret;

                  if (n < list.head.data.length) {
                    // slice is the same for buffers and strings
                    ret = list.head.data.slice(0, n);
                    list.head.data = list.head.data.slice(n);
                  } else if (n === list.head.data.length) {
                    // first chunk is a perfect match
                    ret = list.shift();
                  } else {
                    // result spans more than one buffer
                    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
                  }

                  return ret;
                } // Copies a specified amount of characters from the list of buffered data
                // chunks.
                // This function is designed to be inlinable, so please take care when making
                // changes to the function body.


                function copyFromBufferString(n, list) {
                  var p = list.head;
                  var c = 1;
                  var ret = p.data;
                  n -= ret.length;

                  while (p = p.next) {
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;else ret += str.slice(0, n);
                    n -= nb;

                    if (n === 0) {
                      if (nb === str.length) {
                        ++c;
                        if (p.next) list.head = p.next;else list.head = list.tail = null;
                      } else {
                        list.head = p;
                        p.data = str.slice(nb);
                      }

                      break;
                    }

                    ++c;
                  }

                  list.length -= c;
                  return ret;
                } // Copies a specified amount of bytes from the list of buffered data chunks.
                // This function is designed to be inlinable, so please take care when making
                // changes to the function body.


                function copyFromBuffer(n, list) {
                  var ret = Buffer.allocUnsafe(n);
                  var p = list.head;
                  var c = 1;
                  p.data.copy(ret);
                  n -= p.data.length;

                  while (p = p.next) {
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;

                    if (n === 0) {
                      if (nb === buf.length) {
                        ++c;
                        if (p.next) list.head = p.next;else list.head = list.tail = null;
                      } else {
                        list.head = p;
                        p.data = buf.slice(nb);
                      }

                      break;
                    }

                    ++c;
                  }

                  list.length -= c;
                  return ret;
                }

                function endReadable(stream) {
                  var state = stream._readableState; // If we get here before consuming all the bytes, then that is a
                  // bug in node.  Should never happen.

                  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

                  if (!state.endEmitted) {
                    state.ended = true;
                    processNextTick(endReadableNT, state, stream);
                  }
                }

                function endReadableNT(state, stream) {
                  // Check that we didn't get one last unshift.
                  if (!state.endEmitted && state.length === 0) {
                    state.endEmitted = true;
                    stream.readable = false;
                    stream.emit('end');
                  }
                }

                function indexOf(xs, x) {
                  for (var i = 0, l = xs.length; i < l; i++) {
                    if (xs[i] === x) return i;
                  }

                  return -1;
                }
              }).call(this, require('_process'), typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            }, {
              "./_stream_duplex": 49,
              "./internal/streams/BufferList": 54,
              "./internal/streams/destroy": 55,
              "./internal/streams/stream": 56,
              "_process": 47,
              "core-util-is": 29,
              "events": 30,
              "inherits": 32,
              "isarray": 34,
              "process-nextick-args": 46,
              "safe-buffer": 62,
              "string_decoder/": 57,
              "util": 25
            }],
            52: [function (require, module, exports) {

              module.exports = Transform;

              var Duplex = require('./_stream_duplex');
              /*<replacement>*/


              var util = require('core-util-is');

              util.inherits = require('inherits');
              /*</replacement>*/

              util.inherits(Transform, Duplex);

              function TransformState(stream) {
                this.afterTransform = function (er, data) {
                  return afterTransform(stream, er, data);
                };

                this.needTransform = false;
                this.transforming = false;
                this.writecb = null;
                this.writechunk = null;
                this.writeencoding = null;
              }

              function afterTransform(stream, er, data) {
                var ts = stream._transformState;
                ts.transforming = false;
                var cb = ts.writecb;

                if (!cb) {
                  return stream.emit('error', new Error('write callback called multiple times'));
                }

                ts.writechunk = null;
                ts.writecb = null;
                if (data !== null && data !== undefined) stream.push(data);
                cb(er);
                var rs = stream._readableState;
                rs.reading = false;

                if (rs.needReadable || rs.length < rs.highWaterMark) {
                  stream._read(rs.highWaterMark);
                }
              }

              function Transform(options) {
                if (!(this instanceof Transform)) return new Transform(options);
                Duplex.call(this, options);
                this._transformState = new TransformState(this);
                var stream = this; // start out asking for a readable event once data is transformed.

                this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
                // that Readable wants before the first _read call, so unset the
                // sync guard flag.

                this._readableState.sync = false;

                if (options) {
                  if (typeof options.transform === 'function') this._transform = options.transform;
                  if (typeof options.flush === 'function') this._flush = options.flush;
                } // When the writable side finishes, then flush out anything remaining.


                this.once('prefinish', function () {
                  if (typeof this._flush === 'function') this._flush(function (er, data) {
                    done(stream, er, data);
                  });else done(stream);
                });
              }

              Transform.prototype.push = function (chunk, encoding) {
                this._transformState.needTransform = false;
                return Duplex.prototype.push.call(this, chunk, encoding);
              }; // This is the part where you do stuff!
              // override this function in implementation classes.
              // 'chunk' is an input chunk.
              //
              // Call `push(newChunk)` to pass along transformed output
              // to the readable side.  You may call 'push' zero or more times.
              //
              // Call `cb(err)` when you are done with this chunk.  If you pass
              // an error, then that'll put the hurt on the whole operation.  If you
              // never call cb(), then you'll never get another chunk.


              Transform.prototype._transform = function (chunk, encoding, cb) {
                throw new Error('_transform() is not implemented');
              };

              Transform.prototype._write = function (chunk, encoding, cb) {
                var ts = this._transformState;
                ts.writecb = cb;
                ts.writechunk = chunk;
                ts.writeencoding = encoding;

                if (!ts.transforming) {
                  var rs = this._readableState;
                  if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
                }
              }; // Doesn't matter what the args are here.
              // _transform does all the work.
              // That we got here means that the readable side wants more data.


              Transform.prototype._read = function (n) {
                var ts = this._transformState;

                if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
                  ts.transforming = true;

                  this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
                } else {
                  // mark that we need a transform, so that any data that comes in
                  // will get processed, now that we've asked for it.
                  ts.needTransform = true;
                }
              };

              Transform.prototype._destroy = function (err, cb) {
                var _this = this;

                Duplex.prototype._destroy.call(this, err, function (err2) {
                  cb(err2);

                  _this.emit('close');
                });
              };

              function done(stream, er, data) {
                if (er) return stream.emit('error', er);
                if (data !== null && data !== undefined) stream.push(data); // if there's nothing in the write buffer, then that means
                // that nothing more will ever be provided

                var ws = stream._writableState;
                var ts = stream._transformState;
                if (ws.length) throw new Error('Calling transform done when ws.length != 0');
                if (ts.transforming) throw new Error('Calling transform done when still transforming');
                return stream.push(null);
              }
            }, {
              "./_stream_duplex": 49,
              "core-util-is": 29,
              "inherits": 32
            }],
            53: [function (require, module, exports) {
              (function (process, global) {
                /*<replacement>*/

                var processNextTick = require('process-nextick-args');
                /*</replacement>*/


                module.exports = Writable;
                // there will be only 2 of these for each stream


                function CorkedRequest(state) {
                  var _this = this;

                  this.next = null;
                  this.entry = null;

                  this.finish = function () {
                    onCorkedFinish(_this, state);
                  };
                }
                /* </replacement> */

                /*<replacement>*/


                var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
                /*</replacement>*/

                /*<replacement>*/

                var Duplex;
                /*</replacement>*/

                Writable.WritableState = WritableState;
                /*<replacement>*/

                var util = require('core-util-is');

                util.inherits = require('inherits');
                /*</replacement>*/

                /*<replacement>*/

                var internalUtil = {
                  deprecate: require('util-deprecate')
                };
                /*</replacement>*/

                /*<replacement>*/

                var Stream = require('./internal/streams/stream');
                /*</replacement>*/

                /*<replacement>*/


                var Buffer = require('safe-buffer').Buffer;

                var OurUint8Array = global.Uint8Array || function () {};

                function _uint8ArrayToBuffer(chunk) {
                  return Buffer.from(chunk);
                }

                function _isUint8Array(obj) {
                  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
                }
                /*</replacement>*/


                var destroyImpl = require('./internal/streams/destroy');

                util.inherits(Writable, Stream);

                function nop() {}

                function WritableState(options, stream) {
                  Duplex = Duplex || require('./_stream_duplex');
                  options = options || {}; // object stream flag to indicate whether or not this stream
                  // contains buffers or objects.

                  this.objectMode = !!options.objectMode;
                  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
                  // Note: 0 is a valid value, means that we always return false if
                  // the entire buffer is not flushed immediately on write()

                  var hwm = options.highWaterMark;
                  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
                  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.

                  this.highWaterMark = Math.floor(this.highWaterMark); // if _final has been called

                  this.finalCalled = false; // drain event flag.

                  this.needDrain = false; // at the start of calling end()

                  this.ending = false; // when end() has been called, and returned

                  this.ended = false; // when 'finish' is emitted

                  this.finished = false; // has it been destroyed

                  this.destroyed = false; // should we decode strings into buffers before passing to _write?
                  // this is here so that some node-core streams can optimize string
                  // handling at a lower level.

                  var noDecode = options.decodeStrings === false;
                  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
                  // encoding is 'binary' so we have to make this configurable.
                  // Everything else in the universe uses 'utf8', though.

                  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
                  // of how much we're waiting to get pushed to some underlying
                  // socket or file.

                  this.length = 0; // a flag to see when we're in the middle of a write.

                  this.writing = false; // when true all writes will be buffered until .uncork() call

                  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
                  // or on a later tick.  We set this to true at first, because any
                  // actions that shouldn't happen until "later" should generally also
                  // not happen before the first write call.

                  this.sync = true; // a flag to know if we're processing previously buffered items, which
                  // may call the _write() callback in the same tick, so that we don't
                  // end up in an overlapped onwrite situation.

                  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

                  this.onwrite = function (er) {
                    onwrite(stream, er);
                  }; // the callback that the user supplies to write(chunk,encoding,cb)


                  this.writecb = null; // the amount that is being written when _write is called.

                  this.writelen = 0;
                  this.bufferedRequest = null;
                  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
                  // this must be 0 before 'finish' can be emitted

                  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
                  // This is relevant for synchronous Transform streams

                  this.prefinished = false; // True if the error was already emitted and should not be thrown again

                  this.errorEmitted = false; // count buffered requests

                  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
                  // one allocated and free to use, and we maintain at most two

                  this.corkedRequestsFree = new CorkedRequest(this);
                }

                WritableState.prototype.getBuffer = function getBuffer() {
                  var current = this.bufferedRequest;
                  var out = [];

                  while (current) {
                    out.push(current);
                    current = current.next;
                  }

                  return out;
                };

                (function () {
                  try {
                    Object.defineProperty(WritableState.prototype, 'buffer', {
                      get: internalUtil.deprecate(function () {
                        return this.getBuffer();
                      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
                    });
                  } catch (_) {}
                })(); // Test _writableState for inheritance to account for Duplex streams,
                // whose prototype chain only points to Readable.


                var realHasInstance;

                if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
                  realHasInstance = Function.prototype[Symbol.hasInstance];
                  Object.defineProperty(Writable, Symbol.hasInstance, {
                    value: function (object) {
                      if (realHasInstance.call(this, object)) return true;
                      return object && object._writableState instanceof WritableState;
                    }
                  });
                } else {
                  realHasInstance = function (object) {
                    return object instanceof this;
                  };
                }

                function Writable(options) {
                  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
                  // `realHasInstance` is necessary because using plain `instanceof`
                  // would return false, as no `_writableState` property is attached.
                  // Trying to use the custom `instanceof` for Writable here will also break the
                  // Node.js LazyTransform implementation, which has a non-trivial getter for
                  // `_writableState` that would lead to infinite recursion.

                  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
                    return new Writable(options);
                  }

                  this._writableState = new WritableState(options, this); // legacy.

                  this.writable = true;

                  if (options) {
                    if (typeof options.write === 'function') this._write = options.write;
                    if (typeof options.writev === 'function') this._writev = options.writev;
                    if (typeof options.destroy === 'function') this._destroy = options.destroy;
                    if (typeof options.final === 'function') this._final = options.final;
                  }

                  Stream.call(this);
                } // Otherwise people can pipe Writable streams, which is just wrong.


                Writable.prototype.pipe = function () {
                  this.emit('error', new Error('Cannot pipe, not readable'));
                };

                function writeAfterEnd(stream, cb) {
                  var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb

                  stream.emit('error', er);
                  processNextTick(cb, er);
                } // Checks that a user-supplied chunk is valid, especially for the particular
                // mode the stream is in. Currently this means that `null` is never accepted
                // and undefined/non-string values are only allowed in object mode.


                function validChunk(stream, state, chunk, cb) {
                  var valid = true;
                  var er = false;

                  if (chunk === null) {
                    er = new TypeError('May not write null values to stream');
                  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                    er = new TypeError('Invalid non-string/buffer chunk');
                  }

                  if (er) {
                    stream.emit('error', er);
                    processNextTick(cb, er);
                    valid = false;
                  }

                  return valid;
                }

                Writable.prototype.write = function (chunk, encoding, cb) {
                  var state = this._writableState;
                  var ret = false;
                  var isBuf = _isUint8Array(chunk) && !state.objectMode;

                  if (isBuf && !Buffer.isBuffer(chunk)) {
                    chunk = _uint8ArrayToBuffer(chunk);
                  }

                  if (typeof encoding === 'function') {
                    cb = encoding;
                    encoding = null;
                  }

                  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
                  if (typeof cb !== 'function') cb = nop;
                  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
                    state.pendingcb++;
                    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
                  }
                  return ret;
                };

                Writable.prototype.cork = function () {
                  var state = this._writableState;
                  state.corked++;
                };

                Writable.prototype.uncork = function () {
                  var state = this._writableState;

                  if (state.corked) {
                    state.corked--;
                    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
                  }
                };

                Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
                  // node::ParseEncoding() requires lower case.
                  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
                  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
                  this._writableState.defaultEncoding = encoding;
                  return this;
                };

                function decodeChunk(state, chunk, encoding) {
                  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
                    chunk = Buffer.from(chunk, encoding);
                  }

                  return chunk;
                } // if we're already writing something, then just put this
                // in the queue, and wait our turn.  Otherwise, call _write
                // If we return false, then we need a drain event, so set that flag.


                function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
                  if (!isBuf) {
                    var newChunk = decodeChunk(state, chunk, encoding);

                    if (chunk !== newChunk) {
                      isBuf = true;
                      encoding = 'buffer';
                      chunk = newChunk;
                    }
                  }

                  var len = state.objectMode ? 1 : chunk.length;
                  state.length += len;
                  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

                  if (!ret) state.needDrain = true;

                  if (state.writing || state.corked) {
                    var last = state.lastBufferedRequest;
                    state.lastBufferedRequest = {
                      chunk: chunk,
                      encoding: encoding,
                      isBuf: isBuf,
                      callback: cb,
                      next: null
                    };

                    if (last) {
                      last.next = state.lastBufferedRequest;
                    } else {
                      state.bufferedRequest = state.lastBufferedRequest;
                    }

                    state.bufferedRequestCount += 1;
                  } else {
                    doWrite(stream, state, false, len, chunk, encoding, cb);
                  }

                  return ret;
                }

                function doWrite(stream, state, writev, len, chunk, encoding, cb) {
                  state.writelen = len;
                  state.writecb = cb;
                  state.writing = true;
                  state.sync = true;
                  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
                  state.sync = false;
                }

                function onwriteError(stream, state, sync, er, cb) {
                  --state.pendingcb;

                  if (sync) {
                    // defer the callback if we are being called synchronously
                    // to avoid piling up things on the stack
                    processNextTick(cb, er); // this can emit finish, and it will always happen
                    // after error

                    processNextTick(finishMaybe, stream, state);
                    stream._writableState.errorEmitted = true;
                    stream.emit('error', er);
                  } else {
                    // the caller expect this to happen before if
                    // it is async
                    cb(er);
                    stream._writableState.errorEmitted = true;
                    stream.emit('error', er); // this can emit finish, but finish must
                    // always follow error

                    finishMaybe(stream, state);
                  }
                }

                function onwriteStateUpdate(state) {
                  state.writing = false;
                  state.writecb = null;
                  state.length -= state.writelen;
                  state.writelen = 0;
                }

                function onwrite(stream, er) {
                  var state = stream._writableState;
                  var sync = state.sync;
                  var cb = state.writecb;
                  onwriteStateUpdate(state);
                  if (er) onwriteError(stream, state, sync, er, cb);else {
                    // Check if we're actually ready to finish, but don't emit yet
                    var finished = needFinish(state);

                    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                      clearBuffer(stream, state);
                    }

                    if (sync) {
                      /*<replacement>*/
                      asyncWrite(afterWrite, stream, state, finished, cb);
                      /*</replacement>*/
                    } else {
                      afterWrite(stream, state, finished, cb);
                    }
                  }
                }

                function afterWrite(stream, state, finished, cb) {
                  if (!finished) onwriteDrain(stream, state);
                  state.pendingcb--;
                  cb();
                  finishMaybe(stream, state);
                } // Must force callback to be called on nextTick, so that we don't
                // emit 'drain' before the write() consumer gets the 'false' return
                // value, and has a chance to attach a 'drain' listener.


                function onwriteDrain(stream, state) {
                  if (state.length === 0 && state.needDrain) {
                    state.needDrain = false;
                    stream.emit('drain');
                  }
                } // if there's something in the buffer waiting, then process it


                function clearBuffer(stream, state) {
                  state.bufferProcessing = true;
                  var entry = state.bufferedRequest;

                  if (stream._writev && entry && entry.next) {
                    // Fast case, write everything using _writev()
                    var l = state.bufferedRequestCount;
                    var buffer = new Array(l);
                    var holder = state.corkedRequestsFree;
                    holder.entry = entry;
                    var count = 0;
                    var allBuffers = true;

                    while (entry) {
                      buffer[count] = entry;
                      if (!entry.isBuf) allBuffers = false;
                      entry = entry.next;
                      count += 1;
                    }

                    buffer.allBuffers = allBuffers;
                    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
                    // as the hot path ends with doWrite

                    state.pendingcb++;
                    state.lastBufferedRequest = null;

                    if (holder.next) {
                      state.corkedRequestsFree = holder.next;
                      holder.next = null;
                    } else {
                      state.corkedRequestsFree = new CorkedRequest(state);
                    }
                  } else {
                    // Slow case, write chunks one-by-one
                    while (entry) {
                      var chunk = entry.chunk;
                      var encoding = entry.encoding;
                      var cb = entry.callback;
                      var len = state.objectMode ? 1 : chunk.length;
                      doWrite(stream, state, false, len, chunk, encoding, cb);
                      entry = entry.next; // if we didn't call the onwrite immediately, then
                      // it means that we need to wait until it does.
                      // also, that means that the chunk and cb are currently
                      // being processed, so move the buffer counter past them.

                      if (state.writing) {
                        break;
                      }
                    }

                    if (entry === null) state.lastBufferedRequest = null;
                  }

                  state.bufferedRequestCount = 0;
                  state.bufferedRequest = entry;
                  state.bufferProcessing = false;
                }

                Writable.prototype._write = function (chunk, encoding, cb) {
                  cb(new Error('_write() is not implemented'));
                };

                Writable.prototype._writev = null;

                Writable.prototype.end = function (chunk, encoding, cb) {
                  var state = this._writableState;

                  if (typeof chunk === 'function') {
                    cb = chunk;
                    chunk = null;
                    encoding = null;
                  } else if (typeof encoding === 'function') {
                    cb = encoding;
                    encoding = null;
                  }

                  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

                  if (state.corked) {
                    state.corked = 1;
                    this.uncork();
                  } // ignore unnecessary end() calls.


                  if (!state.ending && !state.finished) endWritable(this, state, cb);
                };

                function needFinish(state) {
                  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
                }

                function callFinal(stream, state) {
                  stream._final(function (err) {
                    state.pendingcb--;

                    if (err) {
                      stream.emit('error', err);
                    }

                    state.prefinished = true;
                    stream.emit('prefinish');
                    finishMaybe(stream, state);
                  });
                }

                function prefinish(stream, state) {
                  if (!state.prefinished && !state.finalCalled) {
                    if (typeof stream._final === 'function') {
                      state.pendingcb++;
                      state.finalCalled = true;
                      processNextTick(callFinal, stream, state);
                    } else {
                      state.prefinished = true;
                      stream.emit('prefinish');
                    }
                  }
                }

                function finishMaybe(stream, state) {
                  var need = needFinish(state);

                  if (need) {
                    prefinish(stream, state);

                    if (state.pendingcb === 0) {
                      state.finished = true;
                      stream.emit('finish');
                    }
                  }

                  return need;
                }

                function endWritable(stream, state, cb) {
                  state.ending = true;
                  finishMaybe(stream, state);

                  if (cb) {
                    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
                  }

                  state.ended = true;
                  stream.writable = false;
                }

                function onCorkedFinish(corkReq, state, err) {
                  var entry = corkReq.entry;
                  corkReq.entry = null;

                  while (entry) {
                    var cb = entry.callback;
                    state.pendingcb--;
                    cb(err);
                    entry = entry.next;
                  }

                  if (state.corkedRequestsFree) {
                    state.corkedRequestsFree.next = corkReq;
                  } else {
                    state.corkedRequestsFree = corkReq;
                  }
                }

                Object.defineProperty(Writable.prototype, 'destroyed', {
                  get: function () {
                    if (this._writableState === undefined) {
                      return false;
                    }

                    return this._writableState.destroyed;
                  },
                  set: function (value) {
                    // we ignore the value if the stream
                    // has not been initialized yet
                    if (!this._writableState) {
                      return;
                    } // backward compatibility, the user is explicitly
                    // managing destroyed


                    this._writableState.destroyed = value;
                  }
                });
                Writable.prototype.destroy = destroyImpl.destroy;
                Writable.prototype._undestroy = destroyImpl.undestroy;

                Writable.prototype._destroy = function (err, cb) {
                  this.end();
                  cb(err);
                };
              }).call(this, require('_process'), typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            }, {
              "./_stream_duplex": 49,
              "./internal/streams/destroy": 55,
              "./internal/streams/stream": 56,
              "_process": 47,
              "core-util-is": 29,
              "inherits": 32,
              "process-nextick-args": 46,
              "safe-buffer": 62,
              "util-deprecate": 64
            }],
            54: [function (require, module, exports) {
              /*<replacement>*/

              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }

              var Buffer = require('safe-buffer').Buffer;
              /*</replacement>*/


              function copyBuffer(src, target, offset) {
                src.copy(target, offset);
              }

              module.exports = function () {
                function BufferList() {
                  _classCallCheck(this, BufferList);

                  this.head = null;
                  this.tail = null;
                  this.length = 0;
                }

                BufferList.prototype.push = function push(v) {
                  var entry = {
                    data: v,
                    next: null
                  };
                  if (this.length > 0) this.tail.next = entry;else this.head = entry;
                  this.tail = entry;
                  ++this.length;
                };

                BufferList.prototype.unshift = function unshift(v) {
                  var entry = {
                    data: v,
                    next: this.head
                  };
                  if (this.length === 0) this.tail = entry;
                  this.head = entry;
                  ++this.length;
                };

                BufferList.prototype.shift = function shift() {
                  if (this.length === 0) return;
                  var ret = this.head.data;
                  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
                  --this.length;
                  return ret;
                };

                BufferList.prototype.clear = function clear() {
                  this.head = this.tail = null;
                  this.length = 0;
                };

                BufferList.prototype.join = function join(s) {
                  if (this.length === 0) return '';
                  var p = this.head;
                  var ret = '' + p.data;

                  while (p = p.next) {
                    ret += s + p.data;
                  }

                  return ret;
                };

                BufferList.prototype.concat = function concat(n) {
                  if (this.length === 0) return Buffer.alloc(0);
                  if (this.length === 1) return this.head.data;
                  var ret = Buffer.allocUnsafe(n >>> 0);
                  var p = this.head;
                  var i = 0;

                  while (p) {
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                  }

                  return ret;
                };

                return BufferList;
              }();
            }, {
              "safe-buffer": 62
            }],
            55: [function (require, module, exports) {
              /*<replacement>*/

              var processNextTick = require('process-nextick-args');
              /*</replacement>*/
              // undocumented cb() API, needed for core, not for public API


              function destroy(err, cb) {
                var _this = this;

                var readableDestroyed = this._readableState && this._readableState.destroyed;
                var writableDestroyed = this._writableState && this._writableState.destroyed;

                if (readableDestroyed || writableDestroyed) {
                  if (cb) {
                    cb(err);
                  } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
                    processNextTick(emitErrorNT, this, err);
                  }

                  return;
                } // we set destroyed to true before firing error callbacks in order
                // to make it re-entrance safe in case destroy() is called within callbacks


                if (this._readableState) {
                  this._readableState.destroyed = true;
                } // if this is a duplex stream mark the writable part as destroyed as well


                if (this._writableState) {
                  this._writableState.destroyed = true;
                }

                this._destroy(err || null, function (err) {
                  if (!cb && err) {
                    processNextTick(emitErrorNT, _this, err);

                    if (_this._writableState) {
                      _this._writableState.errorEmitted = true;
                    }
                  } else if (cb) {
                    cb(err);
                  }
                });
              }

              function undestroy() {
                if (this._readableState) {
                  this._readableState.destroyed = false;
                  this._readableState.reading = false;
                  this._readableState.ended = false;
                  this._readableState.endEmitted = false;
                }

                if (this._writableState) {
                  this._writableState.destroyed = false;
                  this._writableState.ended = false;
                  this._writableState.ending = false;
                  this._writableState.finished = false;
                  this._writableState.errorEmitted = false;
                }
              }

              function emitErrorNT(self, err) {
                self.emit('error', err);
              }

              module.exports = {
                destroy: destroy,
                undestroy: undestroy
              };
            }, {
              "process-nextick-args": 46
            }],
            56: [function (require, module, exports) {
              module.exports = require('events').EventEmitter;
            }, {
              "events": 30
            }],
            57: [function (require, module, exports) {

              var Buffer = require('safe-buffer').Buffer;

              var isEncoding = Buffer.isEncoding || function (encoding) {
                encoding = '' + encoding;

                switch (encoding && encoding.toLowerCase()) {
                  case 'hex':
                  case 'utf8':
                  case 'utf-8':
                  case 'ascii':
                  case 'binary':
                  case 'base64':
                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                  case 'raw':
                    return true;

                  default:
                    return false;
                }
              };

              function _normalizeEncoding(enc) {
                if (!enc) return 'utf8';
                var retried;

                while (true) {
                  switch (enc) {
                    case 'utf8':
                    case 'utf-8':
                      return 'utf8';

                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                      return 'utf16le';

                    case 'latin1':
                    case 'binary':
                      return 'latin1';

                    case 'base64':
                    case 'ascii':
                    case 'hex':
                      return enc;

                    default:
                      if (retried) return; // undefined

                      enc = ('' + enc).toLowerCase();
                      retried = true;
                  }
                }
              }
              // modules monkey-patch it to support additional encodings

              function normalizeEncoding(enc) {
                var nenc = _normalizeEncoding(enc);

                if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
                return nenc || enc;
              } // StringDecoder provides an interface for efficiently splitting a series of
              // buffers into a series of JS strings without breaking apart multi-byte
              // characters.


              exports.StringDecoder = StringDecoder;

              function StringDecoder(encoding) {
                this.encoding = normalizeEncoding(encoding);
                var nb;

                switch (this.encoding) {
                  case 'utf16le':
                    this.text = utf16Text;
                    this.end = utf16End;
                    nb = 4;
                    break;

                  case 'utf8':
                    this.fillLast = utf8FillLast;
                    nb = 4;
                    break;

                  case 'base64':
                    this.text = base64Text;
                    this.end = base64End;
                    nb = 3;
                    break;

                  default:
                    this.write = simpleWrite;
                    this.end = simpleEnd;
                    return;
                }

                this.lastNeed = 0;
                this.lastTotal = 0;
                this.lastChar = Buffer.allocUnsafe(nb);
              }

              StringDecoder.prototype.write = function (buf) {
                if (buf.length === 0) return '';
                var r;
                var i;

                if (this.lastNeed) {
                  r = this.fillLast(buf);
                  if (r === undefined) return '';
                  i = this.lastNeed;
                  this.lastNeed = 0;
                } else {
                  i = 0;
                }

                if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
                return r || '';
              };

              StringDecoder.prototype.end = utf8End; // Returns only complete characters in a Buffer

              StringDecoder.prototype.text = utf8Text; // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer

              StringDecoder.prototype.fillLast = function (buf) {
                if (this.lastNeed <= buf.length) {
                  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
                  return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                }

                buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
                this.lastNeed -= buf.length;
              }; // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
              // continuation byte.


              function utf8CheckByte(byte) {
                if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
                return -1;
              } // Checks at most 3 bytes at the end of a Buffer in order to detect an
              // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
              // needed to complete the UTF-8 character (if applicable) are returned.


              function utf8CheckIncomplete(self, buf, i) {
                var j = buf.length - 1;
                if (j < i) return 0;
                var nb = utf8CheckByte(buf[j]);

                if (nb >= 0) {
                  if (nb > 0) self.lastNeed = nb - 1;
                  return nb;
                }

                if (--j < i) return 0;
                nb = utf8CheckByte(buf[j]);

                if (nb >= 0) {
                  if (nb > 0) self.lastNeed = nb - 2;
                  return nb;
                }

                if (--j < i) return 0;
                nb = utf8CheckByte(buf[j]);

                if (nb >= 0) {
                  if (nb > 0) {
                    if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
                  }

                  return nb;
                }

                return 0;
              } // Validates as many continuation bytes for a multi-byte UTF-8 character as
              // needed or are available. If we see a non-continuation byte where we expect
              // one, we "replace" the validated continuation bytes we've seen so far with
              // UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
              // behavior. The continuation byte check is included three times in the case
              // where all of the continuation bytes for a character exist in the same buffer.
              // It is also done this way as a slight performance increase instead of using a
              // loop.


              function utf8CheckExtraBytes(self, buf, p) {
                if ((buf[0] & 0xC0) !== 0x80) {
                  self.lastNeed = 0;
                  return '\ufffd'.repeat(p);
                }

                if (self.lastNeed > 1 && buf.length > 1) {
                  if ((buf[1] & 0xC0) !== 0x80) {
                    self.lastNeed = 1;
                    return '\ufffd'.repeat(p + 1);
                  }

                  if (self.lastNeed > 2 && buf.length > 2) {
                    if ((buf[2] & 0xC0) !== 0x80) {
                      self.lastNeed = 2;
                      return '\ufffd'.repeat(p + 2);
                    }
                  }
                }
              } // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.


              function utf8FillLast(buf) {
                var p = this.lastTotal - this.lastNeed;
                var r = utf8CheckExtraBytes(this, buf, p);
                if (r !== undefined) return r;

                if (this.lastNeed <= buf.length) {
                  buf.copy(this.lastChar, p, 0, this.lastNeed);
                  return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                }

                buf.copy(this.lastChar, p, 0, buf.length);
                this.lastNeed -= buf.length;
              } // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
              // partial character, the character's bytes are buffered until the required
              // number of bytes are available.


              function utf8Text(buf, i) {
                var total = utf8CheckIncomplete(this, buf, i);
                if (!this.lastNeed) return buf.toString('utf8', i);
                this.lastTotal = total;
                var end = buf.length - (total - this.lastNeed);
                buf.copy(this.lastChar, 0, end);
                return buf.toString('utf8', i, end);
              } // For UTF-8, a replacement character for each buffered byte of a (partial)
              // character needs to be added to the output.


              function utf8End(buf) {
                var r = buf && buf.length ? this.write(buf) : '';
                if (this.lastNeed) return r + '\ufffd'.repeat(this.lastTotal - this.lastNeed);
                return r;
              } // UTF-16LE typically needs two bytes per character, but even if we have an even
              // number of bytes available, we need to check if we end on a leading/high
              // surrogate. In that case, we need to wait for the next two bytes in order to
              // decode the last character properly.


              function utf16Text(buf, i) {
                if ((buf.length - i) % 2 === 0) {
                  var r = buf.toString('utf16le', i);

                  if (r) {
                    var c = r.charCodeAt(r.length - 1);

                    if (c >= 0xD800 && c <= 0xDBFF) {
                      this.lastNeed = 2;
                      this.lastTotal = 4;
                      this.lastChar[0] = buf[buf.length - 2];
                      this.lastChar[1] = buf[buf.length - 1];
                      return r.slice(0, -1);
                    }
                  }

                  return r;
                }

                this.lastNeed = 1;
                this.lastTotal = 2;
                this.lastChar[0] = buf[buf.length - 1];
                return buf.toString('utf16le', i, buf.length - 1);
              } // For UTF-16LE we do not explicitly append special replacement characters if we
              // end on a partial character, we simply let v8 handle that.


              function utf16End(buf) {
                var r = buf && buf.length ? this.write(buf) : '';

                if (this.lastNeed) {
                  var end = this.lastTotal - this.lastNeed;
                  return r + this.lastChar.toString('utf16le', 0, end);
                }

                return r;
              }

              function base64Text(buf, i) {
                var n = (buf.length - i) % 3;
                if (n === 0) return buf.toString('base64', i);
                this.lastNeed = 3 - n;
                this.lastTotal = 3;

                if (n === 1) {
                  this.lastChar[0] = buf[buf.length - 1];
                } else {
                  this.lastChar[0] = buf[buf.length - 2];
                  this.lastChar[1] = buf[buf.length - 1];
                }

                return buf.toString('base64', i, buf.length - n);
              }

              function base64End(buf) {
                var r = buf && buf.length ? this.write(buf) : '';
                if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
                return r;
              } // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)


              function simpleWrite(buf) {
                return buf.toString(this.encoding);
              }

              function simpleEnd(buf) {
                return buf && buf.length ? this.write(buf) : '';
              }
            }, {
              "safe-buffer": 62
            }],
            58: [function (require, module, exports) {
              module.exports = require('./readable').PassThrough;
            }, {
              "./readable": 59
            }],
            59: [function (require, module, exports) {
              exports = module.exports = require('./lib/_stream_readable.js');
              exports.Stream = exports;
              exports.Readable = exports;
              exports.Writable = require('./lib/_stream_writable.js');
              exports.Duplex = require('./lib/_stream_duplex.js');
              exports.Transform = require('./lib/_stream_transform.js');
              exports.PassThrough = require('./lib/_stream_passthrough.js');
            }, {
              "./lib/_stream_duplex.js": 49,
              "./lib/_stream_passthrough.js": 50,
              "./lib/_stream_readable.js": 51,
              "./lib/_stream_transform.js": 52,
              "./lib/_stream_writable.js": 53
            }],
            60: [function (require, module, exports) {
              module.exports = require('./readable').Transform;
            }, {
              "./readable": 59
            }],
            61: [function (require, module, exports) {
              module.exports = require('./lib/_stream_writable.js');
            }, {
              "./lib/_stream_writable.js": 53
            }],
            62: [function (require, module, exports) {
              /* eslint-disable node/no-deprecated-api */
              var buffer = require('buffer');

              var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers

              function copyProps(src, dst) {
                for (var key in src) {
                  dst[key] = src[key];
                }
              }

              if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
                module.exports = buffer;
              } else {
                // Copy properties from require('buffer')
                copyProps(buffer, exports);
                exports.Buffer = SafeBuffer;
              }

              function SafeBuffer(arg, encodingOrOffset, length) {
                return Buffer(arg, encodingOrOffset, length);
              } // Copy static methods from Buffer


              copyProps(Buffer, SafeBuffer);

              SafeBuffer.from = function (arg, encodingOrOffset, length) {
                if (typeof arg === 'number') {
                  throw new TypeError('Argument must not be a number');
                }

                return Buffer(arg, encodingOrOffset, length);
              };

              SafeBuffer.alloc = function (size, fill, encoding) {
                if (typeof size !== 'number') {
                  throw new TypeError('Argument must be a number');
                }

                var buf = Buffer(size);

                if (fill !== undefined) {
                  if (typeof encoding === 'string') {
                    buf.fill(fill, encoding);
                  } else {
                    buf.fill(fill);
                  }
                } else {
                  buf.fill(0);
                }

                return buf;
              };

              SafeBuffer.allocUnsafe = function (size) {
                if (typeof size !== 'number') {
                  throw new TypeError('Argument must be a number');
                }

                return Buffer(size);
              };

              SafeBuffer.allocUnsafeSlow = function (size) {
                if (typeof size !== 'number') {
                  throw new TypeError('Argument must be a number');
                }

                return buffer.SlowBuffer(size);
              };
            }, {
              "buffer": 28
            }],
            63: [function (require, module, exports) {
              // Copyright Joyent, Inc. and other Node contributors.
              //
              // Permission is hereby granted, free of charge, to any person obtaining a
              // copy of this software and associated documentation files (the
              // "Software"), to deal in the Software without restriction, including
              // without limitation the rights to use, copy, modify, merge, publish,
              // distribute, sublicense, and/or sell copies of the Software, and to permit
              // persons to whom the Software is furnished to do so, subject to the
              // following conditions:
              //
              // The above copyright notice and this permission notice shall be included
              // in all copies or substantial portions of the Software.
              //
              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
              // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
              // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
              // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
              // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
              // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
              // USE OR OTHER DEALINGS IN THE SOFTWARE.
              module.exports = Stream;

              var EE = require('events').EventEmitter;

              var inherits = require('inherits');

              inherits(Stream, EE);
              Stream.Readable = require('readable-stream/readable.js');
              Stream.Writable = require('readable-stream/writable.js');
              Stream.Duplex = require('readable-stream/duplex.js');
              Stream.Transform = require('readable-stream/transform.js');
              Stream.PassThrough = require('readable-stream/passthrough.js'); // Backwards-compat with node 0.4.x

              Stream.Stream = Stream; // old-style streams.  Note that the pipe method (the only relevant
              // part of this class) is overridden in the Readable class.

              function Stream() {
                EE.call(this);
              }

              Stream.prototype.pipe = function (dest, options) {
                var source = this;

                function ondata(chunk) {
                  if (dest.writable) {
                    if (false === dest.write(chunk) && source.pause) {
                      source.pause();
                    }
                  }
                }

                source.on('data', ondata);

                function ondrain() {
                  if (source.readable && source.resume) {
                    source.resume();
                  }
                }

                dest.on('drain', ondrain); // If the 'end' option is not supplied, dest.end() will be called when
                // source gets the 'end' or 'close' events.  Only dest.end() once.

                if (!dest._isStdio && (!options || options.end !== false)) {
                  source.on('end', onend);
                  source.on('close', onclose);
                }

                var didOnEnd = false;

                function onend() {
                  if (didOnEnd) return;
                  didOnEnd = true;
                  dest.end();
                }

                function onclose() {
                  if (didOnEnd) return;
                  didOnEnd = true;
                  if (typeof dest.destroy === 'function') dest.destroy();
                } // don't leave dangling pipes when there are errors.


                function onerror(er) {
                  cleanup();

                  if (EE.listenerCount(this, 'error') === 0) {
                    throw er; // Unhandled stream error in pipe.
                  }
                }

                source.on('error', onerror);
                dest.on('error', onerror); // remove all the event listeners that were added.

                function cleanup() {
                  source.removeListener('data', ondata);
                  dest.removeListener('drain', ondrain);
                  source.removeListener('end', onend);
                  source.removeListener('close', onclose);
                  source.removeListener('error', onerror);
                  dest.removeListener('error', onerror);
                  source.removeListener('end', cleanup);
                  source.removeListener('close', cleanup);
                  dest.removeListener('close', cleanup);
                }

                source.on('end', cleanup);
                source.on('close', cleanup);
                dest.on('close', cleanup);
                dest.emit('pipe', source); // Allow for unix-like usage: A.pipe(B).pipe(C)

                return dest;
              };
            }, {
              "events": 30,
              "inherits": 32,
              "readable-stream/duplex.js": 48,
              "readable-stream/passthrough.js": 58,
              "readable-stream/readable.js": 59,
              "readable-stream/transform.js": 60,
              "readable-stream/writable.js": 61
            }],
            64: [function (require, module, exports) {
              (function (global) {
                /**
                 * Module exports.
                 */
                module.exports = deprecate;
                /**
                 * Mark that a method should not be used.
                 * Returns a modified function which warns once by default.
                 *
                 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
                 *
                 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
                 * will throw an Error when invoked.
                 *
                 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
                 * will invoke `console.trace()` instead of `console.error()`.
                 *
                 * @param {Function} fn - the function to deprecate
                 * @param {String} msg - the string to print to the console when `fn` is invoked
                 * @returns {Function} a new "deprecated" version of `fn`
                 * @api public
                 */

                function deprecate(fn, msg) {
                  if (config('noDeprecation')) {
                    return fn;
                  }

                  var warned = false;

                  function deprecated() {
                    if (!warned) {
                      if (config('throwDeprecation')) {
                        throw new Error(msg);
                      } else if (config('traceDeprecation')) {
                        console.trace(msg);
                      } else {
                        console.warn(msg);
                      }

                      warned = true;
                    }

                    return fn.apply(this, arguments);
                  }

                  return deprecated;
                }
                /**
                 * Checks `localStorage` for boolean values for the given `name`.
                 *
                 * @param {String} name
                 * @returns {Boolean}
                 * @api private
                 */


                function config(name) {
                  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
                  try {
                    if (!global.localStorage) return false;
                  } catch (_) {
                    return false;
                  }

                  var val = global.localStorage[name];
                  if (null == val) return false;
                  return String(val).toLowerCase() === 'true';
                }
              }).call(this, typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            }, {}],
            65: [function (require, module, exports) {
              arguments[4][32][0].apply(exports, arguments);
            }, {
              "dup": 32
            }],
            66: [function (require, module, exports) {
              module.exports = function isBuffer(arg) {
                return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
              };
            }, {}],
            67: [function (require, module, exports) {
              (function (process, global) {
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.
                var formatRegExp = /%[sdj%]/g;

                exports.format = function (f) {
                  if (!isString(f)) {
                    var objects = [];

                    for (var i = 0; i < arguments.length; i++) {
                      objects.push(inspect(arguments[i]));
                    }

                    return objects.join(' ');
                  }

                  var i = 1;
                  var args = arguments;
                  var len = args.length;
                  var str = String(f).replace(formatRegExp, function (x) {
                    if (x === '%%') return '%';
                    if (i >= len) return x;

                    switch (x) {
                      case '%s':
                        return String(args[i++]);

                      case '%d':
                        return Number(args[i++]);

                      case '%j':
                        try {
                          return JSON.stringify(args[i++]);
                        } catch (_) {
                          return '[Circular]';
                        }

                      default:
                        return x;
                    }
                  });

                  for (var x = args[i]; i < len; x = args[++i]) {
                    if (isNull(x) || !isObject(x)) {
                      str += ' ' + x;
                    } else {
                      str += ' ' + inspect(x);
                    }
                  }

                  return str;
                }; // Mark that a method should not be used.
                // Returns a modified function which warns once by default.
                // If --no-deprecation is set, then it is a no-op.


                exports.deprecate = function (fn, msg) {
                  // Allow for deprecating things in the process of starting up.
                  if (isUndefined(global.process)) {
                    return function () {
                      return exports.deprecate(fn, msg).apply(this, arguments);
                    };
                  }

                  if (process.noDeprecation === true) {
                    return fn;
                  }

                  var warned = false;

                  function deprecated() {
                    if (!warned) {
                      if (process.throwDeprecation) {
                        throw new Error(msg);
                      } else if (process.traceDeprecation) {
                        console.trace(msg);
                      } else {
                        console.error(msg);
                      }

                      warned = true;
                    }

                    return fn.apply(this, arguments);
                  }

                  return deprecated;
                };

                var debugs = {};
                var debugEnviron;

                exports.debuglog = function (set) {
                  if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || '';
                  set = set.toUpperCase();

                  if (!debugs[set]) {
                    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
                      var pid = process.pid;

                      debugs[set] = function () {
                        var msg = exports.format.apply(exports, arguments);
                        console.error('%s %d: %s', set, pid, msg);
                      };
                    } else {
                      debugs[set] = function () {};
                    }
                  }

                  return debugs[set];
                };
                /**
                 * Echos the value of a value. Trys to print the value out
                 * in the best way possible given the different types.
                 *
                 * @param {Object} obj The object to print out.
                 * @param {Object} opts Optional options object that alters the output.
                 */

                /* legacy: obj, showHidden, depth, colors*/


                function inspect(obj, opts) {
                  // default options
                  var ctx = {
                    seen: [],
                    stylize: stylizeNoColor
                  }; // legacy...

                  if (arguments.length >= 3) ctx.depth = arguments[2];
                  if (arguments.length >= 4) ctx.colors = arguments[3];

                  if (isBoolean(opts)) {
                    // legacy...
                    ctx.showHidden = opts;
                  } else if (opts) {
                    // got an "options" object
                    exports._extend(ctx, opts);
                  } // set default options


                  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
                  if (isUndefined(ctx.depth)) ctx.depth = 2;
                  if (isUndefined(ctx.colors)) ctx.colors = false;
                  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
                  if (ctx.colors) ctx.stylize = stylizeWithColor;
                  return formatValue(ctx, obj, ctx.depth);
                }

                exports.inspect = inspect; // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

                inspect.colors = {
                  'bold': [1, 22],
                  'italic': [3, 23],
                  'underline': [4, 24],
                  'inverse': [7, 27],
                  'white': [37, 39],
                  'grey': [90, 39],
                  'black': [30, 39],
                  'blue': [34, 39],
                  'cyan': [36, 39],
                  'green': [32, 39],
                  'magenta': [35, 39],
                  'red': [31, 39],
                  'yellow': [33, 39]
                }; // Don't use 'blue' not visible on cmd.exe

                inspect.styles = {
                  'special': 'cyan',
                  'number': 'yellow',
                  'boolean': 'yellow',
                  'undefined': 'grey',
                  'null': 'bold',
                  'string': 'green',
                  'date': 'magenta',
                  // "name": intentionally not styling
                  'regexp': 'red'
                };

                function stylizeWithColor(str, styleType) {
                  var style = inspect.styles[styleType];

                  if (style) {
                    return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
                  } else {
                    return str;
                  }
                }

                function stylizeNoColor(str, styleType) {
                  return str;
                }

                function arrayToHash(array) {
                  var hash = {};
                  array.forEach(function (val, idx) {
                    hash[val] = true;
                  });
                  return hash;
                }

                function formatValue(ctx, value, recurseTimes) {
                  // Provide a hook for user-specified inspect functions.
                  // Check that value is an object with an inspect function on it
                  if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
                  value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
                  !(value.constructor && value.constructor.prototype === value)) {
                    var ret = value.inspect(recurseTimes, ctx);

                    if (!isString(ret)) {
                      ret = formatValue(ctx, ret, recurseTimes);
                    }

                    return ret;
                  } // Primitive types cannot have properties


                  var primitive = formatPrimitive(ctx, value);

                  if (primitive) {
                    return primitive;
                  } // Look up the keys of the object.


                  var keys = Object.keys(value);
                  var visibleKeys = arrayToHash(keys);

                  if (ctx.showHidden) {
                    keys = Object.getOwnPropertyNames(value);
                  } // IE doesn't make error fields non-enumerable
                  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


                  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
                    return formatError(value);
                  } // Some type of object without properties can be shortcutted.


                  if (keys.length === 0) {
                    if (isFunction(value)) {
                      var name = value.name ? ': ' + value.name : '';
                      return ctx.stylize('[Function' + name + ']', 'special');
                    }

                    if (isRegExp(value)) {
                      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                    }

                    if (isDate(value)) {
                      return ctx.stylize(Date.prototype.toString.call(value), 'date');
                    }

                    if (isError(value)) {
                      return formatError(value);
                    }
                  }

                  var base = '',
                      array = false,
                      braces = ['{', '}']; // Make Array say that they are Array

                  if (isArray(value)) {
                    array = true;
                    braces = ['[', ']'];
                  } // Make functions say that they are functions


                  if (isFunction(value)) {
                    var n = value.name ? ': ' + value.name : '';
                    base = ' [Function' + n + ']';
                  } // Make RegExps say that they are RegExps


                  if (isRegExp(value)) {
                    base = ' ' + RegExp.prototype.toString.call(value);
                  } // Make dates with properties first say the date


                  if (isDate(value)) {
                    base = ' ' + Date.prototype.toUTCString.call(value);
                  } // Make error with message first say the error


                  if (isError(value)) {
                    base = ' ' + formatError(value);
                  }

                  if (keys.length === 0 && (!array || value.length == 0)) {
                    return braces[0] + base + braces[1];
                  }

                  if (recurseTimes < 0) {
                    if (isRegExp(value)) {
                      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                    } else {
                      return ctx.stylize('[Object]', 'special');
                    }
                  }

                  ctx.seen.push(value);
                  var output;

                  if (array) {
                    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
                  } else {
                    output = keys.map(function (key) {
                      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                    });
                  }

                  ctx.seen.pop();
                  return reduceToSingleString(output, base, braces);
                }

                function formatPrimitive(ctx, value) {
                  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

                  if (isString(value)) {
                    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
                    return ctx.stylize(simple, 'string');
                  }

                  if (isNumber(value)) return ctx.stylize('' + value, 'number');
                  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.

                  if (isNull(value)) return ctx.stylize('null', 'null');
                }

                function formatError(value) {
                  return '[' + Error.prototype.toString.call(value) + ']';
                }

                function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
                  var output = [];

                  for (var i = 0, l = value.length; i < l; ++i) {
                    if (hasOwnProperty(value, String(i))) {
                      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
                    } else {
                      output.push('');
                    }
                  }

                  keys.forEach(function (key) {
                    if (!key.match(/^\d+$/)) {
                      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
                    }
                  });
                  return output;
                }

                function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
                  var name, str, desc;
                  desc = Object.getOwnPropertyDescriptor(value, key) || {
                    value: value[key]
                  };

                  if (desc.get) {
                    if (desc.set) {
                      str = ctx.stylize('[Getter/Setter]', 'special');
                    } else {
                      str = ctx.stylize('[Getter]', 'special');
                    }
                  } else {
                    if (desc.set) {
                      str = ctx.stylize('[Setter]', 'special');
                    }
                  }

                  if (!hasOwnProperty(visibleKeys, key)) {
                    name = '[' + key + ']';
                  }

                  if (!str) {
                    if (ctx.seen.indexOf(desc.value) < 0) {
                      if (isNull(recurseTimes)) {
                        str = formatValue(ctx, desc.value, null);
                      } else {
                        str = formatValue(ctx, desc.value, recurseTimes - 1);
                      }

                      if (str.indexOf('\n') > -1) {
                        if (array) {
                          str = str.split('\n').map(function (line) {
                            return '  ' + line;
                          }).join('\n').substr(2);
                        } else {
                          str = '\n' + str.split('\n').map(function (line) {
                            return '   ' + line;
                          }).join('\n');
                        }
                      }
                    } else {
                      str = ctx.stylize('[Circular]', 'special');
                    }
                  }

                  if (isUndefined(name)) {
                    if (array && key.match(/^\d+$/)) {
                      return str;
                    }

                    name = JSON.stringify('' + key);

                    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                      name = name.substr(1, name.length - 2);
                      name = ctx.stylize(name, 'name');
                    } else {
                      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
                      name = ctx.stylize(name, 'string');
                    }
                  }

                  return name + ': ' + str;
                }

                function reduceToSingleString(output, base, braces) {
                  var length = output.reduce(function (prev, cur) {
                    if (cur.indexOf('\n') >= 0) ;
                    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
                  }, 0);

                  if (length > 60) {
                    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
                  }

                  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
                } // NOTE: These type checking functions intentionally don't use `instanceof`
                // because it is fragile and can be easily faked with `Object.create()`.


                function isArray(ar) {
                  return Array.isArray(ar);
                }

                exports.isArray = isArray;

                function isBoolean(arg) {
                  return typeof arg === 'boolean';
                }

                exports.isBoolean = isBoolean;

                function isNull(arg) {
                  return arg === null;
                }

                exports.isNull = isNull;

                function isNullOrUndefined(arg) {
                  return arg == null;
                }

                exports.isNullOrUndefined = isNullOrUndefined;

                function isNumber(arg) {
                  return typeof arg === 'number';
                }

                exports.isNumber = isNumber;

                function isString(arg) {
                  return typeof arg === 'string';
                }

                exports.isString = isString;

                function isSymbol(arg) {
                  return typeof arg === 'symbol';
                }

                exports.isSymbol = isSymbol;

                function isUndefined(arg) {
                  return arg === void 0;
                }

                exports.isUndefined = isUndefined;

                function isRegExp(re) {
                  return isObject(re) && objectToString(re) === '[object RegExp]';
                }

                exports.isRegExp = isRegExp;

                function isObject(arg) {
                  return typeof arg === 'object' && arg !== null;
                }

                exports.isObject = isObject;

                function isDate(d) {
                  return isObject(d) && objectToString(d) === '[object Date]';
                }

                exports.isDate = isDate;

                function isError(e) {
                  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
                }

                exports.isError = isError;

                function isFunction(arg) {
                  return typeof arg === 'function';
                }

                exports.isFunction = isFunction;

                function isPrimitive(arg) {
                  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
                  typeof arg === 'undefined';
                }

                exports.isPrimitive = isPrimitive;
                exports.isBuffer = require('./support/isBuffer');

                function objectToString(o) {
                  return Object.prototype.toString.call(o);
                }

                function pad(n) {
                  return n < 10 ? '0' + n.toString(10) : n.toString(10);
                }

                var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34

                function timestamp() {
                  var d = new Date();
                  var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
                  return [d.getDate(), months[d.getMonth()], time].join(' ');
                } // log is just a thin wrapper to console.log that prepends a timestamp


                exports.log = function () {
                  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
                };
                /**
                 * Inherit the prototype methods from one constructor into another.
                 *
                 * The Function.prototype.inherits from lang.js rewritten as a standalone
                 * function (not on Function.prototype). NOTE: If this file is to be loaded
                 * during bootstrapping this function needs to be rewritten using some native
                 * functions as prototype setup using normal JavaScript does not work as
                 * expected during bootstrapping (see mirror.js in r114903).
                 *
                 * @param {function} ctor Constructor function which needs to inherit the
                 *     prototype.
                 * @param {function} superCtor Constructor function to inherit prototype from.
                 */


                exports.inherits = require('inherits');

                exports._extend = function (origin, add) {
                  // Don't do anything if add isn't an object
                  if (!add || !isObject(add)) return origin;
                  var keys = Object.keys(add);
                  var i = keys.length;

                  while (i--) {
                    origin[keys[i]] = add[keys[i]];
                  }

                  return origin;
                };

                function hasOwnProperty(obj, prop) {
                  return Object.prototype.hasOwnProperty.call(obj, prop);
                }
              }).call(this, require('_process'), typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            }, {
              "./support/isBuffer": 66,
              "_process": 47,
              "inherits": 65
            }]
          }, {}, [20])(20);
        });
      });

      var browser$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), browser, {
        'default': browser,
        __moduleExports: browser
      }));

      var jsQR = createCommonjsModule(function (module, exports) {
        (function webpackUniversalModuleDefinition(root, factory) {
          module.exports = factory();
        })(typeof self !== 'undefined' ? self : commonjsGlobal, function () {
          return (
            /******/
            function (modules) {
              // webpackBootstrap

              /******/
              // The module cache

              /******/
              var installedModules = {};
              /******/

              /******/
              // The require function

              /******/

              function __webpack_require__(moduleId) {
                /******/

                /******/
                // Check if module is in cache

                /******/
                if (installedModules[moduleId]) {
                  /******/
                  return installedModules[moduleId].exports;
                  /******/
                }
                /******/
                // Create a new module (and put it into the cache)

                /******/


                var module = installedModules[moduleId] = {
                  /******/
                  i: moduleId,

                  /******/
                  l: false,

                  /******/
                  exports: {}
                  /******/

                };
                /******/

                /******/
                // Execute the module function

                /******/

                modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
                /******/

                /******/
                // Flag the module as loaded

                /******/

                module.l = true;
                /******/

                /******/
                // Return the exports of the module

                /******/

                return module.exports;
                /******/
              }
              /******/

              /******/

              /******/
              // expose the modules object (__webpack_modules__)

              /******/


              __webpack_require__.m = modules;
              /******/

              /******/
              // expose the module cache

              /******/

              __webpack_require__.c = installedModules;
              /******/

              /******/
              // define getter function for harmony exports

              /******/

              __webpack_require__.d = function (exports, name, getter) {
                /******/
                if (!__webpack_require__.o(exports, name)) {
                  /******/
                  Object.defineProperty(exports, name, {
                    /******/
                    configurable: false,

                    /******/
                    enumerable: true,

                    /******/
                    get: getter
                    /******/

                  });
                  /******/
                }
                /******/

              };
              /******/

              /******/
              // getDefaultExport function for compatibility with non-harmony modules

              /******/


              __webpack_require__.n = function (module) {
                /******/
                var getter = module && module.__esModule ?
                /******/
                function getDefault() {
                  return module['default'];
                } :
                /******/
                function getModuleExports() {
                  return module;
                };
                /******/

                __webpack_require__.d(getter, 'a', getter);
                /******/


                return getter;
                /******/
              };
              /******/

              /******/
              // Object.prototype.hasOwnProperty.call

              /******/


              __webpack_require__.o = function (object, property) {
                return Object.prototype.hasOwnProperty.call(object, property);
              };
              /******/

              /******/
              // __webpack_public_path__

              /******/


              __webpack_require__.p = "";
              /******/

              /******/
              // Load entry module and return exports

              /******/

              return __webpack_require__(__webpack_require__.s = 3);
              /******/
            }(
            /************************************************************************/

            /******/
            [
            /* 0 */

            /***/
            function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var BitMatrix =
              /** @class */
              function () {
                function BitMatrix(data, width) {
                  this.width = width;
                  this.height = data.length / width;
                  this.data = data;
                }

                BitMatrix.createEmpty = function (width, height) {
                  return new BitMatrix(new Uint8ClampedArray(width * height), width);
                };

                BitMatrix.prototype.get = function (x, y) {
                  if (x < 0 || x >= this.width || y < 0 || y >= this.height) {
                    return false;
                  }

                  return !!this.data[y * this.width + x];
                };

                BitMatrix.prototype.set = function (x, y, v) {
                  this.data[y * this.width + x] = v ? 1 : 0;
                };

                BitMatrix.prototype.setRegion = function (left, top, width, height, v) {
                  for (var y = top; y < top + height; y++) {
                    for (var x = left; x < left + width; x++) {
                      this.set(x, y, !!v);
                    }
                  }
                };

                return BitMatrix;
              }();

              exports.BitMatrix = BitMatrix;
              /***/
            },
            /* 1 */

            /***/
            function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var GenericGFPoly_1 = __webpack_require__(2);

              function addOrSubtractGF(a, b) {
                return a ^ b; // tslint:disable-line:no-bitwise
              }

              exports.addOrSubtractGF = addOrSubtractGF;

              var GenericGF =
              /** @class */
              function () {
                function GenericGF(primitive, size, genBase) {
                  this.primitive = primitive;
                  this.size = size;
                  this.generatorBase = genBase;
                  this.expTable = new Array(this.size);
                  this.logTable = new Array(this.size);
                  var x = 1;

                  for (var i = 0; i < this.size; i++) {
                    this.expTable[i] = x;
                    x = x * 2;

                    if (x >= this.size) {
                      x = (x ^ this.primitive) & this.size - 1; // tslint:disable-line:no-bitwise
                    }
                  }

                  for (var i = 0; i < this.size - 1; i++) {
                    this.logTable[this.expTable[i]] = i;
                  }

                  this.zero = new GenericGFPoly_1.default(this, Uint8ClampedArray.from([0]));
                  this.one = new GenericGFPoly_1.default(this, Uint8ClampedArray.from([1]));
                }

                GenericGF.prototype.multiply = function (a, b) {
                  if (a === 0 || b === 0) {
                    return 0;
                  }

                  return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];
                };

                GenericGF.prototype.inverse = function (a) {
                  if (a === 0) {
                    throw new Error("Can't invert 0");
                  }

                  return this.expTable[this.size - this.logTable[a] - 1];
                };

                GenericGF.prototype.buildMonomial = function (degree, coefficient) {
                  if (degree < 0) {
                    throw new Error("Invalid monomial degree less than 0");
                  }

                  if (coefficient === 0) {
                    return this.zero;
                  }

                  var coefficients = new Uint8ClampedArray(degree + 1);
                  coefficients[0] = coefficient;
                  return new GenericGFPoly_1.default(this, coefficients);
                };

                GenericGF.prototype.log = function (a) {
                  if (a === 0) {
                    throw new Error("Can't take log(0)");
                  }

                  return this.logTable[a];
                };

                GenericGF.prototype.exp = function (a) {
                  return this.expTable[a];
                };

                return GenericGF;
              }();

              exports.default = GenericGF;
              /***/
            },
            /* 2 */

            /***/
            function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var GenericGF_1 = __webpack_require__(1);

              var GenericGFPoly =
              /** @class */
              function () {
                function GenericGFPoly(field, coefficients) {
                  if (coefficients.length === 0) {
                    throw new Error("No coefficients.");
                  }

                  this.field = field;
                  var coefficientsLength = coefficients.length;

                  if (coefficientsLength > 1 && coefficients[0] === 0) {
                    // Leading term must be non-zero for anything except the constant polynomial "0"
                    var firstNonZero = 1;

                    while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {
                      firstNonZero++;
                    }

                    if (firstNonZero === coefficientsLength) {
                      this.coefficients = field.zero.coefficients;
                    } else {
                      this.coefficients = new Uint8ClampedArray(coefficientsLength - firstNonZero);

                      for (var i = 0; i < this.coefficients.length; i++) {
                        this.coefficients[i] = coefficients[firstNonZero + i];
                      }
                    }
                  } else {
                    this.coefficients = coefficients;
                  }
                }

                GenericGFPoly.prototype.degree = function () {
                  return this.coefficients.length - 1;
                };

                GenericGFPoly.prototype.isZero = function () {
                  return this.coefficients[0] === 0;
                };

                GenericGFPoly.prototype.getCoefficient = function (degree) {
                  return this.coefficients[this.coefficients.length - 1 - degree];
                };

                GenericGFPoly.prototype.addOrSubtract = function (other) {
                  var _a;

                  if (this.isZero()) {
                    return other;
                  }

                  if (other.isZero()) {
                    return this;
                  }

                  var smallerCoefficients = this.coefficients;
                  var largerCoefficients = other.coefficients;

                  if (smallerCoefficients.length > largerCoefficients.length) {
                    _a = [largerCoefficients, smallerCoefficients], smallerCoefficients = _a[0], largerCoefficients = _a[1];
                  }

                  var sumDiff = new Uint8ClampedArray(largerCoefficients.length);
                  var lengthDiff = largerCoefficients.length - smallerCoefficients.length;

                  for (var i = 0; i < lengthDiff; i++) {
                    sumDiff[i] = largerCoefficients[i];
                  }

                  for (var i = lengthDiff; i < largerCoefficients.length; i++) {
                    sumDiff[i] = GenericGF_1.addOrSubtractGF(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);
                  }

                  return new GenericGFPoly(this.field, sumDiff);
                };

                GenericGFPoly.prototype.multiply = function (scalar) {
                  if (scalar === 0) {
                    return this.field.zero;
                  }

                  if (scalar === 1) {
                    return this;
                  }

                  var size = this.coefficients.length;
                  var product = new Uint8ClampedArray(size);

                  for (var i = 0; i < size; i++) {
                    product[i] = this.field.multiply(this.coefficients[i], scalar);
                  }

                  return new GenericGFPoly(this.field, product);
                };

                GenericGFPoly.prototype.multiplyPoly = function (other) {
                  if (this.isZero() || other.isZero()) {
                    return this.field.zero;
                  }

                  var aCoefficients = this.coefficients;
                  var aLength = aCoefficients.length;
                  var bCoefficients = other.coefficients;
                  var bLength = bCoefficients.length;
                  var product = new Uint8ClampedArray(aLength + bLength - 1);

                  for (var i = 0; i < aLength; i++) {
                    var aCoeff = aCoefficients[i];

                    for (var j = 0; j < bLength; j++) {
                      product[i + j] = GenericGF_1.addOrSubtractGF(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));
                    }
                  }

                  return new GenericGFPoly(this.field, product);
                };

                GenericGFPoly.prototype.multiplyByMonomial = function (degree, coefficient) {
                  if (degree < 0) {
                    throw new Error("Invalid degree less than 0");
                  }

                  if (coefficient === 0) {
                    return this.field.zero;
                  }

                  var size = this.coefficients.length;
                  var product = new Uint8ClampedArray(size + degree);

                  for (var i = 0; i < size; i++) {
                    product[i] = this.field.multiply(this.coefficients[i], coefficient);
                  }

                  return new GenericGFPoly(this.field, product);
                };

                GenericGFPoly.prototype.evaluateAt = function (a) {
                  var result = 0;

                  if (a === 0) {
                    // Just return the x^0 coefficient
                    return this.getCoefficient(0);
                  }

                  var size = this.coefficients.length;

                  if (a === 1) {
                    // Just the sum of the coefficients
                    this.coefficients.forEach(function (coefficient) {
                      result = GenericGF_1.addOrSubtractGF(result, coefficient);
                    });
                    return result;
                  }

                  result = this.coefficients[0];

                  for (var i = 1; i < size; i++) {
                    result = GenericGF_1.addOrSubtractGF(this.field.multiply(a, result), this.coefficients[i]);
                  }

                  return result;
                };

                return GenericGFPoly;
              }();

              exports.default = GenericGFPoly;
              /***/

              module.exports = exports.default;
              module.exports.default = exports.default;
            },
            /* 3 */

            /***/
            function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var binarizer_1 = __webpack_require__(4);

              var decoder_1 = __webpack_require__(5);

              var extractor_1 = __webpack_require__(11);

              var locator_1 = __webpack_require__(12);

              function scan(matrix) {
                var locations = locator_1.locate(matrix);

                if (!locations) {
                  return null;
                }

                for (var _i = 0, locations_1 = locations; _i < locations_1.length; _i++) {
                  var location_1 = locations_1[_i];
                  var extracted = extractor_1.extract(matrix, location_1);
                  var decoded = decoder_1.decode(extracted.matrix);

                  if (decoded) {
                    return {
                      binaryData: decoded.bytes,
                      data: decoded.text,
                      chunks: decoded.chunks,
                      location: {
                        topRightCorner: extracted.mappingFunction(location_1.dimension, 0),
                        topLeftCorner: extracted.mappingFunction(0, 0),
                        bottomRightCorner: extracted.mappingFunction(location_1.dimension, location_1.dimension),
                        bottomLeftCorner: extracted.mappingFunction(0, location_1.dimension),
                        topRightFinderPattern: location_1.topRight,
                        topLeftFinderPattern: location_1.topLeft,
                        bottomLeftFinderPattern: location_1.bottomLeft,
                        bottomRightAlignmentPattern: location_1.alignmentPattern
                      }
                    };
                  }
                }

                return null;
              }

              var defaultOptions = {
                inversionAttempts: "attemptBoth"
              };

              function jsQR(data, width, height, providedOptions) {
                if (providedOptions === void 0) {
                  providedOptions = {};
                }

                var options = defaultOptions;
                Object.keys(options || {}).forEach(function (opt) {
                  options[opt] = providedOptions[opt] || options[opt];
                });
                var shouldInvert = options.inversionAttempts === "attemptBoth" || options.inversionAttempts === "invertFirst";
                var tryInvertedFirst = options.inversionAttempts === "onlyInvert" || options.inversionAttempts === "invertFirst";

                var _a = binarizer_1.binarize(data, width, height, shouldInvert),
                    binarized = _a.binarized,
                    inverted = _a.inverted;

                var result = scan(tryInvertedFirst ? inverted : binarized);

                if (!result && (options.inversionAttempts === "attemptBoth" || options.inversionAttempts === "invertFirst")) {
                  result = scan(tryInvertedFirst ? binarized : inverted);
                }

                return result;
              }

              jsQR.default = jsQR;
              exports.default = jsQR;
              /***/

              module.exports = exports.default;
              module.exports.default = exports.default;
            },
            /* 4 */

            /***/
            function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var BitMatrix_1 = __webpack_require__(0);

              var REGION_SIZE = 8;
              var MIN_DYNAMIC_RANGE = 24;

              function numBetween(value, min, max) {
                return value < min ? min : value > max ? max : value;
              } // Like BitMatrix but accepts arbitry Uint8 values


              var Matrix =
              /** @class */
              function () {
                function Matrix(width, height) {
                  this.width = width;
                  this.data = new Uint8ClampedArray(width * height);
                }

                Matrix.prototype.get = function (x, y) {
                  return this.data[y * this.width + x];
                };

                Matrix.prototype.set = function (x, y, value) {
                  this.data[y * this.width + x] = value;
                };

                return Matrix;
              }();

              function binarize(data, width, height, returnInverted) {
                if (data.length !== width * height * 4) {
                  throw new Error("Malformed data passed to binarizer.");
                } // Convert image to greyscale


                var greyscalePixels = new Matrix(width, height);

                for (var x = 0; x < width; x++) {
                  for (var y = 0; y < height; y++) {
                    var r = data[(y * width + x) * 4 + 0];
                    var g = data[(y * width + x) * 4 + 1];
                    var b = data[(y * width + x) * 4 + 2];
                    greyscalePixels.set(x, y, 0.2126 * r + 0.7152 * g + 0.0722 * b);
                  }
                }

                var horizontalRegionCount = Math.ceil(width / REGION_SIZE);
                var verticalRegionCount = Math.ceil(height / REGION_SIZE);
                var blackPoints = new Matrix(horizontalRegionCount, verticalRegionCount);

                for (var verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++) {
                  for (var hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {
                    var sum = 0;
                    var min = Infinity;
                    var max = 0;

                    for (var y = 0; y < REGION_SIZE; y++) {
                      for (var x = 0; x < REGION_SIZE; x++) {
                        var pixelLumosity = greyscalePixels.get(hortizontalRegion * REGION_SIZE + x, verticalRegion * REGION_SIZE + y);
                        sum += pixelLumosity;
                        min = Math.min(min, pixelLumosity);
                        max = Math.max(max, pixelLumosity);
                      }
                    }

                    var average = sum / Math.pow(REGION_SIZE, 2);

                    if (max - min <= MIN_DYNAMIC_RANGE) {
                      // If variation within the block is low, assume this is a block with only light or only
                      // dark pixels. In that case we do not want to use the average, as it would divide this
                      // low contrast area into black and white pixels, essentially creating data out of noise.
                      //
                      // Default the blackpoint for these blocks to be half the min - effectively white them out
                      average = min / 2;

                      if (verticalRegion > 0 && hortizontalRegion > 0) {
                        // Correct the "white background" assumption for blocks that have neighbors by comparing
                        // the pixels in this block to the previously calculated black points. This is based on
                        // the fact that dark barcode symbology is always surrounded by some amount of light
                        // background for which reasonable black point estimates were made. The bp estimated at
                        // the boundaries is used for the interior.
                        // The (min < bp) is arbitrary but works better than other heuristics that were tried.
                        var averageNeighborBlackPoint = (blackPoints.get(hortizontalRegion, verticalRegion - 1) + 2 * blackPoints.get(hortizontalRegion - 1, verticalRegion) + blackPoints.get(hortizontalRegion - 1, verticalRegion - 1)) / 4;

                        if (min < averageNeighborBlackPoint) {
                          average = averageNeighborBlackPoint;
                        }
                      }
                    }

                    blackPoints.set(hortizontalRegion, verticalRegion, average);
                  }
                }

                var binarized = BitMatrix_1.BitMatrix.createEmpty(width, height);
                var inverted = null;

                if (returnInverted) {
                  inverted = BitMatrix_1.BitMatrix.createEmpty(width, height);
                }

                for (var verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++) {
                  for (var hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {
                    var left = numBetween(hortizontalRegion, 2, horizontalRegionCount - 3);
                    var top_1 = numBetween(verticalRegion, 2, verticalRegionCount - 3);
                    var sum = 0;

                    for (var xRegion = -2; xRegion <= 2; xRegion++) {
                      for (var yRegion = -2; yRegion <= 2; yRegion++) {
                        sum += blackPoints.get(left + xRegion, top_1 + yRegion);
                      }
                    }

                    var threshold = sum / 25;

                    for (var xRegion = 0; xRegion < REGION_SIZE; xRegion++) {
                      for (var yRegion = 0; yRegion < REGION_SIZE; yRegion++) {
                        var x = hortizontalRegion * REGION_SIZE + xRegion;
                        var y = verticalRegion * REGION_SIZE + yRegion;
                        var lum = greyscalePixels.get(x, y);
                        binarized.set(x, y, lum <= threshold);

                        if (returnInverted) {
                          inverted.set(x, y, !(lum <= threshold));
                        }
                      }
                    }
                  }
                }

                if (returnInverted) {
                  return {
                    binarized: binarized,
                    inverted: inverted
                  };
                }

                return {
                  binarized: binarized
                };
              }

              exports.binarize = binarize;
              /***/
            },
            /* 5 */

            /***/
            function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var BitMatrix_1 = __webpack_require__(0);

              var decodeData_1 = __webpack_require__(6);

              var reedsolomon_1 = __webpack_require__(9);

              var version_1 = __webpack_require__(10); // tslint:disable:no-bitwise


              function numBitsDiffering(x, y) {
                var z = x ^ y;
                var bitCount = 0;

                while (z) {
                  bitCount++;
                  z &= z - 1;
                }

                return bitCount;
              }

              function pushBit(bit, byte) {
                return byte << 1 | bit;
              } // tslint:enable:no-bitwise


              var FORMAT_INFO_TABLE = [{
                bits: 0x5412,
                formatInfo: {
                  errorCorrectionLevel: 1,
                  dataMask: 0
                }
              }, {
                bits: 0x5125,
                formatInfo: {
                  errorCorrectionLevel: 1,
                  dataMask: 1
                }
              }, {
                bits: 0x5E7C,
                formatInfo: {
                  errorCorrectionLevel: 1,
                  dataMask: 2
                }
              }, {
                bits: 0x5B4B,
                formatInfo: {
                  errorCorrectionLevel: 1,
                  dataMask: 3
                }
              }, {
                bits: 0x45F9,
                formatInfo: {
                  errorCorrectionLevel: 1,
                  dataMask: 4
                }
              }, {
                bits: 0x40CE,
                formatInfo: {
                  errorCorrectionLevel: 1,
                  dataMask: 5
                }
              }, {
                bits: 0x4F97,
                formatInfo: {
                  errorCorrectionLevel: 1,
                  dataMask: 6
                }
              }, {
                bits: 0x4AA0,
                formatInfo: {
                  errorCorrectionLevel: 1,
                  dataMask: 7
                }
              }, {
                bits: 0x77C4,
                formatInfo: {
                  errorCorrectionLevel: 0,
                  dataMask: 0
                }
              }, {
                bits: 0x72F3,
                formatInfo: {
                  errorCorrectionLevel: 0,
                  dataMask: 1
                }
              }, {
                bits: 0x7DAA,
                formatInfo: {
                  errorCorrectionLevel: 0,
                  dataMask: 2
                }
              }, {
                bits: 0x789D,
                formatInfo: {
                  errorCorrectionLevel: 0,
                  dataMask: 3
                }
              }, {
                bits: 0x662F,
                formatInfo: {
                  errorCorrectionLevel: 0,
                  dataMask: 4
                }
              }, {
                bits: 0x6318,
                formatInfo: {
                  errorCorrectionLevel: 0,
                  dataMask: 5
                }
              }, {
                bits: 0x6C41,
                formatInfo: {
                  errorCorrectionLevel: 0,
                  dataMask: 6
                }
              }, {
                bits: 0x6976,
                formatInfo: {
                  errorCorrectionLevel: 0,
                  dataMask: 7
                }
              }, {
                bits: 0x1689,
                formatInfo: {
                  errorCorrectionLevel: 3,
                  dataMask: 0
                }
              }, {
                bits: 0x13BE,
                formatInfo: {
                  errorCorrectionLevel: 3,
                  dataMask: 1
                }
              }, {
                bits: 0x1CE7,
                formatInfo: {
                  errorCorrectionLevel: 3,
                  dataMask: 2
                }
              }, {
                bits: 0x19D0,
                formatInfo: {
                  errorCorrectionLevel: 3,
                  dataMask: 3
                }
              }, {
                bits: 0x0762,
                formatInfo: {
                  errorCorrectionLevel: 3,
                  dataMask: 4
                }
              }, {
                bits: 0x0255,
                formatInfo: {
                  errorCorrectionLevel: 3,
                  dataMask: 5
                }
              }, {
                bits: 0x0D0C,
                formatInfo: {
                  errorCorrectionLevel: 3,
                  dataMask: 6
                }
              }, {
                bits: 0x083B,
                formatInfo: {
                  errorCorrectionLevel: 3,
                  dataMask: 7
                }
              }, {
                bits: 0x355F,
                formatInfo: {
                  errorCorrectionLevel: 2,
                  dataMask: 0
                }
              }, {
                bits: 0x3068,
                formatInfo: {
                  errorCorrectionLevel: 2,
                  dataMask: 1
                }
              }, {
                bits: 0x3F31,
                formatInfo: {
                  errorCorrectionLevel: 2,
                  dataMask: 2
                }
              }, {
                bits: 0x3A06,
                formatInfo: {
                  errorCorrectionLevel: 2,
                  dataMask: 3
                }
              }, {
                bits: 0x24B4,
                formatInfo: {
                  errorCorrectionLevel: 2,
                  dataMask: 4
                }
              }, {
                bits: 0x2183,
                formatInfo: {
                  errorCorrectionLevel: 2,
                  dataMask: 5
                }
              }, {
                bits: 0x2EDA,
                formatInfo: {
                  errorCorrectionLevel: 2,
                  dataMask: 6
                }
              }, {
                bits: 0x2BED,
                formatInfo: {
                  errorCorrectionLevel: 2,
                  dataMask: 7
                }
              }];
              var DATA_MASKS = [function (p) {
                return (p.y + p.x) % 2 === 0;
              }, function (p) {
                return p.y % 2 === 0;
              }, function (p) {
                return p.x % 3 === 0;
              }, function (p) {
                return (p.y + p.x) % 3 === 0;
              }, function (p) {
                return (Math.floor(p.y / 2) + Math.floor(p.x / 3)) % 2 === 0;
              }, function (p) {
                return p.x * p.y % 2 + p.x * p.y % 3 === 0;
              }, function (p) {
                return (p.y * p.x % 2 + p.y * p.x % 3) % 2 === 0;
              }, function (p) {
                return ((p.y + p.x) % 2 + p.y * p.x % 3) % 2 === 0;
              }];

              function buildFunctionPatternMask(version) {
                var dimension = 17 + 4 * version.versionNumber;
                var matrix = BitMatrix_1.BitMatrix.createEmpty(dimension, dimension);
                matrix.setRegion(0, 0, 9, 9, true); // Top left finder pattern + separator + format

                matrix.setRegion(dimension - 8, 0, 8, 9, true); // Top right finder pattern + separator + format

                matrix.setRegion(0, dimension - 8, 9, 8, true); // Bottom left finder pattern + separator + format
                // Alignment patterns

                for (var _i = 0, _a = version.alignmentPatternCenters; _i < _a.length; _i++) {
                  var x = _a[_i];

                  for (var _b = 0, _c = version.alignmentPatternCenters; _b < _c.length; _b++) {
                    var y = _c[_b];

                    if (!(x === 6 && y === 6 || x === 6 && y === dimension - 7 || x === dimension - 7 && y === 6)) {
                      matrix.setRegion(x - 2, y - 2, 5, 5, true);
                    }
                  }
                }

                matrix.setRegion(6, 9, 1, dimension - 17, true); // Vertical timing pattern

                matrix.setRegion(9, 6, dimension - 17, 1, true); // Horizontal timing pattern

                if (version.versionNumber > 6) {
                  matrix.setRegion(dimension - 11, 0, 3, 6, true); // Version info, top right

                  matrix.setRegion(0, dimension - 11, 6, 3, true); // Version info, bottom left
                }

                return matrix;
              }

              function readCodewords(matrix, version, formatInfo) {
                var dataMask = DATA_MASKS[formatInfo.dataMask];
                var dimension = matrix.height;
                var functionPatternMask = buildFunctionPatternMask(version);
                var codewords = [];
                var currentByte = 0;
                var bitsRead = 0; // Read columns in pairs, from right to left

                var readingUp = true;

                for (var columnIndex = dimension - 1; columnIndex > 0; columnIndex -= 2) {
                  if (columnIndex === 6) {
                    // Skip whole column with vertical alignment pattern;
                    columnIndex--;
                  }

                  for (var i = 0; i < dimension; i++) {
                    var y = readingUp ? dimension - 1 - i : i;

                    for (var columnOffset = 0; columnOffset < 2; columnOffset++) {
                      var x = columnIndex - columnOffset;

                      if (!functionPatternMask.get(x, y)) {
                        bitsRead++;
                        var bit = matrix.get(x, y);

                        if (dataMask({
                          y: y,
                          x: x
                        })) {
                          bit = !bit;
                        }

                        currentByte = pushBit(bit, currentByte);

                        if (bitsRead === 8) {
                          // Whole bytes
                          codewords.push(currentByte);
                          bitsRead = 0;
                          currentByte = 0;
                        }
                      }
                    }
                  }

                  readingUp = !readingUp;
                }

                return codewords;
              }

              function readVersion(matrix) {
                var dimension = matrix.height;
                var provisionalVersion = Math.floor((dimension - 17) / 4);

                if (provisionalVersion <= 6) {
                  // 6 and under dont have version info in the QR code
                  return version_1.VERSIONS[provisionalVersion - 1];
                }

                var topRightVersionBits = 0;

                for (var y = 5; y >= 0; y--) {
                  for (var x = dimension - 9; x >= dimension - 11; x--) {
                    topRightVersionBits = pushBit(matrix.get(x, y), topRightVersionBits);
                  }
                }

                var bottomLeftVersionBits = 0;

                for (var x = 5; x >= 0; x--) {
                  for (var y = dimension - 9; y >= dimension - 11; y--) {
                    bottomLeftVersionBits = pushBit(matrix.get(x, y), bottomLeftVersionBits);
                  }
                }

                var bestDifference = Infinity;
                var bestVersion;

                for (var _i = 0, VERSIONS_1 = version_1.VERSIONS; _i < VERSIONS_1.length; _i++) {
                  var version = VERSIONS_1[_i];

                  if (version.infoBits === topRightVersionBits || version.infoBits === bottomLeftVersionBits) {
                    return version;
                  }

                  var difference = numBitsDiffering(topRightVersionBits, version.infoBits);

                  if (difference < bestDifference) {
                    bestVersion = version;
                    bestDifference = difference;
                  }

                  difference = numBitsDiffering(bottomLeftVersionBits, version.infoBits);

                  if (difference < bestDifference) {
                    bestVersion = version;
                    bestDifference = difference;
                  }
                } // We can tolerate up to 3 bits of error since no two version info codewords will
                // differ in less than 8 bits.


                if (bestDifference <= 3) {
                  return bestVersion;
                }
              }

              function readFormatInformation(matrix) {
                var topLeftFormatInfoBits = 0;

                for (var x = 0; x <= 8; x++) {
                  if (x !== 6) {
                    // Skip timing pattern bit
                    topLeftFormatInfoBits = pushBit(matrix.get(x, 8), topLeftFormatInfoBits);
                  }
                }

                for (var y = 7; y >= 0; y--) {
                  if (y !== 6) {
                    // Skip timing pattern bit
                    topLeftFormatInfoBits = pushBit(matrix.get(8, y), topLeftFormatInfoBits);
                  }
                }

                var dimension = matrix.height;
                var topRightBottomRightFormatInfoBits = 0;

                for (var y = dimension - 1; y >= dimension - 7; y--) {
                  // bottom left
                  topRightBottomRightFormatInfoBits = pushBit(matrix.get(8, y), topRightBottomRightFormatInfoBits);
                }

                for (var x = dimension - 8; x < dimension; x++) {
                  // top right
                  topRightBottomRightFormatInfoBits = pushBit(matrix.get(x, 8), topRightBottomRightFormatInfoBits);
                }

                var bestDifference = Infinity;
                var bestFormatInfo = null;

                for (var _i = 0, FORMAT_INFO_TABLE_1 = FORMAT_INFO_TABLE; _i < FORMAT_INFO_TABLE_1.length; _i++) {
                  var _a = FORMAT_INFO_TABLE_1[_i],
                      bits = _a.bits,
                      formatInfo = _a.formatInfo;

                  if (bits === topLeftFormatInfoBits || bits === topRightBottomRightFormatInfoBits) {
                    return formatInfo;
                  }

                  var difference = numBitsDiffering(topLeftFormatInfoBits, bits);

                  if (difference < bestDifference) {
                    bestFormatInfo = formatInfo;
                    bestDifference = difference;
                  }

                  if (topLeftFormatInfoBits !== topRightBottomRightFormatInfoBits) {
                    // also try the other option
                    difference = numBitsDiffering(topRightBottomRightFormatInfoBits, bits);

                    if (difference < bestDifference) {
                      bestFormatInfo = formatInfo;
                      bestDifference = difference;
                    }
                  }
                } // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits differing means we found a match


                if (bestDifference <= 3) {
                  return bestFormatInfo;
                }

                return null;
              }

              function getDataBlocks(codewords, version, ecLevel) {
                var ecInfo = version.errorCorrectionLevels[ecLevel];
                var dataBlocks = [];
                var totalCodewords = 0;
                ecInfo.ecBlocks.forEach(function (block) {
                  for (var i = 0; i < block.numBlocks; i++) {
                    dataBlocks.push({
                      numDataCodewords: block.dataCodewordsPerBlock,
                      codewords: []
                    });
                    totalCodewords += block.dataCodewordsPerBlock + ecInfo.ecCodewordsPerBlock;
                  }
                }); // In some cases the QR code will be malformed enough that we pull off more or less than we should.
                // If we pull off less there's nothing we can do.
                // If we pull off more we can safely truncate

                if (codewords.length < totalCodewords) {
                  return null;
                }

                codewords = codewords.slice(0, totalCodewords);
                var shortBlockSize = ecInfo.ecBlocks[0].dataCodewordsPerBlock; // Pull codewords to fill the blocks up to the minimum size

                for (var i = 0; i < shortBlockSize; i++) {
                  for (var _i = 0, dataBlocks_1 = dataBlocks; _i < dataBlocks_1.length; _i++) {
                    var dataBlock = dataBlocks_1[_i];
                    dataBlock.codewords.push(codewords.shift());
                  }
                } // If there are any large blocks, pull codewords to fill the last element of those


                if (ecInfo.ecBlocks.length > 1) {
                  var smallBlockCount = ecInfo.ecBlocks[0].numBlocks;
                  var largeBlockCount = ecInfo.ecBlocks[1].numBlocks;

                  for (var i = 0; i < largeBlockCount; i++) {
                    dataBlocks[smallBlockCount + i].codewords.push(codewords.shift());
                  }
                } // Add the rest of the codewords to the blocks. These are the error correction codewords.


                while (codewords.length > 0) {
                  for (var _a = 0, dataBlocks_2 = dataBlocks; _a < dataBlocks_2.length; _a++) {
                    var dataBlock = dataBlocks_2[_a];
                    dataBlock.codewords.push(codewords.shift());
                  }
                }

                return dataBlocks;
              }

              function decodeMatrix(matrix) {
                var version = readVersion(matrix);

                if (!version) {
                  return null;
                }

                var formatInfo = readFormatInformation(matrix);

                if (!formatInfo) {
                  return null;
                }

                var codewords = readCodewords(matrix, version, formatInfo);
                var dataBlocks = getDataBlocks(codewords, version, formatInfo.errorCorrectionLevel);

                if (!dataBlocks) {
                  return null;
                } // Count total number of data bytes


                var totalBytes = dataBlocks.reduce(function (a, b) {
                  return a + b.numDataCodewords;
                }, 0);
                var resultBytes = new Uint8ClampedArray(totalBytes);
                var resultIndex = 0;

                for (var _i = 0, dataBlocks_3 = dataBlocks; _i < dataBlocks_3.length; _i++) {
                  var dataBlock = dataBlocks_3[_i];
                  var correctedBytes = reedsolomon_1.decode(dataBlock.codewords, dataBlock.codewords.length - dataBlock.numDataCodewords);

                  if (!correctedBytes) {
                    return null;
                  }

                  for (var i = 0; i < dataBlock.numDataCodewords; i++) {
                    resultBytes[resultIndex++] = correctedBytes[i];
                  }
                }

                try {
                  return decodeData_1.decode(resultBytes, version.versionNumber);
                } catch (_a) {
                  return null;
                }
              }

              function decode(matrix) {
                if (matrix == null) {
                  return null;
                }

                var result = decodeMatrix(matrix);

                if (result) {
                  return result;
                } // Decoding didn't work, try mirroring the QR across the topLeft -> bottomRight line.


                for (var x = 0; x < matrix.width; x++) {
                  for (var y = x + 1; y < matrix.height; y++) {
                    if (matrix.get(x, y) !== matrix.get(y, x)) {
                      matrix.set(x, y, !matrix.get(x, y));
                      matrix.set(y, x, !matrix.get(y, x));
                    }
                  }
                }

                return decodeMatrix(matrix);
              }

              exports.decode = decode;
              /***/
            },
            /* 6 */

            /***/
            function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              }); // tslint:disable:no-bitwise

              var BitStream_1 = __webpack_require__(7);

              var shiftJISTable_1 = __webpack_require__(8);

              var Mode;

              (function (Mode) {
                Mode["Numeric"] = "numeric";
                Mode["Alphanumeric"] = "alphanumeric";
                Mode["Byte"] = "byte";
                Mode["Kanji"] = "kanji";
                Mode["ECI"] = "eci";
              })(Mode = exports.Mode || (exports.Mode = {}));

              var ModeByte;

              (function (ModeByte) {
                ModeByte[ModeByte["Terminator"] = 0] = "Terminator";
                ModeByte[ModeByte["Numeric"] = 1] = "Numeric";
                ModeByte[ModeByte["Alphanumeric"] = 2] = "Alphanumeric";
                ModeByte[ModeByte["Byte"] = 4] = "Byte";
                ModeByte[ModeByte["Kanji"] = 8] = "Kanji";
                ModeByte[ModeByte["ECI"] = 7] = "ECI"; // StructuredAppend = 0x3,
                // FNC1FirstPosition = 0x5,
                // FNC1SecondPosition = 0x9,
              })(ModeByte || (ModeByte = {}));

              function decodeNumeric(stream, size) {
                var bytes = [];
                var text = "";
                var characterCountSize = [10, 12, 14][size];
                var length = stream.readBits(characterCountSize); // Read digits in groups of 3

                while (length >= 3) {
                  var num = stream.readBits(10);

                  if (num >= 1000) {
                    throw new Error("Invalid numeric value above 999");
                  }

                  var a = Math.floor(num / 100);
                  var b = Math.floor(num / 10) % 10;
                  var c = num % 10;
                  bytes.push(48 + a, 48 + b, 48 + c);
                  text += a.toString() + b.toString() + c.toString();
                  length -= 3;
                } // If the number of digits aren't a multiple of 3, the remaining digits are special cased.


                if (length === 2) {
                  var num = stream.readBits(7);

                  if (num >= 100) {
                    throw new Error("Invalid numeric value above 99");
                  }

                  var a = Math.floor(num / 10);
                  var b = num % 10;
                  bytes.push(48 + a, 48 + b);
                  text += a.toString() + b.toString();
                } else if (length === 1) {
                  var num = stream.readBits(4);

                  if (num >= 10) {
                    throw new Error("Invalid numeric value above 9");
                  }

                  bytes.push(48 + num);
                  text += num.toString();
                }

                return {
                  bytes: bytes,
                  text: text
                };
              }

              var AlphanumericCharacterCodes = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", " ", "$", "%", "*", "+", "-", ".", "/", ":"];

              function decodeAlphanumeric(stream, size) {
                var bytes = [];
                var text = "";
                var characterCountSize = [9, 11, 13][size];
                var length = stream.readBits(characterCountSize);

                while (length >= 2) {
                  var v = stream.readBits(11);
                  var a = Math.floor(v / 45);
                  var b = v % 45;
                  bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0), AlphanumericCharacterCodes[b].charCodeAt(0));
                  text += AlphanumericCharacterCodes[a] + AlphanumericCharacterCodes[b];
                  length -= 2;
                }

                if (length === 1) {
                  var a = stream.readBits(6);
                  bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0));
                  text += AlphanumericCharacterCodes[a];
                }

                return {
                  bytes: bytes,
                  text: text
                };
              }

              function decodeByte(stream, size) {
                var bytes = [];
                var text = "";
                var characterCountSize = [8, 16, 16][size];
                var length = stream.readBits(characterCountSize);

                for (var i = 0; i < length; i++) {
                  var b = stream.readBits(8);
                  bytes.push(b);
                }

                try {
                  text += decodeURIComponent(bytes.map(function (b) {
                    return "%" + ("0" + b.toString(16)).substr(-2);
                  }).join(""));
                } catch (_a) {// failed to decode
                }

                return {
                  bytes: bytes,
                  text: text
                };
              }

              function decodeKanji(stream, size) {
                var bytes = [];
                var text = "";
                var characterCountSize = [8, 10, 12][size];
                var length = stream.readBits(characterCountSize);

                for (var i = 0; i < length; i++) {
                  var k = stream.readBits(13);
                  var c = Math.floor(k / 0xC0) << 8 | k % 0xC0;

                  if (c < 0x1F00) {
                    c += 0x8140;
                  } else {
                    c += 0xC140;
                  }

                  bytes.push(c >> 8, c & 0xFF);
                  text += String.fromCharCode(shiftJISTable_1.shiftJISTable[c]);
                }

                return {
                  bytes: bytes,
                  text: text
                };
              }

              function decode(data, version) {
                var _a, _b, _c, _d;

                var stream = new BitStream_1.BitStream(data); // There are 3 'sizes' based on the version. 1-9 is small (0), 10-26 is medium (1) and 27-40 is large (2).

                var size = version <= 9 ? 0 : version <= 26 ? 1 : 2;
                var result = {
                  text: "",
                  bytes: [],
                  chunks: []
                };

                while (stream.available() >= 4) {
                  var mode = stream.readBits(4);

                  if (mode === ModeByte.Terminator) {
                    return result;
                  } else if (mode === ModeByte.ECI) {
                    if (stream.readBits(1) === 0) {
                      result.chunks.push({
                        type: Mode.ECI,
                        assignmentNumber: stream.readBits(7)
                      });
                    } else if (stream.readBits(1) === 0) {
                      result.chunks.push({
                        type: Mode.ECI,
                        assignmentNumber: stream.readBits(14)
                      });
                    } else if (stream.readBits(1) === 0) {
                      result.chunks.push({
                        type: Mode.ECI,
                        assignmentNumber: stream.readBits(21)
                      });
                    } else {
                      // ECI data seems corrupted
                      result.chunks.push({
                        type: Mode.ECI,
                        assignmentNumber: -1
                      });
                    }
                  } else if (mode === ModeByte.Numeric) {
                    var numericResult = decodeNumeric(stream, size);
                    result.text += numericResult.text;

                    (_a = result.bytes).push.apply(_a, numericResult.bytes);

                    result.chunks.push({
                      type: Mode.Numeric,
                      text: numericResult.text
                    });
                  } else if (mode === ModeByte.Alphanumeric) {
                    var alphanumericResult = decodeAlphanumeric(stream, size);
                    result.text += alphanumericResult.text;

                    (_b = result.bytes).push.apply(_b, alphanumericResult.bytes);

                    result.chunks.push({
                      type: Mode.Alphanumeric,
                      text: alphanumericResult.text
                    });
                  } else if (mode === ModeByte.Byte) {
                    var byteResult = decodeByte(stream, size);
                    result.text += byteResult.text;

                    (_c = result.bytes).push.apply(_c, byteResult.bytes);

                    result.chunks.push({
                      type: Mode.Byte,
                      bytes: byteResult.bytes,
                      text: byteResult.text
                    });
                  } else if (mode === ModeByte.Kanji) {
                    var kanjiResult = decodeKanji(stream, size);
                    result.text += kanjiResult.text;

                    (_d = result.bytes).push.apply(_d, kanjiResult.bytes);

                    result.chunks.push({
                      type: Mode.Kanji,
                      bytes: kanjiResult.bytes,
                      text: kanjiResult.text
                    });
                  }
                } // If there is no data left, or the remaining bits are all 0, then that counts as a termination marker


                if (stream.available() === 0 || stream.readBits(stream.available()) === 0) {
                  return result;
                }
              }

              exports.decode = decode;
              /***/
            },
            /* 7 */

            /***/
            function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var BitStream =
              /** @class */
              function () {
                function BitStream(bytes) {
                  this.byteOffset = 0;
                  this.bitOffset = 0;
                  this.bytes = bytes;
                }

                BitStream.prototype.readBits = function (numBits) {
                  if (numBits < 1 || numBits > 32 || numBits > this.available()) {
                    throw new Error("Cannot read " + numBits.toString() + " bits");
                  }

                  var result = 0; // First, read remainder from current byte

                  if (this.bitOffset > 0) {
                    var bitsLeft = 8 - this.bitOffset;
                    var toRead = numBits < bitsLeft ? numBits : bitsLeft;
                    var bitsToNotRead = bitsLeft - toRead;
                    var mask = 0xFF >> 8 - toRead << bitsToNotRead;
                    result = (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;
                    numBits -= toRead;
                    this.bitOffset += toRead;

                    if (this.bitOffset === 8) {
                      this.bitOffset = 0;
                      this.byteOffset++;
                    }
                  } // Next read whole bytes


                  if (numBits > 0) {
                    while (numBits >= 8) {
                      result = result << 8 | this.bytes[this.byteOffset] & 0xFF;
                      this.byteOffset++;
                      numBits -= 8;
                    } // Finally read a partial byte


                    if (numBits > 0) {
                      var bitsToNotRead = 8 - numBits;
                      var mask = 0xFF >> bitsToNotRead << bitsToNotRead;
                      result = result << numBits | (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;
                      this.bitOffset += numBits;
                    }
                  }

                  return result;
                };

                BitStream.prototype.available = function () {
                  return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;
                };

                return BitStream;
              }();

              exports.BitStream = BitStream;
              /***/
            },
            /* 8 */

            /***/
            function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              exports.shiftJISTable = {
                0x20: 0x0020,
                0x21: 0x0021,
                0x22: 0x0022,
                0x23: 0x0023,
                0x24: 0x0024,
                0x25: 0x0025,
                0x26: 0x0026,
                0x27: 0x0027,
                0x28: 0x0028,
                0x29: 0x0029,
                0x2A: 0x002A,
                0x2B: 0x002B,
                0x2C: 0x002C,
                0x2D: 0x002D,
                0x2E: 0x002E,
                0x2F: 0x002F,
                0x30: 0x0030,
                0x31: 0x0031,
                0x32: 0x0032,
                0x33: 0x0033,
                0x34: 0x0034,
                0x35: 0x0035,
                0x36: 0x0036,
                0x37: 0x0037,
                0x38: 0x0038,
                0x39: 0x0039,
                0x3A: 0x003A,
                0x3B: 0x003B,
                0x3C: 0x003C,
                0x3D: 0x003D,
                0x3E: 0x003E,
                0x3F: 0x003F,
                0x40: 0x0040,
                0x41: 0x0041,
                0x42: 0x0042,
                0x43: 0x0043,
                0x44: 0x0044,
                0x45: 0x0045,
                0x46: 0x0046,
                0x47: 0x0047,
                0x48: 0x0048,
                0x49: 0x0049,
                0x4A: 0x004A,
                0x4B: 0x004B,
                0x4C: 0x004C,
                0x4D: 0x004D,
                0x4E: 0x004E,
                0x4F: 0x004F,
                0x50: 0x0050,
                0x51: 0x0051,
                0x52: 0x0052,
                0x53: 0x0053,
                0x54: 0x0054,
                0x55: 0x0055,
                0x56: 0x0056,
                0x57: 0x0057,
                0x58: 0x0058,
                0x59: 0x0059,
                0x5A: 0x005A,
                0x5B: 0x005B,
                0x5C: 0x00A5,
                0x5D: 0x005D,
                0x5E: 0x005E,
                0x5F: 0x005F,
                0x60: 0x0060,
                0x61: 0x0061,
                0x62: 0x0062,
                0x63: 0x0063,
                0x64: 0x0064,
                0x65: 0x0065,
                0x66: 0x0066,
                0x67: 0x0067,
                0x68: 0x0068,
                0x69: 0x0069,
                0x6A: 0x006A,
                0x6B: 0x006B,
                0x6C: 0x006C,
                0x6D: 0x006D,
                0x6E: 0x006E,
                0x6F: 0x006F,
                0x70: 0x0070,
                0x71: 0x0071,
                0x72: 0x0072,
                0x73: 0x0073,
                0x74: 0x0074,
                0x75: 0x0075,
                0x76: 0x0076,
                0x77: 0x0077,
                0x78: 0x0078,
                0x79: 0x0079,
                0x7A: 0x007A,
                0x7B: 0x007B,
                0x7C: 0x007C,
                0x7D: 0x007D,
                0x7E: 0x203E,
                0x8140: 0x3000,
                0x8141: 0x3001,
                0x8142: 0x3002,
                0x8143: 0xFF0C,
                0x8144: 0xFF0E,
                0x8145: 0x30FB,
                0x8146: 0xFF1A,
                0x8147: 0xFF1B,
                0x8148: 0xFF1F,
                0x8149: 0xFF01,
                0x814A: 0x309B,
                0x814B: 0x309C,
                0x814C: 0x00B4,
                0x814D: 0xFF40,
                0x814E: 0x00A8,
                0x814F: 0xFF3E,
                0x8150: 0xFFE3,
                0x8151: 0xFF3F,
                0x8152: 0x30FD,
                0x8153: 0x30FE,
                0x8154: 0x309D,
                0x8155: 0x309E,
                0x8156: 0x3003,
                0x8157: 0x4EDD,
                0x8158: 0x3005,
                0x8159: 0x3006,
                0x815A: 0x3007,
                0x815B: 0x30FC,
                0x815C: 0x2015,
                0x815D: 0x2010,
                0x815E: 0xFF0F,
                0x815F: 0x005C,
                0x8160: 0x301C,
                0x8161: 0x2016,
                0x8162: 0xFF5C,
                0x8163: 0x2026,
                0x8164: 0x2025,
                0x8165: 0x2018,
                0x8166: 0x2019,
                0x8167: 0x201C,
                0x8168: 0x201D,
                0x8169: 0xFF08,
                0x816A: 0xFF09,
                0x816B: 0x3014,
                0x816C: 0x3015,
                0x816D: 0xFF3B,
                0x816E: 0xFF3D,
                0x816F: 0xFF5B,
                0x8170: 0xFF5D,
                0x8171: 0x3008,
                0x8172: 0x3009,
                0x8173: 0x300A,
                0x8174: 0x300B,
                0x8175: 0x300C,
                0x8176: 0x300D,
                0x8177: 0x300E,
                0x8178: 0x300F,
                0x8179: 0x3010,
                0x817A: 0x3011,
                0x817B: 0xFF0B,
                0x817C: 0x2212,
                0x817D: 0x00B1,
                0x817E: 0x00D7,
                0x8180: 0x00F7,
                0x8181: 0xFF1D,
                0x8182: 0x2260,
                0x8183: 0xFF1C,
                0x8184: 0xFF1E,
                0x8185: 0x2266,
                0x8186: 0x2267,
                0x8187: 0x221E,
                0x8188: 0x2234,
                0x8189: 0x2642,
                0x818A: 0x2640,
                0x818B: 0x00B0,
                0x818C: 0x2032,
                0x818D: 0x2033,
                0x818E: 0x2103,
                0x818F: 0xFFE5,
                0x8190: 0xFF04,
                0x8191: 0x00A2,
                0x8192: 0x00A3,
                0x8193: 0xFF05,
                0x8194: 0xFF03,
                0x8195: 0xFF06,
                0x8196: 0xFF0A,
                0x8197: 0xFF20,
                0x8198: 0x00A7,
                0x8199: 0x2606,
                0x819A: 0x2605,
                0x819B: 0x25CB,
                0x819C: 0x25CF,
                0x819D: 0x25CE,
                0x819E: 0x25C7,
                0x819F: 0x25C6,
                0x81A0: 0x25A1,
                0x81A1: 0x25A0,
                0x81A2: 0x25B3,
                0x81A3: 0x25B2,
                0x81A4: 0x25BD,
                0x81A5: 0x25BC,
                0x81A6: 0x203B,
                0x81A7: 0x3012,
                0x81A8: 0x2192,
                0x81A9: 0x2190,
                0x81AA: 0x2191,
                0x81AB: 0x2193,
                0x81AC: 0x3013,
                0x81B8: 0x2208,
                0x81B9: 0x220B,
                0x81BA: 0x2286,
                0x81BB: 0x2287,
                0x81BC: 0x2282,
                0x81BD: 0x2283,
                0x81BE: 0x222A,
                0x81BF: 0x2229,
                0x81C8: 0x2227,
                0x81C9: 0x2228,
                0x81CA: 0x00AC,
                0x81CB: 0x21D2,
                0x81CC: 0x21D4,
                0x81CD: 0x2200,
                0x81CE: 0x2203,
                0x81DA: 0x2220,
                0x81DB: 0x22A5,
                0x81DC: 0x2312,
                0x81DD: 0x2202,
                0x81DE: 0x2207,
                0x81DF: 0x2261,
                0x81E0: 0x2252,
                0x81E1: 0x226A,
                0x81E2: 0x226B,
                0x81E3: 0x221A,
                0x81E4: 0x223D,
                0x81E5: 0x221D,
                0x81E6: 0x2235,
                0x81E7: 0x222B,
                0x81E8: 0x222C,
                0x81F0: 0x212B,
                0x81F1: 0x2030,
                0x81F2: 0x266F,
                0x81F3: 0x266D,
                0x81F4: 0x266A,
                0x81F5: 0x2020,
                0x81F6: 0x2021,
                0x81F7: 0x00B6,
                0x81FC: 0x25EF,
                0x824F: 0xFF10,
                0x8250: 0xFF11,
                0x8251: 0xFF12,
                0x8252: 0xFF13,
                0x8253: 0xFF14,
                0x8254: 0xFF15,
                0x8255: 0xFF16,
                0x8256: 0xFF17,
                0x8257: 0xFF18,
                0x8258: 0xFF19,
                0x8260: 0xFF21,
                0x8261: 0xFF22,
                0x8262: 0xFF23,
                0x8263: 0xFF24,
                0x8264: 0xFF25,
                0x8265: 0xFF26,
                0x8266: 0xFF27,
                0x8267: 0xFF28,
                0x8268: 0xFF29,
                0x8269: 0xFF2A,
                0x826A: 0xFF2B,
                0x826B: 0xFF2C,
                0x826C: 0xFF2D,
                0x826D: 0xFF2E,
                0x826E: 0xFF2F,
                0x826F: 0xFF30,
                0x8270: 0xFF31,
                0x8271: 0xFF32,
                0x8272: 0xFF33,
                0x8273: 0xFF34,
                0x8274: 0xFF35,
                0x8275: 0xFF36,
                0x8276: 0xFF37,
                0x8277: 0xFF38,
                0x8278: 0xFF39,
                0x8279: 0xFF3A,
                0x8281: 0xFF41,
                0x8282: 0xFF42,
                0x8283: 0xFF43,
                0x8284: 0xFF44,
                0x8285: 0xFF45,
                0x8286: 0xFF46,
                0x8287: 0xFF47,
                0x8288: 0xFF48,
                0x8289: 0xFF49,
                0x828A: 0xFF4A,
                0x828B: 0xFF4B,
                0x828C: 0xFF4C,
                0x828D: 0xFF4D,
                0x828E: 0xFF4E,
                0x828F: 0xFF4F,
                0x8290: 0xFF50,
                0x8291: 0xFF51,
                0x8292: 0xFF52,
                0x8293: 0xFF53,
                0x8294: 0xFF54,
                0x8295: 0xFF55,
                0x8296: 0xFF56,
                0x8297: 0xFF57,
                0x8298: 0xFF58,
                0x8299: 0xFF59,
                0x829A: 0xFF5A,
                0x829F: 0x3041,
                0x82A0: 0x3042,
                0x82A1: 0x3043,
                0x82A2: 0x3044,
                0x82A3: 0x3045,
                0x82A4: 0x3046,
                0x82A5: 0x3047,
                0x82A6: 0x3048,
                0x82A7: 0x3049,
                0x82A8: 0x304A,
                0x82A9: 0x304B,
                0x82AA: 0x304C,
                0x82AB: 0x304D,
                0x82AC: 0x304E,
                0x82AD: 0x304F,
                0x82AE: 0x3050,
                0x82AF: 0x3051,
                0x82B0: 0x3052,
                0x82B1: 0x3053,
                0x82B2: 0x3054,
                0x82B3: 0x3055,
                0x82B4: 0x3056,
                0x82B5: 0x3057,
                0x82B6: 0x3058,
                0x82B7: 0x3059,
                0x82B8: 0x305A,
                0x82B9: 0x305B,
                0x82BA: 0x305C,
                0x82BB: 0x305D,
                0x82BC: 0x305E,
                0x82BD: 0x305F,
                0x82BE: 0x3060,
                0x82BF: 0x3061,
                0x82C0: 0x3062,
                0x82C1: 0x3063,
                0x82C2: 0x3064,
                0x82C3: 0x3065,
                0x82C4: 0x3066,
                0x82C5: 0x3067,
                0x82C6: 0x3068,
                0x82C7: 0x3069,
                0x82C8: 0x306A,
                0x82C9: 0x306B,
                0x82CA: 0x306C,
                0x82CB: 0x306D,
                0x82CC: 0x306E,
                0x82CD: 0x306F,
                0x82CE: 0x3070,
                0x82CF: 0x3071,
                0x82D0: 0x3072,
                0x82D1: 0x3073,
                0x82D2: 0x3074,
                0x82D3: 0x3075,
                0x82D4: 0x3076,
                0x82D5: 0x3077,
                0x82D6: 0x3078,
                0x82D7: 0x3079,
                0x82D8: 0x307A,
                0x82D9: 0x307B,
                0x82DA: 0x307C,
                0x82DB: 0x307D,
                0x82DC: 0x307E,
                0x82DD: 0x307F,
                0x82DE: 0x3080,
                0x82DF: 0x3081,
                0x82E0: 0x3082,
                0x82E1: 0x3083,
                0x82E2: 0x3084,
                0x82E3: 0x3085,
                0x82E4: 0x3086,
                0x82E5: 0x3087,
                0x82E6: 0x3088,
                0x82E7: 0x3089,
                0x82E8: 0x308A,
                0x82E9: 0x308B,
                0x82EA: 0x308C,
                0x82EB: 0x308D,
                0x82EC: 0x308E,
                0x82ED: 0x308F,
                0x82EE: 0x3090,
                0x82EF: 0x3091,
                0x82F0: 0x3092,
                0x82F1: 0x3093,
                0x8340: 0x30A1,
                0x8341: 0x30A2,
                0x8342: 0x30A3,
                0x8343: 0x30A4,
                0x8344: 0x30A5,
                0x8345: 0x30A6,
                0x8346: 0x30A7,
                0x8347: 0x30A8,
                0x8348: 0x30A9,
                0x8349: 0x30AA,
                0x834A: 0x30AB,
                0x834B: 0x30AC,
                0x834C: 0x30AD,
                0x834D: 0x30AE,
                0x834E: 0x30AF,
                0x834F: 0x30B0,
                0x8350: 0x30B1,
                0x8351: 0x30B2,
                0x8352: 0x30B3,
                0x8353: 0x30B4,
                0x8354: 0x30B5,
                0x8355: 0x30B6,
                0x8356: 0x30B7,
                0x8357: 0x30B8,
                0x8358: 0x30B9,
                0x8359: 0x30BA,
                0x835A: 0x30BB,
                0x835B: 0x30BC,
                0x835C: 0x30BD,
                0x835D: 0x30BE,
                0x835E: 0x30BF,
                0x835F: 0x30C0,
                0x8360: 0x30C1,
                0x8361: 0x30C2,
                0x8362: 0x30C3,
                0x8363: 0x30C4,
                0x8364: 0x30C5,
                0x8365: 0x30C6,
                0x8366: 0x30C7,
                0x8367: 0x30C8,
                0x8368: 0x30C9,
                0x8369: 0x30CA,
                0x836A: 0x30CB,
                0x836B: 0x30CC,
                0x836C: 0x30CD,
                0x836D: 0x30CE,
                0x836E: 0x30CF,
                0x836F: 0x30D0,
                0x8370: 0x30D1,
                0x8371: 0x30D2,
                0x8372: 0x30D3,
                0x8373: 0x30D4,
                0x8374: 0x30D5,
                0x8375: 0x30D6,
                0x8376: 0x30D7,
                0x8377: 0x30D8,
                0x8378: 0x30D9,
                0x8379: 0x30DA,
                0x837A: 0x30DB,
                0x837B: 0x30DC,
                0x837C: 0x30DD,
                0x837D: 0x30DE,
                0x837E: 0x30DF,
                0x8380: 0x30E0,
                0x8381: 0x30E1,
                0x8382: 0x30E2,
                0x8383: 0x30E3,
                0x8384: 0x30E4,
                0x8385: 0x30E5,
                0x8386: 0x30E6,
                0x8387: 0x30E7,
                0x8388: 0x30E8,
                0x8389: 0x30E9,
                0x838A: 0x30EA,
                0x838B: 0x30EB,
                0x838C: 0x30EC,
                0x838D: 0x30ED,
                0x838E: 0x30EE,
                0x838F: 0x30EF,
                0x8390: 0x30F0,
                0x8391: 0x30F1,
                0x8392: 0x30F2,
                0x8393: 0x30F3,
                0x8394: 0x30F4,
                0x8395: 0x30F5,
                0x8396: 0x30F6,
                0x839F: 0x0391,
                0x83A0: 0x0392,
                0x83A1: 0x0393,
                0x83A2: 0x0394,
                0x83A3: 0x0395,
                0x83A4: 0x0396,
                0x83A5: 0x0397,
                0x83A6: 0x0398,
                0x83A7: 0x0399,
                0x83A8: 0x039A,
                0x83A9: 0x039B,
                0x83AA: 0x039C,
                0x83AB: 0x039D,
                0x83AC: 0x039E,
                0x83AD: 0x039F,
                0x83AE: 0x03A0,
                0x83AF: 0x03A1,
                0x83B0: 0x03A3,
                0x83B1: 0x03A4,
                0x83B2: 0x03A5,
                0x83B3: 0x03A6,
                0x83B4: 0x03A7,
                0x83B5: 0x03A8,
                0x83B6: 0x03A9,
                0x83BF: 0x03B1,
                0x83C0: 0x03B2,
                0x83C1: 0x03B3,
                0x83C2: 0x03B4,
                0x83C3: 0x03B5,
                0x83C4: 0x03B6,
                0x83C5: 0x03B7,
                0x83C6: 0x03B8,
                0x83C7: 0x03B9,
                0x83C8: 0x03BA,
                0x83C9: 0x03BB,
                0x83CA: 0x03BC,
                0x83CB: 0x03BD,
                0x83CC: 0x03BE,
                0x83CD: 0x03BF,
                0x83CE: 0x03C0,
                0x83CF: 0x03C1,
                0x83D0: 0x03C3,
                0x83D1: 0x03C4,
                0x83D2: 0x03C5,
                0x83D3: 0x03C6,
                0x83D4: 0x03C7,
                0x83D5: 0x03C8,
                0x83D6: 0x03C9,
                0x8440: 0x0410,
                0x8441: 0x0411,
                0x8442: 0x0412,
                0x8443: 0x0413,
                0x8444: 0x0414,
                0x8445: 0x0415,
                0x8446: 0x0401,
                0x8447: 0x0416,
                0x8448: 0x0417,
                0x8449: 0x0418,
                0x844A: 0x0419,
                0x844B: 0x041A,
                0x844C: 0x041B,
                0x844D: 0x041C,
                0x844E: 0x041D,
                0x844F: 0x041E,
                0x8450: 0x041F,
                0x8451: 0x0420,
                0x8452: 0x0421,
                0x8453: 0x0422,
                0x8454: 0x0423,
                0x8455: 0x0424,
                0x8456: 0x0425,
                0x8457: 0x0426,
                0x8458: 0x0427,
                0x8459: 0x0428,
                0x845A: 0x0429,
                0x845B: 0x042A,
                0x845C: 0x042B,
                0x845D: 0x042C,
                0x845E: 0x042D,
                0x845F: 0x042E,
                0x8460: 0x042F,
                0x8470: 0x0430,
                0x8471: 0x0431,
                0x8472: 0x0432,
                0x8473: 0x0433,
                0x8474: 0x0434,
                0x8475: 0x0435,
                0x8476: 0x0451,
                0x8477: 0x0436,
                0x8478: 0x0437,
                0x8479: 0x0438,
                0x847A: 0x0439,
                0x847B: 0x043A,
                0x847C: 0x043B,
                0x847D: 0x043C,
                0x847E: 0x043D,
                0x8480: 0x043E,
                0x8481: 0x043F,
                0x8482: 0x0440,
                0x8483: 0x0441,
                0x8484: 0x0442,
                0x8485: 0x0443,
                0x8486: 0x0444,
                0x8487: 0x0445,
                0x8488: 0x0446,
                0x8489: 0x0447,
                0x848A: 0x0448,
                0x848B: 0x0449,
                0x848C: 0x044A,
                0x848D: 0x044B,
                0x848E: 0x044C,
                0x848F: 0x044D,
                0x8490: 0x044E,
                0x8491: 0x044F,
                0x849F: 0x2500,
                0x84A0: 0x2502,
                0x84A1: 0x250C,
                0x84A2: 0x2510,
                0x84A3: 0x2518,
                0x84A4: 0x2514,
                0x84A5: 0x251C,
                0x84A6: 0x252C,
                0x84A7: 0x2524,
                0x84A8: 0x2534,
                0x84A9: 0x253C,
                0x84AA: 0x2501,
                0x84AB: 0x2503,
                0x84AC: 0x250F,
                0x84AD: 0x2513,
                0x84AE: 0x251B,
                0x84AF: 0x2517,
                0x84B0: 0x2523,
                0x84B1: 0x2533,
                0x84B2: 0x252B,
                0x84B3: 0x253B,
                0x84B4: 0x254B,
                0x84B5: 0x2520,
                0x84B6: 0x252F,
                0x84B7: 0x2528,
                0x84B8: 0x2537,
                0x84B9: 0x253F,
                0x84BA: 0x251D,
                0x84BB: 0x2530,
                0x84BC: 0x2525,
                0x84BD: 0x2538,
                0x84BE: 0x2542,
                0x889F: 0x4E9C,
                0x88A0: 0x5516,
                0x88A1: 0x5A03,
                0x88A2: 0x963F,
                0x88A3: 0x54C0,
                0x88A4: 0x611B,
                0x88A5: 0x6328,
                0x88A6: 0x59F6,
                0x88A7: 0x9022,
                0x88A8: 0x8475,
                0x88A9: 0x831C,
                0x88AA: 0x7A50,
                0x88AB: 0x60AA,
                0x88AC: 0x63E1,
                0x88AD: 0x6E25,
                0x88AE: 0x65ED,
                0x88AF: 0x8466,
                0x88B0: 0x82A6,
                0x88B1: 0x9BF5,
                0x88B2: 0x6893,
                0x88B3: 0x5727,
                0x88B4: 0x65A1,
                0x88B5: 0x6271,
                0x88B6: 0x5B9B,
                0x88B7: 0x59D0,
                0x88B8: 0x867B,
                0x88B9: 0x98F4,
                0x88BA: 0x7D62,
                0x88BB: 0x7DBE,
                0x88BC: 0x9B8E,
                0x88BD: 0x6216,
                0x88BE: 0x7C9F,
                0x88BF: 0x88B7,
                0x88C0: 0x5B89,
                0x88C1: 0x5EB5,
                0x88C2: 0x6309,
                0x88C3: 0x6697,
                0x88C4: 0x6848,
                0x88C5: 0x95C7,
                0x88C6: 0x978D,
                0x88C7: 0x674F,
                0x88C8: 0x4EE5,
                0x88C9: 0x4F0A,
                0x88CA: 0x4F4D,
                0x88CB: 0x4F9D,
                0x88CC: 0x5049,
                0x88CD: 0x56F2,
                0x88CE: 0x5937,
                0x88CF: 0x59D4,
                0x88D0: 0x5A01,
                0x88D1: 0x5C09,
                0x88D2: 0x60DF,
                0x88D3: 0x610F,
                0x88D4: 0x6170,
                0x88D5: 0x6613,
                0x88D6: 0x6905,
                0x88D7: 0x70BA,
                0x88D8: 0x754F,
                0x88D9: 0x7570,
                0x88DA: 0x79FB,
                0x88DB: 0x7DAD,
                0x88DC: 0x7DEF,
                0x88DD: 0x80C3,
                0x88DE: 0x840E,
                0x88DF: 0x8863,
                0x88E0: 0x8B02,
                0x88E1: 0x9055,
                0x88E2: 0x907A,
                0x88E3: 0x533B,
                0x88E4: 0x4E95,
                0x88E5: 0x4EA5,
                0x88E6: 0x57DF,
                0x88E7: 0x80B2,
                0x88E8: 0x90C1,
                0x88E9: 0x78EF,
                0x88EA: 0x4E00,
                0x88EB: 0x58F1,
                0x88EC: 0x6EA2,
                0x88ED: 0x9038,
                0x88EE: 0x7A32,
                0x88EF: 0x8328,
                0x88F0: 0x828B,
                0x88F1: 0x9C2F,
                0x88F2: 0x5141,
                0x88F3: 0x5370,
                0x88F4: 0x54BD,
                0x88F5: 0x54E1,
                0x88F6: 0x56E0,
                0x88F7: 0x59FB,
                0x88F8: 0x5F15,
                0x88F9: 0x98F2,
                0x88FA: 0x6DEB,
                0x88FB: 0x80E4,
                0x88FC: 0x852D,
                0x8940: 0x9662,
                0x8941: 0x9670,
                0x8942: 0x96A0,
                0x8943: 0x97FB,
                0x8944: 0x540B,
                0x8945: 0x53F3,
                0x8946: 0x5B87,
                0x8947: 0x70CF,
                0x8948: 0x7FBD,
                0x8949: 0x8FC2,
                0x894A: 0x96E8,
                0x894B: 0x536F,
                0x894C: 0x9D5C,
                0x894D: 0x7ABA,
                0x894E: 0x4E11,
                0x894F: 0x7893,
                0x8950: 0x81FC,
                0x8951: 0x6E26,
                0x8952: 0x5618,
                0x8953: 0x5504,
                0x8954: 0x6B1D,
                0x8955: 0x851A,
                0x8956: 0x9C3B,
                0x8957: 0x59E5,
                0x8958: 0x53A9,
                0x8959: 0x6D66,
                0x895A: 0x74DC,
                0x895B: 0x958F,
                0x895C: 0x5642,
                0x895D: 0x4E91,
                0x895E: 0x904B,
                0x895F: 0x96F2,
                0x8960: 0x834F,
                0x8961: 0x990C,
                0x8962: 0x53E1,
                0x8963: 0x55B6,
                0x8964: 0x5B30,
                0x8965: 0x5F71,
                0x8966: 0x6620,
                0x8967: 0x66F3,
                0x8968: 0x6804,
                0x8969: 0x6C38,
                0x896A: 0x6CF3,
                0x896B: 0x6D29,
                0x896C: 0x745B,
                0x896D: 0x76C8,
                0x896E: 0x7A4E,
                0x896F: 0x9834,
                0x8970: 0x82F1,
                0x8971: 0x885B,
                0x8972: 0x8A60,
                0x8973: 0x92ED,
                0x8974: 0x6DB2,
                0x8975: 0x75AB,
                0x8976: 0x76CA,
                0x8977: 0x99C5,
                0x8978: 0x60A6,
                0x8979: 0x8B01,
                0x897A: 0x8D8A,
                0x897B: 0x95B2,
                0x897C: 0x698E,
                0x897D: 0x53AD,
                0x897E: 0x5186,
                0x8980: 0x5712,
                0x8981: 0x5830,
                0x8982: 0x5944,
                0x8983: 0x5BB4,
                0x8984: 0x5EF6,
                0x8985: 0x6028,
                0x8986: 0x63A9,
                0x8987: 0x63F4,
                0x8988: 0x6CBF,
                0x8989: 0x6F14,
                0x898A: 0x708E,
                0x898B: 0x7114,
                0x898C: 0x7159,
                0x898D: 0x71D5,
                0x898E: 0x733F,
                0x898F: 0x7E01,
                0x8990: 0x8276,
                0x8991: 0x82D1,
                0x8992: 0x8597,
                0x8993: 0x9060,
                0x8994: 0x925B,
                0x8995: 0x9D1B,
                0x8996: 0x5869,
                0x8997: 0x65BC,
                0x8998: 0x6C5A,
                0x8999: 0x7525,
                0x899A: 0x51F9,
                0x899B: 0x592E,
                0x899C: 0x5965,
                0x899D: 0x5F80,
                0x899E: 0x5FDC,
                0x899F: 0x62BC,
                0x89A0: 0x65FA,
                0x89A1: 0x6A2A,
                0x89A2: 0x6B27,
                0x89A3: 0x6BB4,
                0x89A4: 0x738B,
                0x89A5: 0x7FC1,
                0x89A6: 0x8956,
                0x89A7: 0x9D2C,
                0x89A8: 0x9D0E,
                0x89A9: 0x9EC4,
                0x89AA: 0x5CA1,
                0x89AB: 0x6C96,
                0x89AC: 0x837B,
                0x89AD: 0x5104,
                0x89AE: 0x5C4B,
                0x89AF: 0x61B6,
                0x89B0: 0x81C6,
                0x89B1: 0x6876,
                0x89B2: 0x7261,
                0x89B3: 0x4E59,
                0x89B4: 0x4FFA,
                0x89B5: 0x5378,
                0x89B6: 0x6069,
                0x89B7: 0x6E29,
                0x89B8: 0x7A4F,
                0x89B9: 0x97F3,
                0x89BA: 0x4E0B,
                0x89BB: 0x5316,
                0x89BC: 0x4EEE,
                0x89BD: 0x4F55,
                0x89BE: 0x4F3D,
                0x89BF: 0x4FA1,
                0x89C0: 0x4F73,
                0x89C1: 0x52A0,
                0x89C2: 0x53EF,
                0x89C3: 0x5609,
                0x89C4: 0x590F,
                0x89C5: 0x5AC1,
                0x89C6: 0x5BB6,
                0x89C7: 0x5BE1,
                0x89C8: 0x79D1,
                0x89C9: 0x6687,
                0x89CA: 0x679C,
                0x89CB: 0x67B6,
                0x89CC: 0x6B4C,
                0x89CD: 0x6CB3,
                0x89CE: 0x706B,
                0x89CF: 0x73C2,
                0x89D0: 0x798D,
                0x89D1: 0x79BE,
                0x89D2: 0x7A3C,
                0x89D3: 0x7B87,
                0x89D4: 0x82B1,
                0x89D5: 0x82DB,
                0x89D6: 0x8304,
                0x89D7: 0x8377,
                0x89D8: 0x83EF,
                0x89D9: 0x83D3,
                0x89DA: 0x8766,
                0x89DB: 0x8AB2,
                0x89DC: 0x5629,
                0x89DD: 0x8CA8,
                0x89DE: 0x8FE6,
                0x89DF: 0x904E,
                0x89E0: 0x971E,
                0x89E1: 0x868A,
                0x89E2: 0x4FC4,
                0x89E3: 0x5CE8,
                0x89E4: 0x6211,
                0x89E5: 0x7259,
                0x89E6: 0x753B,
                0x89E7: 0x81E5,
                0x89E8: 0x82BD,
                0x89E9: 0x86FE,
                0x89EA: 0x8CC0,
                0x89EB: 0x96C5,
                0x89EC: 0x9913,
                0x89ED: 0x99D5,
                0x89EE: 0x4ECB,
                0x89EF: 0x4F1A,
                0x89F0: 0x89E3,
                0x89F1: 0x56DE,
                0x89F2: 0x584A,
                0x89F3: 0x58CA,
                0x89F4: 0x5EFB,
                0x89F5: 0x5FEB,
                0x89F6: 0x602A,
                0x89F7: 0x6094,
                0x89F8: 0x6062,
                0x89F9: 0x61D0,
                0x89FA: 0x6212,
                0x89FB: 0x62D0,
                0x89FC: 0x6539,
                0x8A40: 0x9B41,
                0x8A41: 0x6666,
                0x8A42: 0x68B0,
                0x8A43: 0x6D77,
                0x8A44: 0x7070,
                0x8A45: 0x754C,
                0x8A46: 0x7686,
                0x8A47: 0x7D75,
                0x8A48: 0x82A5,
                0x8A49: 0x87F9,
                0x8A4A: 0x958B,
                0x8A4B: 0x968E,
                0x8A4C: 0x8C9D,
                0x8A4D: 0x51F1,
                0x8A4E: 0x52BE,
                0x8A4F: 0x5916,
                0x8A50: 0x54B3,
                0x8A51: 0x5BB3,
                0x8A52: 0x5D16,
                0x8A53: 0x6168,
                0x8A54: 0x6982,
                0x8A55: 0x6DAF,
                0x8A56: 0x788D,
                0x8A57: 0x84CB,
                0x8A58: 0x8857,
                0x8A59: 0x8A72,
                0x8A5A: 0x93A7,
                0x8A5B: 0x9AB8,
                0x8A5C: 0x6D6C,
                0x8A5D: 0x99A8,
                0x8A5E: 0x86D9,
                0x8A5F: 0x57A3,
                0x8A60: 0x67FF,
                0x8A61: 0x86CE,
                0x8A62: 0x920E,
                0x8A63: 0x5283,
                0x8A64: 0x5687,
                0x8A65: 0x5404,
                0x8A66: 0x5ED3,
                0x8A67: 0x62E1,
                0x8A68: 0x64B9,
                0x8A69: 0x683C,
                0x8A6A: 0x6838,
                0x8A6B: 0x6BBB,
                0x8A6C: 0x7372,
                0x8A6D: 0x78BA,
                0x8A6E: 0x7A6B,
                0x8A6F: 0x899A,
                0x8A70: 0x89D2,
                0x8A71: 0x8D6B,
                0x8A72: 0x8F03,
                0x8A73: 0x90ED,
                0x8A74: 0x95A3,
                0x8A75: 0x9694,
                0x8A76: 0x9769,
                0x8A77: 0x5B66,
                0x8A78: 0x5CB3,
                0x8A79: 0x697D,
                0x8A7A: 0x984D,
                0x8A7B: 0x984E,
                0x8A7C: 0x639B,
                0x8A7D: 0x7B20,
                0x8A7E: 0x6A2B,
                0x8A80: 0x6A7F,
                0x8A81: 0x68B6,
                0x8A82: 0x9C0D,
                0x8A83: 0x6F5F,
                0x8A84: 0x5272,
                0x8A85: 0x559D,
                0x8A86: 0x6070,
                0x8A87: 0x62EC,
                0x8A88: 0x6D3B,
                0x8A89: 0x6E07,
                0x8A8A: 0x6ED1,
                0x8A8B: 0x845B,
                0x8A8C: 0x8910,
                0x8A8D: 0x8F44,
                0x8A8E: 0x4E14,
                0x8A8F: 0x9C39,
                0x8A90: 0x53F6,
                0x8A91: 0x691B,
                0x8A92: 0x6A3A,
                0x8A93: 0x9784,
                0x8A94: 0x682A,
                0x8A95: 0x515C,
                0x8A96: 0x7AC3,
                0x8A97: 0x84B2,
                0x8A98: 0x91DC,
                0x8A99: 0x938C,
                0x8A9A: 0x565B,
                0x8A9B: 0x9D28,
                0x8A9C: 0x6822,
                0x8A9D: 0x8305,
                0x8A9E: 0x8431,
                0x8A9F: 0x7CA5,
                0x8AA0: 0x5208,
                0x8AA1: 0x82C5,
                0x8AA2: 0x74E6,
                0x8AA3: 0x4E7E,
                0x8AA4: 0x4F83,
                0x8AA5: 0x51A0,
                0x8AA6: 0x5BD2,
                0x8AA7: 0x520A,
                0x8AA8: 0x52D8,
                0x8AA9: 0x52E7,
                0x8AAA: 0x5DFB,
                0x8AAB: 0x559A,
                0x8AAC: 0x582A,
                0x8AAD: 0x59E6,
                0x8AAE: 0x5B8C,
                0x8AAF: 0x5B98,
                0x8AB0: 0x5BDB,
                0x8AB1: 0x5E72,
                0x8AB2: 0x5E79,
                0x8AB3: 0x60A3,
                0x8AB4: 0x611F,
                0x8AB5: 0x6163,
                0x8AB6: 0x61BE,
                0x8AB7: 0x63DB,
                0x8AB8: 0x6562,
                0x8AB9: 0x67D1,
                0x8ABA: 0x6853,
                0x8ABB: 0x68FA,
                0x8ABC: 0x6B3E,
                0x8ABD: 0x6B53,
                0x8ABE: 0x6C57,
                0x8ABF: 0x6F22,
                0x8AC0: 0x6F97,
                0x8AC1: 0x6F45,
                0x8AC2: 0x74B0,
                0x8AC3: 0x7518,
                0x8AC4: 0x76E3,
                0x8AC5: 0x770B,
                0x8AC6: 0x7AFF,
                0x8AC7: 0x7BA1,
                0x8AC8: 0x7C21,
                0x8AC9: 0x7DE9,
                0x8ACA: 0x7F36,
                0x8ACB: 0x7FF0,
                0x8ACC: 0x809D,
                0x8ACD: 0x8266,
                0x8ACE: 0x839E,
                0x8ACF: 0x89B3,
                0x8AD0: 0x8ACC,
                0x8AD1: 0x8CAB,
                0x8AD2: 0x9084,
                0x8AD3: 0x9451,
                0x8AD4: 0x9593,
                0x8AD5: 0x9591,
                0x8AD6: 0x95A2,
                0x8AD7: 0x9665,
                0x8AD8: 0x97D3,
                0x8AD9: 0x9928,
                0x8ADA: 0x8218,
                0x8ADB: 0x4E38,
                0x8ADC: 0x542B,
                0x8ADD: 0x5CB8,
                0x8ADE: 0x5DCC,
                0x8ADF: 0x73A9,
                0x8AE0: 0x764C,
                0x8AE1: 0x773C,
                0x8AE2: 0x5CA9,
                0x8AE3: 0x7FEB,
                0x8AE4: 0x8D0B,
                0x8AE5: 0x96C1,
                0x8AE6: 0x9811,
                0x8AE7: 0x9854,
                0x8AE8: 0x9858,
                0x8AE9: 0x4F01,
                0x8AEA: 0x4F0E,
                0x8AEB: 0x5371,
                0x8AEC: 0x559C,
                0x8AED: 0x5668,
                0x8AEE: 0x57FA,
                0x8AEF: 0x5947,
                0x8AF0: 0x5B09,
                0x8AF1: 0x5BC4,
                0x8AF2: 0x5C90,
                0x8AF3: 0x5E0C,
                0x8AF4: 0x5E7E,
                0x8AF5: 0x5FCC,
                0x8AF6: 0x63EE,
                0x8AF7: 0x673A,
                0x8AF8: 0x65D7,
                0x8AF9: 0x65E2,
                0x8AFA: 0x671F,
                0x8AFB: 0x68CB,
                0x8AFC: 0x68C4,
                0x8B40: 0x6A5F,
                0x8B41: 0x5E30,
                0x8B42: 0x6BC5,
                0x8B43: 0x6C17,
                0x8B44: 0x6C7D,
                0x8B45: 0x757F,
                0x8B46: 0x7948,
                0x8B47: 0x5B63,
                0x8B48: 0x7A00,
                0x8B49: 0x7D00,
                0x8B4A: 0x5FBD,
                0x8B4B: 0x898F,
                0x8B4C: 0x8A18,
                0x8B4D: 0x8CB4,
                0x8B4E: 0x8D77,
                0x8B4F: 0x8ECC,
                0x8B50: 0x8F1D,
                0x8B51: 0x98E2,
                0x8B52: 0x9A0E,
                0x8B53: 0x9B3C,
                0x8B54: 0x4E80,
                0x8B55: 0x507D,
                0x8B56: 0x5100,
                0x8B57: 0x5993,
                0x8B58: 0x5B9C,
                0x8B59: 0x622F,
                0x8B5A: 0x6280,
                0x8B5B: 0x64EC,
                0x8B5C: 0x6B3A,
                0x8B5D: 0x72A0,
                0x8B5E: 0x7591,
                0x8B5F: 0x7947,
                0x8B60: 0x7FA9,
                0x8B61: 0x87FB,
                0x8B62: 0x8ABC,
                0x8B63: 0x8B70,
                0x8B64: 0x63AC,
                0x8B65: 0x83CA,
                0x8B66: 0x97A0,
                0x8B67: 0x5409,
                0x8B68: 0x5403,
                0x8B69: 0x55AB,
                0x8B6A: 0x6854,
                0x8B6B: 0x6A58,
                0x8B6C: 0x8A70,
                0x8B6D: 0x7827,
                0x8B6E: 0x6775,
                0x8B6F: 0x9ECD,
                0x8B70: 0x5374,
                0x8B71: 0x5BA2,
                0x8B72: 0x811A,
                0x8B73: 0x8650,
                0x8B74: 0x9006,
                0x8B75: 0x4E18,
                0x8B76: 0x4E45,
                0x8B77: 0x4EC7,
                0x8B78: 0x4F11,
                0x8B79: 0x53CA,
                0x8B7A: 0x5438,
                0x8B7B: 0x5BAE,
                0x8B7C: 0x5F13,
                0x8B7D: 0x6025,
                0x8B7E: 0x6551,
                0x8B80: 0x673D,
                0x8B81: 0x6C42,
                0x8B82: 0x6C72,
                0x8B83: 0x6CE3,
                0x8B84: 0x7078,
                0x8B85: 0x7403,
                0x8B86: 0x7A76,
                0x8B87: 0x7AAE,
                0x8B88: 0x7B08,
                0x8B89: 0x7D1A,
                0x8B8A: 0x7CFE,
                0x8B8B: 0x7D66,
                0x8B8C: 0x65E7,
                0x8B8D: 0x725B,
                0x8B8E: 0x53BB,
                0x8B8F: 0x5C45,
                0x8B90: 0x5DE8,
                0x8B91: 0x62D2,
                0x8B92: 0x62E0,
                0x8B93: 0x6319,
                0x8B94: 0x6E20,
                0x8B95: 0x865A,
                0x8B96: 0x8A31,
                0x8B97: 0x8DDD,
                0x8B98: 0x92F8,
                0x8B99: 0x6F01,
                0x8B9A: 0x79A6,
                0x8B9B: 0x9B5A,
                0x8B9C: 0x4EA8,
                0x8B9D: 0x4EAB,
                0x8B9E: 0x4EAC,
                0x8B9F: 0x4F9B,
                0x8BA0: 0x4FA0,
                0x8BA1: 0x50D1,
                0x8BA2: 0x5147,
                0x8BA3: 0x7AF6,
                0x8BA4: 0x5171,
                0x8BA5: 0x51F6,
                0x8BA6: 0x5354,
                0x8BA7: 0x5321,
                0x8BA8: 0x537F,
                0x8BA9: 0x53EB,
                0x8BAA: 0x55AC,
                0x8BAB: 0x5883,
                0x8BAC: 0x5CE1,
                0x8BAD: 0x5F37,
                0x8BAE: 0x5F4A,
                0x8BAF: 0x602F,
                0x8BB0: 0x6050,
                0x8BB1: 0x606D,
                0x8BB2: 0x631F,
                0x8BB3: 0x6559,
                0x8BB4: 0x6A4B,
                0x8BB5: 0x6CC1,
                0x8BB6: 0x72C2,
                0x8BB7: 0x72ED,
                0x8BB8: 0x77EF,
                0x8BB9: 0x80F8,
                0x8BBA: 0x8105,
                0x8BBB: 0x8208,
                0x8BBC: 0x854E,
                0x8BBD: 0x90F7,
                0x8BBE: 0x93E1,
                0x8BBF: 0x97FF,
                0x8BC0: 0x9957,
                0x8BC1: 0x9A5A,
                0x8BC2: 0x4EF0,
                0x8BC3: 0x51DD,
                0x8BC4: 0x5C2D,
                0x8BC5: 0x6681,
                0x8BC6: 0x696D,
                0x8BC7: 0x5C40,
                0x8BC8: 0x66F2,
                0x8BC9: 0x6975,
                0x8BCA: 0x7389,
                0x8BCB: 0x6850,
                0x8BCC: 0x7C81,
                0x8BCD: 0x50C5,
                0x8BCE: 0x52E4,
                0x8BCF: 0x5747,
                0x8BD0: 0x5DFE,
                0x8BD1: 0x9326,
                0x8BD2: 0x65A4,
                0x8BD3: 0x6B23,
                0x8BD4: 0x6B3D,
                0x8BD5: 0x7434,
                0x8BD6: 0x7981,
                0x8BD7: 0x79BD,
                0x8BD8: 0x7B4B,
                0x8BD9: 0x7DCA,
                0x8BDA: 0x82B9,
                0x8BDB: 0x83CC,
                0x8BDC: 0x887F,
                0x8BDD: 0x895F,
                0x8BDE: 0x8B39,
                0x8BDF: 0x8FD1,
                0x8BE0: 0x91D1,
                0x8BE1: 0x541F,
                0x8BE2: 0x9280,
                0x8BE3: 0x4E5D,
                0x8BE4: 0x5036,
                0x8BE5: 0x53E5,
                0x8BE6: 0x533A,
                0x8BE7: 0x72D7,
                0x8BE8: 0x7396,
                0x8BE9: 0x77E9,
                0x8BEA: 0x82E6,
                0x8BEB: 0x8EAF,
                0x8BEC: 0x99C6,
                0x8BED: 0x99C8,
                0x8BEE: 0x99D2,
                0x8BEF: 0x5177,
                0x8BF0: 0x611A,
                0x8BF1: 0x865E,
                0x8BF2: 0x55B0,
                0x8BF3: 0x7A7A,
                0x8BF4: 0x5076,
                0x8BF5: 0x5BD3,
                0x8BF6: 0x9047,
                0x8BF7: 0x9685,
                0x8BF8: 0x4E32,
                0x8BF9: 0x6ADB,
                0x8BFA: 0x91E7,
                0x8BFB: 0x5C51,
                0x8BFC: 0x5C48,
                0x8C40: 0x6398,
                0x8C41: 0x7A9F,
                0x8C42: 0x6C93,
                0x8C43: 0x9774,
                0x8C44: 0x8F61,
                0x8C45: 0x7AAA,
                0x8C46: 0x718A,
                0x8C47: 0x9688,
                0x8C48: 0x7C82,
                0x8C49: 0x6817,
                0x8C4A: 0x7E70,
                0x8C4B: 0x6851,
                0x8C4C: 0x936C,
                0x8C4D: 0x52F2,
                0x8C4E: 0x541B,
                0x8C4F: 0x85AB,
                0x8C50: 0x8A13,
                0x8C51: 0x7FA4,
                0x8C52: 0x8ECD,
                0x8C53: 0x90E1,
                0x8C54: 0x5366,
                0x8C55: 0x8888,
                0x8C56: 0x7941,
                0x8C57: 0x4FC2,
                0x8C58: 0x50BE,
                0x8C59: 0x5211,
                0x8C5A: 0x5144,
                0x8C5B: 0x5553,
                0x8C5C: 0x572D,
                0x8C5D: 0x73EA,
                0x8C5E: 0x578B,
                0x8C5F: 0x5951,
                0x8C60: 0x5F62,
                0x8C61: 0x5F84,
                0x8C62: 0x6075,
                0x8C63: 0x6176,
                0x8C64: 0x6167,
                0x8C65: 0x61A9,
                0x8C66: 0x63B2,
                0x8C67: 0x643A,
                0x8C68: 0x656C,
                0x8C69: 0x666F,
                0x8C6A: 0x6842,
                0x8C6B: 0x6E13,
                0x8C6C: 0x7566,
                0x8C6D: 0x7A3D,
                0x8C6E: 0x7CFB,
                0x8C6F: 0x7D4C,
                0x8C70: 0x7D99,
                0x8C71: 0x7E4B,
                0x8C72: 0x7F6B,
                0x8C73: 0x830E,
                0x8C74: 0x834A,
                0x8C75: 0x86CD,
                0x8C76: 0x8A08,
                0x8C77: 0x8A63,
                0x8C78: 0x8B66,
                0x8C79: 0x8EFD,
                0x8C7A: 0x981A,
                0x8C7B: 0x9D8F,
                0x8C7C: 0x82B8,
                0x8C7D: 0x8FCE,
                0x8C7E: 0x9BE8,
                0x8C80: 0x5287,
                0x8C81: 0x621F,
                0x8C82: 0x6483,
                0x8C83: 0x6FC0,
                0x8C84: 0x9699,
                0x8C85: 0x6841,
                0x8C86: 0x5091,
                0x8C87: 0x6B20,
                0x8C88: 0x6C7A,
                0x8C89: 0x6F54,
                0x8C8A: 0x7A74,
                0x8C8B: 0x7D50,
                0x8C8C: 0x8840,
                0x8C8D: 0x8A23,
                0x8C8E: 0x6708,
                0x8C8F: 0x4EF6,
                0x8C90: 0x5039,
                0x8C91: 0x5026,
                0x8C92: 0x5065,
                0x8C93: 0x517C,
                0x8C94: 0x5238,
                0x8C95: 0x5263,
                0x8C96: 0x55A7,
                0x8C97: 0x570F,
                0x8C98: 0x5805,
                0x8C99: 0x5ACC,
                0x8C9A: 0x5EFA,
                0x8C9B: 0x61B2,
                0x8C9C: 0x61F8,
                0x8C9D: 0x62F3,
                0x8C9E: 0x6372,
                0x8C9F: 0x691C,
                0x8CA0: 0x6A29,
                0x8CA1: 0x727D,
                0x8CA2: 0x72AC,
                0x8CA3: 0x732E,
                0x8CA4: 0x7814,
                0x8CA5: 0x786F,
                0x8CA6: 0x7D79,
                0x8CA7: 0x770C,
                0x8CA8: 0x80A9,
                0x8CA9: 0x898B,
                0x8CAA: 0x8B19,
                0x8CAB: 0x8CE2,
                0x8CAC: 0x8ED2,
                0x8CAD: 0x9063,
                0x8CAE: 0x9375,
                0x8CAF: 0x967A,
                0x8CB0: 0x9855,
                0x8CB1: 0x9A13,
                0x8CB2: 0x9E78,
                0x8CB3: 0x5143,
                0x8CB4: 0x539F,
                0x8CB5: 0x53B3,
                0x8CB6: 0x5E7B,
                0x8CB7: 0x5F26,
                0x8CB8: 0x6E1B,
                0x8CB9: 0x6E90,
                0x8CBA: 0x7384,
                0x8CBB: 0x73FE,
                0x8CBC: 0x7D43,
                0x8CBD: 0x8237,
                0x8CBE: 0x8A00,
                0x8CBF: 0x8AFA,
                0x8CC0: 0x9650,
                0x8CC1: 0x4E4E,
                0x8CC2: 0x500B,
                0x8CC3: 0x53E4,
                0x8CC4: 0x547C,
                0x8CC5: 0x56FA,
                0x8CC6: 0x59D1,
                0x8CC7: 0x5B64,
                0x8CC8: 0x5DF1,
                0x8CC9: 0x5EAB,
                0x8CCA: 0x5F27,
                0x8CCB: 0x6238,
                0x8CCC: 0x6545,
                0x8CCD: 0x67AF,
                0x8CCE: 0x6E56,
                0x8CCF: 0x72D0,
                0x8CD0: 0x7CCA,
                0x8CD1: 0x88B4,
                0x8CD2: 0x80A1,
                0x8CD3: 0x80E1,
                0x8CD4: 0x83F0,
                0x8CD5: 0x864E,
                0x8CD6: 0x8A87,
                0x8CD7: 0x8DE8,
                0x8CD8: 0x9237,
                0x8CD9: 0x96C7,
                0x8CDA: 0x9867,
                0x8CDB: 0x9F13,
                0x8CDC: 0x4E94,
                0x8CDD: 0x4E92,
                0x8CDE: 0x4F0D,
                0x8CDF: 0x5348,
                0x8CE0: 0x5449,
                0x8CE1: 0x543E,
                0x8CE2: 0x5A2F,
                0x8CE3: 0x5F8C,
                0x8CE4: 0x5FA1,
                0x8CE5: 0x609F,
                0x8CE6: 0x68A7,
                0x8CE7: 0x6A8E,
                0x8CE8: 0x745A,
                0x8CE9: 0x7881,
                0x8CEA: 0x8A9E,
                0x8CEB: 0x8AA4,
                0x8CEC: 0x8B77,
                0x8CED: 0x9190,
                0x8CEE: 0x4E5E,
                0x8CEF: 0x9BC9,
                0x8CF0: 0x4EA4,
                0x8CF1: 0x4F7C,
                0x8CF2: 0x4FAF,
                0x8CF3: 0x5019,
                0x8CF4: 0x5016,
                0x8CF5: 0x5149,
                0x8CF6: 0x516C,
                0x8CF7: 0x529F,
                0x8CF8: 0x52B9,
                0x8CF9: 0x52FE,
                0x8CFA: 0x539A,
                0x8CFB: 0x53E3,
                0x8CFC: 0x5411,
                0x8D40: 0x540E,
                0x8D41: 0x5589,
                0x8D42: 0x5751,
                0x8D43: 0x57A2,
                0x8D44: 0x597D,
                0x8D45: 0x5B54,
                0x8D46: 0x5B5D,
                0x8D47: 0x5B8F,
                0x8D48: 0x5DE5,
                0x8D49: 0x5DE7,
                0x8D4A: 0x5DF7,
                0x8D4B: 0x5E78,
                0x8D4C: 0x5E83,
                0x8D4D: 0x5E9A,
                0x8D4E: 0x5EB7,
                0x8D4F: 0x5F18,
                0x8D50: 0x6052,
                0x8D51: 0x614C,
                0x8D52: 0x6297,
                0x8D53: 0x62D8,
                0x8D54: 0x63A7,
                0x8D55: 0x653B,
                0x8D56: 0x6602,
                0x8D57: 0x6643,
                0x8D58: 0x66F4,
                0x8D59: 0x676D,
                0x8D5A: 0x6821,
                0x8D5B: 0x6897,
                0x8D5C: 0x69CB,
                0x8D5D: 0x6C5F,
                0x8D5E: 0x6D2A,
                0x8D5F: 0x6D69,
                0x8D60: 0x6E2F,
                0x8D61: 0x6E9D,
                0x8D62: 0x7532,
                0x8D63: 0x7687,
                0x8D64: 0x786C,
                0x8D65: 0x7A3F,
                0x8D66: 0x7CE0,
                0x8D67: 0x7D05,
                0x8D68: 0x7D18,
                0x8D69: 0x7D5E,
                0x8D6A: 0x7DB1,
                0x8D6B: 0x8015,
                0x8D6C: 0x8003,
                0x8D6D: 0x80AF,
                0x8D6E: 0x80B1,
                0x8D6F: 0x8154,
                0x8D70: 0x818F,
                0x8D71: 0x822A,
                0x8D72: 0x8352,
                0x8D73: 0x884C,
                0x8D74: 0x8861,
                0x8D75: 0x8B1B,
                0x8D76: 0x8CA2,
                0x8D77: 0x8CFC,
                0x8D78: 0x90CA,
                0x8D79: 0x9175,
                0x8D7A: 0x9271,
                0x8D7B: 0x783F,
                0x8D7C: 0x92FC,
                0x8D7D: 0x95A4,
                0x8D7E: 0x964D,
                0x8D80: 0x9805,
                0x8D81: 0x9999,
                0x8D82: 0x9AD8,
                0x8D83: 0x9D3B,
                0x8D84: 0x525B,
                0x8D85: 0x52AB,
                0x8D86: 0x53F7,
                0x8D87: 0x5408,
                0x8D88: 0x58D5,
                0x8D89: 0x62F7,
                0x8D8A: 0x6FE0,
                0x8D8B: 0x8C6A,
                0x8D8C: 0x8F5F,
                0x8D8D: 0x9EB9,
                0x8D8E: 0x514B,
                0x8D8F: 0x523B,
                0x8D90: 0x544A,
                0x8D91: 0x56FD,
                0x8D92: 0x7A40,
                0x8D93: 0x9177,
                0x8D94: 0x9D60,
                0x8D95: 0x9ED2,
                0x8D96: 0x7344,
                0x8D97: 0x6F09,
                0x8D98: 0x8170,
                0x8D99: 0x7511,
                0x8D9A: 0x5FFD,
                0x8D9B: 0x60DA,
                0x8D9C: 0x9AA8,
                0x8D9D: 0x72DB,
                0x8D9E: 0x8FBC,
                0x8D9F: 0x6B64,
                0x8DA0: 0x9803,
                0x8DA1: 0x4ECA,
                0x8DA2: 0x56F0,
                0x8DA3: 0x5764,
                0x8DA4: 0x58BE,
                0x8DA5: 0x5A5A,
                0x8DA6: 0x6068,
                0x8DA7: 0x61C7,
                0x8DA8: 0x660F,
                0x8DA9: 0x6606,
                0x8DAA: 0x6839,
                0x8DAB: 0x68B1,
                0x8DAC: 0x6DF7,
                0x8DAD: 0x75D5,
                0x8DAE: 0x7D3A,
                0x8DAF: 0x826E,
                0x8DB0: 0x9B42,
                0x8DB1: 0x4E9B,
                0x8DB2: 0x4F50,
                0x8DB3: 0x53C9,
                0x8DB4: 0x5506,
                0x8DB5: 0x5D6F,
                0x8DB6: 0x5DE6,
                0x8DB7: 0x5DEE,
                0x8DB8: 0x67FB,
                0x8DB9: 0x6C99,
                0x8DBA: 0x7473,
                0x8DBB: 0x7802,
                0x8DBC: 0x8A50,
                0x8DBD: 0x9396,
                0x8DBE: 0x88DF,
                0x8DBF: 0x5750,
                0x8DC0: 0x5EA7,
                0x8DC1: 0x632B,
                0x8DC2: 0x50B5,
                0x8DC3: 0x50AC,
                0x8DC4: 0x518D,
                0x8DC5: 0x6700,
                0x8DC6: 0x54C9,
                0x8DC7: 0x585E,
                0x8DC8: 0x59BB,
                0x8DC9: 0x5BB0,
                0x8DCA: 0x5F69,
                0x8DCB: 0x624D,
                0x8DCC: 0x63A1,
                0x8DCD: 0x683D,
                0x8DCE: 0x6B73,
                0x8DCF: 0x6E08,
                0x8DD0: 0x707D,
                0x8DD1: 0x91C7,
                0x8DD2: 0x7280,
                0x8DD3: 0x7815,
                0x8DD4: 0x7826,
                0x8DD5: 0x796D,
                0x8DD6: 0x658E,
                0x8DD7: 0x7D30,
                0x8DD8: 0x83DC,
                0x8DD9: 0x88C1,
                0x8DDA: 0x8F09,
                0x8DDB: 0x969B,
                0x8DDC: 0x5264,
                0x8DDD: 0x5728,
                0x8DDE: 0x6750,
                0x8DDF: 0x7F6A,
                0x8DE0: 0x8CA1,
                0x8DE1: 0x51B4,
                0x8DE2: 0x5742,
                0x8DE3: 0x962A,
                0x8DE4: 0x583A,
                0x8DE5: 0x698A,
                0x8DE6: 0x80B4,
                0x8DE7: 0x54B2,
                0x8DE8: 0x5D0E,
                0x8DE9: 0x57FC,
                0x8DEA: 0x7895,
                0x8DEB: 0x9DFA,
                0x8DEC: 0x4F5C,
                0x8DED: 0x524A,
                0x8DEE: 0x548B,
                0x8DEF: 0x643E,
                0x8DF0: 0x6628,
                0x8DF1: 0x6714,
                0x8DF2: 0x67F5,
                0x8DF3: 0x7A84,
                0x8DF4: 0x7B56,
                0x8DF5: 0x7D22,
                0x8DF6: 0x932F,
                0x8DF7: 0x685C,
                0x8DF8: 0x9BAD,
                0x8DF9: 0x7B39,
                0x8DFA: 0x5319,
                0x8DFB: 0x518A,
                0x8DFC: 0x5237,
                0x8E40: 0x5BDF,
                0x8E41: 0x62F6,
                0x8E42: 0x64AE,
                0x8E43: 0x64E6,
                0x8E44: 0x672D,
                0x8E45: 0x6BBA,
                0x8E46: 0x85A9,
                0x8E47: 0x96D1,
                0x8E48: 0x7690,
                0x8E49: 0x9BD6,
                0x8E4A: 0x634C,
                0x8E4B: 0x9306,
                0x8E4C: 0x9BAB,
                0x8E4D: 0x76BF,
                0x8E4E: 0x6652,
                0x8E4F: 0x4E09,
                0x8E50: 0x5098,
                0x8E51: 0x53C2,
                0x8E52: 0x5C71,
                0x8E53: 0x60E8,
                0x8E54: 0x6492,
                0x8E55: 0x6563,
                0x8E56: 0x685F,
                0x8E57: 0x71E6,
                0x8E58: 0x73CA,
                0x8E59: 0x7523,
                0x8E5A: 0x7B97,
                0x8E5B: 0x7E82,
                0x8E5C: 0x8695,
                0x8E5D: 0x8B83,
                0x8E5E: 0x8CDB,
                0x8E5F: 0x9178,
                0x8E60: 0x9910,
                0x8E61: 0x65AC,
                0x8E62: 0x66AB,
                0x8E63: 0x6B8B,
                0x8E64: 0x4ED5,
                0x8E65: 0x4ED4,
                0x8E66: 0x4F3A,
                0x8E67: 0x4F7F,
                0x8E68: 0x523A,
                0x8E69: 0x53F8,
                0x8E6A: 0x53F2,
                0x8E6B: 0x55E3,
                0x8E6C: 0x56DB,
                0x8E6D: 0x58EB,
                0x8E6E: 0x59CB,
                0x8E6F: 0x59C9,
                0x8E70: 0x59FF,
                0x8E71: 0x5B50,
                0x8E72: 0x5C4D,
                0x8E73: 0x5E02,
                0x8E74: 0x5E2B,
                0x8E75: 0x5FD7,
                0x8E76: 0x601D,
                0x8E77: 0x6307,
                0x8E78: 0x652F,
                0x8E79: 0x5B5C,
                0x8E7A: 0x65AF,
                0x8E7B: 0x65BD,
                0x8E7C: 0x65E8,
                0x8E7D: 0x679D,
                0x8E7E: 0x6B62,
                0x8E80: 0x6B7B,
                0x8E81: 0x6C0F,
                0x8E82: 0x7345,
                0x8E83: 0x7949,
                0x8E84: 0x79C1,
                0x8E85: 0x7CF8,
                0x8E86: 0x7D19,
                0x8E87: 0x7D2B,
                0x8E88: 0x80A2,
                0x8E89: 0x8102,
                0x8E8A: 0x81F3,
                0x8E8B: 0x8996,
                0x8E8C: 0x8A5E,
                0x8E8D: 0x8A69,
                0x8E8E: 0x8A66,
                0x8E8F: 0x8A8C,
                0x8E90: 0x8AEE,
                0x8E91: 0x8CC7,
                0x8E92: 0x8CDC,
                0x8E93: 0x96CC,
                0x8E94: 0x98FC,
                0x8E95: 0x6B6F,
                0x8E96: 0x4E8B,
                0x8E97: 0x4F3C,
                0x8E98: 0x4F8D,
                0x8E99: 0x5150,
                0x8E9A: 0x5B57,
                0x8E9B: 0x5BFA,
                0x8E9C: 0x6148,
                0x8E9D: 0x6301,
                0x8E9E: 0x6642,
                0x8E9F: 0x6B21,
                0x8EA0: 0x6ECB,
                0x8EA1: 0x6CBB,
                0x8EA2: 0x723E,
                0x8EA3: 0x74BD,
                0x8EA4: 0x75D4,
                0x8EA5: 0x78C1,
                0x8EA6: 0x793A,
                0x8EA7: 0x800C,
                0x8EA8: 0x8033,
                0x8EA9: 0x81EA,
                0x8EAA: 0x8494,
                0x8EAB: 0x8F9E,
                0x8EAC: 0x6C50,
                0x8EAD: 0x9E7F,
                0x8EAE: 0x5F0F,
                0x8EAF: 0x8B58,
                0x8EB0: 0x9D2B,
                0x8EB1: 0x7AFA,
                0x8EB2: 0x8EF8,
                0x8EB3: 0x5B8D,
                0x8EB4: 0x96EB,
                0x8EB5: 0x4E03,
                0x8EB6: 0x53F1,
                0x8EB7: 0x57F7,
                0x8EB8: 0x5931,
                0x8EB9: 0x5AC9,
                0x8EBA: 0x5BA4,
                0x8EBB: 0x6089,
                0x8EBC: 0x6E7F,
                0x8EBD: 0x6F06,
                0x8EBE: 0x75BE,
                0x8EBF: 0x8CEA,
                0x8EC0: 0x5B9F,
                0x8EC1: 0x8500,
                0x8EC2: 0x7BE0,
                0x8EC3: 0x5072,
                0x8EC4: 0x67F4,
                0x8EC5: 0x829D,
                0x8EC6: 0x5C61,
                0x8EC7: 0x854A,
                0x8EC8: 0x7E1E,
                0x8EC9: 0x820E,
                0x8ECA: 0x5199,
                0x8ECB: 0x5C04,
                0x8ECC: 0x6368,
                0x8ECD: 0x8D66,
                0x8ECE: 0x659C,
                0x8ECF: 0x716E,
                0x8ED0: 0x793E,
                0x8ED1: 0x7D17,
                0x8ED2: 0x8005,
                0x8ED3: 0x8B1D,
                0x8ED4: 0x8ECA,
                0x8ED5: 0x906E,
                0x8ED6: 0x86C7,
                0x8ED7: 0x90AA,
                0x8ED8: 0x501F,
                0x8ED9: 0x52FA,
                0x8EDA: 0x5C3A,
                0x8EDB: 0x6753,
                0x8EDC: 0x707C,
                0x8EDD: 0x7235,
                0x8EDE: 0x914C,
                0x8EDF: 0x91C8,
                0x8EE0: 0x932B,
                0x8EE1: 0x82E5,
                0x8EE2: 0x5BC2,
                0x8EE3: 0x5F31,
                0x8EE4: 0x60F9,
                0x8EE5: 0x4E3B,
                0x8EE6: 0x53D6,
                0x8EE7: 0x5B88,
                0x8EE8: 0x624B,
                0x8EE9: 0x6731,
                0x8EEA: 0x6B8A,
                0x8EEB: 0x72E9,
                0x8EEC: 0x73E0,
                0x8EED: 0x7A2E,
                0x8EEE: 0x816B,
                0x8EEF: 0x8DA3,
                0x8EF0: 0x9152,
                0x8EF1: 0x9996,
                0x8EF2: 0x5112,
                0x8EF3: 0x53D7,
                0x8EF4: 0x546A,
                0x8EF5: 0x5BFF,
                0x8EF6: 0x6388,
                0x8EF7: 0x6A39,
                0x8EF8: 0x7DAC,
                0x8EF9: 0x9700,
                0x8EFA: 0x56DA,
                0x8EFB: 0x53CE,
                0x8EFC: 0x5468,
                0x8F40: 0x5B97,
                0x8F41: 0x5C31,
                0x8F42: 0x5DDE,
                0x8F43: 0x4FEE,
                0x8F44: 0x6101,
                0x8F45: 0x62FE,
                0x8F46: 0x6D32,
                0x8F47: 0x79C0,
                0x8F48: 0x79CB,
                0x8F49: 0x7D42,
                0x8F4A: 0x7E4D,
                0x8F4B: 0x7FD2,
                0x8F4C: 0x81ED,
                0x8F4D: 0x821F,
                0x8F4E: 0x8490,
                0x8F4F: 0x8846,
                0x8F50: 0x8972,
                0x8F51: 0x8B90,
                0x8F52: 0x8E74,
                0x8F53: 0x8F2F,
                0x8F54: 0x9031,
                0x8F55: 0x914B,
                0x8F56: 0x916C,
                0x8F57: 0x96C6,
                0x8F58: 0x919C,
                0x8F59: 0x4EC0,
                0x8F5A: 0x4F4F,
                0x8F5B: 0x5145,
                0x8F5C: 0x5341,
                0x8F5D: 0x5F93,
                0x8F5E: 0x620E,
                0x8F5F: 0x67D4,
                0x8F60: 0x6C41,
                0x8F61: 0x6E0B,
                0x8F62: 0x7363,
                0x8F63: 0x7E26,
                0x8F64: 0x91CD,
                0x8F65: 0x9283,
                0x8F66: 0x53D4,
                0x8F67: 0x5919,
                0x8F68: 0x5BBF,
                0x8F69: 0x6DD1,
                0x8F6A: 0x795D,
                0x8F6B: 0x7E2E,
                0x8F6C: 0x7C9B,
                0x8F6D: 0x587E,
                0x8F6E: 0x719F,
                0x8F6F: 0x51FA,
                0x8F70: 0x8853,
                0x8F71: 0x8FF0,
                0x8F72: 0x4FCA,
                0x8F73: 0x5CFB,
                0x8F74: 0x6625,
                0x8F75: 0x77AC,
                0x8F76: 0x7AE3,
                0x8F77: 0x821C,
                0x8F78: 0x99FF,
                0x8F79: 0x51C6,
                0x8F7A: 0x5FAA,
                0x8F7B: 0x65EC,
                0x8F7C: 0x696F,
                0x8F7D: 0x6B89,
                0x8F7E: 0x6DF3,
                0x8F80: 0x6E96,
                0x8F81: 0x6F64,
                0x8F82: 0x76FE,
                0x8F83: 0x7D14,
                0x8F84: 0x5DE1,
                0x8F85: 0x9075,
                0x8F86: 0x9187,
                0x8F87: 0x9806,
                0x8F88: 0x51E6,
                0x8F89: 0x521D,
                0x8F8A: 0x6240,
                0x8F8B: 0x6691,
                0x8F8C: 0x66D9,
                0x8F8D: 0x6E1A,
                0x8F8E: 0x5EB6,
                0x8F8F: 0x7DD2,
                0x8F90: 0x7F72,
                0x8F91: 0x66F8,
                0x8F92: 0x85AF,
                0x8F93: 0x85F7,
                0x8F94: 0x8AF8,
                0x8F95: 0x52A9,
                0x8F96: 0x53D9,
                0x8F97: 0x5973,
                0x8F98: 0x5E8F,
                0x8F99: 0x5F90,
                0x8F9A: 0x6055,
                0x8F9B: 0x92E4,
                0x8F9C: 0x9664,
                0x8F9D: 0x50B7,
                0x8F9E: 0x511F,
                0x8F9F: 0x52DD,
                0x8FA0: 0x5320,
                0x8FA1: 0x5347,
                0x8FA2: 0x53EC,
                0x8FA3: 0x54E8,
                0x8FA4: 0x5546,
                0x8FA5: 0x5531,
                0x8FA6: 0x5617,
                0x8FA7: 0x5968,
                0x8FA8: 0x59BE,
                0x8FA9: 0x5A3C,
                0x8FAA: 0x5BB5,
                0x8FAB: 0x5C06,
                0x8FAC: 0x5C0F,
                0x8FAD: 0x5C11,
                0x8FAE: 0x5C1A,
                0x8FAF: 0x5E84,
                0x8FB0: 0x5E8A,
                0x8FB1: 0x5EE0,
                0x8FB2: 0x5F70,
                0x8FB3: 0x627F,
                0x8FB4: 0x6284,
                0x8FB5: 0x62DB,
                0x8FB6: 0x638C,
                0x8FB7: 0x6377,
                0x8FB8: 0x6607,
                0x8FB9: 0x660C,
                0x8FBA: 0x662D,
                0x8FBB: 0x6676,
                0x8FBC: 0x677E,
                0x8FBD: 0x68A2,
                0x8FBE: 0x6A1F,
                0x8FBF: 0x6A35,
                0x8FC0: 0x6CBC,
                0x8FC1: 0x6D88,
                0x8FC2: 0x6E09,
                0x8FC3: 0x6E58,
                0x8FC4: 0x713C,
                0x8FC5: 0x7126,
                0x8FC6: 0x7167,
                0x8FC7: 0x75C7,
                0x8FC8: 0x7701,
                0x8FC9: 0x785D,
                0x8FCA: 0x7901,
                0x8FCB: 0x7965,
                0x8FCC: 0x79F0,
                0x8FCD: 0x7AE0,
                0x8FCE: 0x7B11,
                0x8FCF: 0x7CA7,
                0x8FD0: 0x7D39,
                0x8FD1: 0x8096,
                0x8FD2: 0x83D6,
                0x8FD3: 0x848B,
                0x8FD4: 0x8549,
                0x8FD5: 0x885D,
                0x8FD6: 0x88F3,
                0x8FD7: 0x8A1F,
                0x8FD8: 0x8A3C,
                0x8FD9: 0x8A54,
                0x8FDA: 0x8A73,
                0x8FDB: 0x8C61,
                0x8FDC: 0x8CDE,
                0x8FDD: 0x91A4,
                0x8FDE: 0x9266,
                0x8FDF: 0x937E,
                0x8FE0: 0x9418,
                0x8FE1: 0x969C,
                0x8FE2: 0x9798,
                0x8FE3: 0x4E0A,
                0x8FE4: 0x4E08,
                0x8FE5: 0x4E1E,
                0x8FE6: 0x4E57,
                0x8FE7: 0x5197,
                0x8FE8: 0x5270,
                0x8FE9: 0x57CE,
                0x8FEA: 0x5834,
                0x8FEB: 0x58CC,
                0x8FEC: 0x5B22,
                0x8FED: 0x5E38,
                0x8FEE: 0x60C5,
                0x8FEF: 0x64FE,
                0x8FF0: 0x6761,
                0x8FF1: 0x6756,
                0x8FF2: 0x6D44,
                0x8FF3: 0x72B6,
                0x8FF4: 0x7573,
                0x8FF5: 0x7A63,
                0x8FF6: 0x84B8,
                0x8FF7: 0x8B72,
                0x8FF8: 0x91B8,
                0x8FF9: 0x9320,
                0x8FFA: 0x5631,
                0x8FFB: 0x57F4,
                0x8FFC: 0x98FE,
                0x9040: 0x62ED,
                0x9041: 0x690D,
                0x9042: 0x6B96,
                0x9043: 0x71ED,
                0x9044: 0x7E54,
                0x9045: 0x8077,
                0x9046: 0x8272,
                0x9047: 0x89E6,
                0x9048: 0x98DF,
                0x9049: 0x8755,
                0x904A: 0x8FB1,
                0x904B: 0x5C3B,
                0x904C: 0x4F38,
                0x904D: 0x4FE1,
                0x904E: 0x4FB5,
                0x904F: 0x5507,
                0x9050: 0x5A20,
                0x9051: 0x5BDD,
                0x9052: 0x5BE9,
                0x9053: 0x5FC3,
                0x9054: 0x614E,
                0x9055: 0x632F,
                0x9056: 0x65B0,
                0x9057: 0x664B,
                0x9058: 0x68EE,
                0x9059: 0x699B,
                0x905A: 0x6D78,
                0x905B: 0x6DF1,
                0x905C: 0x7533,
                0x905D: 0x75B9,
                0x905E: 0x771F,
                0x905F: 0x795E,
                0x9060: 0x79E6,
                0x9061: 0x7D33,
                0x9062: 0x81E3,
                0x9063: 0x82AF,
                0x9064: 0x85AA,
                0x9065: 0x89AA,
                0x9066: 0x8A3A,
                0x9067: 0x8EAB,
                0x9068: 0x8F9B,
                0x9069: 0x9032,
                0x906A: 0x91DD,
                0x906B: 0x9707,
                0x906C: 0x4EBA,
                0x906D: 0x4EC1,
                0x906E: 0x5203,
                0x906F: 0x5875,
                0x9070: 0x58EC,
                0x9071: 0x5C0B,
                0x9072: 0x751A,
                0x9073: 0x5C3D,
                0x9074: 0x814E,
                0x9075: 0x8A0A,
                0x9076: 0x8FC5,
                0x9077: 0x9663,
                0x9078: 0x976D,
                0x9079: 0x7B25,
                0x907A: 0x8ACF,
                0x907B: 0x9808,
                0x907C: 0x9162,
                0x907D: 0x56F3,
                0x907E: 0x53A8,
                0x9080: 0x9017,
                0x9081: 0x5439,
                0x9082: 0x5782,
                0x9083: 0x5E25,
                0x9084: 0x63A8,
                0x9085: 0x6C34,
                0x9086: 0x708A,
                0x9087: 0x7761,
                0x9088: 0x7C8B,
                0x9089: 0x7FE0,
                0x908A: 0x8870,
                0x908B: 0x9042,
                0x908C: 0x9154,
                0x908D: 0x9310,
                0x908E: 0x9318,
                0x908F: 0x968F,
                0x9090: 0x745E,
                0x9091: 0x9AC4,
                0x9092: 0x5D07,
                0x9093: 0x5D69,
                0x9094: 0x6570,
                0x9095: 0x67A2,
                0x9096: 0x8DA8,
                0x9097: 0x96DB,
                0x9098: 0x636E,
                0x9099: 0x6749,
                0x909A: 0x6919,
                0x909B: 0x83C5,
                0x909C: 0x9817,
                0x909D: 0x96C0,
                0x909E: 0x88FE,
                0x909F: 0x6F84,
                0x90A0: 0x647A,
                0x90A1: 0x5BF8,
                0x90A2: 0x4E16,
                0x90A3: 0x702C,
                0x90A4: 0x755D,
                0x90A5: 0x662F,
                0x90A6: 0x51C4,
                0x90A7: 0x5236,
                0x90A8: 0x52E2,
                0x90A9: 0x59D3,
                0x90AA: 0x5F81,
                0x90AB: 0x6027,
                0x90AC: 0x6210,
                0x90AD: 0x653F,
                0x90AE: 0x6574,
                0x90AF: 0x661F,
                0x90B0: 0x6674,
                0x90B1: 0x68F2,
                0x90B2: 0x6816,
                0x90B3: 0x6B63,
                0x90B4: 0x6E05,
                0x90B5: 0x7272,
                0x90B6: 0x751F,
                0x90B7: 0x76DB,
                0x90B8: 0x7CBE,
                0x90B9: 0x8056,
                0x90BA: 0x58F0,
                0x90BB: 0x88FD,
                0x90BC: 0x897F,
                0x90BD: 0x8AA0,
                0x90BE: 0x8A93,
                0x90BF: 0x8ACB,
                0x90C0: 0x901D,
                0x90C1: 0x9192,
                0x90C2: 0x9752,
                0x90C3: 0x9759,
                0x90C4: 0x6589,
                0x90C5: 0x7A0E,
                0x90C6: 0x8106,
                0x90C7: 0x96BB,
                0x90C8: 0x5E2D,
                0x90C9: 0x60DC,
                0x90CA: 0x621A,
                0x90CB: 0x65A5,
                0x90CC: 0x6614,
                0x90CD: 0x6790,
                0x90CE: 0x77F3,
                0x90CF: 0x7A4D,
                0x90D0: 0x7C4D,
                0x90D1: 0x7E3E,
                0x90D2: 0x810A,
                0x90D3: 0x8CAC,
                0x90D4: 0x8D64,
                0x90D5: 0x8DE1,
                0x90D6: 0x8E5F,
                0x90D7: 0x78A9,
                0x90D8: 0x5207,
                0x90D9: 0x62D9,
                0x90DA: 0x63A5,
                0x90DB: 0x6442,
                0x90DC: 0x6298,
                0x90DD: 0x8A2D,
                0x90DE: 0x7A83,
                0x90DF: 0x7BC0,
                0x90E0: 0x8AAC,
                0x90E1: 0x96EA,
                0x90E2: 0x7D76,
                0x90E3: 0x820C,
                0x90E4: 0x8749,
                0x90E5: 0x4ED9,
                0x90E6: 0x5148,
                0x90E7: 0x5343,
                0x90E8: 0x5360,
                0x90E9: 0x5BA3,
                0x90EA: 0x5C02,
                0x90EB: 0x5C16,
                0x90EC: 0x5DDD,
                0x90ED: 0x6226,
                0x90EE: 0x6247,
                0x90EF: 0x64B0,
                0x90F0: 0x6813,
                0x90F1: 0x6834,
                0x90F2: 0x6CC9,
                0x90F3: 0x6D45,
                0x90F4: 0x6D17,
                0x90F5: 0x67D3,
                0x90F6: 0x6F5C,
                0x90F7: 0x714E,
                0x90F8: 0x717D,
                0x90F9: 0x65CB,
                0x90FA: 0x7A7F,
                0x90FB: 0x7BAD,
                0x90FC: 0x7DDA,
                0x9140: 0x7E4A,
                0x9141: 0x7FA8,
                0x9142: 0x817A,
                0x9143: 0x821B,
                0x9144: 0x8239,
                0x9145: 0x85A6,
                0x9146: 0x8A6E,
                0x9147: 0x8CCE,
                0x9148: 0x8DF5,
                0x9149: 0x9078,
                0x914A: 0x9077,
                0x914B: 0x92AD,
                0x914C: 0x9291,
                0x914D: 0x9583,
                0x914E: 0x9BAE,
                0x914F: 0x524D,
                0x9150: 0x5584,
                0x9151: 0x6F38,
                0x9152: 0x7136,
                0x9153: 0x5168,
                0x9154: 0x7985,
                0x9155: 0x7E55,
                0x9156: 0x81B3,
                0x9157: 0x7CCE,
                0x9158: 0x564C,
                0x9159: 0x5851,
                0x915A: 0x5CA8,
                0x915B: 0x63AA,
                0x915C: 0x66FE,
                0x915D: 0x66FD,
                0x915E: 0x695A,
                0x915F: 0x72D9,
                0x9160: 0x758F,
                0x9161: 0x758E,
                0x9162: 0x790E,
                0x9163: 0x7956,
                0x9164: 0x79DF,
                0x9165: 0x7C97,
                0x9166: 0x7D20,
                0x9167: 0x7D44,
                0x9168: 0x8607,
                0x9169: 0x8A34,
                0x916A: 0x963B,
                0x916B: 0x9061,
                0x916C: 0x9F20,
                0x916D: 0x50E7,
                0x916E: 0x5275,
                0x916F: 0x53CC,
                0x9170: 0x53E2,
                0x9171: 0x5009,
                0x9172: 0x55AA,
                0x9173: 0x58EE,
                0x9174: 0x594F,
                0x9175: 0x723D,
                0x9176: 0x5B8B,
                0x9177: 0x5C64,
                0x9178: 0x531D,
                0x9179: 0x60E3,
                0x917A: 0x60F3,
                0x917B: 0x635C,
                0x917C: 0x6383,
                0x917D: 0x633F,
                0x917E: 0x63BB,
                0x9180: 0x64CD,
                0x9181: 0x65E9,
                0x9182: 0x66F9,
                0x9183: 0x5DE3,
                0x9184: 0x69CD,
                0x9185: 0x69FD,
                0x9186: 0x6F15,
                0x9187: 0x71E5,
                0x9188: 0x4E89,
                0x9189: 0x75E9,
                0x918A: 0x76F8,
                0x918B: 0x7A93,
                0x918C: 0x7CDF,
                0x918D: 0x7DCF,
                0x918E: 0x7D9C,
                0x918F: 0x8061,
                0x9190: 0x8349,
                0x9191: 0x8358,
                0x9192: 0x846C,
                0x9193: 0x84BC,
                0x9194: 0x85FB,
                0x9195: 0x88C5,
                0x9196: 0x8D70,
                0x9197: 0x9001,
                0x9198: 0x906D,
                0x9199: 0x9397,
                0x919A: 0x971C,
                0x919B: 0x9A12,
                0x919C: 0x50CF,
                0x919D: 0x5897,
                0x919E: 0x618E,
                0x919F: 0x81D3,
                0x91A0: 0x8535,
                0x91A1: 0x8D08,
                0x91A2: 0x9020,
                0x91A3: 0x4FC3,
                0x91A4: 0x5074,
                0x91A5: 0x5247,
                0x91A6: 0x5373,
                0x91A7: 0x606F,
                0x91A8: 0x6349,
                0x91A9: 0x675F,
                0x91AA: 0x6E2C,
                0x91AB: 0x8DB3,
                0x91AC: 0x901F,
                0x91AD: 0x4FD7,
                0x91AE: 0x5C5E,
                0x91AF: 0x8CCA,
                0x91B0: 0x65CF,
                0x91B1: 0x7D9A,
                0x91B2: 0x5352,
                0x91B3: 0x8896,
                0x91B4: 0x5176,
                0x91B5: 0x63C3,
                0x91B6: 0x5B58,
                0x91B7: 0x5B6B,
                0x91B8: 0x5C0A,
                0x91B9: 0x640D,
                0x91BA: 0x6751,
                0x91BB: 0x905C,
                0x91BC: 0x4ED6,
                0x91BD: 0x591A,
                0x91BE: 0x592A,
                0x91BF: 0x6C70,
                0x91C0: 0x8A51,
                0x91C1: 0x553E,
                0x91C2: 0x5815,
                0x91C3: 0x59A5,
                0x91C4: 0x60F0,
                0x91C5: 0x6253,
                0x91C6: 0x67C1,
                0x91C7: 0x8235,
                0x91C8: 0x6955,
                0x91C9: 0x9640,
                0x91CA: 0x99C4,
                0x91CB: 0x9A28,
                0x91CC: 0x4F53,
                0x91CD: 0x5806,
                0x91CE: 0x5BFE,
                0x91CF: 0x8010,
                0x91D0: 0x5CB1,
                0x91D1: 0x5E2F,
                0x91D2: 0x5F85,
                0x91D3: 0x6020,
                0x91D4: 0x614B,
                0x91D5: 0x6234,
                0x91D6: 0x66FF,
                0x91D7: 0x6CF0,
                0x91D8: 0x6EDE,
                0x91D9: 0x80CE,
                0x91DA: 0x817F,
                0x91DB: 0x82D4,
                0x91DC: 0x888B,
                0x91DD: 0x8CB8,
                0x91DE: 0x9000,
                0x91DF: 0x902E,
                0x91E0: 0x968A,
                0x91E1: 0x9EDB,
                0x91E2: 0x9BDB,
                0x91E3: 0x4EE3,
                0x91E4: 0x53F0,
                0x91E5: 0x5927,
                0x91E6: 0x7B2C,
                0x91E7: 0x918D,
                0x91E8: 0x984C,
                0x91E9: 0x9DF9,
                0x91EA: 0x6EDD,
                0x91EB: 0x7027,
                0x91EC: 0x5353,
                0x91ED: 0x5544,
                0x91EE: 0x5B85,
                0x91EF: 0x6258,
                0x91F0: 0x629E,
                0x91F1: 0x62D3,
                0x91F2: 0x6CA2,
                0x91F3: 0x6FEF,
                0x91F4: 0x7422,
                0x91F5: 0x8A17,
                0x91F6: 0x9438,
                0x91F7: 0x6FC1,
                0x91F8: 0x8AFE,
                0x91F9: 0x8338,
                0x91FA: 0x51E7,
                0x91FB: 0x86F8,
                0x91FC: 0x53EA,
                0x9240: 0x53E9,
                0x9241: 0x4F46,
                0x9242: 0x9054,
                0x9243: 0x8FB0,
                0x9244: 0x596A,
                0x9245: 0x8131,
                0x9246: 0x5DFD,
                0x9247: 0x7AEA,
                0x9248: 0x8FBF,
                0x9249: 0x68DA,
                0x924A: 0x8C37,
                0x924B: 0x72F8,
                0x924C: 0x9C48,
                0x924D: 0x6A3D,
                0x924E: 0x8AB0,
                0x924F: 0x4E39,
                0x9250: 0x5358,
                0x9251: 0x5606,
                0x9252: 0x5766,
                0x9253: 0x62C5,
                0x9254: 0x63A2,
                0x9255: 0x65E6,
                0x9256: 0x6B4E,
                0x9257: 0x6DE1,
                0x9258: 0x6E5B,
                0x9259: 0x70AD,
                0x925A: 0x77ED,
                0x925B: 0x7AEF,
                0x925C: 0x7BAA,
                0x925D: 0x7DBB,
                0x925E: 0x803D,
                0x925F: 0x80C6,
                0x9260: 0x86CB,
                0x9261: 0x8A95,
                0x9262: 0x935B,
                0x9263: 0x56E3,
                0x9264: 0x58C7,
                0x9265: 0x5F3E,
                0x9266: 0x65AD,
                0x9267: 0x6696,
                0x9268: 0x6A80,
                0x9269: 0x6BB5,
                0x926A: 0x7537,
                0x926B: 0x8AC7,
                0x926C: 0x5024,
                0x926D: 0x77E5,
                0x926E: 0x5730,
                0x926F: 0x5F1B,
                0x9270: 0x6065,
                0x9271: 0x667A,
                0x9272: 0x6C60,
                0x9273: 0x75F4,
                0x9274: 0x7A1A,
                0x9275: 0x7F6E,
                0x9276: 0x81F4,
                0x9277: 0x8718,
                0x9278: 0x9045,
                0x9279: 0x99B3,
                0x927A: 0x7BC9,
                0x927B: 0x755C,
                0x927C: 0x7AF9,
                0x927D: 0x7B51,
                0x927E: 0x84C4,
                0x9280: 0x9010,
                0x9281: 0x79E9,
                0x9282: 0x7A92,
                0x9283: 0x8336,
                0x9284: 0x5AE1,
                0x9285: 0x7740,
                0x9286: 0x4E2D,
                0x9287: 0x4EF2,
                0x9288: 0x5B99,
                0x9289: 0x5FE0,
                0x928A: 0x62BD,
                0x928B: 0x663C,
                0x928C: 0x67F1,
                0x928D: 0x6CE8,
                0x928E: 0x866B,
                0x928F: 0x8877,
                0x9290: 0x8A3B,
                0x9291: 0x914E,
                0x9292: 0x92F3,
                0x9293: 0x99D0,
                0x9294: 0x6A17,
                0x9295: 0x7026,
                0x9296: 0x732A,
                0x9297: 0x82E7,
                0x9298: 0x8457,
                0x9299: 0x8CAF,
                0x929A: 0x4E01,
                0x929B: 0x5146,
                0x929C: 0x51CB,
                0x929D: 0x558B,
                0x929E: 0x5BF5,
                0x929F: 0x5E16,
                0x92A0: 0x5E33,
                0x92A1: 0x5E81,
                0x92A2: 0x5F14,
                0x92A3: 0x5F35,
                0x92A4: 0x5F6B,
                0x92A5: 0x5FB4,
                0x92A6: 0x61F2,
                0x92A7: 0x6311,
                0x92A8: 0x66A2,
                0x92A9: 0x671D,
                0x92AA: 0x6F6E,
                0x92AB: 0x7252,
                0x92AC: 0x753A,
                0x92AD: 0x773A,
                0x92AE: 0x8074,
                0x92AF: 0x8139,
                0x92B0: 0x8178,
                0x92B1: 0x8776,
                0x92B2: 0x8ABF,
                0x92B3: 0x8ADC,
                0x92B4: 0x8D85,
                0x92B5: 0x8DF3,
                0x92B6: 0x929A,
                0x92B7: 0x9577,
                0x92B8: 0x9802,
                0x92B9: 0x9CE5,
                0x92BA: 0x52C5,
                0x92BB: 0x6357,
                0x92BC: 0x76F4,
                0x92BD: 0x6715,
                0x92BE: 0x6C88,
                0x92BF: 0x73CD,
                0x92C0: 0x8CC3,
                0x92C1: 0x93AE,
                0x92C2: 0x9673,
                0x92C3: 0x6D25,
                0x92C4: 0x589C,
                0x92C5: 0x690E,
                0x92C6: 0x69CC,
                0x92C7: 0x8FFD,
                0x92C8: 0x939A,
                0x92C9: 0x75DB,
                0x92CA: 0x901A,
                0x92CB: 0x585A,
                0x92CC: 0x6802,
                0x92CD: 0x63B4,
                0x92CE: 0x69FB,
                0x92CF: 0x4F43,
                0x92D0: 0x6F2C,
                0x92D1: 0x67D8,
                0x92D2: 0x8FBB,
                0x92D3: 0x8526,
                0x92D4: 0x7DB4,
                0x92D5: 0x9354,
                0x92D6: 0x693F,
                0x92D7: 0x6F70,
                0x92D8: 0x576A,
                0x92D9: 0x58F7,
                0x92DA: 0x5B2C,
                0x92DB: 0x7D2C,
                0x92DC: 0x722A,
                0x92DD: 0x540A,
                0x92DE: 0x91E3,
                0x92DF: 0x9DB4,
                0x92E0: 0x4EAD,
                0x92E1: 0x4F4E,
                0x92E2: 0x505C,
                0x92E3: 0x5075,
                0x92E4: 0x5243,
                0x92E5: 0x8C9E,
                0x92E6: 0x5448,
                0x92E7: 0x5824,
                0x92E8: 0x5B9A,
                0x92E9: 0x5E1D,
                0x92EA: 0x5E95,
                0x92EB: 0x5EAD,
                0x92EC: 0x5EF7,
                0x92ED: 0x5F1F,
                0x92EE: 0x608C,
                0x92EF: 0x62B5,
                0x92F0: 0x633A,
                0x92F1: 0x63D0,
                0x92F2: 0x68AF,
                0x92F3: 0x6C40,
                0x92F4: 0x7887,
                0x92F5: 0x798E,
                0x92F6: 0x7A0B,
                0x92F7: 0x7DE0,
                0x92F8: 0x8247,
                0x92F9: 0x8A02,
                0x92FA: 0x8AE6,
                0x92FB: 0x8E44,
                0x92FC: 0x9013,
                0x9340: 0x90B8,
                0x9341: 0x912D,
                0x9342: 0x91D8,
                0x9343: 0x9F0E,
                0x9344: 0x6CE5,
                0x9345: 0x6458,
                0x9346: 0x64E2,
                0x9347: 0x6575,
                0x9348: 0x6EF4,
                0x9349: 0x7684,
                0x934A: 0x7B1B,
                0x934B: 0x9069,
                0x934C: 0x93D1,
                0x934D: 0x6EBA,
                0x934E: 0x54F2,
                0x934F: 0x5FB9,
                0x9350: 0x64A4,
                0x9351: 0x8F4D,
                0x9352: 0x8FED,
                0x9353: 0x9244,
                0x9354: 0x5178,
                0x9355: 0x586B,
                0x9356: 0x5929,
                0x9357: 0x5C55,
                0x9358: 0x5E97,
                0x9359: 0x6DFB,
                0x935A: 0x7E8F,
                0x935B: 0x751C,
                0x935C: 0x8CBC,
                0x935D: 0x8EE2,
                0x935E: 0x985B,
                0x935F: 0x70B9,
                0x9360: 0x4F1D,
                0x9361: 0x6BBF,
                0x9362: 0x6FB1,
                0x9363: 0x7530,
                0x9364: 0x96FB,
                0x9365: 0x514E,
                0x9366: 0x5410,
                0x9367: 0x5835,
                0x9368: 0x5857,
                0x9369: 0x59AC,
                0x936A: 0x5C60,
                0x936B: 0x5F92,
                0x936C: 0x6597,
                0x936D: 0x675C,
                0x936E: 0x6E21,
                0x936F: 0x767B,
                0x9370: 0x83DF,
                0x9371: 0x8CED,
                0x9372: 0x9014,
                0x9373: 0x90FD,
                0x9374: 0x934D,
                0x9375: 0x7825,
                0x9376: 0x783A,
                0x9377: 0x52AA,
                0x9378: 0x5EA6,
                0x9379: 0x571F,
                0x937A: 0x5974,
                0x937B: 0x6012,
                0x937C: 0x5012,
                0x937D: 0x515A,
                0x937E: 0x51AC,
                0x9380: 0x51CD,
                0x9381: 0x5200,
                0x9382: 0x5510,
                0x9383: 0x5854,
                0x9384: 0x5858,
                0x9385: 0x5957,
                0x9386: 0x5B95,
                0x9387: 0x5CF6,
                0x9388: 0x5D8B,
                0x9389: 0x60BC,
                0x938A: 0x6295,
                0x938B: 0x642D,
                0x938C: 0x6771,
                0x938D: 0x6843,
                0x938E: 0x68BC,
                0x938F: 0x68DF,
                0x9390: 0x76D7,
                0x9391: 0x6DD8,
                0x9392: 0x6E6F,
                0x9393: 0x6D9B,
                0x9394: 0x706F,
                0x9395: 0x71C8,
                0x9396: 0x5F53,
                0x9397: 0x75D8,
                0x9398: 0x7977,
                0x9399: 0x7B49,
                0x939A: 0x7B54,
                0x939B: 0x7B52,
                0x939C: 0x7CD6,
                0x939D: 0x7D71,
                0x939E: 0x5230,
                0x939F: 0x8463,
                0x93A0: 0x8569,
                0x93A1: 0x85E4,
                0x93A2: 0x8A0E,
                0x93A3: 0x8B04,
                0x93A4: 0x8C46,
                0x93A5: 0x8E0F,
                0x93A6: 0x9003,
                0x93A7: 0x900F,
                0x93A8: 0x9419,
                0x93A9: 0x9676,
                0x93AA: 0x982D,
                0x93AB: 0x9A30,
                0x93AC: 0x95D8,
                0x93AD: 0x50CD,
                0x93AE: 0x52D5,
                0x93AF: 0x540C,
                0x93B0: 0x5802,
                0x93B1: 0x5C0E,
                0x93B2: 0x61A7,
                0x93B3: 0x649E,
                0x93B4: 0x6D1E,
                0x93B5: 0x77B3,
                0x93B6: 0x7AE5,
                0x93B7: 0x80F4,
                0x93B8: 0x8404,
                0x93B9: 0x9053,
                0x93BA: 0x9285,
                0x93BB: 0x5CE0,
                0x93BC: 0x9D07,
                0x93BD: 0x533F,
                0x93BE: 0x5F97,
                0x93BF: 0x5FB3,
                0x93C0: 0x6D9C,
                0x93C1: 0x7279,
                0x93C2: 0x7763,
                0x93C3: 0x79BF,
                0x93C4: 0x7BE4,
                0x93C5: 0x6BD2,
                0x93C6: 0x72EC,
                0x93C7: 0x8AAD,
                0x93C8: 0x6803,
                0x93C9: 0x6A61,
                0x93CA: 0x51F8,
                0x93CB: 0x7A81,
                0x93CC: 0x6934,
                0x93CD: 0x5C4A,
                0x93CE: 0x9CF6,
                0x93CF: 0x82EB,
                0x93D0: 0x5BC5,
                0x93D1: 0x9149,
                0x93D2: 0x701E,
                0x93D3: 0x5678,
                0x93D4: 0x5C6F,
                0x93D5: 0x60C7,
                0x93D6: 0x6566,
                0x93D7: 0x6C8C,
                0x93D8: 0x8C5A,
                0x93D9: 0x9041,
                0x93DA: 0x9813,
                0x93DB: 0x5451,
                0x93DC: 0x66C7,
                0x93DD: 0x920D,
                0x93DE: 0x5948,
                0x93DF: 0x90A3,
                0x93E0: 0x5185,
                0x93E1: 0x4E4D,
                0x93E2: 0x51EA,
                0x93E3: 0x8599,
                0x93E4: 0x8B0E,
                0x93E5: 0x7058,
                0x93E6: 0x637A,
                0x93E7: 0x934B,
                0x93E8: 0x6962,
                0x93E9: 0x99B4,
                0x93EA: 0x7E04,
                0x93EB: 0x7577,
                0x93EC: 0x5357,
                0x93ED: 0x6960,
                0x93EE: 0x8EDF,
                0x93EF: 0x96E3,
                0x93F0: 0x6C5D,
                0x93F1: 0x4E8C,
                0x93F2: 0x5C3C,
                0x93F3: 0x5F10,
                0x93F4: 0x8FE9,
                0x93F5: 0x5302,
                0x93F6: 0x8CD1,
                0x93F7: 0x8089,
                0x93F8: 0x8679,
                0x93F9: 0x5EFF,
                0x93FA: 0x65E5,
                0x93FB: 0x4E73,
                0x93FC: 0x5165,
                0x9440: 0x5982,
                0x9441: 0x5C3F,
                0x9442: 0x97EE,
                0x9443: 0x4EFB,
                0x9444: 0x598A,
                0x9445: 0x5FCD,
                0x9446: 0x8A8D,
                0x9447: 0x6FE1,
                0x9448: 0x79B0,
                0x9449: 0x7962,
                0x944A: 0x5BE7,
                0x944B: 0x8471,
                0x944C: 0x732B,
                0x944D: 0x71B1,
                0x944E: 0x5E74,
                0x944F: 0x5FF5,
                0x9450: 0x637B,
                0x9451: 0x649A,
                0x9452: 0x71C3,
                0x9453: 0x7C98,
                0x9454: 0x4E43,
                0x9455: 0x5EFC,
                0x9456: 0x4E4B,
                0x9457: 0x57DC,
                0x9458: 0x56A2,
                0x9459: 0x60A9,
                0x945A: 0x6FC3,
                0x945B: 0x7D0D,
                0x945C: 0x80FD,
                0x945D: 0x8133,
                0x945E: 0x81BF,
                0x945F: 0x8FB2,
                0x9460: 0x8997,
                0x9461: 0x86A4,
                0x9462: 0x5DF4,
                0x9463: 0x628A,
                0x9464: 0x64AD,
                0x9465: 0x8987,
                0x9466: 0x6777,
                0x9467: 0x6CE2,
                0x9468: 0x6D3E,
                0x9469: 0x7436,
                0x946A: 0x7834,
                0x946B: 0x5A46,
                0x946C: 0x7F75,
                0x946D: 0x82AD,
                0x946E: 0x99AC,
                0x946F: 0x4FF3,
                0x9470: 0x5EC3,
                0x9471: 0x62DD,
                0x9472: 0x6392,
                0x9473: 0x6557,
                0x9474: 0x676F,
                0x9475: 0x76C3,
                0x9476: 0x724C,
                0x9477: 0x80CC,
                0x9478: 0x80BA,
                0x9479: 0x8F29,
                0x947A: 0x914D,
                0x947B: 0x500D,
                0x947C: 0x57F9,
                0x947D: 0x5A92,
                0x947E: 0x6885,
                0x9480: 0x6973,
                0x9481: 0x7164,
                0x9482: 0x72FD,
                0x9483: 0x8CB7,
                0x9484: 0x58F2,
                0x9485: 0x8CE0,
                0x9486: 0x966A,
                0x9487: 0x9019,
                0x9488: 0x877F,
                0x9489: 0x79E4,
                0x948A: 0x77E7,
                0x948B: 0x8429,
                0x948C: 0x4F2F,
                0x948D: 0x5265,
                0x948E: 0x535A,
                0x948F: 0x62CD,
                0x9490: 0x67CF,
                0x9491: 0x6CCA,
                0x9492: 0x767D,
                0x9493: 0x7B94,
                0x9494: 0x7C95,
                0x9495: 0x8236,
                0x9496: 0x8584,
                0x9497: 0x8FEB,
                0x9498: 0x66DD,
                0x9499: 0x6F20,
                0x949A: 0x7206,
                0x949B: 0x7E1B,
                0x949C: 0x83AB,
                0x949D: 0x99C1,
                0x949E: 0x9EA6,
                0x949F: 0x51FD,
                0x94A0: 0x7BB1,
                0x94A1: 0x7872,
                0x94A2: 0x7BB8,
                0x94A3: 0x8087,
                0x94A4: 0x7B48,
                0x94A5: 0x6AE8,
                0x94A6: 0x5E61,
                0x94A7: 0x808C,
                0x94A8: 0x7551,
                0x94A9: 0x7560,
                0x94AA: 0x516B,
                0x94AB: 0x9262,
                0x94AC: 0x6E8C,
                0x94AD: 0x767A,
                0x94AE: 0x9197,
                0x94AF: 0x9AEA,
                0x94B0: 0x4F10,
                0x94B1: 0x7F70,
                0x94B2: 0x629C,
                0x94B3: 0x7B4F,
                0x94B4: 0x95A5,
                0x94B5: 0x9CE9,
                0x94B6: 0x567A,
                0x94B7: 0x5859,
                0x94B8: 0x86E4,
                0x94B9: 0x96BC,
                0x94BA: 0x4F34,
                0x94BB: 0x5224,
                0x94BC: 0x534A,
                0x94BD: 0x53CD,
                0x94BE: 0x53DB,
                0x94BF: 0x5E06,
                0x94C0: 0x642C,
                0x94C1: 0x6591,
                0x94C2: 0x677F,
                0x94C3: 0x6C3E,
                0x94C4: 0x6C4E,
                0x94C5: 0x7248,
                0x94C6: 0x72AF,
                0x94C7: 0x73ED,
                0x94C8: 0x7554,
                0x94C9: 0x7E41,
                0x94CA: 0x822C,
                0x94CB: 0x85E9,
                0x94CC: 0x8CA9,
                0x94CD: 0x7BC4,
                0x94CE: 0x91C6,
                0x94CF: 0x7169,
                0x94D0: 0x9812,
                0x94D1: 0x98EF,
                0x94D2: 0x633D,
                0x94D3: 0x6669,
                0x94D4: 0x756A,
                0x94D5: 0x76E4,
                0x94D6: 0x78D0,
                0x94D7: 0x8543,
                0x94D8: 0x86EE,
                0x94D9: 0x532A,
                0x94DA: 0x5351,
                0x94DB: 0x5426,
                0x94DC: 0x5983,
                0x94DD: 0x5E87,
                0x94DE: 0x5F7C,
                0x94DF: 0x60B2,
                0x94E0: 0x6249,
                0x94E1: 0x6279,
                0x94E2: 0x62AB,
                0x94E3: 0x6590,
                0x94E4: 0x6BD4,
                0x94E5: 0x6CCC,
                0x94E6: 0x75B2,
                0x94E7: 0x76AE,
                0x94E8: 0x7891,
                0x94E9: 0x79D8,
                0x94EA: 0x7DCB,
                0x94EB: 0x7F77,
                0x94EC: 0x80A5,
                0x94ED: 0x88AB,
                0x94EE: 0x8AB9,
                0x94EF: 0x8CBB,
                0x94F0: 0x907F,
                0x94F1: 0x975E,
                0x94F2: 0x98DB,
                0x94F3: 0x6A0B,
                0x94F4: 0x7C38,
                0x94F5: 0x5099,
                0x94F6: 0x5C3E,
                0x94F7: 0x5FAE,
                0x94F8: 0x6787,
                0x94F9: 0x6BD8,
                0x94FA: 0x7435,
                0x94FB: 0x7709,
                0x94FC: 0x7F8E,
                0x9540: 0x9F3B,
                0x9541: 0x67CA,
                0x9542: 0x7A17,
                0x9543: 0x5339,
                0x9544: 0x758B,
                0x9545: 0x9AED,
                0x9546: 0x5F66,
                0x9547: 0x819D,
                0x9548: 0x83F1,
                0x9549: 0x8098,
                0x954A: 0x5F3C,
                0x954B: 0x5FC5,
                0x954C: 0x7562,
                0x954D: 0x7B46,
                0x954E: 0x903C,
                0x954F: 0x6867,
                0x9550: 0x59EB,
                0x9551: 0x5A9B,
                0x9552: 0x7D10,
                0x9553: 0x767E,
                0x9554: 0x8B2C,
                0x9555: 0x4FF5,
                0x9556: 0x5F6A,
                0x9557: 0x6A19,
                0x9558: 0x6C37,
                0x9559: 0x6F02,
                0x955A: 0x74E2,
                0x955B: 0x7968,
                0x955C: 0x8868,
                0x955D: 0x8A55,
                0x955E: 0x8C79,
                0x955F: 0x5EDF,
                0x9560: 0x63CF,
                0x9561: 0x75C5,
                0x9562: 0x79D2,
                0x9563: 0x82D7,
                0x9564: 0x9328,
                0x9565: 0x92F2,
                0x9566: 0x849C,
                0x9567: 0x86ED,
                0x9568: 0x9C2D,
                0x9569: 0x54C1,
                0x956A: 0x5F6C,
                0x956B: 0x658C,
                0x956C: 0x6D5C,
                0x956D: 0x7015,
                0x956E: 0x8CA7,
                0x956F: 0x8CD3,
                0x9570: 0x983B,
                0x9571: 0x654F,
                0x9572: 0x74F6,
                0x9573: 0x4E0D,
                0x9574: 0x4ED8,
                0x9575: 0x57E0,
                0x9576: 0x592B,
                0x9577: 0x5A66,
                0x9578: 0x5BCC,
                0x9579: 0x51A8,
                0x957A: 0x5E03,
                0x957B: 0x5E9C,
                0x957C: 0x6016,
                0x957D: 0x6276,
                0x957E: 0x6577,
                0x9580: 0x65A7,
                0x9581: 0x666E,
                0x9582: 0x6D6E,
                0x9583: 0x7236,
                0x9584: 0x7B26,
                0x9585: 0x8150,
                0x9586: 0x819A,
                0x9587: 0x8299,
                0x9588: 0x8B5C,
                0x9589: 0x8CA0,
                0x958A: 0x8CE6,
                0x958B: 0x8D74,
                0x958C: 0x961C,
                0x958D: 0x9644,
                0x958E: 0x4FAE,
                0x958F: 0x64AB,
                0x9590: 0x6B66,
                0x9591: 0x821E,
                0x9592: 0x8461,
                0x9593: 0x856A,
                0x9594: 0x90E8,
                0x9595: 0x5C01,
                0x9596: 0x6953,
                0x9597: 0x98A8,
                0x9598: 0x847A,
                0x9599: 0x8557,
                0x959A: 0x4F0F,
                0x959B: 0x526F,
                0x959C: 0x5FA9,
                0x959D: 0x5E45,
                0x959E: 0x670D,
                0x959F: 0x798F,
                0x95A0: 0x8179,
                0x95A1: 0x8907,
                0x95A2: 0x8986,
                0x95A3: 0x6DF5,
                0x95A4: 0x5F17,
                0x95A5: 0x6255,
                0x95A6: 0x6CB8,
                0x95A7: 0x4ECF,
                0x95A8: 0x7269,
                0x95A9: 0x9B92,
                0x95AA: 0x5206,
                0x95AB: 0x543B,
                0x95AC: 0x5674,
                0x95AD: 0x58B3,
                0x95AE: 0x61A4,
                0x95AF: 0x626E,
                0x95B0: 0x711A,
                0x95B1: 0x596E,
                0x95B2: 0x7C89,
                0x95B3: 0x7CDE,
                0x95B4: 0x7D1B,
                0x95B5: 0x96F0,
                0x95B6: 0x6587,
                0x95B7: 0x805E,
                0x95B8: 0x4E19,
                0x95B9: 0x4F75,
                0x95BA: 0x5175,
                0x95BB: 0x5840,
                0x95BC: 0x5E63,
                0x95BD: 0x5E73,
                0x95BE: 0x5F0A,
                0x95BF: 0x67C4,
                0x95C0: 0x4E26,
                0x95C1: 0x853D,
                0x95C2: 0x9589,
                0x95C3: 0x965B,
                0x95C4: 0x7C73,
                0x95C5: 0x9801,
                0x95C6: 0x50FB,
                0x95C7: 0x58C1,
                0x95C8: 0x7656,
                0x95C9: 0x78A7,
                0x95CA: 0x5225,
                0x95CB: 0x77A5,
                0x95CC: 0x8511,
                0x95CD: 0x7B86,
                0x95CE: 0x504F,
                0x95CF: 0x5909,
                0x95D0: 0x7247,
                0x95D1: 0x7BC7,
                0x95D2: 0x7DE8,
                0x95D3: 0x8FBA,
                0x95D4: 0x8FD4,
                0x95D5: 0x904D,
                0x95D6: 0x4FBF,
                0x95D7: 0x52C9,
                0x95D8: 0x5A29,
                0x95D9: 0x5F01,
                0x95DA: 0x97AD,
                0x95DB: 0x4FDD,
                0x95DC: 0x8217,
                0x95DD: 0x92EA,
                0x95DE: 0x5703,
                0x95DF: 0x6355,
                0x95E0: 0x6B69,
                0x95E1: 0x752B,
                0x95E2: 0x88DC,
                0x95E3: 0x8F14,
                0x95E4: 0x7A42,
                0x95E5: 0x52DF,
                0x95E6: 0x5893,
                0x95E7: 0x6155,
                0x95E8: 0x620A,
                0x95E9: 0x66AE,
                0x95EA: 0x6BCD,
                0x95EB: 0x7C3F,
                0x95EC: 0x83E9,
                0x95ED: 0x5023,
                0x95EE: 0x4FF8,
                0x95EF: 0x5305,
                0x95F0: 0x5446,
                0x95F1: 0x5831,
                0x95F2: 0x5949,
                0x95F3: 0x5B9D,
                0x95F4: 0x5CF0,
                0x95F5: 0x5CEF,
                0x95F6: 0x5D29,
                0x95F7: 0x5E96,
                0x95F8: 0x62B1,
                0x95F9: 0x6367,
                0x95FA: 0x653E,
                0x95FB: 0x65B9,
                0x95FC: 0x670B,
                0x9640: 0x6CD5,
                0x9641: 0x6CE1,
                0x9642: 0x70F9,
                0x9643: 0x7832,
                0x9644: 0x7E2B,
                0x9645: 0x80DE,
                0x9646: 0x82B3,
                0x9647: 0x840C,
                0x9648: 0x84EC,
                0x9649: 0x8702,
                0x964A: 0x8912,
                0x964B: 0x8A2A,
                0x964C: 0x8C4A,
                0x964D: 0x90A6,
                0x964E: 0x92D2,
                0x964F: 0x98FD,
                0x9650: 0x9CF3,
                0x9651: 0x9D6C,
                0x9652: 0x4E4F,
                0x9653: 0x4EA1,
                0x9654: 0x508D,
                0x9655: 0x5256,
                0x9656: 0x574A,
                0x9657: 0x59A8,
                0x9658: 0x5E3D,
                0x9659: 0x5FD8,
                0x965A: 0x5FD9,
                0x965B: 0x623F,
                0x965C: 0x66B4,
                0x965D: 0x671B,
                0x965E: 0x67D0,
                0x965F: 0x68D2,
                0x9660: 0x5192,
                0x9661: 0x7D21,
                0x9662: 0x80AA,
                0x9663: 0x81A8,
                0x9664: 0x8B00,
                0x9665: 0x8C8C,
                0x9666: 0x8CBF,
                0x9667: 0x927E,
                0x9668: 0x9632,
                0x9669: 0x5420,
                0x966A: 0x982C,
                0x966B: 0x5317,
                0x966C: 0x50D5,
                0x966D: 0x535C,
                0x966E: 0x58A8,
                0x966F: 0x64B2,
                0x9670: 0x6734,
                0x9671: 0x7267,
                0x9672: 0x7766,
                0x9673: 0x7A46,
                0x9674: 0x91E6,
                0x9675: 0x52C3,
                0x9676: 0x6CA1,
                0x9677: 0x6B86,
                0x9678: 0x5800,
                0x9679: 0x5E4C,
                0x967A: 0x5954,
                0x967B: 0x672C,
                0x967C: 0x7FFB,
                0x967D: 0x51E1,
                0x967E: 0x76C6,
                0x9680: 0x6469,
                0x9681: 0x78E8,
                0x9682: 0x9B54,
                0x9683: 0x9EBB,
                0x9684: 0x57CB,
                0x9685: 0x59B9,
                0x9686: 0x6627,
                0x9687: 0x679A,
                0x9688: 0x6BCE,
                0x9689: 0x54E9,
                0x968A: 0x69D9,
                0x968B: 0x5E55,
                0x968C: 0x819C,
                0x968D: 0x6795,
                0x968E: 0x9BAA,
                0x968F: 0x67FE,
                0x9690: 0x9C52,
                0x9691: 0x685D,
                0x9692: 0x4EA6,
                0x9693: 0x4FE3,
                0x9694: 0x53C8,
                0x9695: 0x62B9,
                0x9696: 0x672B,
                0x9697: 0x6CAB,
                0x9698: 0x8FC4,
                0x9699: 0x4FAD,
                0x969A: 0x7E6D,
                0x969B: 0x9EBF,
                0x969C: 0x4E07,
                0x969D: 0x6162,
                0x969E: 0x6E80,
                0x969F: 0x6F2B,
                0x96A0: 0x8513,
                0x96A1: 0x5473,
                0x96A2: 0x672A,
                0x96A3: 0x9B45,
                0x96A4: 0x5DF3,
                0x96A5: 0x7B95,
                0x96A6: 0x5CAC,
                0x96A7: 0x5BC6,
                0x96A8: 0x871C,
                0x96A9: 0x6E4A,
                0x96AA: 0x84D1,
                0x96AB: 0x7A14,
                0x96AC: 0x8108,
                0x96AD: 0x5999,
                0x96AE: 0x7C8D,
                0x96AF: 0x6C11,
                0x96B0: 0x7720,
                0x96B1: 0x52D9,
                0x96B2: 0x5922,
                0x96B3: 0x7121,
                0x96B4: 0x725F,
                0x96B5: 0x77DB,
                0x96B6: 0x9727,
                0x96B7: 0x9D61,
                0x96B8: 0x690B,
                0x96B9: 0x5A7F,
                0x96BA: 0x5A18,
                0x96BB: 0x51A5,
                0x96BC: 0x540D,
                0x96BD: 0x547D,
                0x96BE: 0x660E,
                0x96BF: 0x76DF,
                0x96C0: 0x8FF7,
                0x96C1: 0x9298,
                0x96C2: 0x9CF4,
                0x96C3: 0x59EA,
                0x96C4: 0x725D,
                0x96C5: 0x6EC5,
                0x96C6: 0x514D,
                0x96C7: 0x68C9,
                0x96C8: 0x7DBF,
                0x96C9: 0x7DEC,
                0x96CA: 0x9762,
                0x96CB: 0x9EBA,
                0x96CC: 0x6478,
                0x96CD: 0x6A21,
                0x96CE: 0x8302,
                0x96CF: 0x5984,
                0x96D0: 0x5B5F,
                0x96D1: 0x6BDB,
                0x96D2: 0x731B,
                0x96D3: 0x76F2,
                0x96D4: 0x7DB2,
                0x96D5: 0x8017,
                0x96D6: 0x8499,
                0x96D7: 0x5132,
                0x96D8: 0x6728,
                0x96D9: 0x9ED9,
                0x96DA: 0x76EE,
                0x96DB: 0x6762,
                0x96DC: 0x52FF,
                0x96DD: 0x9905,
                0x96DE: 0x5C24,
                0x96DF: 0x623B,
                0x96E0: 0x7C7E,
                0x96E1: 0x8CB0,
                0x96E2: 0x554F,
                0x96E3: 0x60B6,
                0x96E4: 0x7D0B,
                0x96E5: 0x9580,
                0x96E6: 0x5301,
                0x96E7: 0x4E5F,
                0x96E8: 0x51B6,
                0x96E9: 0x591C,
                0x96EA: 0x723A,
                0x96EB: 0x8036,
                0x96EC: 0x91CE,
                0x96ED: 0x5F25,
                0x96EE: 0x77E2,
                0x96EF: 0x5384,
                0x96F0: 0x5F79,
                0x96F1: 0x7D04,
                0x96F2: 0x85AC,
                0x96F3: 0x8A33,
                0x96F4: 0x8E8D,
                0x96F5: 0x9756,
                0x96F6: 0x67F3,
                0x96F7: 0x85AE,
                0x96F8: 0x9453,
                0x96F9: 0x6109,
                0x96FA: 0x6108,
                0x96FB: 0x6CB9,
                0x96FC: 0x7652,
                0x9740: 0x8AED,
                0x9741: 0x8F38,
                0x9742: 0x552F,
                0x9743: 0x4F51,
                0x9744: 0x512A,
                0x9745: 0x52C7,
                0x9746: 0x53CB,
                0x9747: 0x5BA5,
                0x9748: 0x5E7D,
                0x9749: 0x60A0,
                0x974A: 0x6182,
                0x974B: 0x63D6,
                0x974C: 0x6709,
                0x974D: 0x67DA,
                0x974E: 0x6E67,
                0x974F: 0x6D8C,
                0x9750: 0x7336,
                0x9751: 0x7337,
                0x9752: 0x7531,
                0x9753: 0x7950,
                0x9754: 0x88D5,
                0x9755: 0x8A98,
                0x9756: 0x904A,
                0x9757: 0x9091,
                0x9758: 0x90F5,
                0x9759: 0x96C4,
                0x975A: 0x878D,
                0x975B: 0x5915,
                0x975C: 0x4E88,
                0x975D: 0x4F59,
                0x975E: 0x4E0E,
                0x975F: 0x8A89,
                0x9760: 0x8F3F,
                0x9761: 0x9810,
                0x9762: 0x50AD,
                0x9763: 0x5E7C,
                0x9764: 0x5996,
                0x9765: 0x5BB9,
                0x9766: 0x5EB8,
                0x9767: 0x63DA,
                0x9768: 0x63FA,
                0x9769: 0x64C1,
                0x976A: 0x66DC,
                0x976B: 0x694A,
                0x976C: 0x69D8,
                0x976D: 0x6D0B,
                0x976E: 0x6EB6,
                0x976F: 0x7194,
                0x9770: 0x7528,
                0x9771: 0x7AAF,
                0x9772: 0x7F8A,
                0x9773: 0x8000,
                0x9774: 0x8449,
                0x9775: 0x84C9,
                0x9776: 0x8981,
                0x9777: 0x8B21,
                0x9778: 0x8E0A,
                0x9779: 0x9065,
                0x977A: 0x967D,
                0x977B: 0x990A,
                0x977C: 0x617E,
                0x977D: 0x6291,
                0x977E: 0x6B32,
                0x9780: 0x6C83,
                0x9781: 0x6D74,
                0x9782: 0x7FCC,
                0x9783: 0x7FFC,
                0x9784: 0x6DC0,
                0x9785: 0x7F85,
                0x9786: 0x87BA,
                0x9787: 0x88F8,
                0x9788: 0x6765,
                0x9789: 0x83B1,
                0x978A: 0x983C,
                0x978B: 0x96F7,
                0x978C: 0x6D1B,
                0x978D: 0x7D61,
                0x978E: 0x843D,
                0x978F: 0x916A,
                0x9790: 0x4E71,
                0x9791: 0x5375,
                0x9792: 0x5D50,
                0x9793: 0x6B04,
                0x9794: 0x6FEB,
                0x9795: 0x85CD,
                0x9796: 0x862D,
                0x9797: 0x89A7,
                0x9798: 0x5229,
                0x9799: 0x540F,
                0x979A: 0x5C65,
                0x979B: 0x674E,
                0x979C: 0x68A8,
                0x979D: 0x7406,
                0x979E: 0x7483,
                0x979F: 0x75E2,
                0x97A0: 0x88CF,
                0x97A1: 0x88E1,
                0x97A2: 0x91CC,
                0x97A3: 0x96E2,
                0x97A4: 0x9678,
                0x97A5: 0x5F8B,
                0x97A6: 0x7387,
                0x97A7: 0x7ACB,
                0x97A8: 0x844E,
                0x97A9: 0x63A0,
                0x97AA: 0x7565,
                0x97AB: 0x5289,
                0x97AC: 0x6D41,
                0x97AD: 0x6E9C,
                0x97AE: 0x7409,
                0x97AF: 0x7559,
                0x97B0: 0x786B,
                0x97B1: 0x7C92,
                0x97B2: 0x9686,
                0x97B3: 0x7ADC,
                0x97B4: 0x9F8D,
                0x97B5: 0x4FB6,
                0x97B6: 0x616E,
                0x97B7: 0x65C5,
                0x97B8: 0x865C,
                0x97B9: 0x4E86,
                0x97BA: 0x4EAE,
                0x97BB: 0x50DA,
                0x97BC: 0x4E21,
                0x97BD: 0x51CC,
                0x97BE: 0x5BEE,
                0x97BF: 0x6599,
                0x97C0: 0x6881,
                0x97C1: 0x6DBC,
                0x97C2: 0x731F,
                0x97C3: 0x7642,
                0x97C4: 0x77AD,
                0x97C5: 0x7A1C,
                0x97C6: 0x7CE7,
                0x97C7: 0x826F,
                0x97C8: 0x8AD2,
                0x97C9: 0x907C,
                0x97CA: 0x91CF,
                0x97CB: 0x9675,
                0x97CC: 0x9818,
                0x97CD: 0x529B,
                0x97CE: 0x7DD1,
                0x97CF: 0x502B,
                0x97D0: 0x5398,
                0x97D1: 0x6797,
                0x97D2: 0x6DCB,
                0x97D3: 0x71D0,
                0x97D4: 0x7433,
                0x97D5: 0x81E8,
                0x97D6: 0x8F2A,
                0x97D7: 0x96A3,
                0x97D8: 0x9C57,
                0x97D9: 0x9E9F,
                0x97DA: 0x7460,
                0x97DB: 0x5841,
                0x97DC: 0x6D99,
                0x97DD: 0x7D2F,
                0x97DE: 0x985E,
                0x97DF: 0x4EE4,
                0x97E0: 0x4F36,
                0x97E1: 0x4F8B,
                0x97E2: 0x51B7,
                0x97E3: 0x52B1,
                0x97E4: 0x5DBA,
                0x97E5: 0x601C,
                0x97E6: 0x73B2,
                0x97E7: 0x793C,
                0x97E8: 0x82D3,
                0x97E9: 0x9234,
                0x97EA: 0x96B7,
                0x97EB: 0x96F6,
                0x97EC: 0x970A,
                0x97ED: 0x9E97,
                0x97EE: 0x9F62,
                0x97EF: 0x66A6,
                0x97F0: 0x6B74,
                0x97F1: 0x5217,
                0x97F2: 0x52A3,
                0x97F3: 0x70C8,
                0x97F4: 0x88C2,
                0x97F5: 0x5EC9,
                0x97F6: 0x604B,
                0x97F7: 0x6190,
                0x97F8: 0x6F23,
                0x97F9: 0x7149,
                0x97FA: 0x7C3E,
                0x97FB: 0x7DF4,
                0x97FC: 0x806F,
                0x9840: 0x84EE,
                0x9841: 0x9023,
                0x9842: 0x932C,
                0x9843: 0x5442,
                0x9844: 0x9B6F,
                0x9845: 0x6AD3,
                0x9846: 0x7089,
                0x9847: 0x8CC2,
                0x9848: 0x8DEF,
                0x9849: 0x9732,
                0x984A: 0x52B4,
                0x984B: 0x5A41,
                0x984C: 0x5ECA,
                0x984D: 0x5F04,
                0x984E: 0x6717,
                0x984F: 0x697C,
                0x9850: 0x6994,
                0x9851: 0x6D6A,
                0x9852: 0x6F0F,
                0x9853: 0x7262,
                0x9854: 0x72FC,
                0x9855: 0x7BED,
                0x9856: 0x8001,
                0x9857: 0x807E,
                0x9858: 0x874B,
                0x9859: 0x90CE,
                0x985A: 0x516D,
                0x985B: 0x9E93,
                0x985C: 0x7984,
                0x985D: 0x808B,
                0x985E: 0x9332,
                0x985F: 0x8AD6,
                0x9860: 0x502D,
                0x9861: 0x548C,
                0x9862: 0x8A71,
                0x9863: 0x6B6A,
                0x9864: 0x8CC4,
                0x9865: 0x8107,
                0x9866: 0x60D1,
                0x9867: 0x67A0,
                0x9868: 0x9DF2,
                0x9869: 0x4E99,
                0x986A: 0x4E98,
                0x986B: 0x9C10,
                0x986C: 0x8A6B,
                0x986D: 0x85C1,
                0x986E: 0x8568,
                0x986F: 0x6900,
                0x9870: 0x6E7E,
                0x9871: 0x7897,
                0x9872: 0x8155,
                0x989F: 0x5F0C,
                0x98A0: 0x4E10,
                0x98A1: 0x4E15,
                0x98A2: 0x4E2A,
                0x98A3: 0x4E31,
                0x98A4: 0x4E36,
                0x98A5: 0x4E3C,
                0x98A6: 0x4E3F,
                0x98A7: 0x4E42,
                0x98A8: 0x4E56,
                0x98A9: 0x4E58,
                0x98AA: 0x4E82,
                0x98AB: 0x4E85,
                0x98AC: 0x8C6B,
                0x98AD: 0x4E8A,
                0x98AE: 0x8212,
                0x98AF: 0x5F0D,
                0x98B0: 0x4E8E,
                0x98B1: 0x4E9E,
                0x98B2: 0x4E9F,
                0x98B3: 0x4EA0,
                0x98B4: 0x4EA2,
                0x98B5: 0x4EB0,
                0x98B6: 0x4EB3,
                0x98B7: 0x4EB6,
                0x98B8: 0x4ECE,
                0x98B9: 0x4ECD,
                0x98BA: 0x4EC4,
                0x98BB: 0x4EC6,
                0x98BC: 0x4EC2,
                0x98BD: 0x4ED7,
                0x98BE: 0x4EDE,
                0x98BF: 0x4EED,
                0x98C0: 0x4EDF,
                0x98C1: 0x4EF7,
                0x98C2: 0x4F09,
                0x98C3: 0x4F5A,
                0x98C4: 0x4F30,
                0x98C5: 0x4F5B,
                0x98C6: 0x4F5D,
                0x98C7: 0x4F57,
                0x98C8: 0x4F47,
                0x98C9: 0x4F76,
                0x98CA: 0x4F88,
                0x98CB: 0x4F8F,
                0x98CC: 0x4F98,
                0x98CD: 0x4F7B,
                0x98CE: 0x4F69,
                0x98CF: 0x4F70,
                0x98D0: 0x4F91,
                0x98D1: 0x4F6F,
                0x98D2: 0x4F86,
                0x98D3: 0x4F96,
                0x98D4: 0x5118,
                0x98D5: 0x4FD4,
                0x98D6: 0x4FDF,
                0x98D7: 0x4FCE,
                0x98D8: 0x4FD8,
                0x98D9: 0x4FDB,
                0x98DA: 0x4FD1,
                0x98DB: 0x4FDA,
                0x98DC: 0x4FD0,
                0x98DD: 0x4FE4,
                0x98DE: 0x4FE5,
                0x98DF: 0x501A,
                0x98E0: 0x5028,
                0x98E1: 0x5014,
                0x98E2: 0x502A,
                0x98E3: 0x5025,
                0x98E4: 0x5005,
                0x98E5: 0x4F1C,
                0x98E6: 0x4FF6,
                0x98E7: 0x5021,
                0x98E8: 0x5029,
                0x98E9: 0x502C,
                0x98EA: 0x4FFE,
                0x98EB: 0x4FEF,
                0x98EC: 0x5011,
                0x98ED: 0x5006,
                0x98EE: 0x5043,
                0x98EF: 0x5047,
                0x98F0: 0x6703,
                0x98F1: 0x5055,
                0x98F2: 0x5050,
                0x98F3: 0x5048,
                0x98F4: 0x505A,
                0x98F5: 0x5056,
                0x98F6: 0x506C,
                0x98F7: 0x5078,
                0x98F8: 0x5080,
                0x98F9: 0x509A,
                0x98FA: 0x5085,
                0x98FB: 0x50B4,
                0x98FC: 0x50B2,
                0x9940: 0x50C9,
                0x9941: 0x50CA,
                0x9942: 0x50B3,
                0x9943: 0x50C2,
                0x9944: 0x50D6,
                0x9945: 0x50DE,
                0x9946: 0x50E5,
                0x9947: 0x50ED,
                0x9948: 0x50E3,
                0x9949: 0x50EE,
                0x994A: 0x50F9,
                0x994B: 0x50F5,
                0x994C: 0x5109,
                0x994D: 0x5101,
                0x994E: 0x5102,
                0x994F: 0x5116,
                0x9950: 0x5115,
                0x9951: 0x5114,
                0x9952: 0x511A,
                0x9953: 0x5121,
                0x9954: 0x513A,
                0x9955: 0x5137,
                0x9956: 0x513C,
                0x9957: 0x513B,
                0x9958: 0x513F,
                0x9959: 0x5140,
                0x995A: 0x5152,
                0x995B: 0x514C,
                0x995C: 0x5154,
                0x995D: 0x5162,
                0x995E: 0x7AF8,
                0x995F: 0x5169,
                0x9960: 0x516A,
                0x9961: 0x516E,
                0x9962: 0x5180,
                0x9963: 0x5182,
                0x9964: 0x56D8,
                0x9965: 0x518C,
                0x9966: 0x5189,
                0x9967: 0x518F,
                0x9968: 0x5191,
                0x9969: 0x5193,
                0x996A: 0x5195,
                0x996B: 0x5196,
                0x996C: 0x51A4,
                0x996D: 0x51A6,
                0x996E: 0x51A2,
                0x996F: 0x51A9,
                0x9970: 0x51AA,
                0x9971: 0x51AB,
                0x9972: 0x51B3,
                0x9973: 0x51B1,
                0x9974: 0x51B2,
                0x9975: 0x51B0,
                0x9976: 0x51B5,
                0x9977: 0x51BD,
                0x9978: 0x51C5,
                0x9979: 0x51C9,
                0x997A: 0x51DB,
                0x997B: 0x51E0,
                0x997C: 0x8655,
                0x997D: 0x51E9,
                0x997E: 0x51ED,
                0x9980: 0x51F0,
                0x9981: 0x51F5,
                0x9982: 0x51FE,
                0x9983: 0x5204,
                0x9984: 0x520B,
                0x9985: 0x5214,
                0x9986: 0x520E,
                0x9987: 0x5227,
                0x9988: 0x522A,
                0x9989: 0x522E,
                0x998A: 0x5233,
                0x998B: 0x5239,
                0x998C: 0x524F,
                0x998D: 0x5244,
                0x998E: 0x524B,
                0x998F: 0x524C,
                0x9990: 0x525E,
                0x9991: 0x5254,
                0x9992: 0x526A,
                0x9993: 0x5274,
                0x9994: 0x5269,
                0x9995: 0x5273,
                0x9996: 0x527F,
                0x9997: 0x527D,
                0x9998: 0x528D,
                0x9999: 0x5294,
                0x999A: 0x5292,
                0x999B: 0x5271,
                0x999C: 0x5288,
                0x999D: 0x5291,
                0x999E: 0x8FA8,
                0x999F: 0x8FA7,
                0x99A0: 0x52AC,
                0x99A1: 0x52AD,
                0x99A2: 0x52BC,
                0x99A3: 0x52B5,
                0x99A4: 0x52C1,
                0x99A5: 0x52CD,
                0x99A6: 0x52D7,
                0x99A7: 0x52DE,
                0x99A8: 0x52E3,
                0x99A9: 0x52E6,
                0x99AA: 0x98ED,
                0x99AB: 0x52E0,
                0x99AC: 0x52F3,
                0x99AD: 0x52F5,
                0x99AE: 0x52F8,
                0x99AF: 0x52F9,
                0x99B0: 0x5306,
                0x99B1: 0x5308,
                0x99B2: 0x7538,
                0x99B3: 0x530D,
                0x99B4: 0x5310,
                0x99B5: 0x530F,
                0x99B6: 0x5315,
                0x99B7: 0x531A,
                0x99B8: 0x5323,
                0x99B9: 0x532F,
                0x99BA: 0x5331,
                0x99BB: 0x5333,
                0x99BC: 0x5338,
                0x99BD: 0x5340,
                0x99BE: 0x5346,
                0x99BF: 0x5345,
                0x99C0: 0x4E17,
                0x99C1: 0x5349,
                0x99C2: 0x534D,
                0x99C3: 0x51D6,
                0x99C4: 0x535E,
                0x99C5: 0x5369,
                0x99C6: 0x536E,
                0x99C7: 0x5918,
                0x99C8: 0x537B,
                0x99C9: 0x5377,
                0x99CA: 0x5382,
                0x99CB: 0x5396,
                0x99CC: 0x53A0,
                0x99CD: 0x53A6,
                0x99CE: 0x53A5,
                0x99CF: 0x53AE,
                0x99D0: 0x53B0,
                0x99D1: 0x53B6,
                0x99D2: 0x53C3,
                0x99D3: 0x7C12,
                0x99D4: 0x96D9,
                0x99D5: 0x53DF,
                0x99D6: 0x66FC,
                0x99D7: 0x71EE,
                0x99D8: 0x53EE,
                0x99D9: 0x53E8,
                0x99DA: 0x53ED,
                0x99DB: 0x53FA,
                0x99DC: 0x5401,
                0x99DD: 0x543D,
                0x99DE: 0x5440,
                0x99DF: 0x542C,
                0x99E0: 0x542D,
                0x99E1: 0x543C,
                0x99E2: 0x542E,
                0x99E3: 0x5436,
                0x99E4: 0x5429,
                0x99E5: 0x541D,
                0x99E6: 0x544E,
                0x99E7: 0x548F,
                0x99E8: 0x5475,
                0x99E9: 0x548E,
                0x99EA: 0x545F,
                0x99EB: 0x5471,
                0x99EC: 0x5477,
                0x99ED: 0x5470,
                0x99EE: 0x5492,
                0x99EF: 0x547B,
                0x99F0: 0x5480,
                0x99F1: 0x5476,
                0x99F2: 0x5484,
                0x99F3: 0x5490,
                0x99F4: 0x5486,
                0x99F5: 0x54C7,
                0x99F6: 0x54A2,
                0x99F7: 0x54B8,
                0x99F8: 0x54A5,
                0x99F9: 0x54AC,
                0x99FA: 0x54C4,
                0x99FB: 0x54C8,
                0x99FC: 0x54A8,
                0x9A40: 0x54AB,
                0x9A41: 0x54C2,
                0x9A42: 0x54A4,
                0x9A43: 0x54BE,
                0x9A44: 0x54BC,
                0x9A45: 0x54D8,
                0x9A46: 0x54E5,
                0x9A47: 0x54E6,
                0x9A48: 0x550F,
                0x9A49: 0x5514,
                0x9A4A: 0x54FD,
                0x9A4B: 0x54EE,
                0x9A4C: 0x54ED,
                0x9A4D: 0x54FA,
                0x9A4E: 0x54E2,
                0x9A4F: 0x5539,
                0x9A50: 0x5540,
                0x9A51: 0x5563,
                0x9A52: 0x554C,
                0x9A53: 0x552E,
                0x9A54: 0x555C,
                0x9A55: 0x5545,
                0x9A56: 0x5556,
                0x9A57: 0x5557,
                0x9A58: 0x5538,
                0x9A59: 0x5533,
                0x9A5A: 0x555D,
                0x9A5B: 0x5599,
                0x9A5C: 0x5580,
                0x9A5D: 0x54AF,
                0x9A5E: 0x558A,
                0x9A5F: 0x559F,
                0x9A60: 0x557B,
                0x9A61: 0x557E,
                0x9A62: 0x5598,
                0x9A63: 0x559E,
                0x9A64: 0x55AE,
                0x9A65: 0x557C,
                0x9A66: 0x5583,
                0x9A67: 0x55A9,
                0x9A68: 0x5587,
                0x9A69: 0x55A8,
                0x9A6A: 0x55DA,
                0x9A6B: 0x55C5,
                0x9A6C: 0x55DF,
                0x9A6D: 0x55C4,
                0x9A6E: 0x55DC,
                0x9A6F: 0x55E4,
                0x9A70: 0x55D4,
                0x9A71: 0x5614,
                0x9A72: 0x55F7,
                0x9A73: 0x5616,
                0x9A74: 0x55FE,
                0x9A75: 0x55FD,
                0x9A76: 0x561B,
                0x9A77: 0x55F9,
                0x9A78: 0x564E,
                0x9A79: 0x5650,
                0x9A7A: 0x71DF,
                0x9A7B: 0x5634,
                0x9A7C: 0x5636,
                0x9A7D: 0x5632,
                0x9A7E: 0x5638,
                0x9A80: 0x566B,
                0x9A81: 0x5664,
                0x9A82: 0x562F,
                0x9A83: 0x566C,
                0x9A84: 0x566A,
                0x9A85: 0x5686,
                0x9A86: 0x5680,
                0x9A87: 0x568A,
                0x9A88: 0x56A0,
                0x9A89: 0x5694,
                0x9A8A: 0x568F,
                0x9A8B: 0x56A5,
                0x9A8C: 0x56AE,
                0x9A8D: 0x56B6,
                0x9A8E: 0x56B4,
                0x9A8F: 0x56C2,
                0x9A90: 0x56BC,
                0x9A91: 0x56C1,
                0x9A92: 0x56C3,
                0x9A93: 0x56C0,
                0x9A94: 0x56C8,
                0x9A95: 0x56CE,
                0x9A96: 0x56D1,
                0x9A97: 0x56D3,
                0x9A98: 0x56D7,
                0x9A99: 0x56EE,
                0x9A9A: 0x56F9,
                0x9A9B: 0x5700,
                0x9A9C: 0x56FF,
                0x9A9D: 0x5704,
                0x9A9E: 0x5709,
                0x9A9F: 0x5708,
                0x9AA0: 0x570B,
                0x9AA1: 0x570D,
                0x9AA2: 0x5713,
                0x9AA3: 0x5718,
                0x9AA4: 0x5716,
                0x9AA5: 0x55C7,
                0x9AA6: 0x571C,
                0x9AA7: 0x5726,
                0x9AA8: 0x5737,
                0x9AA9: 0x5738,
                0x9AAA: 0x574E,
                0x9AAB: 0x573B,
                0x9AAC: 0x5740,
                0x9AAD: 0x574F,
                0x9AAE: 0x5769,
                0x9AAF: 0x57C0,
                0x9AB0: 0x5788,
                0x9AB1: 0x5761,
                0x9AB2: 0x577F,
                0x9AB3: 0x5789,
                0x9AB4: 0x5793,
                0x9AB5: 0x57A0,
                0x9AB6: 0x57B3,
                0x9AB7: 0x57A4,
                0x9AB8: 0x57AA,
                0x9AB9: 0x57B0,
                0x9ABA: 0x57C3,
                0x9ABB: 0x57C6,
                0x9ABC: 0x57D4,
                0x9ABD: 0x57D2,
                0x9ABE: 0x57D3,
                0x9ABF: 0x580A,
                0x9AC0: 0x57D6,
                0x9AC1: 0x57E3,
                0x9AC2: 0x580B,
                0x9AC3: 0x5819,
                0x9AC4: 0x581D,
                0x9AC5: 0x5872,
                0x9AC6: 0x5821,
                0x9AC7: 0x5862,
                0x9AC8: 0x584B,
                0x9AC9: 0x5870,
                0x9ACA: 0x6BC0,
                0x9ACB: 0x5852,
                0x9ACC: 0x583D,
                0x9ACD: 0x5879,
                0x9ACE: 0x5885,
                0x9ACF: 0x58B9,
                0x9AD0: 0x589F,
                0x9AD1: 0x58AB,
                0x9AD2: 0x58BA,
                0x9AD3: 0x58DE,
                0x9AD4: 0x58BB,
                0x9AD5: 0x58B8,
                0x9AD6: 0x58AE,
                0x9AD7: 0x58C5,
                0x9AD8: 0x58D3,
                0x9AD9: 0x58D1,
                0x9ADA: 0x58D7,
                0x9ADB: 0x58D9,
                0x9ADC: 0x58D8,
                0x9ADD: 0x58E5,
                0x9ADE: 0x58DC,
                0x9ADF: 0x58E4,
                0x9AE0: 0x58DF,
                0x9AE1: 0x58EF,
                0x9AE2: 0x58FA,
                0x9AE3: 0x58F9,
                0x9AE4: 0x58FB,
                0x9AE5: 0x58FC,
                0x9AE6: 0x58FD,
                0x9AE7: 0x5902,
                0x9AE8: 0x590A,
                0x9AE9: 0x5910,
                0x9AEA: 0x591B,
                0x9AEB: 0x68A6,
                0x9AEC: 0x5925,
                0x9AED: 0x592C,
                0x9AEE: 0x592D,
                0x9AEF: 0x5932,
                0x9AF0: 0x5938,
                0x9AF1: 0x593E,
                0x9AF2: 0x7AD2,
                0x9AF3: 0x5955,
                0x9AF4: 0x5950,
                0x9AF5: 0x594E,
                0x9AF6: 0x595A,
                0x9AF7: 0x5958,
                0x9AF8: 0x5962,
                0x9AF9: 0x5960,
                0x9AFA: 0x5967,
                0x9AFB: 0x596C,
                0x9AFC: 0x5969,
                0x9B40: 0x5978,
                0x9B41: 0x5981,
                0x9B42: 0x599D,
                0x9B43: 0x4F5E,
                0x9B44: 0x4FAB,
                0x9B45: 0x59A3,
                0x9B46: 0x59B2,
                0x9B47: 0x59C6,
                0x9B48: 0x59E8,
                0x9B49: 0x59DC,
                0x9B4A: 0x598D,
                0x9B4B: 0x59D9,
                0x9B4C: 0x59DA,
                0x9B4D: 0x5A25,
                0x9B4E: 0x5A1F,
                0x9B4F: 0x5A11,
                0x9B50: 0x5A1C,
                0x9B51: 0x5A09,
                0x9B52: 0x5A1A,
                0x9B53: 0x5A40,
                0x9B54: 0x5A6C,
                0x9B55: 0x5A49,
                0x9B56: 0x5A35,
                0x9B57: 0x5A36,
                0x9B58: 0x5A62,
                0x9B59: 0x5A6A,
                0x9B5A: 0x5A9A,
                0x9B5B: 0x5ABC,
                0x9B5C: 0x5ABE,
                0x9B5D: 0x5ACB,
                0x9B5E: 0x5AC2,
                0x9B5F: 0x5ABD,
                0x9B60: 0x5AE3,
                0x9B61: 0x5AD7,
                0x9B62: 0x5AE6,
                0x9B63: 0x5AE9,
                0x9B64: 0x5AD6,
                0x9B65: 0x5AFA,
                0x9B66: 0x5AFB,
                0x9B67: 0x5B0C,
                0x9B68: 0x5B0B,
                0x9B69: 0x5B16,
                0x9B6A: 0x5B32,
                0x9B6B: 0x5AD0,
                0x9B6C: 0x5B2A,
                0x9B6D: 0x5B36,
                0x9B6E: 0x5B3E,
                0x9B6F: 0x5B43,
                0x9B70: 0x5B45,
                0x9B71: 0x5B40,
                0x9B72: 0x5B51,
                0x9B73: 0x5B55,
                0x9B74: 0x5B5A,
                0x9B75: 0x5B5B,
                0x9B76: 0x5B65,
                0x9B77: 0x5B69,
                0x9B78: 0x5B70,
                0x9B79: 0x5B73,
                0x9B7A: 0x5B75,
                0x9B7B: 0x5B78,
                0x9B7C: 0x6588,
                0x9B7D: 0x5B7A,
                0x9B7E: 0x5B80,
                0x9B80: 0x5B83,
                0x9B81: 0x5BA6,
                0x9B82: 0x5BB8,
                0x9B83: 0x5BC3,
                0x9B84: 0x5BC7,
                0x9B85: 0x5BC9,
                0x9B86: 0x5BD4,
                0x9B87: 0x5BD0,
                0x9B88: 0x5BE4,
                0x9B89: 0x5BE6,
                0x9B8A: 0x5BE2,
                0x9B8B: 0x5BDE,
                0x9B8C: 0x5BE5,
                0x9B8D: 0x5BEB,
                0x9B8E: 0x5BF0,
                0x9B8F: 0x5BF6,
                0x9B90: 0x5BF3,
                0x9B91: 0x5C05,
                0x9B92: 0x5C07,
                0x9B93: 0x5C08,
                0x9B94: 0x5C0D,
                0x9B95: 0x5C13,
                0x9B96: 0x5C20,
                0x9B97: 0x5C22,
                0x9B98: 0x5C28,
                0x9B99: 0x5C38,
                0x9B9A: 0x5C39,
                0x9B9B: 0x5C41,
                0x9B9C: 0x5C46,
                0x9B9D: 0x5C4E,
                0x9B9E: 0x5C53,
                0x9B9F: 0x5C50,
                0x9BA0: 0x5C4F,
                0x9BA1: 0x5B71,
                0x9BA2: 0x5C6C,
                0x9BA3: 0x5C6E,
                0x9BA4: 0x4E62,
                0x9BA5: 0x5C76,
                0x9BA6: 0x5C79,
                0x9BA7: 0x5C8C,
                0x9BA8: 0x5C91,
                0x9BA9: 0x5C94,
                0x9BAA: 0x599B,
                0x9BAB: 0x5CAB,
                0x9BAC: 0x5CBB,
                0x9BAD: 0x5CB6,
                0x9BAE: 0x5CBC,
                0x9BAF: 0x5CB7,
                0x9BB0: 0x5CC5,
                0x9BB1: 0x5CBE,
                0x9BB2: 0x5CC7,
                0x9BB3: 0x5CD9,
                0x9BB4: 0x5CE9,
                0x9BB5: 0x5CFD,
                0x9BB6: 0x5CFA,
                0x9BB7: 0x5CED,
                0x9BB8: 0x5D8C,
                0x9BB9: 0x5CEA,
                0x9BBA: 0x5D0B,
                0x9BBB: 0x5D15,
                0x9BBC: 0x5D17,
                0x9BBD: 0x5D5C,
                0x9BBE: 0x5D1F,
                0x9BBF: 0x5D1B,
                0x9BC0: 0x5D11,
                0x9BC1: 0x5D14,
                0x9BC2: 0x5D22,
                0x9BC3: 0x5D1A,
                0x9BC4: 0x5D19,
                0x9BC5: 0x5D18,
                0x9BC6: 0x5D4C,
                0x9BC7: 0x5D52,
                0x9BC8: 0x5D4E,
                0x9BC9: 0x5D4B,
                0x9BCA: 0x5D6C,
                0x9BCB: 0x5D73,
                0x9BCC: 0x5D76,
                0x9BCD: 0x5D87,
                0x9BCE: 0x5D84,
                0x9BCF: 0x5D82,
                0x9BD0: 0x5DA2,
                0x9BD1: 0x5D9D,
                0x9BD2: 0x5DAC,
                0x9BD3: 0x5DAE,
                0x9BD4: 0x5DBD,
                0x9BD5: 0x5D90,
                0x9BD6: 0x5DB7,
                0x9BD7: 0x5DBC,
                0x9BD8: 0x5DC9,
                0x9BD9: 0x5DCD,
                0x9BDA: 0x5DD3,
                0x9BDB: 0x5DD2,
                0x9BDC: 0x5DD6,
                0x9BDD: 0x5DDB,
                0x9BDE: 0x5DEB,
                0x9BDF: 0x5DF2,
                0x9BE0: 0x5DF5,
                0x9BE1: 0x5E0B,
                0x9BE2: 0x5E1A,
                0x9BE3: 0x5E19,
                0x9BE4: 0x5E11,
                0x9BE5: 0x5E1B,
                0x9BE6: 0x5E36,
                0x9BE7: 0x5E37,
                0x9BE8: 0x5E44,
                0x9BE9: 0x5E43,
                0x9BEA: 0x5E40,
                0x9BEB: 0x5E4E,
                0x9BEC: 0x5E57,
                0x9BED: 0x5E54,
                0x9BEE: 0x5E5F,
                0x9BEF: 0x5E62,
                0x9BF0: 0x5E64,
                0x9BF1: 0x5E47,
                0x9BF2: 0x5E75,
                0x9BF3: 0x5E76,
                0x9BF4: 0x5E7A,
                0x9BF5: 0x9EBC,
                0x9BF6: 0x5E7F,
                0x9BF7: 0x5EA0,
                0x9BF8: 0x5EC1,
                0x9BF9: 0x5EC2,
                0x9BFA: 0x5EC8,
                0x9BFB: 0x5ED0,
                0x9BFC: 0x5ECF,
                0x9C40: 0x5ED6,
                0x9C41: 0x5EE3,
                0x9C42: 0x5EDD,
                0x9C43: 0x5EDA,
                0x9C44: 0x5EDB,
                0x9C45: 0x5EE2,
                0x9C46: 0x5EE1,
                0x9C47: 0x5EE8,
                0x9C48: 0x5EE9,
                0x9C49: 0x5EEC,
                0x9C4A: 0x5EF1,
                0x9C4B: 0x5EF3,
                0x9C4C: 0x5EF0,
                0x9C4D: 0x5EF4,
                0x9C4E: 0x5EF8,
                0x9C4F: 0x5EFE,
                0x9C50: 0x5F03,
                0x9C51: 0x5F09,
                0x9C52: 0x5F5D,
                0x9C53: 0x5F5C,
                0x9C54: 0x5F0B,
                0x9C55: 0x5F11,
                0x9C56: 0x5F16,
                0x9C57: 0x5F29,
                0x9C58: 0x5F2D,
                0x9C59: 0x5F38,
                0x9C5A: 0x5F41,
                0x9C5B: 0x5F48,
                0x9C5C: 0x5F4C,
                0x9C5D: 0x5F4E,
                0x9C5E: 0x5F2F,
                0x9C5F: 0x5F51,
                0x9C60: 0x5F56,
                0x9C61: 0x5F57,
                0x9C62: 0x5F59,
                0x9C63: 0x5F61,
                0x9C64: 0x5F6D,
                0x9C65: 0x5F73,
                0x9C66: 0x5F77,
                0x9C67: 0x5F83,
                0x9C68: 0x5F82,
                0x9C69: 0x5F7F,
                0x9C6A: 0x5F8A,
                0x9C6B: 0x5F88,
                0x9C6C: 0x5F91,
                0x9C6D: 0x5F87,
                0x9C6E: 0x5F9E,
                0x9C6F: 0x5F99,
                0x9C70: 0x5F98,
                0x9C71: 0x5FA0,
                0x9C72: 0x5FA8,
                0x9C73: 0x5FAD,
                0x9C74: 0x5FBC,
                0x9C75: 0x5FD6,
                0x9C76: 0x5FFB,
                0x9C77: 0x5FE4,
                0x9C78: 0x5FF8,
                0x9C79: 0x5FF1,
                0x9C7A: 0x5FDD,
                0x9C7B: 0x60B3,
                0x9C7C: 0x5FFF,
                0x9C7D: 0x6021,
                0x9C7E: 0x6060,
                0x9C80: 0x6019,
                0x9C81: 0x6010,
                0x9C82: 0x6029,
                0x9C83: 0x600E,
                0x9C84: 0x6031,
                0x9C85: 0x601B,
                0x9C86: 0x6015,
                0x9C87: 0x602B,
                0x9C88: 0x6026,
                0x9C89: 0x600F,
                0x9C8A: 0x603A,
                0x9C8B: 0x605A,
                0x9C8C: 0x6041,
                0x9C8D: 0x606A,
                0x9C8E: 0x6077,
                0x9C8F: 0x605F,
                0x9C90: 0x604A,
                0x9C91: 0x6046,
                0x9C92: 0x604D,
                0x9C93: 0x6063,
                0x9C94: 0x6043,
                0x9C95: 0x6064,
                0x9C96: 0x6042,
                0x9C97: 0x606C,
                0x9C98: 0x606B,
                0x9C99: 0x6059,
                0x9C9A: 0x6081,
                0x9C9B: 0x608D,
                0x9C9C: 0x60E7,
                0x9C9D: 0x6083,
                0x9C9E: 0x609A,
                0x9C9F: 0x6084,
                0x9CA0: 0x609B,
                0x9CA1: 0x6096,
                0x9CA2: 0x6097,
                0x9CA3: 0x6092,
                0x9CA4: 0x60A7,
                0x9CA5: 0x608B,
                0x9CA6: 0x60E1,
                0x9CA7: 0x60B8,
                0x9CA8: 0x60E0,
                0x9CA9: 0x60D3,
                0x9CAA: 0x60B4,
                0x9CAB: 0x5FF0,
                0x9CAC: 0x60BD,
                0x9CAD: 0x60C6,
                0x9CAE: 0x60B5,
                0x9CAF: 0x60D8,
                0x9CB0: 0x614D,
                0x9CB1: 0x6115,
                0x9CB2: 0x6106,
                0x9CB3: 0x60F6,
                0x9CB4: 0x60F7,
                0x9CB5: 0x6100,
                0x9CB6: 0x60F4,
                0x9CB7: 0x60FA,
                0x9CB8: 0x6103,
                0x9CB9: 0x6121,
                0x9CBA: 0x60FB,
                0x9CBB: 0x60F1,
                0x9CBC: 0x610D,
                0x9CBD: 0x610E,
                0x9CBE: 0x6147,
                0x9CBF: 0x613E,
                0x9CC0: 0x6128,
                0x9CC1: 0x6127,
                0x9CC2: 0x614A,
                0x9CC3: 0x613F,
                0x9CC4: 0x613C,
                0x9CC5: 0x612C,
                0x9CC6: 0x6134,
                0x9CC7: 0x613D,
                0x9CC8: 0x6142,
                0x9CC9: 0x6144,
                0x9CCA: 0x6173,
                0x9CCB: 0x6177,
                0x9CCC: 0x6158,
                0x9CCD: 0x6159,
                0x9CCE: 0x615A,
                0x9CCF: 0x616B,
                0x9CD0: 0x6174,
                0x9CD1: 0x616F,
                0x9CD2: 0x6165,
                0x9CD3: 0x6171,
                0x9CD4: 0x615F,
                0x9CD5: 0x615D,
                0x9CD6: 0x6153,
                0x9CD7: 0x6175,
                0x9CD8: 0x6199,
                0x9CD9: 0x6196,
                0x9CDA: 0x6187,
                0x9CDB: 0x61AC,
                0x9CDC: 0x6194,
                0x9CDD: 0x619A,
                0x9CDE: 0x618A,
                0x9CDF: 0x6191,
                0x9CE0: 0x61AB,
                0x9CE1: 0x61AE,
                0x9CE2: 0x61CC,
                0x9CE3: 0x61CA,
                0x9CE4: 0x61C9,
                0x9CE5: 0x61F7,
                0x9CE6: 0x61C8,
                0x9CE7: 0x61C3,
                0x9CE8: 0x61C6,
                0x9CE9: 0x61BA,
                0x9CEA: 0x61CB,
                0x9CEB: 0x7F79,
                0x9CEC: 0x61CD,
                0x9CED: 0x61E6,
                0x9CEE: 0x61E3,
                0x9CEF: 0x61F6,
                0x9CF0: 0x61FA,
                0x9CF1: 0x61F4,
                0x9CF2: 0x61FF,
                0x9CF3: 0x61FD,
                0x9CF4: 0x61FC,
                0x9CF5: 0x61FE,
                0x9CF6: 0x6200,
                0x9CF7: 0x6208,
                0x9CF8: 0x6209,
                0x9CF9: 0x620D,
                0x9CFA: 0x620C,
                0x9CFB: 0x6214,
                0x9CFC: 0x621B,
                0x9D40: 0x621E,
                0x9D41: 0x6221,
                0x9D42: 0x622A,
                0x9D43: 0x622E,
                0x9D44: 0x6230,
                0x9D45: 0x6232,
                0x9D46: 0x6233,
                0x9D47: 0x6241,
                0x9D48: 0x624E,
                0x9D49: 0x625E,
                0x9D4A: 0x6263,
                0x9D4B: 0x625B,
                0x9D4C: 0x6260,
                0x9D4D: 0x6268,
                0x9D4E: 0x627C,
                0x9D4F: 0x6282,
                0x9D50: 0x6289,
                0x9D51: 0x627E,
                0x9D52: 0x6292,
                0x9D53: 0x6293,
                0x9D54: 0x6296,
                0x9D55: 0x62D4,
                0x9D56: 0x6283,
                0x9D57: 0x6294,
                0x9D58: 0x62D7,
                0x9D59: 0x62D1,
                0x9D5A: 0x62BB,
                0x9D5B: 0x62CF,
                0x9D5C: 0x62FF,
                0x9D5D: 0x62C6,
                0x9D5E: 0x64D4,
                0x9D5F: 0x62C8,
                0x9D60: 0x62DC,
                0x9D61: 0x62CC,
                0x9D62: 0x62CA,
                0x9D63: 0x62C2,
                0x9D64: 0x62C7,
                0x9D65: 0x629B,
                0x9D66: 0x62C9,
                0x9D67: 0x630C,
                0x9D68: 0x62EE,
                0x9D69: 0x62F1,
                0x9D6A: 0x6327,
                0x9D6B: 0x6302,
                0x9D6C: 0x6308,
                0x9D6D: 0x62EF,
                0x9D6E: 0x62F5,
                0x9D6F: 0x6350,
                0x9D70: 0x633E,
                0x9D71: 0x634D,
                0x9D72: 0x641C,
                0x9D73: 0x634F,
                0x9D74: 0x6396,
                0x9D75: 0x638E,
                0x9D76: 0x6380,
                0x9D77: 0x63AB,
                0x9D78: 0x6376,
                0x9D79: 0x63A3,
                0x9D7A: 0x638F,
                0x9D7B: 0x6389,
                0x9D7C: 0x639F,
                0x9D7D: 0x63B5,
                0x9D7E: 0x636B,
                0x9D80: 0x6369,
                0x9D81: 0x63BE,
                0x9D82: 0x63E9,
                0x9D83: 0x63C0,
                0x9D84: 0x63C6,
                0x9D85: 0x63E3,
                0x9D86: 0x63C9,
                0x9D87: 0x63D2,
                0x9D88: 0x63F6,
                0x9D89: 0x63C4,
                0x9D8A: 0x6416,
                0x9D8B: 0x6434,
                0x9D8C: 0x6406,
                0x9D8D: 0x6413,
                0x9D8E: 0x6426,
                0x9D8F: 0x6436,
                0x9D90: 0x651D,
                0x9D91: 0x6417,
                0x9D92: 0x6428,
                0x9D93: 0x640F,
                0x9D94: 0x6467,
                0x9D95: 0x646F,
                0x9D96: 0x6476,
                0x9D97: 0x644E,
                0x9D98: 0x652A,
                0x9D99: 0x6495,
                0x9D9A: 0x6493,
                0x9D9B: 0x64A5,
                0x9D9C: 0x64A9,
                0x9D9D: 0x6488,
                0x9D9E: 0x64BC,
                0x9D9F: 0x64DA,
                0x9DA0: 0x64D2,
                0x9DA1: 0x64C5,
                0x9DA2: 0x64C7,
                0x9DA3: 0x64BB,
                0x9DA4: 0x64D8,
                0x9DA5: 0x64C2,
                0x9DA6: 0x64F1,
                0x9DA7: 0x64E7,
                0x9DA8: 0x8209,
                0x9DA9: 0x64E0,
                0x9DAA: 0x64E1,
                0x9DAB: 0x62AC,
                0x9DAC: 0x64E3,
                0x9DAD: 0x64EF,
                0x9DAE: 0x652C,
                0x9DAF: 0x64F6,
                0x9DB0: 0x64F4,
                0x9DB1: 0x64F2,
                0x9DB2: 0x64FA,
                0x9DB3: 0x6500,
                0x9DB4: 0x64FD,
                0x9DB5: 0x6518,
                0x9DB6: 0x651C,
                0x9DB7: 0x6505,
                0x9DB8: 0x6524,
                0x9DB9: 0x6523,
                0x9DBA: 0x652B,
                0x9DBB: 0x6534,
                0x9DBC: 0x6535,
                0x9DBD: 0x6537,
                0x9DBE: 0x6536,
                0x9DBF: 0x6538,
                0x9DC0: 0x754B,
                0x9DC1: 0x6548,
                0x9DC2: 0x6556,
                0x9DC3: 0x6555,
                0x9DC4: 0x654D,
                0x9DC5: 0x6558,
                0x9DC6: 0x655E,
                0x9DC7: 0x655D,
                0x9DC8: 0x6572,
                0x9DC9: 0x6578,
                0x9DCA: 0x6582,
                0x9DCB: 0x6583,
                0x9DCC: 0x8B8A,
                0x9DCD: 0x659B,
                0x9DCE: 0x659F,
                0x9DCF: 0x65AB,
                0x9DD0: 0x65B7,
                0x9DD1: 0x65C3,
                0x9DD2: 0x65C6,
                0x9DD3: 0x65C1,
                0x9DD4: 0x65C4,
                0x9DD5: 0x65CC,
                0x9DD6: 0x65D2,
                0x9DD7: 0x65DB,
                0x9DD8: 0x65D9,
                0x9DD9: 0x65E0,
                0x9DDA: 0x65E1,
                0x9DDB: 0x65F1,
                0x9DDC: 0x6772,
                0x9DDD: 0x660A,
                0x9DDE: 0x6603,
                0x9DDF: 0x65FB,
                0x9DE0: 0x6773,
                0x9DE1: 0x6635,
                0x9DE2: 0x6636,
                0x9DE3: 0x6634,
                0x9DE4: 0x661C,
                0x9DE5: 0x664F,
                0x9DE6: 0x6644,
                0x9DE7: 0x6649,
                0x9DE8: 0x6641,
                0x9DE9: 0x665E,
                0x9DEA: 0x665D,
                0x9DEB: 0x6664,
                0x9DEC: 0x6667,
                0x9DED: 0x6668,
                0x9DEE: 0x665F,
                0x9DEF: 0x6662,
                0x9DF0: 0x6670,
                0x9DF1: 0x6683,
                0x9DF2: 0x6688,
                0x9DF3: 0x668E,
                0x9DF4: 0x6689,
                0x9DF5: 0x6684,
                0x9DF6: 0x6698,
                0x9DF7: 0x669D,
                0x9DF8: 0x66C1,
                0x9DF9: 0x66B9,
                0x9DFA: 0x66C9,
                0x9DFB: 0x66BE,
                0x9DFC: 0x66BC,
                0x9E40: 0x66C4,
                0x9E41: 0x66B8,
                0x9E42: 0x66D6,
                0x9E43: 0x66DA,
                0x9E44: 0x66E0,
                0x9E45: 0x663F,
                0x9E46: 0x66E6,
                0x9E47: 0x66E9,
                0x9E48: 0x66F0,
                0x9E49: 0x66F5,
                0x9E4A: 0x66F7,
                0x9E4B: 0x670F,
                0x9E4C: 0x6716,
                0x9E4D: 0x671E,
                0x9E4E: 0x6726,
                0x9E4F: 0x6727,
                0x9E50: 0x9738,
                0x9E51: 0x672E,
                0x9E52: 0x673F,
                0x9E53: 0x6736,
                0x9E54: 0x6741,
                0x9E55: 0x6738,
                0x9E56: 0x6737,
                0x9E57: 0x6746,
                0x9E58: 0x675E,
                0x9E59: 0x6760,
                0x9E5A: 0x6759,
                0x9E5B: 0x6763,
                0x9E5C: 0x6764,
                0x9E5D: 0x6789,
                0x9E5E: 0x6770,
                0x9E5F: 0x67A9,
                0x9E60: 0x677C,
                0x9E61: 0x676A,
                0x9E62: 0x678C,
                0x9E63: 0x678B,
                0x9E64: 0x67A6,
                0x9E65: 0x67A1,
                0x9E66: 0x6785,
                0x9E67: 0x67B7,
                0x9E68: 0x67EF,
                0x9E69: 0x67B4,
                0x9E6A: 0x67EC,
                0x9E6B: 0x67B3,
                0x9E6C: 0x67E9,
                0x9E6D: 0x67B8,
                0x9E6E: 0x67E4,
                0x9E6F: 0x67DE,
                0x9E70: 0x67DD,
                0x9E71: 0x67E2,
                0x9E72: 0x67EE,
                0x9E73: 0x67B9,
                0x9E74: 0x67CE,
                0x9E75: 0x67C6,
                0x9E76: 0x67E7,
                0x9E77: 0x6A9C,
                0x9E78: 0x681E,
                0x9E79: 0x6846,
                0x9E7A: 0x6829,
                0x9E7B: 0x6840,
                0x9E7C: 0x684D,
                0x9E7D: 0x6832,
                0x9E7E: 0x684E,
                0x9E80: 0x68B3,
                0x9E81: 0x682B,
                0x9E82: 0x6859,
                0x9E83: 0x6863,
                0x9E84: 0x6877,
                0x9E85: 0x687F,
                0x9E86: 0x689F,
                0x9E87: 0x688F,
                0x9E88: 0x68AD,
                0x9E89: 0x6894,
                0x9E8A: 0x689D,
                0x9E8B: 0x689B,
                0x9E8C: 0x6883,
                0x9E8D: 0x6AAE,
                0x9E8E: 0x68B9,
                0x9E8F: 0x6874,
                0x9E90: 0x68B5,
                0x9E91: 0x68A0,
                0x9E92: 0x68BA,
                0x9E93: 0x690F,
                0x9E94: 0x688D,
                0x9E95: 0x687E,
                0x9E96: 0x6901,
                0x9E97: 0x68CA,
                0x9E98: 0x6908,
                0x9E99: 0x68D8,
                0x9E9A: 0x6922,
                0x9E9B: 0x6926,
                0x9E9C: 0x68E1,
                0x9E9D: 0x690C,
                0x9E9E: 0x68CD,
                0x9E9F: 0x68D4,
                0x9EA0: 0x68E7,
                0x9EA1: 0x68D5,
                0x9EA2: 0x6936,
                0x9EA3: 0x6912,
                0x9EA4: 0x6904,
                0x9EA5: 0x68D7,
                0x9EA6: 0x68E3,
                0x9EA7: 0x6925,
                0x9EA8: 0x68F9,
                0x9EA9: 0x68E0,
                0x9EAA: 0x68EF,
                0x9EAB: 0x6928,
                0x9EAC: 0x692A,
                0x9EAD: 0x691A,
                0x9EAE: 0x6923,
                0x9EAF: 0x6921,
                0x9EB0: 0x68C6,
                0x9EB1: 0x6979,
                0x9EB2: 0x6977,
                0x9EB3: 0x695C,
                0x9EB4: 0x6978,
                0x9EB5: 0x696B,
                0x9EB6: 0x6954,
                0x9EB7: 0x697E,
                0x9EB8: 0x696E,
                0x9EB9: 0x6939,
                0x9EBA: 0x6974,
                0x9EBB: 0x693D,
                0x9EBC: 0x6959,
                0x9EBD: 0x6930,
                0x9EBE: 0x6961,
                0x9EBF: 0x695E,
                0x9EC0: 0x695D,
                0x9EC1: 0x6981,
                0x9EC2: 0x696A,
                0x9EC3: 0x69B2,
                0x9EC4: 0x69AE,
                0x9EC5: 0x69D0,
                0x9EC6: 0x69BF,
                0x9EC7: 0x69C1,
                0x9EC8: 0x69D3,
                0x9EC9: 0x69BE,
                0x9ECA: 0x69CE,
                0x9ECB: 0x5BE8,
                0x9ECC: 0x69CA,
                0x9ECD: 0x69DD,
                0x9ECE: 0x69BB,
                0x9ECF: 0x69C3,
                0x9ED0: 0x69A7,
                0x9ED1: 0x6A2E,
                0x9ED2: 0x6991,
                0x9ED3: 0x69A0,
                0x9ED4: 0x699C,
                0x9ED5: 0x6995,
                0x9ED6: 0x69B4,
                0x9ED7: 0x69DE,
                0x9ED8: 0x69E8,
                0x9ED9: 0x6A02,
                0x9EDA: 0x6A1B,
                0x9EDB: 0x69FF,
                0x9EDC: 0x6B0A,
                0x9EDD: 0x69F9,
                0x9EDE: 0x69F2,
                0x9EDF: 0x69E7,
                0x9EE0: 0x6A05,
                0x9EE1: 0x69B1,
                0x9EE2: 0x6A1E,
                0x9EE3: 0x69ED,
                0x9EE4: 0x6A14,
                0x9EE5: 0x69EB,
                0x9EE6: 0x6A0A,
                0x9EE7: 0x6A12,
                0x9EE8: 0x6AC1,
                0x9EE9: 0x6A23,
                0x9EEA: 0x6A13,
                0x9EEB: 0x6A44,
                0x9EEC: 0x6A0C,
                0x9EED: 0x6A72,
                0x9EEE: 0x6A36,
                0x9EEF: 0x6A78,
                0x9EF0: 0x6A47,
                0x9EF1: 0x6A62,
                0x9EF2: 0x6A59,
                0x9EF3: 0x6A66,
                0x9EF4: 0x6A48,
                0x9EF5: 0x6A38,
                0x9EF6: 0x6A22,
                0x9EF7: 0x6A90,
                0x9EF8: 0x6A8D,
                0x9EF9: 0x6AA0,
                0x9EFA: 0x6A84,
                0x9EFB: 0x6AA2,
                0x9EFC: 0x6AA3,
                0x9F40: 0x6A97,
                0x9F41: 0x8617,
                0x9F42: 0x6ABB,
                0x9F43: 0x6AC3,
                0x9F44: 0x6AC2,
                0x9F45: 0x6AB8,
                0x9F46: 0x6AB3,
                0x9F47: 0x6AAC,
                0x9F48: 0x6ADE,
                0x9F49: 0x6AD1,
                0x9F4A: 0x6ADF,
                0x9F4B: 0x6AAA,
                0x9F4C: 0x6ADA,
                0x9F4D: 0x6AEA,
                0x9F4E: 0x6AFB,
                0x9F4F: 0x6B05,
                0x9F50: 0x8616,
                0x9F51: 0x6AFA,
                0x9F52: 0x6B12,
                0x9F53: 0x6B16,
                0x9F54: 0x9B31,
                0x9F55: 0x6B1F,
                0x9F56: 0x6B38,
                0x9F57: 0x6B37,
                0x9F58: 0x76DC,
                0x9F59: 0x6B39,
                0x9F5A: 0x98EE,
                0x9F5B: 0x6B47,
                0x9F5C: 0x6B43,
                0x9F5D: 0x6B49,
                0x9F5E: 0x6B50,
                0x9F5F: 0x6B59,
                0x9F60: 0x6B54,
                0x9F61: 0x6B5B,
                0x9F62: 0x6B5F,
                0x9F63: 0x6B61,
                0x9F64: 0x6B78,
                0x9F65: 0x6B79,
                0x9F66: 0x6B7F,
                0x9F67: 0x6B80,
                0x9F68: 0x6B84,
                0x9F69: 0x6B83,
                0x9F6A: 0x6B8D,
                0x9F6B: 0x6B98,
                0x9F6C: 0x6B95,
                0x9F6D: 0x6B9E,
                0x9F6E: 0x6BA4,
                0x9F6F: 0x6BAA,
                0x9F70: 0x6BAB,
                0x9F71: 0x6BAF,
                0x9F72: 0x6BB2,
                0x9F73: 0x6BB1,
                0x9F74: 0x6BB3,
                0x9F75: 0x6BB7,
                0x9F76: 0x6BBC,
                0x9F77: 0x6BC6,
                0x9F78: 0x6BCB,
                0x9F79: 0x6BD3,
                0x9F7A: 0x6BDF,
                0x9F7B: 0x6BEC,
                0x9F7C: 0x6BEB,
                0x9F7D: 0x6BF3,
                0x9F7E: 0x6BEF,
                0x9F80: 0x9EBE,
                0x9F81: 0x6C08,
                0x9F82: 0x6C13,
                0x9F83: 0x6C14,
                0x9F84: 0x6C1B,
                0x9F85: 0x6C24,
                0x9F86: 0x6C23,
                0x9F87: 0x6C5E,
                0x9F88: 0x6C55,
                0x9F89: 0x6C62,
                0x9F8A: 0x6C6A,
                0x9F8B: 0x6C82,
                0x9F8C: 0x6C8D,
                0x9F8D: 0x6C9A,
                0x9F8E: 0x6C81,
                0x9F8F: 0x6C9B,
                0x9F90: 0x6C7E,
                0x9F91: 0x6C68,
                0x9F92: 0x6C73,
                0x9F93: 0x6C92,
                0x9F94: 0x6C90,
                0x9F95: 0x6CC4,
                0x9F96: 0x6CF1,
                0x9F97: 0x6CD3,
                0x9F98: 0x6CBD,
                0x9F99: 0x6CD7,
                0x9F9A: 0x6CC5,
                0x9F9B: 0x6CDD,
                0x9F9C: 0x6CAE,
                0x9F9D: 0x6CB1,
                0x9F9E: 0x6CBE,
                0x9F9F: 0x6CBA,
                0x9FA0: 0x6CDB,
                0x9FA1: 0x6CEF,
                0x9FA2: 0x6CD9,
                0x9FA3: 0x6CEA,
                0x9FA4: 0x6D1F,
                0x9FA5: 0x884D,
                0x9FA6: 0x6D36,
                0x9FA7: 0x6D2B,
                0x9FA8: 0x6D3D,
                0x9FA9: 0x6D38,
                0x9FAA: 0x6D19,
                0x9FAB: 0x6D35,
                0x9FAC: 0x6D33,
                0x9FAD: 0x6D12,
                0x9FAE: 0x6D0C,
                0x9FAF: 0x6D63,
                0x9FB0: 0x6D93,
                0x9FB1: 0x6D64,
                0x9FB2: 0x6D5A,
                0x9FB3: 0x6D79,
                0x9FB4: 0x6D59,
                0x9FB5: 0x6D8E,
                0x9FB6: 0x6D95,
                0x9FB7: 0x6FE4,
                0x9FB8: 0x6D85,
                0x9FB9: 0x6DF9,
                0x9FBA: 0x6E15,
                0x9FBB: 0x6E0A,
                0x9FBC: 0x6DB5,
                0x9FBD: 0x6DC7,
                0x9FBE: 0x6DE6,
                0x9FBF: 0x6DB8,
                0x9FC0: 0x6DC6,
                0x9FC1: 0x6DEC,
                0x9FC2: 0x6DDE,
                0x9FC3: 0x6DCC,
                0x9FC4: 0x6DE8,
                0x9FC5: 0x6DD2,
                0x9FC6: 0x6DC5,
                0x9FC7: 0x6DFA,
                0x9FC8: 0x6DD9,
                0x9FC9: 0x6DE4,
                0x9FCA: 0x6DD5,
                0x9FCB: 0x6DEA,
                0x9FCC: 0x6DEE,
                0x9FCD: 0x6E2D,
                0x9FCE: 0x6E6E,
                0x9FCF: 0x6E2E,
                0x9FD0: 0x6E19,
                0x9FD1: 0x6E72,
                0x9FD2: 0x6E5F,
                0x9FD3: 0x6E3E,
                0x9FD4: 0x6E23,
                0x9FD5: 0x6E6B,
                0x9FD6: 0x6E2B,
                0x9FD7: 0x6E76,
                0x9FD8: 0x6E4D,
                0x9FD9: 0x6E1F,
                0x9FDA: 0x6E43,
                0x9FDB: 0x6E3A,
                0x9FDC: 0x6E4E,
                0x9FDD: 0x6E24,
                0x9FDE: 0x6EFF,
                0x9FDF: 0x6E1D,
                0x9FE0: 0x6E38,
                0x9FE1: 0x6E82,
                0x9FE2: 0x6EAA,
                0x9FE3: 0x6E98,
                0x9FE4: 0x6EC9,
                0x9FE5: 0x6EB7,
                0x9FE6: 0x6ED3,
                0x9FE7: 0x6EBD,
                0x9FE8: 0x6EAF,
                0x9FE9: 0x6EC4,
                0x9FEA: 0x6EB2,
                0x9FEB: 0x6ED4,
                0x9FEC: 0x6ED5,
                0x9FED: 0x6E8F,
                0x9FEE: 0x6EA5,
                0x9FEF: 0x6EC2,
                0x9FF0: 0x6E9F,
                0x9FF1: 0x6F41,
                0x9FF2: 0x6F11,
                0x9FF3: 0x704C,
                0x9FF4: 0x6EEC,
                0x9FF5: 0x6EF8,
                0x9FF6: 0x6EFE,
                0x9FF7: 0x6F3F,
                0x9FF8: 0x6EF2,
                0x9FF9: 0x6F31,
                0x9FFA: 0x6EEF,
                0x9FFB: 0x6F32,
                0x9FFC: 0x6ECC,
                0xA1: 0xFF61,
                0xA2: 0xFF62,
                0xA3: 0xFF63,
                0xA4: 0xFF64,
                0xA5: 0xFF65,
                0xA6: 0xFF66,
                0xA7: 0xFF67,
                0xA8: 0xFF68,
                0xA9: 0xFF69,
                0xAA: 0xFF6A,
                0xAB: 0xFF6B,
                0xAC: 0xFF6C,
                0xAD: 0xFF6D,
                0xAE: 0xFF6E,
                0xAF: 0xFF6F,
                0xB0: 0xFF70,
                0xB1: 0xFF71,
                0xB2: 0xFF72,
                0xB3: 0xFF73,
                0xB4: 0xFF74,
                0xB5: 0xFF75,
                0xB6: 0xFF76,
                0xB7: 0xFF77,
                0xB8: 0xFF78,
                0xB9: 0xFF79,
                0xBA: 0xFF7A,
                0xBB: 0xFF7B,
                0xBC: 0xFF7C,
                0xBD: 0xFF7D,
                0xBE: 0xFF7E,
                0xBF: 0xFF7F,
                0xC0: 0xFF80,
                0xC1: 0xFF81,
                0xC2: 0xFF82,
                0xC3: 0xFF83,
                0xC4: 0xFF84,
                0xC5: 0xFF85,
                0xC6: 0xFF86,
                0xC7: 0xFF87,
                0xC8: 0xFF88,
                0xC9: 0xFF89,
                0xCA: 0xFF8A,
                0xCB: 0xFF8B,
                0xCC: 0xFF8C,
                0xCD: 0xFF8D,
                0xCE: 0xFF8E,
                0xCF: 0xFF8F,
                0xD0: 0xFF90,
                0xD1: 0xFF91,
                0xD2: 0xFF92,
                0xD3: 0xFF93,
                0xD4: 0xFF94,
                0xD5: 0xFF95,
                0xD6: 0xFF96,
                0xD7: 0xFF97,
                0xD8: 0xFF98,
                0xD9: 0xFF99,
                0xDA: 0xFF9A,
                0xDB: 0xFF9B,
                0xDC: 0xFF9C,
                0xDD: 0xFF9D,
                0xDE: 0xFF9E,
                0xDF: 0xFF9F,
                0xE040: 0x6F3E,
                0xE041: 0x6F13,
                0xE042: 0x6EF7,
                0xE043: 0x6F86,
                0xE044: 0x6F7A,
                0xE045: 0x6F78,
                0xE046: 0x6F81,
                0xE047: 0x6F80,
                0xE048: 0x6F6F,
                0xE049: 0x6F5B,
                0xE04A: 0x6FF3,
                0xE04B: 0x6F6D,
                0xE04C: 0x6F82,
                0xE04D: 0x6F7C,
                0xE04E: 0x6F58,
                0xE04F: 0x6F8E,
                0xE050: 0x6F91,
                0xE051: 0x6FC2,
                0xE052: 0x6F66,
                0xE053: 0x6FB3,
                0xE054: 0x6FA3,
                0xE055: 0x6FA1,
                0xE056: 0x6FA4,
                0xE057: 0x6FB9,
                0xE058: 0x6FC6,
                0xE059: 0x6FAA,
                0xE05A: 0x6FDF,
                0xE05B: 0x6FD5,
                0xE05C: 0x6FEC,
                0xE05D: 0x6FD4,
                0xE05E: 0x6FD8,
                0xE05F: 0x6FF1,
                0xE060: 0x6FEE,
                0xE061: 0x6FDB,
                0xE062: 0x7009,
                0xE063: 0x700B,
                0xE064: 0x6FFA,
                0xE065: 0x7011,
                0xE066: 0x7001,
                0xE067: 0x700F,
                0xE068: 0x6FFE,
                0xE069: 0x701B,
                0xE06A: 0x701A,
                0xE06B: 0x6F74,
                0xE06C: 0x701D,
                0xE06D: 0x7018,
                0xE06E: 0x701F,
                0xE06F: 0x7030,
                0xE070: 0x703E,
                0xE071: 0x7032,
                0xE072: 0x7051,
                0xE073: 0x7063,
                0xE074: 0x7099,
                0xE075: 0x7092,
                0xE076: 0x70AF,
                0xE077: 0x70F1,
                0xE078: 0x70AC,
                0xE079: 0x70B8,
                0xE07A: 0x70B3,
                0xE07B: 0x70AE,
                0xE07C: 0x70DF,
                0xE07D: 0x70CB,
                0xE07E: 0x70DD,
                0xE080: 0x70D9,
                0xE081: 0x7109,
                0xE082: 0x70FD,
                0xE083: 0x711C,
                0xE084: 0x7119,
                0xE085: 0x7165,
                0xE086: 0x7155,
                0xE087: 0x7188,
                0xE088: 0x7166,
                0xE089: 0x7162,
                0xE08A: 0x714C,
                0xE08B: 0x7156,
                0xE08C: 0x716C,
                0xE08D: 0x718F,
                0xE08E: 0x71FB,
                0xE08F: 0x7184,
                0xE090: 0x7195,
                0xE091: 0x71A8,
                0xE092: 0x71AC,
                0xE093: 0x71D7,
                0xE094: 0x71B9,
                0xE095: 0x71BE,
                0xE096: 0x71D2,
                0xE097: 0x71C9,
                0xE098: 0x71D4,
                0xE099: 0x71CE,
                0xE09A: 0x71E0,
                0xE09B: 0x71EC,
                0xE09C: 0x71E7,
                0xE09D: 0x71F5,
                0xE09E: 0x71FC,
                0xE09F: 0x71F9,
                0xE0A0: 0x71FF,
                0xE0A1: 0x720D,
                0xE0A2: 0x7210,
                0xE0A3: 0x721B,
                0xE0A4: 0x7228,
                0xE0A5: 0x722D,
                0xE0A6: 0x722C,
                0xE0A7: 0x7230,
                0xE0A8: 0x7232,
                0xE0A9: 0x723B,
                0xE0AA: 0x723C,
                0xE0AB: 0x723F,
                0xE0AC: 0x7240,
                0xE0AD: 0x7246,
                0xE0AE: 0x724B,
                0xE0AF: 0x7258,
                0xE0B0: 0x7274,
                0xE0B1: 0x727E,
                0xE0B2: 0x7282,
                0xE0B3: 0x7281,
                0xE0B4: 0x7287,
                0xE0B5: 0x7292,
                0xE0B6: 0x7296,
                0xE0B7: 0x72A2,
                0xE0B8: 0x72A7,
                0xE0B9: 0x72B9,
                0xE0BA: 0x72B2,
                0xE0BB: 0x72C3,
                0xE0BC: 0x72C6,
                0xE0BD: 0x72C4,
                0xE0BE: 0x72CE,
                0xE0BF: 0x72D2,
                0xE0C0: 0x72E2,
                0xE0C1: 0x72E0,
                0xE0C2: 0x72E1,
                0xE0C3: 0x72F9,
                0xE0C4: 0x72F7,
                0xE0C5: 0x500F,
                0xE0C6: 0x7317,
                0xE0C7: 0x730A,
                0xE0C8: 0x731C,
                0xE0C9: 0x7316,
                0xE0CA: 0x731D,
                0xE0CB: 0x7334,
                0xE0CC: 0x732F,
                0xE0CD: 0x7329,
                0xE0CE: 0x7325,
                0xE0CF: 0x733E,
                0xE0D0: 0x734E,
                0xE0D1: 0x734F,
                0xE0D2: 0x9ED8,
                0xE0D3: 0x7357,
                0xE0D4: 0x736A,
                0xE0D5: 0x7368,
                0xE0D6: 0x7370,
                0xE0D7: 0x7378,
                0xE0D8: 0x7375,
                0xE0D9: 0x737B,
                0xE0DA: 0x737A,
                0xE0DB: 0x73C8,
                0xE0DC: 0x73B3,
                0xE0DD: 0x73CE,
                0xE0DE: 0x73BB,
                0xE0DF: 0x73C0,
                0xE0E0: 0x73E5,
                0xE0E1: 0x73EE,
                0xE0E2: 0x73DE,
                0xE0E3: 0x74A2,
                0xE0E4: 0x7405,
                0xE0E5: 0x746F,
                0xE0E6: 0x7425,
                0xE0E7: 0x73F8,
                0xE0E8: 0x7432,
                0xE0E9: 0x743A,
                0xE0EA: 0x7455,
                0xE0EB: 0x743F,
                0xE0EC: 0x745F,
                0xE0ED: 0x7459,
                0xE0EE: 0x7441,
                0xE0EF: 0x745C,
                0xE0F0: 0x7469,
                0xE0F1: 0x7470,
                0xE0F2: 0x7463,
                0xE0F3: 0x746A,
                0xE0F4: 0x7476,
                0xE0F5: 0x747E,
                0xE0F6: 0x748B,
                0xE0F7: 0x749E,
                0xE0F8: 0x74A7,
                0xE0F9: 0x74CA,
                0xE0FA: 0x74CF,
                0xE0FB: 0x74D4,
                0xE0FC: 0x73F1,
                0xE140: 0x74E0,
                0xE141: 0x74E3,
                0xE142: 0x74E7,
                0xE143: 0x74E9,
                0xE144: 0x74EE,
                0xE145: 0x74F2,
                0xE146: 0x74F0,
                0xE147: 0x74F1,
                0xE148: 0x74F8,
                0xE149: 0x74F7,
                0xE14A: 0x7504,
                0xE14B: 0x7503,
                0xE14C: 0x7505,
                0xE14D: 0x750C,
                0xE14E: 0x750E,
                0xE14F: 0x750D,
                0xE150: 0x7515,
                0xE151: 0x7513,
                0xE152: 0x751E,
                0xE153: 0x7526,
                0xE154: 0x752C,
                0xE155: 0x753C,
                0xE156: 0x7544,
                0xE157: 0x754D,
                0xE158: 0x754A,
                0xE159: 0x7549,
                0xE15A: 0x755B,
                0xE15B: 0x7546,
                0xE15C: 0x755A,
                0xE15D: 0x7569,
                0xE15E: 0x7564,
                0xE15F: 0x7567,
                0xE160: 0x756B,
                0xE161: 0x756D,
                0xE162: 0x7578,
                0xE163: 0x7576,
                0xE164: 0x7586,
                0xE165: 0x7587,
                0xE166: 0x7574,
                0xE167: 0x758A,
                0xE168: 0x7589,
                0xE169: 0x7582,
                0xE16A: 0x7594,
                0xE16B: 0x759A,
                0xE16C: 0x759D,
                0xE16D: 0x75A5,
                0xE16E: 0x75A3,
                0xE16F: 0x75C2,
                0xE170: 0x75B3,
                0xE171: 0x75C3,
                0xE172: 0x75B5,
                0xE173: 0x75BD,
                0xE174: 0x75B8,
                0xE175: 0x75BC,
                0xE176: 0x75B1,
                0xE177: 0x75CD,
                0xE178: 0x75CA,
                0xE179: 0x75D2,
                0xE17A: 0x75D9,
                0xE17B: 0x75E3,
                0xE17C: 0x75DE,
                0xE17D: 0x75FE,
                0xE17E: 0x75FF,
                0xE180: 0x75FC,
                0xE181: 0x7601,
                0xE182: 0x75F0,
                0xE183: 0x75FA,
                0xE184: 0x75F2,
                0xE185: 0x75F3,
                0xE186: 0x760B,
                0xE187: 0x760D,
                0xE188: 0x7609,
                0xE189: 0x761F,
                0xE18A: 0x7627,
                0xE18B: 0x7620,
                0xE18C: 0x7621,
                0xE18D: 0x7622,
                0xE18E: 0x7624,
                0xE18F: 0x7634,
                0xE190: 0x7630,
                0xE191: 0x763B,
                0xE192: 0x7647,
                0xE193: 0x7648,
                0xE194: 0x7646,
                0xE195: 0x765C,
                0xE196: 0x7658,
                0xE197: 0x7661,
                0xE198: 0x7662,
                0xE199: 0x7668,
                0xE19A: 0x7669,
                0xE19B: 0x766A,
                0xE19C: 0x7667,
                0xE19D: 0x766C,
                0xE19E: 0x7670,
                0xE19F: 0x7672,
                0xE1A0: 0x7676,
                0xE1A1: 0x7678,
                0xE1A2: 0x767C,
                0xE1A3: 0x7680,
                0xE1A4: 0x7683,
                0xE1A5: 0x7688,
                0xE1A6: 0x768B,
                0xE1A7: 0x768E,
                0xE1A8: 0x7696,
                0xE1A9: 0x7693,
                0xE1AA: 0x7699,
                0xE1AB: 0x769A,
                0xE1AC: 0x76B0,
                0xE1AD: 0x76B4,
                0xE1AE: 0x76B8,
                0xE1AF: 0x76B9,
                0xE1B0: 0x76BA,
                0xE1B1: 0x76C2,
                0xE1B2: 0x76CD,
                0xE1B3: 0x76D6,
                0xE1B4: 0x76D2,
                0xE1B5: 0x76DE,
                0xE1B6: 0x76E1,
                0xE1B7: 0x76E5,
                0xE1B8: 0x76E7,
                0xE1B9: 0x76EA,
                0xE1BA: 0x862F,
                0xE1BB: 0x76FB,
                0xE1BC: 0x7708,
                0xE1BD: 0x7707,
                0xE1BE: 0x7704,
                0xE1BF: 0x7729,
                0xE1C0: 0x7724,
                0xE1C1: 0x771E,
                0xE1C2: 0x7725,
                0xE1C3: 0x7726,
                0xE1C4: 0x771B,
                0xE1C5: 0x7737,
                0xE1C6: 0x7738,
                0xE1C7: 0x7747,
                0xE1C8: 0x775A,
                0xE1C9: 0x7768,
                0xE1CA: 0x776B,
                0xE1CB: 0x775B,
                0xE1CC: 0x7765,
                0xE1CD: 0x777F,
                0xE1CE: 0x777E,
                0xE1CF: 0x7779,
                0xE1D0: 0x778E,
                0xE1D1: 0x778B,
                0xE1D2: 0x7791,
                0xE1D3: 0x77A0,
                0xE1D4: 0x779E,
                0xE1D5: 0x77B0,
                0xE1D6: 0x77B6,
                0xE1D7: 0x77B9,
                0xE1D8: 0x77BF,
                0xE1D9: 0x77BC,
                0xE1DA: 0x77BD,
                0xE1DB: 0x77BB,
                0xE1DC: 0x77C7,
                0xE1DD: 0x77CD,
                0xE1DE: 0x77D7,
                0xE1DF: 0x77DA,
                0xE1E0: 0x77DC,
                0xE1E1: 0x77E3,
                0xE1E2: 0x77EE,
                0xE1E3: 0x77FC,
                0xE1E4: 0x780C,
                0xE1E5: 0x7812,
                0xE1E6: 0x7926,
                0xE1E7: 0x7820,
                0xE1E8: 0x792A,
                0xE1E9: 0x7845,
                0xE1EA: 0x788E,
                0xE1EB: 0x7874,
                0xE1EC: 0x7886,
                0xE1ED: 0x787C,
                0xE1EE: 0x789A,
                0xE1EF: 0x788C,
                0xE1F0: 0x78A3,
                0xE1F1: 0x78B5,
                0xE1F2: 0x78AA,
                0xE1F3: 0x78AF,
                0xE1F4: 0x78D1,
                0xE1F5: 0x78C6,
                0xE1F6: 0x78CB,
                0xE1F7: 0x78D4,
                0xE1F8: 0x78BE,
                0xE1F9: 0x78BC,
                0xE1FA: 0x78C5,
                0xE1FB: 0x78CA,
                0xE1FC: 0x78EC,
                0xE240: 0x78E7,
                0xE241: 0x78DA,
                0xE242: 0x78FD,
                0xE243: 0x78F4,
                0xE244: 0x7907,
                0xE245: 0x7912,
                0xE246: 0x7911,
                0xE247: 0x7919,
                0xE248: 0x792C,
                0xE249: 0x792B,
                0xE24A: 0x7940,
                0xE24B: 0x7960,
                0xE24C: 0x7957,
                0xE24D: 0x795F,
                0xE24E: 0x795A,
                0xE24F: 0x7955,
                0xE250: 0x7953,
                0xE251: 0x797A,
                0xE252: 0x797F,
                0xE253: 0x798A,
                0xE254: 0x799D,
                0xE255: 0x79A7,
                0xE256: 0x9F4B,
                0xE257: 0x79AA,
                0xE258: 0x79AE,
                0xE259: 0x79B3,
                0xE25A: 0x79B9,
                0xE25B: 0x79BA,
                0xE25C: 0x79C9,
                0xE25D: 0x79D5,
                0xE25E: 0x79E7,
                0xE25F: 0x79EC,
                0xE260: 0x79E1,
                0xE261: 0x79E3,
                0xE262: 0x7A08,
                0xE263: 0x7A0D,
                0xE264: 0x7A18,
                0xE265: 0x7A19,
                0xE266: 0x7A20,
                0xE267: 0x7A1F,
                0xE268: 0x7980,
                0xE269: 0x7A31,
                0xE26A: 0x7A3B,
                0xE26B: 0x7A3E,
                0xE26C: 0x7A37,
                0xE26D: 0x7A43,
                0xE26E: 0x7A57,
                0xE26F: 0x7A49,
                0xE270: 0x7A61,
                0xE271: 0x7A62,
                0xE272: 0x7A69,
                0xE273: 0x9F9D,
                0xE274: 0x7A70,
                0xE275: 0x7A79,
                0xE276: 0x7A7D,
                0xE277: 0x7A88,
                0xE278: 0x7A97,
                0xE279: 0x7A95,
                0xE27A: 0x7A98,
                0xE27B: 0x7A96,
                0xE27C: 0x7AA9,
                0xE27D: 0x7AC8,
                0xE27E: 0x7AB0,
                0xE280: 0x7AB6,
                0xE281: 0x7AC5,
                0xE282: 0x7AC4,
                0xE283: 0x7ABF,
                0xE284: 0x9083,
                0xE285: 0x7AC7,
                0xE286: 0x7ACA,
                0xE287: 0x7ACD,
                0xE288: 0x7ACF,
                0xE289: 0x7AD5,
                0xE28A: 0x7AD3,
                0xE28B: 0x7AD9,
                0xE28C: 0x7ADA,
                0xE28D: 0x7ADD,
                0xE28E: 0x7AE1,
                0xE28F: 0x7AE2,
                0xE290: 0x7AE6,
                0xE291: 0x7AED,
                0xE292: 0x7AF0,
                0xE293: 0x7B02,
                0xE294: 0x7B0F,
                0xE295: 0x7B0A,
                0xE296: 0x7B06,
                0xE297: 0x7B33,
                0xE298: 0x7B18,
                0xE299: 0x7B19,
                0xE29A: 0x7B1E,
                0xE29B: 0x7B35,
                0xE29C: 0x7B28,
                0xE29D: 0x7B36,
                0xE29E: 0x7B50,
                0xE29F: 0x7B7A,
                0xE2A0: 0x7B04,
                0xE2A1: 0x7B4D,
                0xE2A2: 0x7B0B,
                0xE2A3: 0x7B4C,
                0xE2A4: 0x7B45,
                0xE2A5: 0x7B75,
                0xE2A6: 0x7B65,
                0xE2A7: 0x7B74,
                0xE2A8: 0x7B67,
                0xE2A9: 0x7B70,
                0xE2AA: 0x7B71,
                0xE2AB: 0x7B6C,
                0xE2AC: 0x7B6E,
                0xE2AD: 0x7B9D,
                0xE2AE: 0x7B98,
                0xE2AF: 0x7B9F,
                0xE2B0: 0x7B8D,
                0xE2B1: 0x7B9C,
                0xE2B2: 0x7B9A,
                0xE2B3: 0x7B8B,
                0xE2B4: 0x7B92,
                0xE2B5: 0x7B8F,
                0xE2B6: 0x7B5D,
                0xE2B7: 0x7B99,
                0xE2B8: 0x7BCB,
                0xE2B9: 0x7BC1,
                0xE2BA: 0x7BCC,
                0xE2BB: 0x7BCF,
                0xE2BC: 0x7BB4,
                0xE2BD: 0x7BC6,
                0xE2BE: 0x7BDD,
                0xE2BF: 0x7BE9,
                0xE2C0: 0x7C11,
                0xE2C1: 0x7C14,
                0xE2C2: 0x7BE6,
                0xE2C3: 0x7BE5,
                0xE2C4: 0x7C60,
                0xE2C5: 0x7C00,
                0xE2C6: 0x7C07,
                0xE2C7: 0x7C13,
                0xE2C8: 0x7BF3,
                0xE2C9: 0x7BF7,
                0xE2CA: 0x7C17,
                0xE2CB: 0x7C0D,
                0xE2CC: 0x7BF6,
                0xE2CD: 0x7C23,
                0xE2CE: 0x7C27,
                0xE2CF: 0x7C2A,
                0xE2D0: 0x7C1F,
                0xE2D1: 0x7C37,
                0xE2D2: 0x7C2B,
                0xE2D3: 0x7C3D,
                0xE2D4: 0x7C4C,
                0xE2D5: 0x7C43,
                0xE2D6: 0x7C54,
                0xE2D7: 0x7C4F,
                0xE2D8: 0x7C40,
                0xE2D9: 0x7C50,
                0xE2DA: 0x7C58,
                0xE2DB: 0x7C5F,
                0xE2DC: 0x7C64,
                0xE2DD: 0x7C56,
                0xE2DE: 0x7C65,
                0xE2DF: 0x7C6C,
                0xE2E0: 0x7C75,
                0xE2E1: 0x7C83,
                0xE2E2: 0x7C90,
                0xE2E3: 0x7CA4,
                0xE2E4: 0x7CAD,
                0xE2E5: 0x7CA2,
                0xE2E6: 0x7CAB,
                0xE2E7: 0x7CA1,
                0xE2E8: 0x7CA8,
                0xE2E9: 0x7CB3,
                0xE2EA: 0x7CB2,
                0xE2EB: 0x7CB1,
                0xE2EC: 0x7CAE,
                0xE2ED: 0x7CB9,
                0xE2EE: 0x7CBD,
                0xE2EF: 0x7CC0,
                0xE2F0: 0x7CC5,
                0xE2F1: 0x7CC2,
                0xE2F2: 0x7CD8,
                0xE2F3: 0x7CD2,
                0xE2F4: 0x7CDC,
                0xE2F5: 0x7CE2,
                0xE2F6: 0x9B3B,
                0xE2F7: 0x7CEF,
                0xE2F8: 0x7CF2,
                0xE2F9: 0x7CF4,
                0xE2FA: 0x7CF6,
                0xE2FB: 0x7CFA,
                0xE2FC: 0x7D06,
                0xE340: 0x7D02,
                0xE341: 0x7D1C,
                0xE342: 0x7D15,
                0xE343: 0x7D0A,
                0xE344: 0x7D45,
                0xE345: 0x7D4B,
                0xE346: 0x7D2E,
                0xE347: 0x7D32,
                0xE348: 0x7D3F,
                0xE349: 0x7D35,
                0xE34A: 0x7D46,
                0xE34B: 0x7D73,
                0xE34C: 0x7D56,
                0xE34D: 0x7D4E,
                0xE34E: 0x7D72,
                0xE34F: 0x7D68,
                0xE350: 0x7D6E,
                0xE351: 0x7D4F,
                0xE352: 0x7D63,
                0xE353: 0x7D93,
                0xE354: 0x7D89,
                0xE355: 0x7D5B,
                0xE356: 0x7D8F,
                0xE357: 0x7D7D,
                0xE358: 0x7D9B,
                0xE359: 0x7DBA,
                0xE35A: 0x7DAE,
                0xE35B: 0x7DA3,
                0xE35C: 0x7DB5,
                0xE35D: 0x7DC7,
                0xE35E: 0x7DBD,
                0xE35F: 0x7DAB,
                0xE360: 0x7E3D,
                0xE361: 0x7DA2,
                0xE362: 0x7DAF,
                0xE363: 0x7DDC,
                0xE364: 0x7DB8,
                0xE365: 0x7D9F,
                0xE366: 0x7DB0,
                0xE367: 0x7DD8,
                0xE368: 0x7DDD,
                0xE369: 0x7DE4,
                0xE36A: 0x7DDE,
                0xE36B: 0x7DFB,
                0xE36C: 0x7DF2,
                0xE36D: 0x7DE1,
                0xE36E: 0x7E05,
                0xE36F: 0x7E0A,
                0xE370: 0x7E23,
                0xE371: 0x7E21,
                0xE372: 0x7E12,
                0xE373: 0x7E31,
                0xE374: 0x7E1F,
                0xE375: 0x7E09,
                0xE376: 0x7E0B,
                0xE377: 0x7E22,
                0xE378: 0x7E46,
                0xE379: 0x7E66,
                0xE37A: 0x7E3B,
                0xE37B: 0x7E35,
                0xE37C: 0x7E39,
                0xE37D: 0x7E43,
                0xE37E: 0x7E37,
                0xE380: 0x7E32,
                0xE381: 0x7E3A,
                0xE382: 0x7E67,
                0xE383: 0x7E5D,
                0xE384: 0x7E56,
                0xE385: 0x7E5E,
                0xE386: 0x7E59,
                0xE387: 0x7E5A,
                0xE388: 0x7E79,
                0xE389: 0x7E6A,
                0xE38A: 0x7E69,
                0xE38B: 0x7E7C,
                0xE38C: 0x7E7B,
                0xE38D: 0x7E83,
                0xE38E: 0x7DD5,
                0xE38F: 0x7E7D,
                0xE390: 0x8FAE,
                0xE391: 0x7E7F,
                0xE392: 0x7E88,
                0xE393: 0x7E89,
                0xE394: 0x7E8C,
                0xE395: 0x7E92,
                0xE396: 0x7E90,
                0xE397: 0x7E93,
                0xE398: 0x7E94,
                0xE399: 0x7E96,
                0xE39A: 0x7E8E,
                0xE39B: 0x7E9B,
                0xE39C: 0x7E9C,
                0xE39D: 0x7F38,
                0xE39E: 0x7F3A,
                0xE39F: 0x7F45,
                0xE3A0: 0x7F4C,
                0xE3A1: 0x7F4D,
                0xE3A2: 0x7F4E,
                0xE3A3: 0x7F50,
                0xE3A4: 0x7F51,
                0xE3A5: 0x7F55,
                0xE3A6: 0x7F54,
                0xE3A7: 0x7F58,
                0xE3A8: 0x7F5F,
                0xE3A9: 0x7F60,
                0xE3AA: 0x7F68,
                0xE3AB: 0x7F69,
                0xE3AC: 0x7F67,
                0xE3AD: 0x7F78,
                0xE3AE: 0x7F82,
                0xE3AF: 0x7F86,
                0xE3B0: 0x7F83,
                0xE3B1: 0x7F88,
                0xE3B2: 0x7F87,
                0xE3B3: 0x7F8C,
                0xE3B4: 0x7F94,
                0xE3B5: 0x7F9E,
                0xE3B6: 0x7F9D,
                0xE3B7: 0x7F9A,
                0xE3B8: 0x7FA3,
                0xE3B9: 0x7FAF,
                0xE3BA: 0x7FB2,
                0xE3BB: 0x7FB9,
                0xE3BC: 0x7FAE,
                0xE3BD: 0x7FB6,
                0xE3BE: 0x7FB8,
                0xE3BF: 0x8B71,
                0xE3C0: 0x7FC5,
                0xE3C1: 0x7FC6,
                0xE3C2: 0x7FCA,
                0xE3C3: 0x7FD5,
                0xE3C4: 0x7FD4,
                0xE3C5: 0x7FE1,
                0xE3C6: 0x7FE6,
                0xE3C7: 0x7FE9,
                0xE3C8: 0x7FF3,
                0xE3C9: 0x7FF9,
                0xE3CA: 0x98DC,
                0xE3CB: 0x8006,
                0xE3CC: 0x8004,
                0xE3CD: 0x800B,
                0xE3CE: 0x8012,
                0xE3CF: 0x8018,
                0xE3D0: 0x8019,
                0xE3D1: 0x801C,
                0xE3D2: 0x8021,
                0xE3D3: 0x8028,
                0xE3D4: 0x803F,
                0xE3D5: 0x803B,
                0xE3D6: 0x804A,
                0xE3D7: 0x8046,
                0xE3D8: 0x8052,
                0xE3D9: 0x8058,
                0xE3DA: 0x805A,
                0xE3DB: 0x805F,
                0xE3DC: 0x8062,
                0xE3DD: 0x8068,
                0xE3DE: 0x8073,
                0xE3DF: 0x8072,
                0xE3E0: 0x8070,
                0xE3E1: 0x8076,
                0xE3E2: 0x8079,
                0xE3E3: 0x807D,
                0xE3E4: 0x807F,
                0xE3E5: 0x8084,
                0xE3E6: 0x8086,
                0xE3E7: 0x8085,
                0xE3E8: 0x809B,
                0xE3E9: 0x8093,
                0xE3EA: 0x809A,
                0xE3EB: 0x80AD,
                0xE3EC: 0x5190,
                0xE3ED: 0x80AC,
                0xE3EE: 0x80DB,
                0xE3EF: 0x80E5,
                0xE3F0: 0x80D9,
                0xE3F1: 0x80DD,
                0xE3F2: 0x80C4,
                0xE3F3: 0x80DA,
                0xE3F4: 0x80D6,
                0xE3F5: 0x8109,
                0xE3F6: 0x80EF,
                0xE3F7: 0x80F1,
                0xE3F8: 0x811B,
                0xE3F9: 0x8129,
                0xE3FA: 0x8123,
                0xE3FB: 0x812F,
                0xE3FC: 0x814B,
                0xE440: 0x968B,
                0xE441: 0x8146,
                0xE442: 0x813E,
                0xE443: 0x8153,
                0xE444: 0x8151,
                0xE445: 0x80FC,
                0xE446: 0x8171,
                0xE447: 0x816E,
                0xE448: 0x8165,
                0xE449: 0x8166,
                0xE44A: 0x8174,
                0xE44B: 0x8183,
                0xE44C: 0x8188,
                0xE44D: 0x818A,
                0xE44E: 0x8180,
                0xE44F: 0x8182,
                0xE450: 0x81A0,
                0xE451: 0x8195,
                0xE452: 0x81A4,
                0xE453: 0x81A3,
                0xE454: 0x815F,
                0xE455: 0x8193,
                0xE456: 0x81A9,
                0xE457: 0x81B0,
                0xE458: 0x81B5,
                0xE459: 0x81BE,
                0xE45A: 0x81B8,
                0xE45B: 0x81BD,
                0xE45C: 0x81C0,
                0xE45D: 0x81C2,
                0xE45E: 0x81BA,
                0xE45F: 0x81C9,
                0xE460: 0x81CD,
                0xE461: 0x81D1,
                0xE462: 0x81D9,
                0xE463: 0x81D8,
                0xE464: 0x81C8,
                0xE465: 0x81DA,
                0xE466: 0x81DF,
                0xE467: 0x81E0,
                0xE468: 0x81E7,
                0xE469: 0x81FA,
                0xE46A: 0x81FB,
                0xE46B: 0x81FE,
                0xE46C: 0x8201,
                0xE46D: 0x8202,
                0xE46E: 0x8205,
                0xE46F: 0x8207,
                0xE470: 0x820A,
                0xE471: 0x820D,
                0xE472: 0x8210,
                0xE473: 0x8216,
                0xE474: 0x8229,
                0xE475: 0x822B,
                0xE476: 0x8238,
                0xE477: 0x8233,
                0xE478: 0x8240,
                0xE479: 0x8259,
                0xE47A: 0x8258,
                0xE47B: 0x825D,
                0xE47C: 0x825A,
                0xE47D: 0x825F,
                0xE47E: 0x8264,
                0xE480: 0x8262,
                0xE481: 0x8268,
                0xE482: 0x826A,
                0xE483: 0x826B,
                0xE484: 0x822E,
                0xE485: 0x8271,
                0xE486: 0x8277,
                0xE487: 0x8278,
                0xE488: 0x827E,
                0xE489: 0x828D,
                0xE48A: 0x8292,
                0xE48B: 0x82AB,
                0xE48C: 0x829F,
                0xE48D: 0x82BB,
                0xE48E: 0x82AC,
                0xE48F: 0x82E1,
                0xE490: 0x82E3,
                0xE491: 0x82DF,
                0xE492: 0x82D2,
                0xE493: 0x82F4,
                0xE494: 0x82F3,
                0xE495: 0x82FA,
                0xE496: 0x8393,
                0xE497: 0x8303,
                0xE498: 0x82FB,
                0xE499: 0x82F9,
                0xE49A: 0x82DE,
                0xE49B: 0x8306,
                0xE49C: 0x82DC,
                0xE49D: 0x8309,
                0xE49E: 0x82D9,
                0xE49F: 0x8335,
                0xE4A0: 0x8334,
                0xE4A1: 0x8316,
                0xE4A2: 0x8332,
                0xE4A3: 0x8331,
                0xE4A4: 0x8340,
                0xE4A5: 0x8339,
                0xE4A6: 0x8350,
                0xE4A7: 0x8345,
                0xE4A8: 0x832F,
                0xE4A9: 0x832B,
                0xE4AA: 0x8317,
                0xE4AB: 0x8318,
                0xE4AC: 0x8385,
                0xE4AD: 0x839A,
                0xE4AE: 0x83AA,
                0xE4AF: 0x839F,
                0xE4B0: 0x83A2,
                0xE4B1: 0x8396,
                0xE4B2: 0x8323,
                0xE4B3: 0x838E,
                0xE4B4: 0x8387,
                0xE4B5: 0x838A,
                0xE4B6: 0x837C,
                0xE4B7: 0x83B5,
                0xE4B8: 0x8373,
                0xE4B9: 0x8375,
                0xE4BA: 0x83A0,
                0xE4BB: 0x8389,
                0xE4BC: 0x83A8,
                0xE4BD: 0x83F4,
                0xE4BE: 0x8413,
                0xE4BF: 0x83EB,
                0xE4C0: 0x83CE,
                0xE4C1: 0x83FD,
                0xE4C2: 0x8403,
                0xE4C3: 0x83D8,
                0xE4C4: 0x840B,
                0xE4C5: 0x83C1,
                0xE4C6: 0x83F7,
                0xE4C7: 0x8407,
                0xE4C8: 0x83E0,
                0xE4C9: 0x83F2,
                0xE4CA: 0x840D,
                0xE4CB: 0x8422,
                0xE4CC: 0x8420,
                0xE4CD: 0x83BD,
                0xE4CE: 0x8438,
                0xE4CF: 0x8506,
                0xE4D0: 0x83FB,
                0xE4D1: 0x846D,
                0xE4D2: 0x842A,
                0xE4D3: 0x843C,
                0xE4D4: 0x855A,
                0xE4D5: 0x8484,
                0xE4D6: 0x8477,
                0xE4D7: 0x846B,
                0xE4D8: 0x84AD,
                0xE4D9: 0x846E,
                0xE4DA: 0x8482,
                0xE4DB: 0x8469,
                0xE4DC: 0x8446,
                0xE4DD: 0x842C,
                0xE4DE: 0x846F,
                0xE4DF: 0x8479,
                0xE4E0: 0x8435,
                0xE4E1: 0x84CA,
                0xE4E2: 0x8462,
                0xE4E3: 0x84B9,
                0xE4E4: 0x84BF,
                0xE4E5: 0x849F,
                0xE4E6: 0x84D9,
                0xE4E7: 0x84CD,
                0xE4E8: 0x84BB,
                0xE4E9: 0x84DA,
                0xE4EA: 0x84D0,
                0xE4EB: 0x84C1,
                0xE4EC: 0x84C6,
                0xE4ED: 0x84D6,
                0xE4EE: 0x84A1,
                0xE4EF: 0x8521,
                0xE4F0: 0x84FF,
                0xE4F1: 0x84F4,
                0xE4F2: 0x8517,
                0xE4F3: 0x8518,
                0xE4F4: 0x852C,
                0xE4F5: 0x851F,
                0xE4F6: 0x8515,
                0xE4F7: 0x8514,
                0xE4F8: 0x84FC,
                0xE4F9: 0x8540,
                0xE4FA: 0x8563,
                0xE4FB: 0x8558,
                0xE4FC: 0x8548,
                0xE540: 0x8541,
                0xE541: 0x8602,
                0xE542: 0x854B,
                0xE543: 0x8555,
                0xE544: 0x8580,
                0xE545: 0x85A4,
                0xE546: 0x8588,
                0xE547: 0x8591,
                0xE548: 0x858A,
                0xE549: 0x85A8,
                0xE54A: 0x856D,
                0xE54B: 0x8594,
                0xE54C: 0x859B,
                0xE54D: 0x85EA,
                0xE54E: 0x8587,
                0xE54F: 0x859C,
                0xE550: 0x8577,
                0xE551: 0x857E,
                0xE552: 0x8590,
                0xE553: 0x85C9,
                0xE554: 0x85BA,
                0xE555: 0x85CF,
                0xE556: 0x85B9,
                0xE557: 0x85D0,
                0xE558: 0x85D5,
                0xE559: 0x85DD,
                0xE55A: 0x85E5,
                0xE55B: 0x85DC,
                0xE55C: 0x85F9,
                0xE55D: 0x860A,
                0xE55E: 0x8613,
                0xE55F: 0x860B,
                0xE560: 0x85FE,
                0xE561: 0x85FA,
                0xE562: 0x8606,
                0xE563: 0x8622,
                0xE564: 0x861A,
                0xE565: 0x8630,
                0xE566: 0x863F,
                0xE567: 0x864D,
                0xE568: 0x4E55,
                0xE569: 0x8654,
                0xE56A: 0x865F,
                0xE56B: 0x8667,
                0xE56C: 0x8671,
                0xE56D: 0x8693,
                0xE56E: 0x86A3,
                0xE56F: 0x86A9,
                0xE570: 0x86AA,
                0xE571: 0x868B,
                0xE572: 0x868C,
                0xE573: 0x86B6,
                0xE574: 0x86AF,
                0xE575: 0x86C4,
                0xE576: 0x86C6,
                0xE577: 0x86B0,
                0xE578: 0x86C9,
                0xE579: 0x8823,
                0xE57A: 0x86AB,
                0xE57B: 0x86D4,
                0xE57C: 0x86DE,
                0xE57D: 0x86E9,
                0xE57E: 0x86EC,
                0xE580: 0x86DF,
                0xE581: 0x86DB,
                0xE582: 0x86EF,
                0xE583: 0x8712,
                0xE584: 0x8706,
                0xE585: 0x8708,
                0xE586: 0x8700,
                0xE587: 0x8703,
                0xE588: 0x86FB,
                0xE589: 0x8711,
                0xE58A: 0x8709,
                0xE58B: 0x870D,
                0xE58C: 0x86F9,
                0xE58D: 0x870A,
                0xE58E: 0x8734,
                0xE58F: 0x873F,
                0xE590: 0x8737,
                0xE591: 0x873B,
                0xE592: 0x8725,
                0xE593: 0x8729,
                0xE594: 0x871A,
                0xE595: 0x8760,
                0xE596: 0x875F,
                0xE597: 0x8778,
                0xE598: 0x874C,
                0xE599: 0x874E,
                0xE59A: 0x8774,
                0xE59B: 0x8757,
                0xE59C: 0x8768,
                0xE59D: 0x876E,
                0xE59E: 0x8759,
                0xE59F: 0x8753,
                0xE5A0: 0x8763,
                0xE5A1: 0x876A,
                0xE5A2: 0x8805,
                0xE5A3: 0x87A2,
                0xE5A4: 0x879F,
                0xE5A5: 0x8782,
                0xE5A6: 0x87AF,
                0xE5A7: 0x87CB,
                0xE5A8: 0x87BD,
                0xE5A9: 0x87C0,
                0xE5AA: 0x87D0,
                0xE5AB: 0x96D6,
                0xE5AC: 0x87AB,
                0xE5AD: 0x87C4,
                0xE5AE: 0x87B3,
                0xE5AF: 0x87C7,
                0xE5B0: 0x87C6,
                0xE5B1: 0x87BB,
                0xE5B2: 0x87EF,
                0xE5B3: 0x87F2,
                0xE5B4: 0x87E0,
                0xE5B5: 0x880F,
                0xE5B6: 0x880D,
                0xE5B7: 0x87FE,
                0xE5B8: 0x87F6,
                0xE5B9: 0x87F7,
                0xE5BA: 0x880E,
                0xE5BB: 0x87D2,
                0xE5BC: 0x8811,
                0xE5BD: 0x8816,
                0xE5BE: 0x8815,
                0xE5BF: 0x8822,
                0xE5C0: 0x8821,
                0xE5C1: 0x8831,
                0xE5C2: 0x8836,
                0xE5C3: 0x8839,
                0xE5C4: 0x8827,
                0xE5C5: 0x883B,
                0xE5C6: 0x8844,
                0xE5C7: 0x8842,
                0xE5C8: 0x8852,
                0xE5C9: 0x8859,
                0xE5CA: 0x885E,
                0xE5CB: 0x8862,
                0xE5CC: 0x886B,
                0xE5CD: 0x8881,
                0xE5CE: 0x887E,
                0xE5CF: 0x889E,
                0xE5D0: 0x8875,
                0xE5D1: 0x887D,
                0xE5D2: 0x88B5,
                0xE5D3: 0x8872,
                0xE5D4: 0x8882,
                0xE5D5: 0x8897,
                0xE5D6: 0x8892,
                0xE5D7: 0x88AE,
                0xE5D8: 0x8899,
                0xE5D9: 0x88A2,
                0xE5DA: 0x888D,
                0xE5DB: 0x88A4,
                0xE5DC: 0x88B0,
                0xE5DD: 0x88BF,
                0xE5DE: 0x88B1,
                0xE5DF: 0x88C3,
                0xE5E0: 0x88C4,
                0xE5E1: 0x88D4,
                0xE5E2: 0x88D8,
                0xE5E3: 0x88D9,
                0xE5E4: 0x88DD,
                0xE5E5: 0x88F9,
                0xE5E6: 0x8902,
                0xE5E7: 0x88FC,
                0xE5E8: 0x88F4,
                0xE5E9: 0x88E8,
                0xE5EA: 0x88F2,
                0xE5EB: 0x8904,
                0xE5EC: 0x890C,
                0xE5ED: 0x890A,
                0xE5EE: 0x8913,
                0xE5EF: 0x8943,
                0xE5F0: 0x891E,
                0xE5F1: 0x8925,
                0xE5F2: 0x892A,
                0xE5F3: 0x892B,
                0xE5F4: 0x8941,
                0xE5F5: 0x8944,
                0xE5F6: 0x893B,
                0xE5F7: 0x8936,
                0xE5F8: 0x8938,
                0xE5F9: 0x894C,
                0xE5FA: 0x891D,
                0xE5FB: 0x8960,
                0xE5FC: 0x895E,
                0xE640: 0x8966,
                0xE641: 0x8964,
                0xE642: 0x896D,
                0xE643: 0x896A,
                0xE644: 0x896F,
                0xE645: 0x8974,
                0xE646: 0x8977,
                0xE647: 0x897E,
                0xE648: 0x8983,
                0xE649: 0x8988,
                0xE64A: 0x898A,
                0xE64B: 0x8993,
                0xE64C: 0x8998,
                0xE64D: 0x89A1,
                0xE64E: 0x89A9,
                0xE64F: 0x89A6,
                0xE650: 0x89AC,
                0xE651: 0x89AF,
                0xE652: 0x89B2,
                0xE653: 0x89BA,
                0xE654: 0x89BD,
                0xE655: 0x89BF,
                0xE656: 0x89C0,
                0xE657: 0x89DA,
                0xE658: 0x89DC,
                0xE659: 0x89DD,
                0xE65A: 0x89E7,
                0xE65B: 0x89F4,
                0xE65C: 0x89F8,
                0xE65D: 0x8A03,
                0xE65E: 0x8A16,
                0xE65F: 0x8A10,
                0xE660: 0x8A0C,
                0xE661: 0x8A1B,
                0xE662: 0x8A1D,
                0xE663: 0x8A25,
                0xE664: 0x8A36,
                0xE665: 0x8A41,
                0xE666: 0x8A5B,
                0xE667: 0x8A52,
                0xE668: 0x8A46,
                0xE669: 0x8A48,
                0xE66A: 0x8A7C,
                0xE66B: 0x8A6D,
                0xE66C: 0x8A6C,
                0xE66D: 0x8A62,
                0xE66E: 0x8A85,
                0xE66F: 0x8A82,
                0xE670: 0x8A84,
                0xE671: 0x8AA8,
                0xE672: 0x8AA1,
                0xE673: 0x8A91,
                0xE674: 0x8AA5,
                0xE675: 0x8AA6,
                0xE676: 0x8A9A,
                0xE677: 0x8AA3,
                0xE678: 0x8AC4,
                0xE679: 0x8ACD,
                0xE67A: 0x8AC2,
                0xE67B: 0x8ADA,
                0xE67C: 0x8AEB,
                0xE67D: 0x8AF3,
                0xE67E: 0x8AE7,
                0xE680: 0x8AE4,
                0xE681: 0x8AF1,
                0xE682: 0x8B14,
                0xE683: 0x8AE0,
                0xE684: 0x8AE2,
                0xE685: 0x8AF7,
                0xE686: 0x8ADE,
                0xE687: 0x8ADB,
                0xE688: 0x8B0C,
                0xE689: 0x8B07,
                0xE68A: 0x8B1A,
                0xE68B: 0x8AE1,
                0xE68C: 0x8B16,
                0xE68D: 0x8B10,
                0xE68E: 0x8B17,
                0xE68F: 0x8B20,
                0xE690: 0x8B33,
                0xE691: 0x97AB,
                0xE692: 0x8B26,
                0xE693: 0x8B2B,
                0xE694: 0x8B3E,
                0xE695: 0x8B28,
                0xE696: 0x8B41,
                0xE697: 0x8B4C,
                0xE698: 0x8B4F,
                0xE699: 0x8B4E,
                0xE69A: 0x8B49,
                0xE69B: 0x8B56,
                0xE69C: 0x8B5B,
                0xE69D: 0x8B5A,
                0xE69E: 0x8B6B,
                0xE69F: 0x8B5F,
                0xE6A0: 0x8B6C,
                0xE6A1: 0x8B6F,
                0xE6A2: 0x8B74,
                0xE6A3: 0x8B7D,
                0xE6A4: 0x8B80,
                0xE6A5: 0x8B8C,
                0xE6A6: 0x8B8E,
                0xE6A7: 0x8B92,
                0xE6A8: 0x8B93,
                0xE6A9: 0x8B96,
                0xE6AA: 0x8B99,
                0xE6AB: 0x8B9A,
                0xE6AC: 0x8C3A,
                0xE6AD: 0x8C41,
                0xE6AE: 0x8C3F,
                0xE6AF: 0x8C48,
                0xE6B0: 0x8C4C,
                0xE6B1: 0x8C4E,
                0xE6B2: 0x8C50,
                0xE6B3: 0x8C55,
                0xE6B4: 0x8C62,
                0xE6B5: 0x8C6C,
                0xE6B6: 0x8C78,
                0xE6B7: 0x8C7A,
                0xE6B8: 0x8C82,
                0xE6B9: 0x8C89,
                0xE6BA: 0x8C85,
                0xE6BB: 0x8C8A,
                0xE6BC: 0x8C8D,
                0xE6BD: 0x8C8E,
                0xE6BE: 0x8C94,
                0xE6BF: 0x8C7C,
                0xE6C0: 0x8C98,
                0xE6C1: 0x621D,
                0xE6C2: 0x8CAD,
                0xE6C3: 0x8CAA,
                0xE6C4: 0x8CBD,
                0xE6C5: 0x8CB2,
                0xE6C6: 0x8CB3,
                0xE6C7: 0x8CAE,
                0xE6C8: 0x8CB6,
                0xE6C9: 0x8CC8,
                0xE6CA: 0x8CC1,
                0xE6CB: 0x8CE4,
                0xE6CC: 0x8CE3,
                0xE6CD: 0x8CDA,
                0xE6CE: 0x8CFD,
                0xE6CF: 0x8CFA,
                0xE6D0: 0x8CFB,
                0xE6D1: 0x8D04,
                0xE6D2: 0x8D05,
                0xE6D3: 0x8D0A,
                0xE6D4: 0x8D07,
                0xE6D5: 0x8D0F,
                0xE6D6: 0x8D0D,
                0xE6D7: 0x8D10,
                0xE6D8: 0x9F4E,
                0xE6D9: 0x8D13,
                0xE6DA: 0x8CCD,
                0xE6DB: 0x8D14,
                0xE6DC: 0x8D16,
                0xE6DD: 0x8D67,
                0xE6DE: 0x8D6D,
                0xE6DF: 0x8D71,
                0xE6E0: 0x8D73,
                0xE6E1: 0x8D81,
                0xE6E2: 0x8D99,
                0xE6E3: 0x8DC2,
                0xE6E4: 0x8DBE,
                0xE6E5: 0x8DBA,
                0xE6E6: 0x8DCF,
                0xE6E7: 0x8DDA,
                0xE6E8: 0x8DD6,
                0xE6E9: 0x8DCC,
                0xE6EA: 0x8DDB,
                0xE6EB: 0x8DCB,
                0xE6EC: 0x8DEA,
                0xE6ED: 0x8DEB,
                0xE6EE: 0x8DDF,
                0xE6EF: 0x8DE3,
                0xE6F0: 0x8DFC,
                0xE6F1: 0x8E08,
                0xE6F2: 0x8E09,
                0xE6F3: 0x8DFF,
                0xE6F4: 0x8E1D,
                0xE6F5: 0x8E1E,
                0xE6F6: 0x8E10,
                0xE6F7: 0x8E1F,
                0xE6F8: 0x8E42,
                0xE6F9: 0x8E35,
                0xE6FA: 0x8E30,
                0xE6FB: 0x8E34,
                0xE6FC: 0x8E4A,
                0xE740: 0x8E47,
                0xE741: 0x8E49,
                0xE742: 0x8E4C,
                0xE743: 0x8E50,
                0xE744: 0x8E48,
                0xE745: 0x8E59,
                0xE746: 0x8E64,
                0xE747: 0x8E60,
                0xE748: 0x8E2A,
                0xE749: 0x8E63,
                0xE74A: 0x8E55,
                0xE74B: 0x8E76,
                0xE74C: 0x8E72,
                0xE74D: 0x8E7C,
                0xE74E: 0x8E81,
                0xE74F: 0x8E87,
                0xE750: 0x8E85,
                0xE751: 0x8E84,
                0xE752: 0x8E8B,
                0xE753: 0x8E8A,
                0xE754: 0x8E93,
                0xE755: 0x8E91,
                0xE756: 0x8E94,
                0xE757: 0x8E99,
                0xE758: 0x8EAA,
                0xE759: 0x8EA1,
                0xE75A: 0x8EAC,
                0xE75B: 0x8EB0,
                0xE75C: 0x8EC6,
                0xE75D: 0x8EB1,
                0xE75E: 0x8EBE,
                0xE75F: 0x8EC5,
                0xE760: 0x8EC8,
                0xE761: 0x8ECB,
                0xE762: 0x8EDB,
                0xE763: 0x8EE3,
                0xE764: 0x8EFC,
                0xE765: 0x8EFB,
                0xE766: 0x8EEB,
                0xE767: 0x8EFE,
                0xE768: 0x8F0A,
                0xE769: 0x8F05,
                0xE76A: 0x8F15,
                0xE76B: 0x8F12,
                0xE76C: 0x8F19,
                0xE76D: 0x8F13,
                0xE76E: 0x8F1C,
                0xE76F: 0x8F1F,
                0xE770: 0x8F1B,
                0xE771: 0x8F0C,
                0xE772: 0x8F26,
                0xE773: 0x8F33,
                0xE774: 0x8F3B,
                0xE775: 0x8F39,
                0xE776: 0x8F45,
                0xE777: 0x8F42,
                0xE778: 0x8F3E,
                0xE779: 0x8F4C,
                0xE77A: 0x8F49,
                0xE77B: 0x8F46,
                0xE77C: 0x8F4E,
                0xE77D: 0x8F57,
                0xE77E: 0x8F5C,
                0xE780: 0x8F62,
                0xE781: 0x8F63,
                0xE782: 0x8F64,
                0xE783: 0x8F9C,
                0xE784: 0x8F9F,
                0xE785: 0x8FA3,
                0xE786: 0x8FAD,
                0xE787: 0x8FAF,
                0xE788: 0x8FB7,
                0xE789: 0x8FDA,
                0xE78A: 0x8FE5,
                0xE78B: 0x8FE2,
                0xE78C: 0x8FEA,
                0xE78D: 0x8FEF,
                0xE78E: 0x9087,
                0xE78F: 0x8FF4,
                0xE790: 0x9005,
                0xE791: 0x8FF9,
                0xE792: 0x8FFA,
                0xE793: 0x9011,
                0xE794: 0x9015,
                0xE795: 0x9021,
                0xE796: 0x900D,
                0xE797: 0x901E,
                0xE798: 0x9016,
                0xE799: 0x900B,
                0xE79A: 0x9027,
                0xE79B: 0x9036,
                0xE79C: 0x9035,
                0xE79D: 0x9039,
                0xE79E: 0x8FF8,
                0xE79F: 0x904F,
                0xE7A0: 0x9050,
                0xE7A1: 0x9051,
                0xE7A2: 0x9052,
                0xE7A3: 0x900E,
                0xE7A4: 0x9049,
                0xE7A5: 0x903E,
                0xE7A6: 0x9056,
                0xE7A7: 0x9058,
                0xE7A8: 0x905E,
                0xE7A9: 0x9068,
                0xE7AA: 0x906F,
                0xE7AB: 0x9076,
                0xE7AC: 0x96A8,
                0xE7AD: 0x9072,
                0xE7AE: 0x9082,
                0xE7AF: 0x907D,
                0xE7B0: 0x9081,
                0xE7B1: 0x9080,
                0xE7B2: 0x908A,
                0xE7B3: 0x9089,
                0xE7B4: 0x908F,
                0xE7B5: 0x90A8,
                0xE7B6: 0x90AF,
                0xE7B7: 0x90B1,
                0xE7B8: 0x90B5,
                0xE7B9: 0x90E2,
                0xE7BA: 0x90E4,
                0xE7BB: 0x6248,
                0xE7BC: 0x90DB,
                0xE7BD: 0x9102,
                0xE7BE: 0x9112,
                0xE7BF: 0x9119,
                0xE7C0: 0x9132,
                0xE7C1: 0x9130,
                0xE7C2: 0x914A,
                0xE7C3: 0x9156,
                0xE7C4: 0x9158,
                0xE7C5: 0x9163,
                0xE7C6: 0x9165,
                0xE7C7: 0x9169,
                0xE7C8: 0x9173,
                0xE7C9: 0x9172,
                0xE7CA: 0x918B,
                0xE7CB: 0x9189,
                0xE7CC: 0x9182,
                0xE7CD: 0x91A2,
                0xE7CE: 0x91AB,
                0xE7CF: 0x91AF,
                0xE7D0: 0x91AA,
                0xE7D1: 0x91B5,
                0xE7D2: 0x91B4,
                0xE7D3: 0x91BA,
                0xE7D4: 0x91C0,
                0xE7D5: 0x91C1,
                0xE7D6: 0x91C9,
                0xE7D7: 0x91CB,
                0xE7D8: 0x91D0,
                0xE7D9: 0x91D6,
                0xE7DA: 0x91DF,
                0xE7DB: 0x91E1,
                0xE7DC: 0x91DB,
                0xE7DD: 0x91FC,
                0xE7DE: 0x91F5,
                0xE7DF: 0x91F6,
                0xE7E0: 0x921E,
                0xE7E1: 0x91FF,
                0xE7E2: 0x9214,
                0xE7E3: 0x922C,
                0xE7E4: 0x9215,
                0xE7E5: 0x9211,
                0xE7E6: 0x925E,
                0xE7E7: 0x9257,
                0xE7E8: 0x9245,
                0xE7E9: 0x9249,
                0xE7EA: 0x9264,
                0xE7EB: 0x9248,
                0xE7EC: 0x9295,
                0xE7ED: 0x923F,
                0xE7EE: 0x924B,
                0xE7EF: 0x9250,
                0xE7F0: 0x929C,
                0xE7F1: 0x9296,
                0xE7F2: 0x9293,
                0xE7F3: 0x929B,
                0xE7F4: 0x925A,
                0xE7F5: 0x92CF,
                0xE7F6: 0x92B9,
                0xE7F7: 0x92B7,
                0xE7F8: 0x92E9,
                0xE7F9: 0x930F,
                0xE7FA: 0x92FA,
                0xE7FB: 0x9344,
                0xE7FC: 0x932E,
                0xE840: 0x9319,
                0xE841: 0x9322,
                0xE842: 0x931A,
                0xE843: 0x9323,
                0xE844: 0x933A,
                0xE845: 0x9335,
                0xE846: 0x933B,
                0xE847: 0x935C,
                0xE848: 0x9360,
                0xE849: 0x937C,
                0xE84A: 0x936E,
                0xE84B: 0x9356,
                0xE84C: 0x93B0,
                0xE84D: 0x93AC,
                0xE84E: 0x93AD,
                0xE84F: 0x9394,
                0xE850: 0x93B9,
                0xE851: 0x93D6,
                0xE852: 0x93D7,
                0xE853: 0x93E8,
                0xE854: 0x93E5,
                0xE855: 0x93D8,
                0xE856: 0x93C3,
                0xE857: 0x93DD,
                0xE858: 0x93D0,
                0xE859: 0x93C8,
                0xE85A: 0x93E4,
                0xE85B: 0x941A,
                0xE85C: 0x9414,
                0xE85D: 0x9413,
                0xE85E: 0x9403,
                0xE85F: 0x9407,
                0xE860: 0x9410,
                0xE861: 0x9436,
                0xE862: 0x942B,
                0xE863: 0x9435,
                0xE864: 0x9421,
                0xE865: 0x943A,
                0xE866: 0x9441,
                0xE867: 0x9452,
                0xE868: 0x9444,
                0xE869: 0x945B,
                0xE86A: 0x9460,
                0xE86B: 0x9462,
                0xE86C: 0x945E,
                0xE86D: 0x946A,
                0xE86E: 0x9229,
                0xE86F: 0x9470,
                0xE870: 0x9475,
                0xE871: 0x9477,
                0xE872: 0x947D,
                0xE873: 0x945A,
                0xE874: 0x947C,
                0xE875: 0x947E,
                0xE876: 0x9481,
                0xE877: 0x947F,
                0xE878: 0x9582,
                0xE879: 0x9587,
                0xE87A: 0x958A,
                0xE87B: 0x9594,
                0xE87C: 0x9596,
                0xE87D: 0x9598,
                0xE87E: 0x9599,
                0xE880: 0x95A0,
                0xE881: 0x95A8,
                0xE882: 0x95A7,
                0xE883: 0x95AD,
                0xE884: 0x95BC,
                0xE885: 0x95BB,
                0xE886: 0x95B9,
                0xE887: 0x95BE,
                0xE888: 0x95CA,
                0xE889: 0x6FF6,
                0xE88A: 0x95C3,
                0xE88B: 0x95CD,
                0xE88C: 0x95CC,
                0xE88D: 0x95D5,
                0xE88E: 0x95D4,
                0xE88F: 0x95D6,
                0xE890: 0x95DC,
                0xE891: 0x95E1,
                0xE892: 0x95E5,
                0xE893: 0x95E2,
                0xE894: 0x9621,
                0xE895: 0x9628,
                0xE896: 0x962E,
                0xE897: 0x962F,
                0xE898: 0x9642,
                0xE899: 0x964C,
                0xE89A: 0x964F,
                0xE89B: 0x964B,
                0xE89C: 0x9677,
                0xE89D: 0x965C,
                0xE89E: 0x965E,
                0xE89F: 0x965D,
                0xE8A0: 0x965F,
                0xE8A1: 0x9666,
                0xE8A2: 0x9672,
                0xE8A3: 0x966C,
                0xE8A4: 0x968D,
                0xE8A5: 0x9698,
                0xE8A6: 0x9695,
                0xE8A7: 0x9697,
                0xE8A8: 0x96AA,
                0xE8A9: 0x96A7,
                0xE8AA: 0x96B1,
                0xE8AB: 0x96B2,
                0xE8AC: 0x96B0,
                0xE8AD: 0x96B4,
                0xE8AE: 0x96B6,
                0xE8AF: 0x96B8,
                0xE8B0: 0x96B9,
                0xE8B1: 0x96CE,
                0xE8B2: 0x96CB,
                0xE8B3: 0x96C9,
                0xE8B4: 0x96CD,
                0xE8B5: 0x894D,
                0xE8B6: 0x96DC,
                0xE8B7: 0x970D,
                0xE8B8: 0x96D5,
                0xE8B9: 0x96F9,
                0xE8BA: 0x9704,
                0xE8BB: 0x9706,
                0xE8BC: 0x9708,
                0xE8BD: 0x9713,
                0xE8BE: 0x970E,
                0xE8BF: 0x9711,
                0xE8C0: 0x970F,
                0xE8C1: 0x9716,
                0xE8C2: 0x9719,
                0xE8C3: 0x9724,
                0xE8C4: 0x972A,
                0xE8C5: 0x9730,
                0xE8C6: 0x9739,
                0xE8C7: 0x973D,
                0xE8C8: 0x973E,
                0xE8C9: 0x9744,
                0xE8CA: 0x9746,
                0xE8CB: 0x9748,
                0xE8CC: 0x9742,
                0xE8CD: 0x9749,
                0xE8CE: 0x975C,
                0xE8CF: 0x9760,
                0xE8D0: 0x9764,
                0xE8D1: 0x9766,
                0xE8D2: 0x9768,
                0xE8D3: 0x52D2,
                0xE8D4: 0x976B,
                0xE8D5: 0x9771,
                0xE8D6: 0x9779,
                0xE8D7: 0x9785,
                0xE8D8: 0x977C,
                0xE8D9: 0x9781,
                0xE8DA: 0x977A,
                0xE8DB: 0x9786,
                0xE8DC: 0x978B,
                0xE8DD: 0x978F,
                0xE8DE: 0x9790,
                0xE8DF: 0x979C,
                0xE8E0: 0x97A8,
                0xE8E1: 0x97A6,
                0xE8E2: 0x97A3,
                0xE8E3: 0x97B3,
                0xE8E4: 0x97B4,
                0xE8E5: 0x97C3,
                0xE8E6: 0x97C6,
                0xE8E7: 0x97C8,
                0xE8E8: 0x97CB,
                0xE8E9: 0x97DC,
                0xE8EA: 0x97ED,
                0xE8EB: 0x9F4F,
                0xE8EC: 0x97F2,
                0xE8ED: 0x7ADF,
                0xE8EE: 0x97F6,
                0xE8EF: 0x97F5,
                0xE8F0: 0x980F,
                0xE8F1: 0x980C,
                0xE8F2: 0x9838,
                0xE8F3: 0x9824,
                0xE8F4: 0x9821,
                0xE8F5: 0x9837,
                0xE8F6: 0x983D,
                0xE8F7: 0x9846,
                0xE8F8: 0x984F,
                0xE8F9: 0x984B,
                0xE8FA: 0x986B,
                0xE8FB: 0x986F,
                0xE8FC: 0x9870,
                0xE940: 0x9871,
                0xE941: 0x9874,
                0xE942: 0x9873,
                0xE943: 0x98AA,
                0xE944: 0x98AF,
                0xE945: 0x98B1,
                0xE946: 0x98B6,
                0xE947: 0x98C4,
                0xE948: 0x98C3,
                0xE949: 0x98C6,
                0xE94A: 0x98E9,
                0xE94B: 0x98EB,
                0xE94C: 0x9903,
                0xE94D: 0x9909,
                0xE94E: 0x9912,
                0xE94F: 0x9914,
                0xE950: 0x9918,
                0xE951: 0x9921,
                0xE952: 0x991D,
                0xE953: 0x991E,
                0xE954: 0x9924,
                0xE955: 0x9920,
                0xE956: 0x992C,
                0xE957: 0x992E,
                0xE958: 0x993D,
                0xE959: 0x993E,
                0xE95A: 0x9942,
                0xE95B: 0x9949,
                0xE95C: 0x9945,
                0xE95D: 0x9950,
                0xE95E: 0x994B,
                0xE95F: 0x9951,
                0xE960: 0x9952,
                0xE961: 0x994C,
                0xE962: 0x9955,
                0xE963: 0x9997,
                0xE964: 0x9998,
                0xE965: 0x99A5,
                0xE966: 0x99AD,
                0xE967: 0x99AE,
                0xE968: 0x99BC,
                0xE969: 0x99DF,
                0xE96A: 0x99DB,
                0xE96B: 0x99DD,
                0xE96C: 0x99D8,
                0xE96D: 0x99D1,
                0xE96E: 0x99ED,
                0xE96F: 0x99EE,
                0xE970: 0x99F1,
                0xE971: 0x99F2,
                0xE972: 0x99FB,
                0xE973: 0x99F8,
                0xE974: 0x9A01,
                0xE975: 0x9A0F,
                0xE976: 0x9A05,
                0xE977: 0x99E2,
                0xE978: 0x9A19,
                0xE979: 0x9A2B,
                0xE97A: 0x9A37,
                0xE97B: 0x9A45,
                0xE97C: 0x9A42,
                0xE97D: 0x9A40,
                0xE97E: 0x9A43,
                0xE980: 0x9A3E,
                0xE981: 0x9A55,
                0xE982: 0x9A4D,
                0xE983: 0x9A5B,
                0xE984: 0x9A57,
                0xE985: 0x9A5F,
                0xE986: 0x9A62,
                0xE987: 0x9A65,
                0xE988: 0x9A64,
                0xE989: 0x9A69,
                0xE98A: 0x9A6B,
                0xE98B: 0x9A6A,
                0xE98C: 0x9AAD,
                0xE98D: 0x9AB0,
                0xE98E: 0x9ABC,
                0xE98F: 0x9AC0,
                0xE990: 0x9ACF,
                0xE991: 0x9AD1,
                0xE992: 0x9AD3,
                0xE993: 0x9AD4,
                0xE994: 0x9ADE,
                0xE995: 0x9ADF,
                0xE996: 0x9AE2,
                0xE997: 0x9AE3,
                0xE998: 0x9AE6,
                0xE999: 0x9AEF,
                0xE99A: 0x9AEB,
                0xE99B: 0x9AEE,
                0xE99C: 0x9AF4,
                0xE99D: 0x9AF1,
                0xE99E: 0x9AF7,
                0xE99F: 0x9AFB,
                0xE9A0: 0x9B06,
                0xE9A1: 0x9B18,
                0xE9A2: 0x9B1A,
                0xE9A3: 0x9B1F,
                0xE9A4: 0x9B22,
                0xE9A5: 0x9B23,
                0xE9A6: 0x9B25,
                0xE9A7: 0x9B27,
                0xE9A8: 0x9B28,
                0xE9A9: 0x9B29,
                0xE9AA: 0x9B2A,
                0xE9AB: 0x9B2E,
                0xE9AC: 0x9B2F,
                0xE9AD: 0x9B32,
                0xE9AE: 0x9B44,
                0xE9AF: 0x9B43,
                0xE9B0: 0x9B4F,
                0xE9B1: 0x9B4D,
                0xE9B2: 0x9B4E,
                0xE9B3: 0x9B51,
                0xE9B4: 0x9B58,
                0xE9B5: 0x9B74,
                0xE9B6: 0x9B93,
                0xE9B7: 0x9B83,
                0xE9B8: 0x9B91,
                0xE9B9: 0x9B96,
                0xE9BA: 0x9B97,
                0xE9BB: 0x9B9F,
                0xE9BC: 0x9BA0,
                0xE9BD: 0x9BA8,
                0xE9BE: 0x9BB4,
                0xE9BF: 0x9BC0,
                0xE9C0: 0x9BCA,
                0xE9C1: 0x9BB9,
                0xE9C2: 0x9BC6,
                0xE9C3: 0x9BCF,
                0xE9C4: 0x9BD1,
                0xE9C5: 0x9BD2,
                0xE9C6: 0x9BE3,
                0xE9C7: 0x9BE2,
                0xE9C8: 0x9BE4,
                0xE9C9: 0x9BD4,
                0xE9CA: 0x9BE1,
                0xE9CB: 0x9C3A,
                0xE9CC: 0x9BF2,
                0xE9CD: 0x9BF1,
                0xE9CE: 0x9BF0,
                0xE9CF: 0x9C15,
                0xE9D0: 0x9C14,
                0xE9D1: 0x9C09,
                0xE9D2: 0x9C13,
                0xE9D3: 0x9C0C,
                0xE9D4: 0x9C06,
                0xE9D5: 0x9C08,
                0xE9D6: 0x9C12,
                0xE9D7: 0x9C0A,
                0xE9D8: 0x9C04,
                0xE9D9: 0x9C2E,
                0xE9DA: 0x9C1B,
                0xE9DB: 0x9C25,
                0xE9DC: 0x9C24,
                0xE9DD: 0x9C21,
                0xE9DE: 0x9C30,
                0xE9DF: 0x9C47,
                0xE9E0: 0x9C32,
                0xE9E1: 0x9C46,
                0xE9E2: 0x9C3E,
                0xE9E3: 0x9C5A,
                0xE9E4: 0x9C60,
                0xE9E5: 0x9C67,
                0xE9E6: 0x9C76,
                0xE9E7: 0x9C78,
                0xE9E8: 0x9CE7,
                0xE9E9: 0x9CEC,
                0xE9EA: 0x9CF0,
                0xE9EB: 0x9D09,
                0xE9EC: 0x9D08,
                0xE9ED: 0x9CEB,
                0xE9EE: 0x9D03,
                0xE9EF: 0x9D06,
                0xE9F0: 0x9D2A,
                0xE9F1: 0x9D26,
                0xE9F2: 0x9DAF,
                0xE9F3: 0x9D23,
                0xE9F4: 0x9D1F,
                0xE9F5: 0x9D44,
                0xE9F6: 0x9D15,
                0xE9F7: 0x9D12,
                0xE9F8: 0x9D41,
                0xE9F9: 0x9D3F,
                0xE9FA: 0x9D3E,
                0xE9FB: 0x9D46,
                0xE9FC: 0x9D48,
                0xEA40: 0x9D5D,
                0xEA41: 0x9D5E,
                0xEA42: 0x9D64,
                0xEA43: 0x9D51,
                0xEA44: 0x9D50,
                0xEA45: 0x9D59,
                0xEA46: 0x9D72,
                0xEA47: 0x9D89,
                0xEA48: 0x9D87,
                0xEA49: 0x9DAB,
                0xEA4A: 0x9D6F,
                0xEA4B: 0x9D7A,
                0xEA4C: 0x9D9A,
                0xEA4D: 0x9DA4,
                0xEA4E: 0x9DA9,
                0xEA4F: 0x9DB2,
                0xEA50: 0x9DC4,
                0xEA51: 0x9DC1,
                0xEA52: 0x9DBB,
                0xEA53: 0x9DB8,
                0xEA54: 0x9DBA,
                0xEA55: 0x9DC6,
                0xEA56: 0x9DCF,
                0xEA57: 0x9DC2,
                0xEA58: 0x9DD9,
                0xEA59: 0x9DD3,
                0xEA5A: 0x9DF8,
                0xEA5B: 0x9DE6,
                0xEA5C: 0x9DED,
                0xEA5D: 0x9DEF,
                0xEA5E: 0x9DFD,
                0xEA5F: 0x9E1A,
                0xEA60: 0x9E1B,
                0xEA61: 0x9E1E,
                0xEA62: 0x9E75,
                0xEA63: 0x9E79,
                0xEA64: 0x9E7D,
                0xEA65: 0x9E81,
                0xEA66: 0x9E88,
                0xEA67: 0x9E8B,
                0xEA68: 0x9E8C,
                0xEA69: 0x9E92,
                0xEA6A: 0x9E95,
                0xEA6B: 0x9E91,
                0xEA6C: 0x9E9D,
                0xEA6D: 0x9EA5,
                0xEA6E: 0x9EA9,
                0xEA6F: 0x9EB8,
                0xEA70: 0x9EAA,
                0xEA71: 0x9EAD,
                0xEA72: 0x9761,
                0xEA73: 0x9ECC,
                0xEA74: 0x9ECE,
                0xEA75: 0x9ECF,
                0xEA76: 0x9ED0,
                0xEA77: 0x9ED4,
                0xEA78: 0x9EDC,
                0xEA79: 0x9EDE,
                0xEA7A: 0x9EDD,
                0xEA7B: 0x9EE0,
                0xEA7C: 0x9EE5,
                0xEA7D: 0x9EE8,
                0xEA7E: 0x9EEF,
                0xEA80: 0x9EF4,
                0xEA81: 0x9EF6,
                0xEA82: 0x9EF7,
                0xEA83: 0x9EF9,
                0xEA84: 0x9EFB,
                0xEA85: 0x9EFC,
                0xEA86: 0x9EFD,
                0xEA87: 0x9F07,
                0xEA88: 0x9F08,
                0xEA89: 0x76B7,
                0xEA8A: 0x9F15,
                0xEA8B: 0x9F21,
                0xEA8C: 0x9F2C,
                0xEA8D: 0x9F3E,
                0xEA8E: 0x9F4A,
                0xEA8F: 0x9F52,
                0xEA90: 0x9F54,
                0xEA91: 0x9F63,
                0xEA92: 0x9F5F,
                0xEA93: 0x9F60,
                0xEA94: 0x9F61,
                0xEA95: 0x9F66,
                0xEA96: 0x9F67,
                0xEA97: 0x9F6C,
                0xEA98: 0x9F6A,
                0xEA99: 0x9F77,
                0xEA9A: 0x9F72,
                0xEA9B: 0x9F76,
                0xEA9C: 0x9F95,
                0xEA9D: 0x9F9C,
                0xEA9E: 0x9FA0,
                0xEA9F: 0x582F,
                0xEAA0: 0x69C7,
                0xEAA1: 0x9059,
                0xEAA2: 0x7464,
                0xEAA3: 0x51DC,
                0xEAA4: 0x7199
              };
              /***/
            },
            /* 9 */

            /***/
            function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var GenericGF_1 = __webpack_require__(1);

              var GenericGFPoly_1 = __webpack_require__(2);

              function runEuclideanAlgorithm(field, a, b, R) {
                var _a; // Assume a's degree is >= b's


                if (a.degree() < b.degree()) {
                  _a = [b, a], a = _a[0], b = _a[1];
                }

                var rLast = a;
                var r = b;
                var tLast = field.zero;
                var t = field.one; // Run Euclidean algorithm until r's degree is less than R/2

                while (r.degree() >= R / 2) {
                  var rLastLast = rLast;
                  var tLastLast = tLast;
                  rLast = r;
                  tLast = t; // Divide rLastLast by rLast, with quotient in q and remainder in r

                  if (rLast.isZero()) {
                    // Euclidean algorithm already terminated?
                    return null;
                  }

                  r = rLastLast;
                  var q = field.zero;
                  var denominatorLeadingTerm = rLast.getCoefficient(rLast.degree());
                  var dltInverse = field.inverse(denominatorLeadingTerm);

                  while (r.degree() >= rLast.degree() && !r.isZero()) {
                    var degreeDiff = r.degree() - rLast.degree();
                    var scale = field.multiply(r.getCoefficient(r.degree()), dltInverse);
                    q = q.addOrSubtract(field.buildMonomial(degreeDiff, scale));
                    r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));
                  }

                  t = q.multiplyPoly(tLast).addOrSubtract(tLastLast);

                  if (r.degree() >= rLast.degree()) {
                    return null;
                  }
                }

                var sigmaTildeAtZero = t.getCoefficient(0);

                if (sigmaTildeAtZero === 0) {
                  return null;
                }

                var inverse = field.inverse(sigmaTildeAtZero);
                return [t.multiply(inverse), r.multiply(inverse)];
              }

              function findErrorLocations(field, errorLocator) {
                // This is a direct application of Chien's search
                var numErrors = errorLocator.degree();

                if (numErrors === 1) {
                  return [errorLocator.getCoefficient(1)];
                }

                var result = new Array(numErrors);
                var errorCount = 0;

                for (var i = 1; i < field.size && errorCount < numErrors; i++) {
                  if (errorLocator.evaluateAt(i) === 0) {
                    result[errorCount] = field.inverse(i);
                    errorCount++;
                  }
                }

                if (errorCount !== numErrors) {
                  return null;
                }

                return result;
              }

              function findErrorMagnitudes(field, errorEvaluator, errorLocations) {
                // This is directly applying Forney's Formula
                var s = errorLocations.length;
                var result = new Array(s);

                for (var i = 0; i < s; i++) {
                  var xiInverse = field.inverse(errorLocations[i]);
                  var denominator = 1;

                  for (var j = 0; j < s; j++) {
                    if (i !== j) {
                      denominator = field.multiply(denominator, GenericGF_1.addOrSubtractGF(1, field.multiply(errorLocations[j], xiInverse)));
                    }
                  }

                  result[i] = field.multiply(errorEvaluator.evaluateAt(xiInverse), field.inverse(denominator));

                  if (field.generatorBase !== 0) {
                    result[i] = field.multiply(result[i], xiInverse);
                  }
                }

                return result;
              }

              function decode(bytes, twoS) {
                var outputBytes = new Uint8ClampedArray(bytes.length);
                outputBytes.set(bytes);
                var field = new GenericGF_1.default(0x011D, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1

                var poly = new GenericGFPoly_1.default(field, outputBytes);
                var syndromeCoefficients = new Uint8ClampedArray(twoS);
                var error = false;

                for (var s = 0; s < twoS; s++) {
                  var evaluation = poly.evaluateAt(field.exp(s + field.generatorBase));
                  syndromeCoefficients[syndromeCoefficients.length - 1 - s] = evaluation;

                  if (evaluation !== 0) {
                    error = true;
                  }
                }

                if (!error) {
                  return outputBytes;
                }

                var syndrome = new GenericGFPoly_1.default(field, syndromeCoefficients);
                var sigmaOmega = runEuclideanAlgorithm(field, field.buildMonomial(twoS, 1), syndrome, twoS);

                if (sigmaOmega === null) {
                  return null;
                }

                var errorLocations = findErrorLocations(field, sigmaOmega[0]);

                if (errorLocations == null) {
                  return null;
                }

                var errorMagnitudes = findErrorMagnitudes(field, sigmaOmega[1], errorLocations);

                for (var i = 0; i < errorLocations.length; i++) {
                  var position = outputBytes.length - 1 - field.log(errorLocations[i]);

                  if (position < 0) {
                    return null;
                  }

                  outputBytes[position] = GenericGF_1.addOrSubtractGF(outputBytes[position], errorMagnitudes[i]);
                }

                return outputBytes;
              }

              exports.decode = decode;
              /***/
            },
            /* 10 */

            /***/
            function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              exports.VERSIONS = [{
                infoBits: null,
                versionNumber: 1,
                alignmentPatternCenters: [],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 7,
                  ecBlocks: [{
                    numBlocks: 1,
                    dataCodewordsPerBlock: 19
                  }]
                }, {
                  ecCodewordsPerBlock: 10,
                  ecBlocks: [{
                    numBlocks: 1,
                    dataCodewordsPerBlock: 16
                  }]
                }, {
                  ecCodewordsPerBlock: 13,
                  ecBlocks: [{
                    numBlocks: 1,
                    dataCodewordsPerBlock: 13
                  }]
                }, {
                  ecCodewordsPerBlock: 17,
                  ecBlocks: [{
                    numBlocks: 1,
                    dataCodewordsPerBlock: 9
                  }]
                }]
              }, {
                infoBits: null,
                versionNumber: 2,
                alignmentPatternCenters: [6, 18],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 10,
                  ecBlocks: [{
                    numBlocks: 1,
                    dataCodewordsPerBlock: 34
                  }]
                }, {
                  ecCodewordsPerBlock: 16,
                  ecBlocks: [{
                    numBlocks: 1,
                    dataCodewordsPerBlock: 28
                  }]
                }, {
                  ecCodewordsPerBlock: 22,
                  ecBlocks: [{
                    numBlocks: 1,
                    dataCodewordsPerBlock: 22
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 1,
                    dataCodewordsPerBlock: 16
                  }]
                }]
              }, {
                infoBits: null,
                versionNumber: 3,
                alignmentPatternCenters: [6, 22],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 15,
                  ecBlocks: [{
                    numBlocks: 1,
                    dataCodewordsPerBlock: 55
                  }]
                }, {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [{
                    numBlocks: 1,
                    dataCodewordsPerBlock: 44
                  }]
                }, {
                  ecCodewordsPerBlock: 18,
                  ecBlocks: [{
                    numBlocks: 2,
                    dataCodewordsPerBlock: 17
                  }]
                }, {
                  ecCodewordsPerBlock: 22,
                  ecBlocks: [{
                    numBlocks: 2,
                    dataCodewordsPerBlock: 13
                  }]
                }]
              }, {
                infoBits: null,
                versionNumber: 4,
                alignmentPatternCenters: [6, 26],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 20,
                  ecBlocks: [{
                    numBlocks: 1,
                    dataCodewordsPerBlock: 80
                  }]
                }, {
                  ecCodewordsPerBlock: 18,
                  ecBlocks: [{
                    numBlocks: 2,
                    dataCodewordsPerBlock: 32
                  }]
                }, {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [{
                    numBlocks: 2,
                    dataCodewordsPerBlock: 24
                  }]
                }, {
                  ecCodewordsPerBlock: 16,
                  ecBlocks: [{
                    numBlocks: 4,
                    dataCodewordsPerBlock: 9
                  }]
                }]
              }, {
                infoBits: null,
                versionNumber: 5,
                alignmentPatternCenters: [6, 30],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [{
                    numBlocks: 1,
                    dataCodewordsPerBlock: 108
                  }]
                }, {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [{
                    numBlocks: 2,
                    dataCodewordsPerBlock: 43
                  }]
                }, {
                  ecCodewordsPerBlock: 18,
                  ecBlocks: [{
                    numBlocks: 2,
                    dataCodewordsPerBlock: 15
                  }, {
                    numBlocks: 2,
                    dataCodewordsPerBlock: 16
                  }]
                }, {
                  ecCodewordsPerBlock: 22,
                  ecBlocks: [{
                    numBlocks: 2,
                    dataCodewordsPerBlock: 11
                  }, {
                    numBlocks: 2,
                    dataCodewordsPerBlock: 12
                  }]
                }]
              }, {
                infoBits: null,
                versionNumber: 6,
                alignmentPatternCenters: [6, 34],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 18,
                  ecBlocks: [{
                    numBlocks: 2,
                    dataCodewordsPerBlock: 68
                  }]
                }, {
                  ecCodewordsPerBlock: 16,
                  ecBlocks: [{
                    numBlocks: 4,
                    dataCodewordsPerBlock: 27
                  }]
                }, {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [{
                    numBlocks: 4,
                    dataCodewordsPerBlock: 19
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 4,
                    dataCodewordsPerBlock: 15
                  }]
                }]
              }, {
                infoBits: 0x07C94,
                versionNumber: 7,
                alignmentPatternCenters: [6, 22, 38],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 20,
                  ecBlocks: [{
                    numBlocks: 2,
                    dataCodewordsPerBlock: 78
                  }]
                }, {
                  ecCodewordsPerBlock: 18,
                  ecBlocks: [{
                    numBlocks: 4,
                    dataCodewordsPerBlock: 31
                  }]
                }, {
                  ecCodewordsPerBlock: 18,
                  ecBlocks: [{
                    numBlocks: 2,
                    dataCodewordsPerBlock: 14
                  }, {
                    numBlocks: 4,
                    dataCodewordsPerBlock: 15
                  }]
                }, {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [{
                    numBlocks: 4,
                    dataCodewordsPerBlock: 13
                  }, {
                    numBlocks: 1,
                    dataCodewordsPerBlock: 14
                  }]
                }]
              }, {
                infoBits: 0x085BC,
                versionNumber: 8,
                alignmentPatternCenters: [6, 24, 42],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [{
                    numBlocks: 2,
                    dataCodewordsPerBlock: 97
                  }]
                }, {
                  ecCodewordsPerBlock: 22,
                  ecBlocks: [{
                    numBlocks: 2,
                    dataCodewordsPerBlock: 38
                  }, {
                    numBlocks: 2,
                    dataCodewordsPerBlock: 39
                  }]
                }, {
                  ecCodewordsPerBlock: 22,
                  ecBlocks: [{
                    numBlocks: 4,
                    dataCodewordsPerBlock: 18
                  }, {
                    numBlocks: 2,
                    dataCodewordsPerBlock: 19
                  }]
                }, {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [{
                    numBlocks: 4,
                    dataCodewordsPerBlock: 14
                  }, {
                    numBlocks: 2,
                    dataCodewordsPerBlock: 15
                  }]
                }]
              }, {
                infoBits: 0x09A99,
                versionNumber: 9,
                alignmentPatternCenters: [6, 26, 46],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 2,
                    dataCodewordsPerBlock: 116
                  }]
                }, {
                  ecCodewordsPerBlock: 22,
                  ecBlocks: [{
                    numBlocks: 3,
                    dataCodewordsPerBlock: 36
                  }, {
                    numBlocks: 2,
                    dataCodewordsPerBlock: 37
                  }]
                }, {
                  ecCodewordsPerBlock: 20,
                  ecBlocks: [{
                    numBlocks: 4,
                    dataCodewordsPerBlock: 16
                  }, {
                    numBlocks: 4,
                    dataCodewordsPerBlock: 17
                  }]
                }, {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [{
                    numBlocks: 4,
                    dataCodewordsPerBlock: 12
                  }, {
                    numBlocks: 4,
                    dataCodewordsPerBlock: 13
                  }]
                }]
              }, {
                infoBits: 0x0A4D3,
                versionNumber: 10,
                alignmentPatternCenters: [6, 28, 50],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 18,
                  ecBlocks: [{
                    numBlocks: 2,
                    dataCodewordsPerBlock: 68
                  }, {
                    numBlocks: 2,
                    dataCodewordsPerBlock: 69
                  }]
                }, {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [{
                    numBlocks: 4,
                    dataCodewordsPerBlock: 43
                  }, {
                    numBlocks: 1,
                    dataCodewordsPerBlock: 44
                  }]
                }, {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [{
                    numBlocks: 6,
                    dataCodewordsPerBlock: 19
                  }, {
                    numBlocks: 2,
                    dataCodewordsPerBlock: 20
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 6,
                    dataCodewordsPerBlock: 15
                  }, {
                    numBlocks: 2,
                    dataCodewordsPerBlock: 16
                  }]
                }]
              }, {
                infoBits: 0x0BBF6,
                versionNumber: 11,
                alignmentPatternCenters: [6, 30, 54],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 20,
                  ecBlocks: [{
                    numBlocks: 4,
                    dataCodewordsPerBlock: 81
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 1,
                    dataCodewordsPerBlock: 50
                  }, {
                    numBlocks: 4,
                    dataCodewordsPerBlock: 51
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 4,
                    dataCodewordsPerBlock: 22
                  }, {
                    numBlocks: 4,
                    dataCodewordsPerBlock: 23
                  }]
                }, {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [{
                    numBlocks: 3,
                    dataCodewordsPerBlock: 12
                  }, {
                    numBlocks: 8,
                    dataCodewordsPerBlock: 13
                  }]
                }]
              }, {
                infoBits: 0x0C762,
                versionNumber: 12,
                alignmentPatternCenters: [6, 32, 58],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [{
                    numBlocks: 2,
                    dataCodewordsPerBlock: 92
                  }, {
                    numBlocks: 2,
                    dataCodewordsPerBlock: 93
                  }]
                }, {
                  ecCodewordsPerBlock: 22,
                  ecBlocks: [{
                    numBlocks: 6,
                    dataCodewordsPerBlock: 36
                  }, {
                    numBlocks: 2,
                    dataCodewordsPerBlock: 37
                  }]
                }, {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [{
                    numBlocks: 4,
                    dataCodewordsPerBlock: 20
                  }, {
                    numBlocks: 6,
                    dataCodewordsPerBlock: 21
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 7,
                    dataCodewordsPerBlock: 14
                  }, {
                    numBlocks: 4,
                    dataCodewordsPerBlock: 15
                  }]
                }]
              }, {
                infoBits: 0x0D847,
                versionNumber: 13,
                alignmentPatternCenters: [6, 34, 62],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [{
                    numBlocks: 4,
                    dataCodewordsPerBlock: 107
                  }]
                }, {
                  ecCodewordsPerBlock: 22,
                  ecBlocks: [{
                    numBlocks: 8,
                    dataCodewordsPerBlock: 37
                  }, {
                    numBlocks: 1,
                    dataCodewordsPerBlock: 38
                  }]
                }, {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [{
                    numBlocks: 8,
                    dataCodewordsPerBlock: 20
                  }, {
                    numBlocks: 4,
                    dataCodewordsPerBlock: 21
                  }]
                }, {
                  ecCodewordsPerBlock: 22,
                  ecBlocks: [{
                    numBlocks: 12,
                    dataCodewordsPerBlock: 11
                  }, {
                    numBlocks: 4,
                    dataCodewordsPerBlock: 12
                  }]
                }]
              }, {
                infoBits: 0x0E60D,
                versionNumber: 14,
                alignmentPatternCenters: [6, 26, 46, 66],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 3,
                    dataCodewordsPerBlock: 115
                  }, {
                    numBlocks: 1,
                    dataCodewordsPerBlock: 116
                  }]
                }, {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [{
                    numBlocks: 4,
                    dataCodewordsPerBlock: 40
                  }, {
                    numBlocks: 5,
                    dataCodewordsPerBlock: 41
                  }]
                }, {
                  ecCodewordsPerBlock: 20,
                  ecBlocks: [{
                    numBlocks: 11,
                    dataCodewordsPerBlock: 16
                  }, {
                    numBlocks: 5,
                    dataCodewordsPerBlock: 17
                  }]
                }, {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [{
                    numBlocks: 11,
                    dataCodewordsPerBlock: 12
                  }, {
                    numBlocks: 5,
                    dataCodewordsPerBlock: 13
                  }]
                }]
              }, {
                infoBits: 0x0F928,
                versionNumber: 15,
                alignmentPatternCenters: [6, 26, 48, 70],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 22,
                  ecBlocks: [{
                    numBlocks: 5,
                    dataCodewordsPerBlock: 87
                  }, {
                    numBlocks: 1,
                    dataCodewordsPerBlock: 88
                  }]
                }, {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [{
                    numBlocks: 5,
                    dataCodewordsPerBlock: 41
                  }, {
                    numBlocks: 5,
                    dataCodewordsPerBlock: 42
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 5,
                    dataCodewordsPerBlock: 24
                  }, {
                    numBlocks: 7,
                    dataCodewordsPerBlock: 25
                  }]
                }, {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [{
                    numBlocks: 11,
                    dataCodewordsPerBlock: 12
                  }, {
                    numBlocks: 7,
                    dataCodewordsPerBlock: 13
                  }]
                }]
              }, {
                infoBits: 0x10B78,
                versionNumber: 16,
                alignmentPatternCenters: [6, 26, 50, 74],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [{
                    numBlocks: 5,
                    dataCodewordsPerBlock: 98
                  }, {
                    numBlocks: 1,
                    dataCodewordsPerBlock: 99
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 7,
                    dataCodewordsPerBlock: 45
                  }, {
                    numBlocks: 3,
                    dataCodewordsPerBlock: 46
                  }]
                }, {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [{
                    numBlocks: 15,
                    dataCodewordsPerBlock: 19
                  }, {
                    numBlocks: 2,
                    dataCodewordsPerBlock: 20
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 3,
                    dataCodewordsPerBlock: 15
                  }, {
                    numBlocks: 13,
                    dataCodewordsPerBlock: 16
                  }]
                }]
              }, {
                infoBits: 0x1145D,
                versionNumber: 17,
                alignmentPatternCenters: [6, 30, 54, 78],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 1,
                    dataCodewordsPerBlock: 107
                  }, {
                    numBlocks: 5,
                    dataCodewordsPerBlock: 108
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 10,
                    dataCodewordsPerBlock: 46
                  }, {
                    numBlocks: 1,
                    dataCodewordsPerBlock: 47
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 1,
                    dataCodewordsPerBlock: 22
                  }, {
                    numBlocks: 15,
                    dataCodewordsPerBlock: 23
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 2,
                    dataCodewordsPerBlock: 14
                  }, {
                    numBlocks: 17,
                    dataCodewordsPerBlock: 15
                  }]
                }]
              }, {
                infoBits: 0x12A17,
                versionNumber: 18,
                alignmentPatternCenters: [6, 30, 56, 82],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 5,
                    dataCodewordsPerBlock: 120
                  }, {
                    numBlocks: 1,
                    dataCodewordsPerBlock: 121
                  }]
                }, {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [{
                    numBlocks: 9,
                    dataCodewordsPerBlock: 43
                  }, {
                    numBlocks: 4,
                    dataCodewordsPerBlock: 44
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 17,
                    dataCodewordsPerBlock: 22
                  }, {
                    numBlocks: 1,
                    dataCodewordsPerBlock: 23
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 2,
                    dataCodewordsPerBlock: 14
                  }, {
                    numBlocks: 19,
                    dataCodewordsPerBlock: 15
                  }]
                }]
              }, {
                infoBits: 0x13532,
                versionNumber: 19,
                alignmentPatternCenters: [6, 30, 58, 86],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 3,
                    dataCodewordsPerBlock: 113
                  }, {
                    numBlocks: 4,
                    dataCodewordsPerBlock: 114
                  }]
                }, {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [{
                    numBlocks: 3,
                    dataCodewordsPerBlock: 44
                  }, {
                    numBlocks: 11,
                    dataCodewordsPerBlock: 45
                  }]
                }, {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [{
                    numBlocks: 17,
                    dataCodewordsPerBlock: 21
                  }, {
                    numBlocks: 4,
                    dataCodewordsPerBlock: 22
                  }]
                }, {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [{
                    numBlocks: 9,
                    dataCodewordsPerBlock: 13
                  }, {
                    numBlocks: 16,
                    dataCodewordsPerBlock: 14
                  }]
                }]
              }, {
                infoBits: 0x149A6,
                versionNumber: 20,
                alignmentPatternCenters: [6, 34, 62, 90],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 3,
                    dataCodewordsPerBlock: 107
                  }, {
                    numBlocks: 5,
                    dataCodewordsPerBlock: 108
                  }]
                }, {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [{
                    numBlocks: 3,
                    dataCodewordsPerBlock: 41
                  }, {
                    numBlocks: 13,
                    dataCodewordsPerBlock: 42
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 15,
                    dataCodewordsPerBlock: 24
                  }, {
                    numBlocks: 5,
                    dataCodewordsPerBlock: 25
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 15,
                    dataCodewordsPerBlock: 15
                  }, {
                    numBlocks: 10,
                    dataCodewordsPerBlock: 16
                  }]
                }]
              }, {
                infoBits: 0x15683,
                versionNumber: 21,
                alignmentPatternCenters: [6, 28, 50, 72, 94],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 4,
                    dataCodewordsPerBlock: 116
                  }, {
                    numBlocks: 4,
                    dataCodewordsPerBlock: 117
                  }]
                }, {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [{
                    numBlocks: 17,
                    dataCodewordsPerBlock: 42
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 17,
                    dataCodewordsPerBlock: 22
                  }, {
                    numBlocks: 6,
                    dataCodewordsPerBlock: 23
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 19,
                    dataCodewordsPerBlock: 16
                  }, {
                    numBlocks: 6,
                    dataCodewordsPerBlock: 17
                  }]
                }]
              }, {
                infoBits: 0x168C9,
                versionNumber: 22,
                alignmentPatternCenters: [6, 26, 50, 74, 98],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 2,
                    dataCodewordsPerBlock: 111
                  }, {
                    numBlocks: 7,
                    dataCodewordsPerBlock: 112
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 17,
                    dataCodewordsPerBlock: 46
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 7,
                    dataCodewordsPerBlock: 24
                  }, {
                    numBlocks: 16,
                    dataCodewordsPerBlock: 25
                  }]
                }, {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [{
                    numBlocks: 34,
                    dataCodewordsPerBlock: 13
                  }]
                }]
              }, {
                infoBits: 0x177EC,
                versionNumber: 23,
                alignmentPatternCenters: [6, 30, 54, 74, 102],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 4,
                    dataCodewordsPerBlock: 121
                  }, {
                    numBlocks: 5,
                    dataCodewordsPerBlock: 122
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 4,
                    dataCodewordsPerBlock: 47
                  }, {
                    numBlocks: 14,
                    dataCodewordsPerBlock: 48
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 11,
                    dataCodewordsPerBlock: 24
                  }, {
                    numBlocks: 14,
                    dataCodewordsPerBlock: 25
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 16,
                    dataCodewordsPerBlock: 15
                  }, {
                    numBlocks: 14,
                    dataCodewordsPerBlock: 16
                  }]
                }]
              }, {
                infoBits: 0x18EC4,
                versionNumber: 24,
                alignmentPatternCenters: [6, 28, 54, 80, 106],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 6,
                    dataCodewordsPerBlock: 117
                  }, {
                    numBlocks: 4,
                    dataCodewordsPerBlock: 118
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 6,
                    dataCodewordsPerBlock: 45
                  }, {
                    numBlocks: 14,
                    dataCodewordsPerBlock: 46
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 11,
                    dataCodewordsPerBlock: 24
                  }, {
                    numBlocks: 16,
                    dataCodewordsPerBlock: 25
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 30,
                    dataCodewordsPerBlock: 16
                  }, {
                    numBlocks: 2,
                    dataCodewordsPerBlock: 17
                  }]
                }]
              }, {
                infoBits: 0x191E1,
                versionNumber: 25,
                alignmentPatternCenters: [6, 32, 58, 84, 110],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [{
                    numBlocks: 8,
                    dataCodewordsPerBlock: 106
                  }, {
                    numBlocks: 4,
                    dataCodewordsPerBlock: 107
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 8,
                    dataCodewordsPerBlock: 47
                  }, {
                    numBlocks: 13,
                    dataCodewordsPerBlock: 48
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 7,
                    dataCodewordsPerBlock: 24
                  }, {
                    numBlocks: 22,
                    dataCodewordsPerBlock: 25
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 22,
                    dataCodewordsPerBlock: 15
                  }, {
                    numBlocks: 13,
                    dataCodewordsPerBlock: 16
                  }]
                }]
              }, {
                infoBits: 0x1AFAB,
                versionNumber: 26,
                alignmentPatternCenters: [6, 30, 58, 86, 114],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 10,
                    dataCodewordsPerBlock: 114
                  }, {
                    numBlocks: 2,
                    dataCodewordsPerBlock: 115
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 19,
                    dataCodewordsPerBlock: 46
                  }, {
                    numBlocks: 4,
                    dataCodewordsPerBlock: 47
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 28,
                    dataCodewordsPerBlock: 22
                  }, {
                    numBlocks: 6,
                    dataCodewordsPerBlock: 23
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 33,
                    dataCodewordsPerBlock: 16
                  }, {
                    numBlocks: 4,
                    dataCodewordsPerBlock: 17
                  }]
                }]
              }, {
                infoBits: 0x1B08E,
                versionNumber: 27,
                alignmentPatternCenters: [6, 34, 62, 90, 118],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 8,
                    dataCodewordsPerBlock: 122
                  }, {
                    numBlocks: 4,
                    dataCodewordsPerBlock: 123
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 22,
                    dataCodewordsPerBlock: 45
                  }, {
                    numBlocks: 3,
                    dataCodewordsPerBlock: 46
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 8,
                    dataCodewordsPerBlock: 23
                  }, {
                    numBlocks: 26,
                    dataCodewordsPerBlock: 24
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 12,
                    dataCodewordsPerBlock: 15
                  }, {
                    numBlocks: 28,
                    dataCodewordsPerBlock: 16
                  }]
                }]
              }, {
                infoBits: 0x1CC1A,
                versionNumber: 28,
                alignmentPatternCenters: [6, 26, 50, 74, 98, 122],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 3,
                    dataCodewordsPerBlock: 117
                  }, {
                    numBlocks: 10,
                    dataCodewordsPerBlock: 118
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 3,
                    dataCodewordsPerBlock: 45
                  }, {
                    numBlocks: 23,
                    dataCodewordsPerBlock: 46
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 4,
                    dataCodewordsPerBlock: 24
                  }, {
                    numBlocks: 31,
                    dataCodewordsPerBlock: 25
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 11,
                    dataCodewordsPerBlock: 15
                  }, {
                    numBlocks: 31,
                    dataCodewordsPerBlock: 16
                  }]
                }]
              }, {
                infoBits: 0x1D33F,
                versionNumber: 29,
                alignmentPatternCenters: [6, 30, 54, 78, 102, 126],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 7,
                    dataCodewordsPerBlock: 116
                  }, {
                    numBlocks: 7,
                    dataCodewordsPerBlock: 117
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 21,
                    dataCodewordsPerBlock: 45
                  }, {
                    numBlocks: 7,
                    dataCodewordsPerBlock: 46
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 1,
                    dataCodewordsPerBlock: 23
                  }, {
                    numBlocks: 37,
                    dataCodewordsPerBlock: 24
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 19,
                    dataCodewordsPerBlock: 15
                  }, {
                    numBlocks: 26,
                    dataCodewordsPerBlock: 16
                  }]
                }]
              }, {
                infoBits: 0x1ED75,
                versionNumber: 30,
                alignmentPatternCenters: [6, 26, 52, 78, 104, 130],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 5,
                    dataCodewordsPerBlock: 115
                  }, {
                    numBlocks: 10,
                    dataCodewordsPerBlock: 116
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 19,
                    dataCodewordsPerBlock: 47
                  }, {
                    numBlocks: 10,
                    dataCodewordsPerBlock: 48
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 15,
                    dataCodewordsPerBlock: 24
                  }, {
                    numBlocks: 25,
                    dataCodewordsPerBlock: 25
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 23,
                    dataCodewordsPerBlock: 15
                  }, {
                    numBlocks: 25,
                    dataCodewordsPerBlock: 16
                  }]
                }]
              }, {
                infoBits: 0x1F250,
                versionNumber: 31,
                alignmentPatternCenters: [6, 30, 56, 82, 108, 134],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 13,
                    dataCodewordsPerBlock: 115
                  }, {
                    numBlocks: 3,
                    dataCodewordsPerBlock: 116
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 2,
                    dataCodewordsPerBlock: 46
                  }, {
                    numBlocks: 29,
                    dataCodewordsPerBlock: 47
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 42,
                    dataCodewordsPerBlock: 24
                  }, {
                    numBlocks: 1,
                    dataCodewordsPerBlock: 25
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 23,
                    dataCodewordsPerBlock: 15
                  }, {
                    numBlocks: 28,
                    dataCodewordsPerBlock: 16
                  }]
                }]
              }, {
                infoBits: 0x209D5,
                versionNumber: 32,
                alignmentPatternCenters: [6, 34, 60, 86, 112, 138],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 17,
                    dataCodewordsPerBlock: 115
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 10,
                    dataCodewordsPerBlock: 46
                  }, {
                    numBlocks: 23,
                    dataCodewordsPerBlock: 47
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 10,
                    dataCodewordsPerBlock: 24
                  }, {
                    numBlocks: 35,
                    dataCodewordsPerBlock: 25
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 19,
                    dataCodewordsPerBlock: 15
                  }, {
                    numBlocks: 35,
                    dataCodewordsPerBlock: 16
                  }]
                }]
              }, {
                infoBits: 0x216F0,
                versionNumber: 33,
                alignmentPatternCenters: [6, 30, 58, 86, 114, 142],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 17,
                    dataCodewordsPerBlock: 115
                  }, {
                    numBlocks: 1,
                    dataCodewordsPerBlock: 116
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 14,
                    dataCodewordsPerBlock: 46
                  }, {
                    numBlocks: 21,
                    dataCodewordsPerBlock: 47
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 29,
                    dataCodewordsPerBlock: 24
                  }, {
                    numBlocks: 19,
                    dataCodewordsPerBlock: 25
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 11,
                    dataCodewordsPerBlock: 15
                  }, {
                    numBlocks: 46,
                    dataCodewordsPerBlock: 16
                  }]
                }]
              }, {
                infoBits: 0x228BA,
                versionNumber: 34,
                alignmentPatternCenters: [6, 34, 62, 90, 118, 146],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 13,
                    dataCodewordsPerBlock: 115
                  }, {
                    numBlocks: 6,
                    dataCodewordsPerBlock: 116
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 14,
                    dataCodewordsPerBlock: 46
                  }, {
                    numBlocks: 23,
                    dataCodewordsPerBlock: 47
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 44,
                    dataCodewordsPerBlock: 24
                  }, {
                    numBlocks: 7,
                    dataCodewordsPerBlock: 25
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 59,
                    dataCodewordsPerBlock: 16
                  }, {
                    numBlocks: 1,
                    dataCodewordsPerBlock: 17
                  }]
                }]
              }, {
                infoBits: 0x2379F,
                versionNumber: 35,
                alignmentPatternCenters: [6, 30, 54, 78, 102, 126, 150],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 12,
                    dataCodewordsPerBlock: 121
                  }, {
                    numBlocks: 7,
                    dataCodewordsPerBlock: 122
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 12,
                    dataCodewordsPerBlock: 47
                  }, {
                    numBlocks: 26,
                    dataCodewordsPerBlock: 48
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 39,
                    dataCodewordsPerBlock: 24
                  }, {
                    numBlocks: 14,
                    dataCodewordsPerBlock: 25
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 22,
                    dataCodewordsPerBlock: 15
                  }, {
                    numBlocks: 41,
                    dataCodewordsPerBlock: 16
                  }]
                }]
              }, {
                infoBits: 0x24B0B,
                versionNumber: 36,
                alignmentPatternCenters: [6, 24, 50, 76, 102, 128, 154],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 6,
                    dataCodewordsPerBlock: 121
                  }, {
                    numBlocks: 14,
                    dataCodewordsPerBlock: 122
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 6,
                    dataCodewordsPerBlock: 47
                  }, {
                    numBlocks: 34,
                    dataCodewordsPerBlock: 48
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 46,
                    dataCodewordsPerBlock: 24
                  }, {
                    numBlocks: 10,
                    dataCodewordsPerBlock: 25
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 2,
                    dataCodewordsPerBlock: 15
                  }, {
                    numBlocks: 64,
                    dataCodewordsPerBlock: 16
                  }]
                }]
              }, {
                infoBits: 0x2542E,
                versionNumber: 37,
                alignmentPatternCenters: [6, 28, 54, 80, 106, 132, 158],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 17,
                    dataCodewordsPerBlock: 122
                  }, {
                    numBlocks: 4,
                    dataCodewordsPerBlock: 123
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 29,
                    dataCodewordsPerBlock: 46
                  }, {
                    numBlocks: 14,
                    dataCodewordsPerBlock: 47
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 49,
                    dataCodewordsPerBlock: 24
                  }, {
                    numBlocks: 10,
                    dataCodewordsPerBlock: 25
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 24,
                    dataCodewordsPerBlock: 15
                  }, {
                    numBlocks: 46,
                    dataCodewordsPerBlock: 16
                  }]
                }]
              }, {
                infoBits: 0x26A64,
                versionNumber: 38,
                alignmentPatternCenters: [6, 32, 58, 84, 110, 136, 162],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 4,
                    dataCodewordsPerBlock: 122
                  }, {
                    numBlocks: 18,
                    dataCodewordsPerBlock: 123
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 13,
                    dataCodewordsPerBlock: 46
                  }, {
                    numBlocks: 32,
                    dataCodewordsPerBlock: 47
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 48,
                    dataCodewordsPerBlock: 24
                  }, {
                    numBlocks: 14,
                    dataCodewordsPerBlock: 25
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 42,
                    dataCodewordsPerBlock: 15
                  }, {
                    numBlocks: 32,
                    dataCodewordsPerBlock: 16
                  }]
                }]
              }, {
                infoBits: 0x27541,
                versionNumber: 39,
                alignmentPatternCenters: [6, 26, 54, 82, 110, 138, 166],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 20,
                    dataCodewordsPerBlock: 117
                  }, {
                    numBlocks: 4,
                    dataCodewordsPerBlock: 118
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 40,
                    dataCodewordsPerBlock: 47
                  }, {
                    numBlocks: 7,
                    dataCodewordsPerBlock: 48
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 43,
                    dataCodewordsPerBlock: 24
                  }, {
                    numBlocks: 22,
                    dataCodewordsPerBlock: 25
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 10,
                    dataCodewordsPerBlock: 15
                  }, {
                    numBlocks: 67,
                    dataCodewordsPerBlock: 16
                  }]
                }]
              }, {
                infoBits: 0x28C69,
                versionNumber: 40,
                alignmentPatternCenters: [6, 30, 58, 86, 114, 142, 170],
                errorCorrectionLevels: [{
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 19,
                    dataCodewordsPerBlock: 118
                  }, {
                    numBlocks: 6,
                    dataCodewordsPerBlock: 119
                  }]
                }, {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{
                    numBlocks: 18,
                    dataCodewordsPerBlock: 47
                  }, {
                    numBlocks: 31,
                    dataCodewordsPerBlock: 48
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 34,
                    dataCodewordsPerBlock: 24
                  }, {
                    numBlocks: 34,
                    dataCodewordsPerBlock: 25
                  }]
                }, {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{
                    numBlocks: 20,
                    dataCodewordsPerBlock: 15
                  }, {
                    numBlocks: 61,
                    dataCodewordsPerBlock: 16
                  }]
                }]
              }];
              /***/
            },
            /* 11 */

            /***/
            function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });

              var BitMatrix_1 = __webpack_require__(0);

              function squareToQuadrilateral(p1, p2, p3, p4) {
                var dx3 = p1.x - p2.x + p3.x - p4.x;
                var dy3 = p1.y - p2.y + p3.y - p4.y;

                if (dx3 === 0 && dy3 === 0) {
                  // Affine
                  return {
                    a11: p2.x - p1.x,
                    a12: p2.y - p1.y,
                    a13: 0,
                    a21: p3.x - p2.x,
                    a22: p3.y - p2.y,
                    a23: 0,
                    a31: p1.x,
                    a32: p1.y,
                    a33: 1
                  };
                } else {
                  var dx1 = p2.x - p3.x;
                  var dx2 = p4.x - p3.x;
                  var dy1 = p2.y - p3.y;
                  var dy2 = p4.y - p3.y;
                  var denominator = dx1 * dy2 - dx2 * dy1;
                  var a13 = (dx3 * dy2 - dx2 * dy3) / denominator;
                  var a23 = (dx1 * dy3 - dx3 * dy1) / denominator;
                  return {
                    a11: p2.x - p1.x + a13 * p2.x,
                    a12: p2.y - p1.y + a13 * p2.y,
                    a13: a13,
                    a21: p4.x - p1.x + a23 * p4.x,
                    a22: p4.y - p1.y + a23 * p4.y,
                    a23: a23,
                    a31: p1.x,
                    a32: p1.y,
                    a33: 1
                  };
                }
              }

              function quadrilateralToSquare(p1, p2, p3, p4) {
                // Here, the adjoint serves as the inverse:
                var sToQ = squareToQuadrilateral(p1, p2, p3, p4);
                return {
                  a11: sToQ.a22 * sToQ.a33 - sToQ.a23 * sToQ.a32,
                  a12: sToQ.a13 * sToQ.a32 - sToQ.a12 * sToQ.a33,
                  a13: sToQ.a12 * sToQ.a23 - sToQ.a13 * sToQ.a22,
                  a21: sToQ.a23 * sToQ.a31 - sToQ.a21 * sToQ.a33,
                  a22: sToQ.a11 * sToQ.a33 - sToQ.a13 * sToQ.a31,
                  a23: sToQ.a13 * sToQ.a21 - sToQ.a11 * sToQ.a23,
                  a31: sToQ.a21 * sToQ.a32 - sToQ.a22 * sToQ.a31,
                  a32: sToQ.a12 * sToQ.a31 - sToQ.a11 * sToQ.a32,
                  a33: sToQ.a11 * sToQ.a22 - sToQ.a12 * sToQ.a21
                };
              }

              function times(a, b) {
                return {
                  a11: a.a11 * b.a11 + a.a21 * b.a12 + a.a31 * b.a13,
                  a12: a.a12 * b.a11 + a.a22 * b.a12 + a.a32 * b.a13,
                  a13: a.a13 * b.a11 + a.a23 * b.a12 + a.a33 * b.a13,
                  a21: a.a11 * b.a21 + a.a21 * b.a22 + a.a31 * b.a23,
                  a22: a.a12 * b.a21 + a.a22 * b.a22 + a.a32 * b.a23,
                  a23: a.a13 * b.a21 + a.a23 * b.a22 + a.a33 * b.a23,
                  a31: a.a11 * b.a31 + a.a21 * b.a32 + a.a31 * b.a33,
                  a32: a.a12 * b.a31 + a.a22 * b.a32 + a.a32 * b.a33,
                  a33: a.a13 * b.a31 + a.a23 * b.a32 + a.a33 * b.a33
                };
              }

              function extract(image, location) {
                var qToS = quadrilateralToSquare({
                  x: 3.5,
                  y: 3.5
                }, {
                  x: location.dimension - 3.5,
                  y: 3.5
                }, {
                  x: location.dimension - 6.5,
                  y: location.dimension - 6.5
                }, {
                  x: 3.5,
                  y: location.dimension - 3.5
                });
                var sToQ = squareToQuadrilateral(location.topLeft, location.topRight, location.alignmentPattern, location.bottomLeft);
                var transform = times(sToQ, qToS);
                var matrix = BitMatrix_1.BitMatrix.createEmpty(location.dimension, location.dimension);

                var mappingFunction = function (x, y) {
                  var denominator = transform.a13 * x + transform.a23 * y + transform.a33;
                  return {
                    x: (transform.a11 * x + transform.a21 * y + transform.a31) / denominator,
                    y: (transform.a12 * x + transform.a22 * y + transform.a32) / denominator
                  };
                };

                for (var y = 0; y < location.dimension; y++) {
                  for (var x = 0; x < location.dimension; x++) {
                    var xValue = x + 0.5;
                    var yValue = y + 0.5;
                    var sourcePixel = mappingFunction(xValue, yValue);
                    matrix.set(x, y, image.get(Math.floor(sourcePixel.x), Math.floor(sourcePixel.y)));
                  }
                }

                return {
                  matrix: matrix,
                  mappingFunction: mappingFunction
                };
              }

              exports.extract = extract;
              /***/
            },
            /* 12 */

            /***/
            function (module, exports, __webpack_require__) {

              Object.defineProperty(exports, "__esModule", {
                value: true
              });
              var MAX_FINDERPATTERNS_TO_SEARCH = 4;
              var MIN_QUAD_RATIO = 0.5;
              var MAX_QUAD_RATIO = 1.5;

              var distance = function (a, b) {
                return Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));
              };

              function sum(values) {
                return values.reduce(function (a, b) {
                  return a + b;
                });
              } // Takes three finder patterns and organizes them into topLeft, topRight, etc


              function reorderFinderPatterns(pattern1, pattern2, pattern3) {
                var _a, _b, _c, _d; // Find distances between pattern centers


                var oneTwoDistance = distance(pattern1, pattern2);
                var twoThreeDistance = distance(pattern2, pattern3);
                var oneThreeDistance = distance(pattern1, pattern3);
                var bottomLeft;
                var topLeft;
                var topRight; // Assume one closest to other two is B; A and C will just be guesses at first

                if (twoThreeDistance >= oneTwoDistance && twoThreeDistance >= oneThreeDistance) {
                  _a = [pattern2, pattern1, pattern3], bottomLeft = _a[0], topLeft = _a[1], topRight = _a[2];
                } else if (oneThreeDistance >= twoThreeDistance && oneThreeDistance >= oneTwoDistance) {
                  _b = [pattern1, pattern2, pattern3], bottomLeft = _b[0], topLeft = _b[1], topRight = _b[2];
                } else {
                  _c = [pattern1, pattern3, pattern2], bottomLeft = _c[0], topLeft = _c[1], topRight = _c[2];
                } // Use cross product to figure out whether bottomLeft (A) and topRight (C) are correct or flipped in relation to topLeft (B)
                // This asks whether BC x BA has a positive z component, which is the arrangement we want. If it's negative, then
                // we've got it flipped around and should swap topRight and bottomLeft.


                if ((topRight.x - topLeft.x) * (bottomLeft.y - topLeft.y) - (topRight.y - topLeft.y) * (bottomLeft.x - topLeft.x) < 0) {
                  _d = [topRight, bottomLeft], bottomLeft = _d[0], topRight = _d[1];
                }

                return {
                  bottomLeft: bottomLeft,
                  topLeft: topLeft,
                  topRight: topRight
                };
              } // Computes the dimension (number of modules on a side) of the QR Code based on the position of the finder patterns


              function computeDimension(topLeft, topRight, bottomLeft, matrix) {
                var moduleSize = (sum(countBlackWhiteRun(topLeft, bottomLeft, matrix, 5)) / 7 + // Divide by 7 since the ratio is 1:1:3:1:1
                sum(countBlackWhiteRun(topLeft, topRight, matrix, 5)) / 7 + sum(countBlackWhiteRun(bottomLeft, topLeft, matrix, 5)) / 7 + sum(countBlackWhiteRun(topRight, topLeft, matrix, 5)) / 7) / 4;

                if (moduleSize < 1) {
                  throw new Error("Invalid module size");
                }

                var topDimension = Math.round(distance(topLeft, topRight) / moduleSize);
                var sideDimension = Math.round(distance(topLeft, bottomLeft) / moduleSize);
                var dimension = Math.floor((topDimension + sideDimension) / 2) + 7;

                switch (dimension % 4) {
                  case 0:
                    dimension++;
                    break;

                  case 2:
                    dimension--;
                    break;
                }

                return {
                  dimension: dimension,
                  moduleSize: moduleSize
                };
              } // Takes an origin point and an end point and counts the sizes of the black white run from the origin towards the end point.
              // Returns an array of elements, representing the pixel size of the black white run.
              // Uses a variant of http://en.wikipedia.org/wiki/Bresenham's_line_algorithm


              function countBlackWhiteRunTowardsPoint(origin, end, matrix, length) {
                var switchPoints = [{
                  x: Math.floor(origin.x),
                  y: Math.floor(origin.y)
                }];
                var steep = Math.abs(end.y - origin.y) > Math.abs(end.x - origin.x);
                var fromX;
                var fromY;
                var toX;
                var toY;

                if (steep) {
                  fromX = Math.floor(origin.y);
                  fromY = Math.floor(origin.x);
                  toX = Math.floor(end.y);
                  toY = Math.floor(end.x);
                } else {
                  fromX = Math.floor(origin.x);
                  fromY = Math.floor(origin.y);
                  toX = Math.floor(end.x);
                  toY = Math.floor(end.y);
                }

                var dx = Math.abs(toX - fromX);
                var dy = Math.abs(toY - fromY);
                var error = Math.floor(-dx / 2);
                var xStep = fromX < toX ? 1 : -1;
                var yStep = fromY < toY ? 1 : -1;
                var currentPixel = true; // Loop up until x == toX, but not beyond

                for (var x = fromX, y = fromY; x !== toX + xStep; x += xStep) {
                  // Does current pixel mean we have moved white to black or vice versa?
                  // Scanning black in state 0,2 and white in state 1, so if we find the wrong
                  // color, advance to next state or end if we are in state 2 already
                  var realX = steep ? y : x;
                  var realY = steep ? x : y;

                  if (matrix.get(realX, realY) !== currentPixel) {
                    currentPixel = !currentPixel;
                    switchPoints.push({
                      x: realX,
                      y: realY
                    });

                    if (switchPoints.length === length + 1) {
                      break;
                    }
                  }

                  error += dy;

                  if (error > 0) {
                    if (y === toY) {
                      break;
                    }

                    y += yStep;
                    error -= dx;
                  }
                }

                var distances = [];

                for (var i = 0; i < length; i++) {
                  if (switchPoints[i] && switchPoints[i + 1]) {
                    distances.push(distance(switchPoints[i], switchPoints[i + 1]));
                  } else {
                    distances.push(0);
                  }
                }

                return distances;
              } // Takes an origin point and an end point and counts the sizes of the black white run in the origin point
              // along the line that intersects with the end point. Returns an array of elements, representing the pixel sizes
              // of the black white run. Takes a length which represents the number of switches from black to white to look for.


              function countBlackWhiteRun(origin, end, matrix, length) {
                var _a;

                var rise = end.y - origin.y;
                var run = end.x - origin.x;
                var towardsEnd = countBlackWhiteRunTowardsPoint(origin, end, matrix, Math.ceil(length / 2));
                var awayFromEnd = countBlackWhiteRunTowardsPoint(origin, {
                  x: origin.x - run,
                  y: origin.y - rise
                }, matrix, Math.ceil(length / 2));
                var middleValue = towardsEnd.shift() + awayFromEnd.shift() - 1; // Substract one so we don't double count a pixel

                return (_a = awayFromEnd.concat(middleValue)).concat.apply(_a, towardsEnd);
              } // Takes in a black white run and an array of expected ratios. Returns the average size of the run as well as the "error" -
              // that is the amount the run diverges from the expected ratio


              function scoreBlackWhiteRun(sequence, ratios) {
                var averageSize = sum(sequence) / sum(ratios);
                var error = 0;
                ratios.forEach(function (ratio, i) {
                  error += Math.pow(sequence[i] - ratio * averageSize, 2);
                });
                return {
                  averageSize: averageSize,
                  error: error
                };
              } // Takes an X,Y point and an array of sizes and scores the point against those ratios.
              // For example for a finder pattern takes the ratio list of 1:1:3:1:1 and checks horizontal, vertical and diagonal ratios
              // against that.


              function scorePattern(point, ratios, matrix) {
                try {
                  var horizontalRun = countBlackWhiteRun(point, {
                    x: -1,
                    y: point.y
                  }, matrix, ratios.length);
                  var verticalRun = countBlackWhiteRun(point, {
                    x: point.x,
                    y: -1
                  }, matrix, ratios.length);
                  var topLeftPoint = {
                    x: Math.max(0, point.x - point.y) - 1,
                    y: Math.max(0, point.y - point.x) - 1
                  };
                  var topLeftBottomRightRun = countBlackWhiteRun(point, topLeftPoint, matrix, ratios.length);
                  var bottomLeftPoint = {
                    x: Math.min(matrix.width, point.x + point.y) + 1,
                    y: Math.min(matrix.height, point.y + point.x) + 1
                  };
                  var bottomLeftTopRightRun = countBlackWhiteRun(point, bottomLeftPoint, matrix, ratios.length);
                  var horzError = scoreBlackWhiteRun(horizontalRun, ratios);
                  var vertError = scoreBlackWhiteRun(verticalRun, ratios);
                  var diagDownError = scoreBlackWhiteRun(topLeftBottomRightRun, ratios);
                  var diagUpError = scoreBlackWhiteRun(bottomLeftTopRightRun, ratios);
                  var ratioError = Math.sqrt(horzError.error * horzError.error + vertError.error * vertError.error + diagDownError.error * diagDownError.error + diagUpError.error * diagUpError.error);
                  var avgSize = (horzError.averageSize + vertError.averageSize + diagDownError.averageSize + diagUpError.averageSize) / 4;
                  var sizeError = (Math.pow(horzError.averageSize - avgSize, 2) + Math.pow(vertError.averageSize - avgSize, 2) + Math.pow(diagDownError.averageSize - avgSize, 2) + Math.pow(diagUpError.averageSize - avgSize, 2)) / avgSize;
                  return ratioError + sizeError;
                } catch (_a) {
                  return Infinity;
                }
              }

              function recenterLocation(matrix, p) {
                var leftX = Math.round(p.x);

                while (matrix.get(leftX, Math.round(p.y))) {
                  leftX--;
                }

                var rightX = Math.round(p.x);

                while (matrix.get(rightX, Math.round(p.y))) {
                  rightX++;
                }

                var x = (leftX + rightX) / 2;
                var topY = Math.round(p.y);

                while (matrix.get(Math.round(x), topY)) {
                  topY--;
                }

                var bottomY = Math.round(p.y);

                while (matrix.get(Math.round(x), bottomY)) {
                  bottomY++;
                }

                var y = (topY + bottomY) / 2;
                return {
                  x: x,
                  y: y
                };
              }

              function locate(matrix) {
                var finderPatternQuads = [];
                var activeFinderPatternQuads = [];
                var alignmentPatternQuads = [];
                var activeAlignmentPatternQuads = [];

                var _loop_1 = function (y) {
                  var length_1 = 0;
                  var lastBit = false;
                  var scans = [0, 0, 0, 0, 0];

                  var _loop_2 = function (x) {
                    var v = matrix.get(x, y);

                    if (v === lastBit) {
                      length_1++;
                    } else {
                      scans = [scans[1], scans[2], scans[3], scans[4], length_1];
                      length_1 = 1;
                      lastBit = v; // Do the last 5 color changes ~ match the expected ratio for a finder pattern? 1:1:3:1:1 of b:w:b:w:b

                      var averageFinderPatternBlocksize = sum(scans) / 7;
                      var validFinderPattern = Math.abs(scans[0] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize && Math.abs(scans[1] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize && Math.abs(scans[2] - 3 * averageFinderPatternBlocksize) < 3 * averageFinderPatternBlocksize && Math.abs(scans[3] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize && Math.abs(scans[4] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize && !v; // And make sure the current pixel is white since finder patterns are bordered in white
                      // Do the last 3 color changes ~ match the expected ratio for an alignment pattern? 1:1:1 of w:b:w

                      var averageAlignmentPatternBlocksize = sum(scans.slice(-3)) / 3;
                      var validAlignmentPattern = Math.abs(scans[2] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize && Math.abs(scans[3] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize && Math.abs(scans[4] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize && v; // Is the current pixel black since alignment patterns are bordered in black

                      if (validFinderPattern) {
                        // Compute the start and end x values of the large center black square
                        var endX_1 = x - scans[3] - scans[4];
                        var startX_1 = endX_1 - scans[2];
                        var line = {
                          startX: startX_1,
                          endX: endX_1,
                          y: y
                        }; // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with
                        // that line as the starting point.

                        var matchingQuads = activeFinderPatternQuads.filter(function (q) {
                          return startX_1 >= q.bottom.startX && startX_1 <= q.bottom.endX || endX_1 >= q.bottom.startX && startX_1 <= q.bottom.endX || startX_1 <= q.bottom.startX && endX_1 >= q.bottom.endX && scans[2] / (q.bottom.endX - q.bottom.startX) < MAX_QUAD_RATIO && scans[2] / (q.bottom.endX - q.bottom.startX) > MIN_QUAD_RATIO;
                        });

                        if (matchingQuads.length > 0) {
                          matchingQuads[0].bottom = line;
                        } else {
                          activeFinderPatternQuads.push({
                            top: line,
                            bottom: line
                          });
                        }
                      }

                      if (validAlignmentPattern) {
                        // Compute the start and end x values of the center black square
                        var endX_2 = x - scans[4];
                        var startX_2 = endX_2 - scans[3];
                        var line = {
                          startX: startX_2,
                          y: y,
                          endX: endX_2
                        }; // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with
                        // that line as the starting point.

                        var matchingQuads = activeAlignmentPatternQuads.filter(function (q) {
                          return startX_2 >= q.bottom.startX && startX_2 <= q.bottom.endX || endX_2 >= q.bottom.startX && startX_2 <= q.bottom.endX || startX_2 <= q.bottom.startX && endX_2 >= q.bottom.endX && scans[2] / (q.bottom.endX - q.bottom.startX) < MAX_QUAD_RATIO && scans[2] / (q.bottom.endX - q.bottom.startX) > MIN_QUAD_RATIO;
                        });

                        if (matchingQuads.length > 0) {
                          matchingQuads[0].bottom = line;
                        } else {
                          activeAlignmentPatternQuads.push({
                            top: line,
                            bottom: line
                          });
                        }
                      }
                    }
                  };

                  for (var x = -1; x <= matrix.width; x++) {
                    _loop_2(x);
                  }

                  finderPatternQuads.push.apply(finderPatternQuads, activeFinderPatternQuads.filter(function (q) {
                    return q.bottom.y !== y && q.bottom.y - q.top.y >= 2;
                  }));
                  activeFinderPatternQuads = activeFinderPatternQuads.filter(function (q) {
                    return q.bottom.y === y;
                  });
                  alignmentPatternQuads.push.apply(alignmentPatternQuads, activeAlignmentPatternQuads.filter(function (q) {
                    return q.bottom.y !== y;
                  }));
                  activeAlignmentPatternQuads = activeAlignmentPatternQuads.filter(function (q) {
                    return q.bottom.y === y;
                  });
                };

                for (var y = 0; y <= matrix.height; y++) {
                  _loop_1(y);
                }

                finderPatternQuads.push.apply(finderPatternQuads, activeFinderPatternQuads.filter(function (q) {
                  return q.bottom.y - q.top.y >= 2;
                }));
                alignmentPatternQuads.push.apply(alignmentPatternQuads, activeAlignmentPatternQuads);
                var finderPatternGroups = finderPatternQuads.filter(function (q) {
                  return q.bottom.y - q.top.y >= 2;
                }) // All quads must be at least 2px tall since the center square is larger than a block
                .map(function (q) {
                  var x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;
                  var y = (q.top.y + q.bottom.y + 1) / 2;

                  if (!matrix.get(Math.round(x), Math.round(y))) {
                    return;
                  }

                  var lengths = [q.top.endX - q.top.startX, q.bottom.endX - q.bottom.startX, q.bottom.y - q.top.y + 1];
                  var size = sum(lengths) / lengths.length;
                  var score = scorePattern({
                    x: Math.round(x),
                    y: Math.round(y)
                  }, [1, 1, 3, 1, 1], matrix);
                  return {
                    score: score,
                    x: x,
                    y: y,
                    size: size
                  };
                }).filter(function (q) {
                  return !!q;
                }) // Filter out any rejected quads from above
                .sort(function (a, b) {
                  return a.score - b.score;
                }) // Now take the top finder pattern options and try to find 2 other options with a similar size.
                .map(function (point, i, finderPatterns) {
                  if (i > MAX_FINDERPATTERNS_TO_SEARCH) {
                    return null;
                  }

                  var otherPoints = finderPatterns.filter(function (p, ii) {
                    return i !== ii;
                  }).map(function (p) {
                    return {
                      x: p.x,
                      y: p.y,
                      score: p.score + Math.pow(p.size - point.size, 2) / point.size,
                      size: p.size
                    };
                  }).sort(function (a, b) {
                    return a.score - b.score;
                  });

                  if (otherPoints.length < 2) {
                    return null;
                  }

                  var score = point.score + otherPoints[0].score + otherPoints[1].score;
                  return {
                    points: [point].concat(otherPoints.slice(0, 2)),
                    score: score
                  };
                }).filter(function (q) {
                  return !!q;
                }) // Filter out any rejected finder patterns from above
                .sort(function (a, b) {
                  return a.score - b.score;
                });

                if (finderPatternGroups.length === 0) {
                  return null;
                }

                var _a = reorderFinderPatterns(finderPatternGroups[0].points[0], finderPatternGroups[0].points[1], finderPatternGroups[0].points[2]),
                    topRight = _a.topRight,
                    topLeft = _a.topLeft,
                    bottomLeft = _a.bottomLeft;

                var alignment = findAlignmentPattern(matrix, alignmentPatternQuads, topRight, topLeft, bottomLeft);
                var result = [];

                if (alignment) {
                  result.push({
                    alignmentPattern: {
                      x: alignment.alignmentPattern.x,
                      y: alignment.alignmentPattern.y
                    },
                    bottomLeft: {
                      x: bottomLeft.x,
                      y: bottomLeft.y
                    },
                    dimension: alignment.dimension,
                    topLeft: {
                      x: topLeft.x,
                      y: topLeft.y
                    },
                    topRight: {
                      x: topRight.x,
                      y: topRight.y
                    }
                  });
                } // We normally use the center of the quads as the location of the tracking points, which is optimal for most cases and will account
                // for a skew in the image. However, In some cases, a slight skew might not be real and instead be caused by image compression
                // errors and/or low resolution. For those cases, we'd be better off centering the point exactly in the middle of the black area. We
                // compute and return the location data for the naively centered points as it is little additional work and allows for multiple
                // attempts at decoding harder images.


                var midTopRight = recenterLocation(matrix, topRight);
                var midTopLeft = recenterLocation(matrix, topLeft);
                var midBottomLeft = recenterLocation(matrix, bottomLeft);
                var centeredAlignment = findAlignmentPattern(matrix, alignmentPatternQuads, midTopRight, midTopLeft, midBottomLeft);

                if (centeredAlignment) {
                  result.push({
                    alignmentPattern: {
                      x: centeredAlignment.alignmentPattern.x,
                      y: centeredAlignment.alignmentPattern.y
                    },
                    bottomLeft: {
                      x: midBottomLeft.x,
                      y: midBottomLeft.y
                    },
                    topLeft: {
                      x: midTopLeft.x,
                      y: midTopLeft.y
                    },
                    topRight: {
                      x: midTopRight.x,
                      y: midTopRight.y
                    },
                    dimension: centeredAlignment.dimension
                  });
                }

                if (result.length === 0) {
                  return null;
                }

                return result;
              }

              exports.locate = locate;

              function findAlignmentPattern(matrix, alignmentPatternQuads, topRight, topLeft, bottomLeft) {
                var _a; // Now that we've found the three finder patterns we can determine the blockSize and the size of the QR code.
                // We'll use these to help find the alignment pattern but also later when we do the extraction.


                var dimension;
                var moduleSize;

                try {
                  _a = computeDimension(topLeft, topRight, bottomLeft, matrix), dimension = _a.dimension, moduleSize = _a.moduleSize;
                } catch (e) {
                  return null;
                } // Now find the alignment pattern


                var bottomRightFinderPattern = {
                  x: topRight.x - topLeft.x + bottomLeft.x,
                  y: topRight.y - topLeft.y + bottomLeft.y
                };
                var modulesBetweenFinderPatterns = (distance(topLeft, bottomLeft) + distance(topLeft, topRight)) / 2 / moduleSize;
                var correctionToTopLeft = 1 - 3 / modulesBetweenFinderPatterns;
                var expectedAlignmentPattern = {
                  x: topLeft.x + correctionToTopLeft * (bottomRightFinderPattern.x - topLeft.x),
                  y: topLeft.y + correctionToTopLeft * (bottomRightFinderPattern.y - topLeft.y)
                };
                var alignmentPatterns = alignmentPatternQuads.map(function (q) {
                  var x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;
                  var y = (q.top.y + q.bottom.y + 1) / 2;

                  if (!matrix.get(Math.floor(x), Math.floor(y))) {
                    return;
                  }

                  var lengths = [q.top.endX - q.top.startX, q.bottom.endX - q.bottom.startX, q.bottom.y - q.top.y + 1];
                  var size = sum(lengths) / lengths.length;
                  var sizeScore = scorePattern({
                    x: Math.floor(x),
                    y: Math.floor(y)
                  }, [1, 1, 1], matrix);
                  var score = sizeScore + distance({
                    x: x,
                    y: y
                  }, expectedAlignmentPattern);
                  return {
                    x: x,
                    y: y,
                    score: score
                  };
                }).filter(function (v) {
                  return !!v;
                }).sort(function (a, b) {
                  return a.score - b.score;
                }); // If there are less than 15 modules between finder patterns it's a version 1 QR code and as such has no alignmemnt pattern
                // so we can only use our best guess.

                var alignmentPattern = modulesBetweenFinderPatterns >= 15 && alignmentPatterns.length ? alignmentPatterns[0] : expectedAlignmentPattern;
                return {
                  alignmentPattern: alignmentPattern,
                  dimension: dimension
                };
              }
              /***/

            }
            /******/
            ])["default"]
          );
        });
      });

      var jsQR$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), jsQR, {
        'default': jsQR,
        __moduleExports: jsQR
      }));

    }
  };
});
//# sourceMappingURL=wener-apis-qrcode.system.js.map
